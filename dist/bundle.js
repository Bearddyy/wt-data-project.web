(()=>{"use strict";var t={326:(t,n,e)=>{e.r(n),e.d(n,{active:()=>xo,arc:()=>e_,area:()=>c_,areaRadial:()=>y_,ascending:()=>i,axisBottom:()=>it,axisLeft:()=>ot,axisRight:()=>rt,axisTop:()=>et,bisect:()=>s,bisectLeft:()=>c,bisectRight:()=>a,bisector:()=>o,brush:()=>Xo,brushSelection:()=>Io,brushX:()=>Yo,brushY:()=>Ho,chord:()=>tu,cluster:()=>Ah,color:()=>le,creator:()=>_t,cross:()=>h,csv:()=>ed,csvFormat:()=>Bu,csvFormatRows:()=>ju,csvParse:()=>Du,csvParseRows:()=>Uu,cubehelix:()=>We,curveBasis:()=>K_,curveBasisClosed:()=>Q_,curveBasisOpen:()=>nm,curveBundle:()=>rm,curveCardinal:()=>um,curveCardinalClosed:()=>cm,curveCardinalOpen:()=>lm,curveCatmullRom:()=>pm,curveCatmullRomClosed:()=>vm,curveCatmullRomOpen:()=>ym,curveLinear:()=>i_,curveLinearClosed:()=>mm,curveMonotoneX:()=>km,curveMonotoneY:()=>Tm,curveNatural:()=>Pm,curveStep:()=>Rm,curveStepAfter:()=>zm,curveStepBefore:()=>Lm,customEvent:()=>Rt,descending:()=>p,deviation:()=>g,dispatch:()=>ht,drag:()=>Vn,dragDisable:()=>Un,dragEnable:()=>Bn,dsvFormat:()=>zu,easeBack:()=>fo,easeBackIn:()=>so,easeBackInOut:()=>fo,easeBackOut:()=>lo,easeBounce:()=>uo,easeBounceIn:()=>oo,easeBounceInOut:()=>ao,easeBounceOut:()=>uo,easeCircle:()=>ro,easeCircleIn:()=>no,easeCircleInOut:()=>ro,easeCircleOut:()=>eo,easeCubic:()=>Yi,easeCubicIn:()=>Fi,easeCubicInOut:()=>Yi,easeCubicOut:()=>Ii,easeElastic:()=>vo,easeElasticIn:()=>po,easeElasticInOut:()=>go,easeElasticOut:()=>vo,easeExp:()=>to,easeExpIn:()=>Ji,easeExpInOut:()=>to,easeExpOut:()=>Qi,easeLinear:()=>Di,easePoly:()=>Vi,easePolyIn:()=>Hi,easePolyInOut:()=>Vi,easePolyOut:()=>Xi,easeQuad:()=>ji,easeQuadIn:()=>Ui,easeQuadInOut:()=>ji,easeQuadOut:()=>Bi,easeSin:()=>Ki,easeSinIn:()=>$i,easeSinInOut:()=>Ki,easeSinOut:()=>Zi,entries:()=>Pu,event:()=>kt,extent:()=>y,forceCenter:()=>Vu,forceCollide:()=>oa,forceLink:()=>ca,forceManyBody:()=>da,forceRadial:()=>va,forceSimulation:()=>pa,forceX:()=>ga,forceY:()=>ya,format:()=>ka,formatDefaultLocale:()=>Pa,formatLocale:()=>Ca,formatPrefix:()=>Ta,formatSpecifier:()=>Ma,geoAlbers:()=>Vf,geoAlbersUsa:()=>Wf,geoArea:()=>Ec,geoAzimuthalEqualArea:()=>Kf,geoAzimuthalEqualAreaRaw:()=>Zf,geoAzimuthalEquidistant:()=>Qf,geoAzimuthalEquidistantRaw:()=>Jf,geoBounds:()=>_s,geoCentroid:()=>Cs,geoCircle:()=>Fs,geoClipAntimeridian:()=>Js,geoClipCircle:()=>Qs,geoClipExtent:()=>rl,geoClipRectangle:()=>el,geoConicConformal:()=>oh,geoConicConformalRaw:()=>ih,geoConicEqualArea:()=>Xf,geoConicEqualAreaRaw:()=>Hf,geoConicEquidistant:()=>sh,geoConicEquidistantRaw:()=>ch,geoContains:()=>Sl,geoDistance:()=>vl,geoEquirectangular:()=>ah,geoEquirectangularRaw:()=>uh,geoGnomonic:()=>fh,geoGnomonicRaw:()=>lh,geoGraticule:()=>kl,geoGraticule10:()=>Tl,geoIdentity:()=>ph,geoInterpolate:()=>Nl,geoLength:()=>hl,geoMercator:()=>nh,geoMercatorRaw:()=>th,geoNaturalEarth1:()=>vh,geoNaturalEarth1Raw:()=>dh,geoOrthographic:()=>yh,geoOrthographicRaw:()=>gh,geoPath:()=>Of,geoProjection:()=>Ff,geoProjectionMutator:()=>If,geoRotation:()=>Us,geoStereographic:()=>mh,geoStereographicRaw:()=>_h,geoStream:()=>pc,geoTransform:()=>Rf,geoTransverseMercator:()=>bh,geoTransverseMercatorRaw:()=>xh,hcl:()=>qe,hierarchy:()=>kh,histogram:()=>P,hsl:()=>_e,html:()=>Zp,interpolate:()=>pr,interpolateArray:()=>ur,interpolateBasis:()=>Ze,interpolateBasisClosed:()=>Ke,interpolateCool:()=>Ey,interpolateCubehelix:()=>qr,interpolateCubehelixDefault:()=>Sy,interpolateCubehelixLong:()=>Dr,interpolateDate:()=>ar,interpolateHcl:()=>Rr,interpolateHclLong:()=>Lr,interpolateHsl:()=>Nr,interpolateHslLong:()=>Cr,interpolateInferno:()=>Oy,interpolateLab:()=>Pr,interpolateMagma:()=>Py,interpolateNumber:()=>cr,interpolateObject:()=>sr,interpolatePlasma:()=>Ry,interpolateRainbow:()=>Ty,interpolateRgb:()=>er,interpolateRgbBasis:()=>ir,interpolateRgbBasisClosed:()=>or,interpolateRound:()=>dr,interpolateString:()=>hr,interpolateTransformCss:()=>Mr,interpolateTransformSvg:()=>Sr,interpolateViridis:()=>Cy,interpolateWarm:()=>Ay,interpolateZoom:()=>kr,interrupt:()=>fi,interval:()=>ii,isoFormat:()=>fy,isoParse:()=>hy,json:()=>Kp,keys:()=>Nu,lab:()=>Ne,line:()=>a_,lineRadial:()=>g_,linkHorizontal:()=>E_,linkRadial:()=>T_,linkVertical:()=>k_,local:()=>xt,map:()=>mu,matcher:()=>At,max:()=>z,mean:()=>q,median:()=>D,merge:()=>U,min:()=>B,mouse:()=>qt,namespace:()=>vt,namespaces:()=>dt,nest:()=>xu,now:()=>$r,pack:()=>Jh,packEnclose:()=>Rh,packSiblings:()=>Vh,pairs:()=>l,partition:()=>ip,path:()=>su,permute:()=>j,pie:()=>f_,pointRadial:()=>__,polygonArea:()=>Ap,polygonCentroid:()=>Ep,polygonContains:()=>Pp,polygonHull:()=>Cp,polygonLength:()=>Op,precisionFixed:()=>Oa,precisionPrefix:()=>Ra,precisionRound:()=>La,quadtree:()=>Qu,quantile:()=>O,quantize:()=>Ur,queue:()=>jp,radialArea:()=>y_,radialLine:()=>g_,randomBates:()=>Vp,randomExponential:()=>Wp,randomIrwinHall:()=>Xp,randomLogNormal:()=>Hp,randomNormal:()=>Yp,randomUniform:()=>Ip,range:()=>M,request:()=>Gp,rgb:()=>de,ribbon:()=>vu,scaleBand:()=>sd,scaleIdentity:()=>wd,scaleImplicit:()=>ad,scaleLinear:()=>bd,scaleLog:()=>Cd,scaleOrdinal:()=>cd,scalePoint:()=>fd,scalePow:()=>Od,scaleQuantile:()=>Ld,scaleQuantize:()=>zd,scaleSequential:()=>Ly,scaleSqrt:()=>Rd,scaleThreshold:()=>qd,scaleTime:()=>yy,scaleUtc:()=>_y,scan:()=>F,schemeCategory10:()=>xy,schemeCategory20:()=>My,schemeCategory20b:()=>by,schemeCategory20c:()=>wy,select:()=>On,selectAll:()=>Rn,selection:()=>Pn,selector:()=>Ut,selectorAll:()=>jt,set:()=>Tu,shuffle:()=>I,stack:()=>Bm,stackOffsetDiverging:()=>Fm,stackOffsetExpand:()=>jm,stackOffsetNone:()=>qm,stackOffsetSilhouette:()=>Im,stackOffsetWiggle:()=>Ym,stackOrderAscending:()=>Hm,stackOrderDescending:()=>Vm,stackOrderInsideOut:()=>Wm,stackOrderNone:()=>Dm,stackOrderReverse:()=>Gm,stratify:()=>sp,style:()=>en,sum:()=>Y,symbol:()=>W_,symbolCircle:()=>N_,symbolCross:()=>C_,symbolDiamond:()=>R_,symbolSquare:()=>U_,symbolStar:()=>D_,symbolTriangle:()=>j_,symbolWye:()=>X_,symbols:()=>V_,text:()=>Jp,thresholdFreedmanDiaconis:()=>R,thresholdScott:()=>L,thresholdSturges:()=>C,tickIncrement:()=>T,tickStep:()=>N,ticks:()=>k,timeDay:()=>iv,timeDays:()=>ov,timeFormat:()=>cg,timeFormatDefaultLocale:()=>sy,timeFormatLocale:()=>ug,timeFriday:()=>hv,timeFridays:()=>mv,timeHour:()=>nv,timeHours:()=>ev,timeInterval:()=>Bd,timeMillisecond:()=>Fd,timeMilliseconds:()=>Id,timeMinute:()=>Jd,timeMinutes:()=>Qd,timeMonday:()=>cv,timeMondays:()=>vv,timeMonth:()=>wv,timeMonths:()=>Mv,timeParse:()=>sg,timeSaturday:()=>pv,timeSaturdays:()=>xv,timeSecond:()=>$d,timeSeconds:()=>Zd,timeSunday:()=>av,timeSundays:()=>dv,timeThursday:()=>fv,timeThursdays:()=>_v,timeTuesday:()=>sv,timeTuesdays:()=>gv,timeWednesday:()=>lv,timeWednesdays:()=>yv,timeWeek:()=>av,timeWeeks:()=>dv,timeYear:()=>Av,timeYears:()=>Ev,timeout:()=>ri,timer:()=>Jr,timerFlush:()=>Qr,touch:()=>Ln,touches:()=>zn,transition:()=>Li,transpose:()=>H,tree:()=>gp,treemap:()=>bp,treemapBinary:()=>wp,treemapDice:()=>rp,treemapResquarify:()=>Sp,treemapSlice:()=>yp,treemapSliceDice:()=>Mp,treemapSquarify:()=>xp,tsv:()=>rd,tsvFormat:()=>Hu,tsvFormatRows:()=>Xu,tsvParse:()=>Iu,tsvParseRows:()=>Yu,utcDay:()=>Lv,utcDays:()=>zv,utcFormat:()=>lg,utcFriday:()=>Iv,utcFridays:()=>$v,utcHour:()=>Pv,utcHours:()=>Ov,utcMillisecond:()=>Fd,utcMilliseconds:()=>Id,utcMinute:()=>Tv,utcMinutes:()=>Nv,utcMonday:()=>Uv,utcMondays:()=>Xv,utcMonth:()=>Jv,utcMonths:()=>Qv,utcParse:()=>fg,utcSaturday:()=>Yv,utcSaturdays:()=>Zv,utcSecond:()=>$d,utcSeconds:()=>Zd,utcSunday:()=>Dv,utcSundays:()=>Hv,utcThursday:()=>Fv,utcThursdays:()=>Gv,utcTuesday:()=>Bv,utcTuesdays:()=>Vv,utcWednesday:()=>jv,utcWednesdays:()=>Wv,utcWeek:()=>Dv,utcWeeks:()=>Hv,utcYear:()=>ng,utcYears:()=>eg,values:()=>Cu,variance:()=>v,version:()=>r,voronoi:()=>Lx,window:()=>Jt,xml:()=>Qp,zip:()=>V,zoom:()=>Wx,zoomIdentity:()=>Ux,zoomTransform:()=>Bx});var r="4.11.0";function i(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function o(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}var u=o(i),a=u.right,c=u.left;const s=a;function l(t,n){null==n&&(n=f);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o}function f(t,n){return[t,n]}function h(t,n,e){var r,i,o,u,a=t.length,c=n.length,s=new Array(a*c);for(null==e&&(e=f),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)s[o]=e(u,n[i]);return s}function p(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function d(t){return null===t?NaN:+t}function v(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)}function g(t,n){var e=v(t,n);return e?Math.sqrt(e):e}function y(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var _=Array.prototype,m=_.slice,x=_.map;function b(t){return function(){return t}}function w(t){return t}function M(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var S=Math.sqrt(50),A=Math.sqrt(10),E=Math.sqrt(2);function k(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=T(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o}function T(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=S?10:o>=A?5:o>=E?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=S?10:o>=A?5:o>=E?2:1)}function N(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=S?i*=10:o>=A?i*=5:o>=E&&(i*=2),n<t?-i:i}function C(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function P(){var t=w,n=y,e=C;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var c=n(a),l=c[0],f=c[1],h=e(a,l,f);Array.isArray(h)||(h=N(l,f,h),h=M(Math.ceil(l/h)*h,Math.floor(f/h)*h,h));for(var p=h.length;h[0]<=l;)h.shift(),--p;for(;h[p-1]>f;)h.pop(),--p;var d,v=new Array(p+1);for(i=0;i<=p;++i)(d=v[i]=[]).x0=i>0?h[i-1]:l,d.x1=i<p?h[i]:f;for(i=0;i<u;++i)l<=(o=a[i])&&o<=f&&v[s(h,o,0,p)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:b(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:b([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?b(m.call(t)):b(t),r):e},r}function O(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}}function R(t,n,e){return t=x.call(t,d).sort(i),Math.ceil((e-n)/(2*(O(t,.75)-O(t,.25))*Math.pow(t.length,-1/3)))}function L(t,n,e){return Math.ceil((e-n)/(3.5*g(t)*Math.pow(t.length,-1/3)))}function z(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function q(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i}function D(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return O(u.sort(i),.5)}function U(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e}function B(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function j(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function F(t,n){if(e=t.length){var e,r,o=0,u=0,a=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],a)<0||0!==n(a,a))&&(a=r,u=o);return 0===n(a,a)?u:void 0}}function I(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t}function Y(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o}function H(t){if(!(i=t.length))return[];for(var n=-1,e=B(t,X),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r}function X(t){return t.length}function V(){return H(arguments)}var W=Array.prototype.slice;function G(t){return t}var $=1e-6;function Z(t){return"translate("+(t+.5)+",0)"}function K(t){return"translate(0,"+(t+.5)+")"}function J(t){return function(n){return+t(n)}}function Q(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function tt(){return!this.__axis}function nt(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",l=1===t||3===t?Z:K;function f(f){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):G:i,d=Math.max(o,0)+a,v=n.range(),g=+v[0]+.5,y=+v[v.length-1]+.5,_=(n.bandwidth?Q:J)(n.copy()),m=f.selection?f.selection():f,x=m.selectAll(".domain").data([null]),b=m.selectAll(".tick").data(h,n).order(),w=b.exit(),M=b.enter().append("g").attr("class","tick"),S=b.select("line"),A=b.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),b=b.merge(M),S=S.merge(M.append("line").attr("stroke","#000").attr(s+"2",c*o)),A=A.merge(M.append("text").attr("fill","#000").attr(s,c*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==m&&(x=x.transition(f),b=b.transition(f),S=S.transition(f),A=A.transition(f),w=w.transition(f).attr("opacity",$).attr("transform",(function(t){return isFinite(t=_(t))?l(t):this.getAttribute("transform")})),M.attr("opacity",$).attr("transform",(function(t){var n=this.parentNode.__axis;return l(n&&isFinite(n=n(t))?n:_(t))}))),w.remove(),x.attr("d",4===t||2==t?"M"+c*u+","+g+"H0.5V"+y+"H"+c*u:"M"+g+","+c*u+"V0.5H"+y+"V"+c*u),b.attr("opacity",1).attr("transform",(function(t){return l(_(t))})),S.attr(s+"2",c*o),A.attr(s,c*d).text(p),m.filter(tt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),m.each((function(){this.__axis=_}))}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=W.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:W.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:W.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=u=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(u=+t,f):u},f.tickPadding=function(t){return arguments.length?(a=+t,f):a},f}function et(t){return nt(1,t)}function rt(t){return nt(2,t)}function it(t){return nt(3,t)}function ot(t){return nt(4,t)}var ut={value:function(){}};function at(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function st(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function lt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ft(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ut,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=at.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=st(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=ft(r[e],t.name,n);else if(null==n)for(e in r)r[e]=ft(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=lt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const ht=at;var pt="http://www.w3.org/1999/xhtml";const dt={svg:"http://www.w3.org/2000/svg",xhtml:pt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function vt(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),dt.hasOwnProperty(n)?{space:dt[n],local:t}:t}function gt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===pt&&n.documentElement.namespaceURI===pt?n.createElement(t):n.createElementNS(e,t)}}function yt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function _t(t){var n=vt(t);return(n.local?yt:gt)(n)}var mt=0;function xt(){return new bt}function bt(){this._="@"+(++mt).toString(36)}bt.prototype=xt.prototype={constructor:bt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var wt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Mt=document.documentElement;if(!Mt.matches){var St=Mt.webkitMatchesSelector||Mt.msMatchesSelector||Mt.mozMatchesSelector||Mt.oMatchesSelector;wt=function(t){return function(){return St.call(this,t)}}}}const At=wt;var Et={},kt=null;function Tt(t,n,e){return t=Nt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Nt(t,n,e){return function(r){var i=kt;kt=r;try{t.call(this,this.__data__,n,e)}finally{kt=i}}}function Ct(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Pt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Ot(t,n,e){var r=Et.hasOwnProperty(t.type)?Tt:Nt;return function(i,o,u){var a,c=this.__on,s=r(n,o,u);if(c)for(var l=0,f=c.length;l<f;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function Rt(t,n,e,r){var i=kt;t.sourceEvent=kt,kt=t;try{return n.apply(e,r)}finally{kt=i}}function Lt(){for(var t,n=kt;t=n.sourceEvent;)n=t;return n}function zt(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function qt(t){var n=Lt();return n.changedTouches&&(n=n.changedTouches[0]),zt(t,n)}function Dt(){}function Ut(t){return null==t?Dt:function(){return this.querySelector(t)}}function Bt(){return[]}function jt(t){return null==t?Bt:function(){return this.querySelectorAll(t)}}function Ft(t){return new Array(t.length)}function It(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function Yt(t,n,e,r,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new It(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function Ht(t,n,e,r,i,o,u){var a,c,s,l={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(c=n[a])&&(p[a]=s="$"+u.call(c,c.__data__,a,n),s in l?i[a]=c:l[s]=c);for(a=0;a<h;++a)(c=l[s="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],l[s]=null):e[a]=new It(t,o[a]);for(a=0;a<f;++a)(c=n[a])&&l[p[a]]===c&&(i[a]=c)}function Xt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Vt(t){return function(){this.removeAttribute(t)}}function Wt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Gt(t,n){return function(){this.setAttribute(t,n)}}function $t(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Zt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Kt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Jt(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Qt(t){return function(){this.style.removeProperty(t)}}function tn(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nn(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function en(t,n){return t.style.getPropertyValue(n)||Jt(t).getComputedStyle(t,null).getPropertyValue(n)}function rn(t){return function(){delete this[t]}}function on(t,n){return function(){this[t]=n}}function un(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function an(t){return t.trim().split(/^|\s+/)}function cn(t){return t.classList||new sn(t)}function sn(t){this._node=t,this._names=an(t.getAttribute("class")||"")}function ln(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function fn(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function hn(t){return function(){ln(this,t)}}function pn(t){return function(){fn(this,t)}}function dn(t,n){return function(){(n.apply(this,arguments)?ln:fn)(this,t)}}function vn(){this.textContent=""}function gn(t){return function(){this.textContent=t}}function yn(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function _n(){this.innerHTML=""}function mn(t){return function(){this.innerHTML=t}}function xn(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function bn(){this.nextSibling&&this.parentNode.appendChild(this)}function wn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Mn(){return null}function Sn(){var t=this.parentNode;t&&t.removeChild(this)}function An(t,n,e){var r=Jt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function En(t,n){return function(){return An(this,t,n)}}function kn(t,n){return function(){return An(this,t,n.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Et={mouseenter:"mouseover",mouseleave:"mouseout"})),It.prototype={constructor:It,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},sn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Tn=[null];function Nn(t,n){this._groups=t,this._parents=n}function Cn(){return new Nn([[document.documentElement]],Tn)}Nn.prototype=Cn.prototype={constructor:Nn,select:function(t){"function"!=typeof t&&(t=Ut(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),s[l]=u);return new Nn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=jt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new Nn(r,i)},filter:function(t){"function"!=typeof t&&(t=At(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Nn(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each((function(t){d[++l]=t})),d;var e,r=n?Ht:Yt,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),l=0;l<u;++l){var f=i[l],h=o[l],p=h.length,d=t.call(f,f&&f.__data__,l,i),v=d.length,g=c[l]=new Array(v),y=a[l]=new Array(v);r(f,h,g,y,s[l]=new Array(p),d,n);for(var _,m,x=0,b=0;x<v;++x)if(_=g[x]){for(x>=b&&(b=x+1);!(m=y[b])&&++b<v;);_._next=m||null}}return(a=new Nn(a,i))._enter=c,a._exit=s,a},enter:function(){return new Nn(this._enter||this._groups.map(Ft),this._parents)},exit:function(){return new Nn(this._exit||this._groups.map(Ft),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Nn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Xt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,s=i[o]=new Array(c),l=0;l<c;++l)(u=a[l])&&(s[l]=u);s.sort(n)}return new Nn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=vt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Wt:Vt:"function"==typeof n?e.local?Kt:Zt:e.local?$t:Gt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Qt:"function"==typeof n?nn:tn)(t,n,null==e?"":e)):en(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rn:"function"==typeof n?un:on)(t,n)):this.node()[t]},classed:function(t,n){var e=an(t+"");if(arguments.length<2){for(var r=cn(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?dn:n?hn:pn)(e,n))},text:function(t){return arguments.length?this.each(null==t?vn:("function"==typeof t?yn:gn)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?_n:("function"==typeof t?xn:mn)(t)):this.node().innerHTML},raise:function(){return this.each(bn)},lower:function(){return this.each(wn)},append:function(t){var n="function"==typeof t?t:_t(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:_t(t),r=null==n?Mn:"function"==typeof n?n:Ut(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Sn)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Ct(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Ot:Pt,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,l=a.length;s<l;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?kn:En)(t,n))}};const Pn=Cn;function On(t){return"string"==typeof t?new Nn([[document.querySelector(t)]],[document.documentElement]):new Nn([[t]],Tn)}function Rn(t){return"string"==typeof t?new Nn([document.querySelectorAll(t)],[document.documentElement]):new Nn([null==t?[]:t],Tn)}function Ln(t,n,e){arguments.length<3&&(e=n,n=Lt().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return zt(t,r);return null}function zn(t,n){null==n&&(n=Lt().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=zt(t,n[e]);return i}function qn(){kt.stopImmediatePropagation()}function Dn(){kt.preventDefault(),kt.stopImmediatePropagation()}function Un(t){var n=t.document.documentElement,e=On(t).on("dragstart.drag",Dn,!0);"onselectstart"in n?e.on("selectstart.drag",Dn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function Bn(t,n){var e=t.document.documentElement,r=On(t).on("dragstart.drag",null);n&&(r.on("click.drag",Dn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function jn(t){return function(){return t}}function Fn(t,n,e,r,i,o,u,a,c,s){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=s}function In(){return!kt.button}function Yn(){return this.parentNode}function Hn(t){return null==t?{x:kt.x,y:kt.y}:t}function Xn(){return"ontouchstart"in this}function Vn(){var t,n,e,r,i=In,o=Yn,u=Hn,a=Xn,c={},s=ht("start","drag","end"),l=0,f=0;function h(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",g).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var u=m("mouse",o.apply(this,arguments),qt,this,arguments);u&&(On(kt.view).on("mousemove.drag",d,!0).on("mouseup.drag",v,!0),Un(kt.view),qn(),e=!1,t=kt.clientX,n=kt.clientY,u("start"))}}function d(){if(Dn(),!e){var r=kt.clientX-t,i=kt.clientY-n;e=r*r+i*i>f}c.mouse("drag")}function v(){On(kt.view).on("mousemove.drag mouseup.drag",null),Bn(kt.view,e),Dn(),c.mouse("end")}function g(){if(i.apply(this,arguments)){var t,n,e=kt.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=m(e[t].identifier,r,Ln,this,arguments))&&(qn(),n("start"))}}function y(){var t,n,e=kt.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(Dn(),n("drag"))}function _(){var t,n,e=kt.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(qn(),n("end"))}function m(t,n,e,r,i){var o,a,f,p=e(n,t),d=s.copy();if(Rt(new Fn(h,"beforestart",o,t,l,p[0],p[1],0,0,d),(function(){return null!=(kt.subject=o=u.apply(r,i))&&(a=o.x-p[0]||0,f=o.y-p[1]||0,!0)})))return function u(s){var v,g=p;switch(s){case"start":c[t]=u,v=l++;break;case"end":delete c[t],--l;case"drag":p=e(n,t),v=l}Rt(new Fn(h,s,o,t,v,p[0]+a,p[1]+f,p[0]-g[0],p[1]-g[1],d),d.apply,d,[s,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:jn(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:jn(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:jn(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:jn(!!t),h):a},h.on=function(){var t=s.on.apply(s,arguments);return t===s?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h}function Wn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Gn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function $n(){}Fn.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Zn=.7,Kn=1/Zn,Jn="\\s*([+-]?\\d+)\\s*",Qn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ne=/^#([0-9a-f]{3})$/,ee=/^#([0-9a-f]{6})$/,re=new RegExp("^rgb\\("+[Jn,Jn,Jn]+"\\)$"),ie=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),oe=new RegExp("^rgba\\("+[Jn,Jn,Jn,Qn]+"\\)$"),ue=new RegExp("^rgba\\("+[te,te,te,Qn]+"\\)$"),ae=new RegExp("^hsl\\("+[Qn,te,te]+"\\)$"),ce=new RegExp("^hsla\\("+[Qn,te,te,Qn]+"\\)$"),se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function le(t){var n;return t=(t+"").trim().toLowerCase(),(n=ne.exec(t))?new ve((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=ee.exec(t))?fe(parseInt(n[1],16)):(n=re.exec(t))?new ve(n[1],n[2],n[3],1):(n=ie.exec(t))?new ve(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=oe.exec(t))?he(n[1],n[2],n[3],n[4]):(n=ue.exec(t))?he(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ae.exec(t))?ge(n[1],n[2]/100,n[3]/100,1):(n=ce.exec(t))?ge(n[1],n[2]/100,n[3]/100,n[4]):se.hasOwnProperty(t)?fe(se[t]):"transparent"===t?new ve(NaN,NaN,NaN,0):null}function fe(t){return new ve(t>>16&255,t>>8&255,255&t,1)}function he(t,n,e,r){return r<=0&&(t=n=e=NaN),new ve(t,n,e,r)}function pe(t){return t instanceof $n||(t=le(t)),t?new ve((t=t.rgb()).r,t.g,t.b,t.opacity):new ve}function de(t,n,e,r){return 1===arguments.length?pe(t):new ve(t,n,e,null==r?1:r)}function ve(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function ge(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new me(t,n,e,r)}function ye(t){if(t instanceof me)return new me(t.h,t.s,t.l,t.opacity);if(t instanceof $n||(t=le(t)),!t)return new me;if(t instanceof me)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new me(u,a,c,t.opacity)}function _e(t,n,e,r){return 1===arguments.length?ye(t):new me(t,n,e,null==r?1:r)}function me(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function xe(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Wn($n,le,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Wn(ve,de,Gn($n,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?Zn:Math.pow(Zn,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Wn(me,_e,Gn($n,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new me(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Zn:Math.pow(Zn,t),new me(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new ve(xe(t>=240?t-240:t+120,i,r),xe(t,i,r),xe(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var be=Math.PI/180,we=180/Math.PI,Me=.95047,Se=1.08883,Ae=4/29,Ee=6/29,ke=3*Ee*Ee;function Te(t){if(t instanceof Ce)return new Ce(t.l,t.a,t.b,t.opacity);if(t instanceof De){var n=t.h*be;return new Ce(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof ve||(t=pe(t));var e=Le(t.r),r=Le(t.g),i=Le(t.b),o=Pe((.4124564*e+.3575761*r+.1804375*i)/Me),u=Pe((.2126729*e+.7151522*r+.072175*i)/1);return new Ce(116*u-16,500*(o-u),200*(u-Pe((.0193339*e+.119192*r+.9503041*i)/Se)),t.opacity)}function Ne(t,n,e,r){return 1===arguments.length?Te(t):new Ce(t,n,e,null==r?1:r)}function Ce(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Pe(t){return t>.008856451679035631?Math.pow(t,1/3):t/ke+Ae}function Oe(t){return t>Ee?t*t*t:ke*(t-Ae)}function Re(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Le(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ze(t){if(t instanceof De)return new De(t.h,t.c,t.l,t.opacity);t instanceof Ce||(t=Te(t));var n=Math.atan2(t.b,t.a)*we;return new De(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function qe(t,n,e,r){return 1===arguments.length?ze(t):new De(t,n,e,null==r?1:r)}function De(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Wn(Ce,Ne,Gn($n,{brighter:function(t){return new Ce(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ce(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=1*Oe(t),new ve(Re(3.2404542*(n=Me*Oe(n))-1.5371385*t-.4985314*(e=Se*Oe(e))),Re(-.969266*n+1.8760108*t+.041556*e),Re(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),Wn(De,qe,Gn($n,{brighter:function(t){return new De(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new De(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Te(this).rgb()}}));var Ue=-.14861,Be=1.78277,je=-.29227,Fe=-.90649,Ie=1.97294,Ye=Ie*Fe,He=Ie*Be,Xe=Be*je-Fe*Ue;function Ve(t){if(t instanceof Ge)return new Ge(t.h,t.s,t.l,t.opacity);t instanceof ve||(t=pe(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Xe*r+Ye*n-He*e)/(Xe+Ye-He),o=r-i,u=(Ie*(e-i)-je*o)/Fe,a=Math.sqrt(u*u+o*o)/(Ie*i*(1-i)),c=a?Math.atan2(u,o)*we-120:NaN;return new Ge(c<0?c+360:c,a,i,t.opacity)}function We(t,n,e,r){return 1===arguments.length?Ve(t):new Ge(t,n,e,null==r?1:r)}function Ge(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function $e(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}function Ze(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return $e((e-r/n)*n,u,i,o,a)}}function Ke(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return $e((e-r/n)*n,i,o,u,a)}}function Je(t){return function(){return t}}function Qe(t,n){return function(e){return t+e*n}}function tr(t,n){var e=n-t;return e?Qe(t,e>180||e<-180?e-360*Math.round(e/360):e):Je(isNaN(t)?n:t)}function nr(t,n){var e=n-t;return e?Qe(t,e):Je(isNaN(t)?n:t)}Wn(Ge,We,Gn($n,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new Ge(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Zn:Math.pow(Zn,t),new Ge(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*be,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new ve(255*(n+e*(Ue*r+Be*i)),255*(n+e*(je*r+Fe*i)),255*(n+e*(Ie*r)),this.opacity)}}));const er=function t(n){var e=function(t){return 1==(t=+t)?nr:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Je(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=de(t)).r,(n=de(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=nr(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function rr(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=de(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var ir=rr(Ze),or=rr(Ke);function ur(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),u=new Array(r);for(e=0;e<i;++e)o[e]=pr(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}function ar(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}function cr(t,n){return n-=t=+t,function(e){return t+n*e}}function sr(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=pr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var lr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,fr=new RegExp(lr.source,"g");function hr(t,n){var e,r,i,o=lr.lastIndex=fr.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=lr.exec(t))&&(r=fr.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:cr(e,r)})),o=fr.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})}function pr(t,n){var e,r=typeof n;return null==n||"boolean"===r?Je(n):("number"===r?cr:"string"===r?(e=le(n))?(n=e,er):hr:n instanceof le?er:n instanceof Date?ar:Array.isArray(n)?ur:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?sr:cr)(t,n)}function dr(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var vr,gr,yr,_r,mr=180/Math.PI,xr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function br(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*mr,skewX:Math.atan(c)*mr,scaleX:u,scaleY:a}}function wr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:cr(t,i)},{i:c-2,x:cr(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:cr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:cr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:cr(t,e)},{i:a-2,x:cr(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var Mr=wr((function(t){return"none"===t?xr:(vr||(vr=document.createElement("DIV"),gr=document.documentElement,yr=document.defaultView),vr.style.transform=t,t=yr.getComputedStyle(gr.appendChild(vr),null).getPropertyValue("transform"),gr.removeChild(vr),br(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Sr=wr((function(t){return null==t?xr:(_r||(_r=document.createElementNS("http://www.w3.org/2000/svg","g")),_r.setAttribute("transform",t),(t=_r.transform.baseVal.consolidate())?br((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):xr)}),", ",")",")"),Ar=Math.SQRT2;function Er(t){return((t=Math.exp(t))+1/t)/2}function kr(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],s=n[2],l=a-i,f=c-o,h=l*l+f*f;if(h<1e-12)r=Math.log(s/u)/Ar,e=function(t){return[i+t*l,o+t*f,u*Math.exp(Ar*t*r)]};else{var p=Math.sqrt(h),d=(s*s-u*u+4*h)/(2*u*2*p),v=(s*s-u*u-4*h)/(2*s*2*p),g=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-g)/Ar,e=function(t){var n,e=t*r,a=Er(g),c=u/(2*p)*(a*(n=Ar*e+g,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+c*l,o+c*f,u*a/Er(Ar*e+g)]}}return e.duration=1e3*r,e}function Tr(t){return function(n,e){var r=t((n=_e(n)).h,(e=_e(e)).h),i=nr(n.s,e.s),o=nr(n.l,e.l),u=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Nr=Tr(tr);var Cr=Tr(nr);function Pr(t,n){var e=nr((t=Ne(t)).l,(n=Ne(n)).l),r=nr(t.a,n.a),i=nr(t.b,n.b),o=nr(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function Or(t){return function(n,e){var r=t((n=qe(n)).h,(e=qe(e)).h),i=nr(n.c,e.c),o=nr(n.l,e.l),u=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Rr=Or(tr);var Lr=Or(nr);function zr(t){return function n(e){function r(n,r){var i=t((n=We(n)).h,(r=We(r)).h),o=nr(n.s,r.s),u=nr(n.l,r.l),a=nr(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}const qr=zr(tr);var Dr=zr(nr);function Ur(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}var Br,jr,Fr=0,Ir=0,Yr=0,Hr=0,Xr=0,Vr=0,Wr="object"==typeof performance&&performance.now?performance:Date,Gr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function $r(){return Xr||(Gr(Zr),Xr=Wr.now()+Vr)}function Zr(){Xr=0}function Kr(){this._call=this._time=this._next=null}function Jr(t,n,e){var r=new Kr;return r.restart(t,n,e),r}function Qr(){$r(),++Fr;for(var t,n=Br;n;)(t=Xr-n._time)>=0&&n._call.call(null,t),n=n._next;--Fr}function ti(){Xr=(Hr=Wr.now())+Vr,Fr=Ir=0;try{Qr()}finally{Fr=0,function(){for(var t,n,e=Br,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Br=n);jr=t,ei(r)}(),Xr=0}}function ni(){var t=Wr.now(),n=t-Hr;n>1e3&&(Vr-=n,Hr=t)}function ei(t){Fr||(Ir&&(Ir=clearTimeout(Ir)),t-Xr>24?(t<1/0&&(Ir=setTimeout(ti,t-Wr.now()-Vr)),Yr&&(Yr=clearInterval(Yr))):(Yr||(Hr=Wr.now(),Yr=setInterval(ni,1e3)),Fr=1,Gr(ti)))}function ri(t,n,e){var r=new Kr;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}function ii(t,n,e){var r=new Kr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?$r():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)}Kr.prototype=Jr.prototype={constructor:Kr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?$r():+e)+(null==n?0:+n),this._next||jr===this||(jr?jr._next=this:Br=this,jr=this),this._call=t,this._time=e,ei()},stop:function(){this._call&&(this._call=null,this._time=1/0,ei())}};var oi=ht("start","end","interrupt"),ui=[];function ai(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,l,f,h;if(1!==e.state)return a();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return ri(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),delete i[s])}if(ri((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(null,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Jr((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:oi,tween:ui,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function ci(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>0)throw new Error("too late");return e}function si(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>2)throw new Error("too late");return e}function li(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function fi(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}function hi(t,n){var e,r;return function(){var i=si(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function pi(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=si(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}}function di(t,n,e){var r=t._id;return t.each((function(){var t=si(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return li(t,r).value[n]}}function vi(t,n){var e;return("number"==typeof n?cr:n instanceof le?er:(e=le(n))?(n=e,er):hr)(t,n)}function gi(t){return function(){this.removeAttribute(t)}}function yi(t){return function(){this.removeAttributeNS(t.space,t.local)}}function _i(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function mi(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function xi(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttribute(t))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttribute(t)}}function bi(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttributeNS(t.space,t.local))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttributeNS(t.space,t.local)}}function wi(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function Mi(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function Si(t,n){return function(){ci(this,t).delay=+n.apply(this,arguments)}}function Ai(t,n){return n=+n,function(){ci(this,t).delay=n}}function Ei(t,n){return function(){si(this,t).duration=+n.apply(this,arguments)}}function ki(t,n){return n=+n,function(){si(this,t).duration=n}}function Ti(t,n){if("function"!=typeof n)throw new Error;return function(){si(this,t).ease=n}}function Ni(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?ci:si;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var Ci=Pn.prototype.constructor;function Pi(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}var Oi=0;function Ri(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Li(t){return Pn().transition(t)}function zi(){return++Oi}var qi=Pn.prototype;function Di(t){return+t}function Ui(t){return t*t}function Bi(t){return t*(2-t)}function ji(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function Fi(t){return t*t*t}function Ii(t){return--t*t*t+1}function Yi(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Ri.prototype=Li.prototype={constructor:Ri,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Ut(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=r[u],l=s.length,f=o[u]=new Array(l),h=0;h<l;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),f[h]=c,ai(f[h],n,e,h,f,li(a,e)));return new Ri(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=jt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,s=r[a],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),d=li(c,e),v=0,g=p.length;v<g;++v)(h=p[v])&&ai(h,n,e,v,p,d);o.push(p),u.push(c)}return new Ri(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=At(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Ri(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Ri(u,this._parents,this._name,this._id)},selection:function(){return new Ci(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=zi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var l=li(u,n);ai(u,t,e,s,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ri(r,this._parents,t,e)},call:qi.call,nodes:qi.nodes,node:qi.node,size:qi.size,empty:qi.empty,each:qi.each,on:function(t,n){var e=this._id;return arguments.length<2?li(this.node(),e).on.on(t):this.each(Ni(e,t,n))},attr:function(t,n){var e=vt(t),r="transform"===e?Sr:vi;return this.attrTween(t,"function"==typeof n?(e.local?bi:xi)(e,r,di(this,"attr."+t,n)):null==n?(e.local?yi:gi)(e):(e.local?mi:_i)(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=vt(t);return this.tween(e,(r.local?wi:Mi)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Mr:vi;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=en(this,t),u=(this.style.removeProperty(t),en(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var u=en(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=en(this,t)),u===a?null:u===r&&a===i?o:o=n(r=u,i=a)}}(t,r,di(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=en(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Pi(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(di(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=li(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?hi:pi)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Si:Ai)(n,t)):li(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ei:ki)(n,t)):li(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Ti(n,t)):li(this.node(),n).ease}};var Hi=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Xi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Vi=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Wi=Math.PI,Gi=Wi/2;function $i(t){return 1-Math.cos(t*Gi)}function Zi(t){return Math.sin(t*Gi)}function Ki(t){return(1-Math.cos(Wi*t))/2}function Ji(t){return Math.pow(2,10*t-10)}function Qi(t){return 1-Math.pow(2,-10*t)}function to(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function no(t){return 1-Math.sqrt(1-t*t)}function eo(t){return Math.sqrt(1- --t*t)}function ro(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var io=7.5625;function oo(t){return 1-uo(1-t)}function uo(t){return(t=+t)<.36363636363636365?io*t*t:t<.7272727272727273?io*(t-=.5454545454545454)*t+.75:t<.9090909090909091?io*(t-=.8181818181818182)*t+.9375:io*(t-=.9545454545454546)*t+.984375}function ao(t){return((t*=2)<=1?1-uo(1-t):uo(t-1)+1)/2}var co=1.70158,so=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(co),lo=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(co),fo=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(co),ho=2*Math.PI,po=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),vo=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),go=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),yo={time:null,delay:0,duration:250,ease:Yi};function _o(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return yo.time=$r(),yo;return e}Pn.prototype.interrupt=function(t){return this.each((function(){fi(this,t)}))},Pn.prototype.transition=function(t){var n,e;t instanceof Ri?(n=t._id,t=t._name):(n=zi(),(e=yo).time=$r(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)(u=a[s])&&ai(u,t,n,s,a,e||_o(u,n));return new Ri(r,this._parents,t,n)};var mo=[null];function xo(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Ri([[t]],mo,n,+r);return null}function bo(t){return function(){return t}}function wo(t,n,e){this.target=t,this.type=n,this.selection=e}function Mo(){kt.stopImmediatePropagation()}function So(){kt.preventDefault(),kt.stopImmediatePropagation()}var Ao={name:"drag"},Eo={name:"space"},ko={name:"handle"},To={name:"center"},No={name:"x",handles:["e","w"].map(Do),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Co={name:"y",handles:["n","s"].map(Do),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Po={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Do),input:function(t){return t},output:function(t){return t}},Oo={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ro={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Lo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},zo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},qo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Do(t){return{type:t}}function Uo(){return!kt.button}function Bo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function jo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Fo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Io(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Yo(){return Vo(No)}function Ho(){return Vo(Co)}function Xo(){return Vo(Po)}function Vo(t){var n,e=Bo,r=Uo,i=ht(u,"start","brush","end"),o=6;function u(n){var e=n.property("__brush",f).selectAll(".overlay").data([Do("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oo.overlay).merge(e).each((function(){var t=jo(this).extent;On(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Do("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oo.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Oo[t.type]})),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function a(){var t=On(this),n=jo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new s(t,n)}function s(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function l(){if(kt.touches){if(kt.changedTouches.length<kt.touches.length)return So()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,u,s,l,f,h,p,d,v,g,y,_=this,m=kt.target.__data__.type,x="selection"===(kt.metaKey?m="overlay":m)?Ao:kt.altKey?To:ko,b=t===Co?null:zo[m],w=t===No?null:qo[m],M=jo(_),S=M.extent,A=M.selection,E=S[0][0],k=S[0][1],T=S[1][0],N=S[1][1],C=b&&w&&kt.shiftKey,P=qt(_),O=P,R=c(_,arguments).beforestart();"overlay"===m?M.selection=A=[[e=t===Co?E:P[0],o=t===No?k:P[1]],[s=t===Co?T:e,f=t===No?N:o]]:(e=A[0][0],o=A[0][1],s=A[1][0],f=A[1][1]),i=e,u=o,l=s,h=f;var L=On(_).attr("pointer-events","none"),z=L.selectAll(".overlay").attr("cursor",Oo[m]);if(kt.touches)L.on("touchmove.brush",D,!0).on("touchend.brush touchcancel.brush",B,!0);else{var q=On(kt.view).on("keydown.brush",j,!0).on("keyup.brush",F,!0).on("mousemove.brush",D,!0).on("mouseup.brush",B,!0);Un(kt.view)}Mo(),fi(_),a.call(_),R.start()}function D(){var t=qt(_);!C||g||y||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?y=!0:g=!0),O=t,v=!0,So(),U()}function U(){var t;switch(p=O[0]-P[0],d=O[1]-P[1],x){case Eo:case Ao:b&&(p=Math.max(E-e,Math.min(T-s,p)),i=e+p,l=s+p),w&&(d=Math.max(k-o,Math.min(N-f,d)),u=o+d,h=f+d);break;case ko:b<0?(p=Math.max(E-e,Math.min(T-e,p)),i=e+p,l=s):b>0&&(p=Math.max(E-s,Math.min(T-s,p)),i=e,l=s+p),w<0?(d=Math.max(k-o,Math.min(N-o,d)),u=o+d,h=f):w>0&&(d=Math.max(k-f,Math.min(N-f,d)),u=o,h=f+d);break;case To:b&&(i=Math.max(E,Math.min(T,e-p*b)),l=Math.max(E,Math.min(T,s+p*b))),w&&(u=Math.max(k,Math.min(N,o-d*w)),h=Math.max(k,Math.min(N,f+d*w)))}l<i&&(b*=-1,t=e,e=s,s=t,t=i,i=l,l=t,m in Ro&&z.attr("cursor",Oo[m=Ro[m]])),h<u&&(w*=-1,t=o,o=f,f=t,t=u,u=h,h=t,m in Lo&&z.attr("cursor",Oo[m=Lo[m]])),M.selection&&(A=M.selection),g&&(i=A[0][0],l=A[1][0]),y&&(u=A[0][1],h=A[1][1]),A[0][0]===i&&A[0][1]===u&&A[1][0]===l&&A[1][1]===h||(M.selection=[[i,u],[l,h]],a.call(_),R.brush())}function B(){if(Mo(),kt.touches){if(kt.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),L.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Bn(kt.view,v),q.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);L.attr("pointer-events","all"),z.attr("cursor",Oo.overlay),M.selection&&(A=M.selection),Fo(A)&&(M.selection=null,a.call(_)),R.end()}function j(){switch(kt.keyCode){case 16:C=b&&w;break;case 18:x===ko&&(b&&(s=l-p*b,e=i+p*b),w&&(f=h-d*w,o=u+d*w),x=To,U());break;case 32:x!==ko&&x!==To||(b<0?s=l-p:b>0&&(e=i-p),w<0?f=h-d:w>0&&(o=u-d),x=Eo,z.attr("cursor",Oo.selection),U());break;default:return}So()}function F(){switch(kt.keyCode){case 16:C&&(g=y=C=!1,U());break;case 18:x===To&&(b<0?s=l:b>0&&(e=i),w<0?f=h:w>0&&(o=u),x=ko,U());break;case 32:x===Eo&&(kt.altKey?(b&&(s=l-p*b,e=i+p*b),w&&(f=h-d*w,o=u+d*w),x=To):(b<0?s=l:b>0&&(e=i),w<0?f=h:w>0&&(o=u),x=ko),z.attr("cursor",Oo[m]),U());break;default:return}So()}}function f(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),s=pr(o,u);function l(t){r.selection=1===t&&Fo(u)?null:s(t),a.call(n),i.brush()}return o&&u?l:l(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=c(n,r).beforestart();fi(n),i.selection=null==o||Fo(o)?null:o,a.call(n),u.start().brush().end()}))},s.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){Rt(new wo(u,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:bo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:bo(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.on=function(){var t=i.on.apply(i,arguments);return t===i?u:t},u}var Wo=Math.cos,Go=Math.sin,$o=Math.PI,Zo=$o/2,Ko=2*$o,Jo=Math.max;function Qo(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function tu(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,s,l,f=i.length,h=[],p=M(f),d=[],v=[],g=v.groups=new Array(f),y=new Array(f*f);for(o=0,s=-1;++s<f;){for(u=0,l=-1;++l<f;)u+=i[s][l];h.push(u),d.push(M(f)),o+=u}for(n&&p.sort((function(t,e){return n(h[t],h[e])})),e&&d.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=Jo(0,Ko-t*f)/o)?t:Ko/f,u=0,s=-1;++s<f;){for(a=u,l=-1;++l<f;){var _=p[s],m=d[_][l],x=i[_][m],b=u,w=u+=x*o;y[m*f+_]={index:_,subindex:m,startAngle:b,endAngle:w,value:x}}g[_]={index:_,startAngle:a,endAngle:u,value:h[_]},u+=c}for(s=-1;++s<f;)for(l=s-1;++l<f;){var S=y[l*f+s],A=y[s*f+l];(S.value||A.value)&&v.push(S.value<A.value?{source:A,target:S}:{source:S,target:A})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=Jo(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Qo(t))._=t,i):r&&r._},i}var nu=Array.prototype.slice;function eu(t){return function(){return t}}var ru=Math.PI,iu=2*ru,ou=1e-6,uu=iu-ou;function au(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function cu(){return new au}au.prototype=cu.prototype={constructor:au,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,s=o-t,l=u-n,f=s*s+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>ou)if(Math.abs(l*a-c*s)>ou&&i){var h=e-o,p=r-u,d=a*a+c*c,v=h*h+p*p,g=Math.sqrt(d),y=Math.sqrt(f),_=i*Math.tan((ru-Math.acos((d+f-v)/(2*g*y)))/2),m=_/y,x=_/g;Math.abs(m-1)>ou&&(this._+="L"+(t+m*s)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>s*p)+","+(this._x1=t+x*a)+","+(this._y1=n+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,s=n+a,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>ou||Math.abs(this._y1-s)>ou)&&(this._+="L"+c+","+s),e&&(f<0&&(f=f%iu+iu),f>uu?this._+="A"+e+","+e+",0,1,"+l+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=c)+","+(this._y1=s):f>ou&&(this._+="A"+e+","+e+",0,"+ +(f>=ru)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const su=cu;function lu(t){return t.source}function fu(t){return t.target}function hu(t){return t.radius}function pu(t){return t.startAngle}function du(t){return t.endAngle}function vu(){var t=lu,n=fu,e=hu,r=pu,i=du,o=null;function u(){var u,a=nu.call(arguments),c=t.apply(this,a),s=n.apply(this,a),l=+e.apply(this,(a[0]=c,a)),f=r.apply(this,a)-Zo,h=i.apply(this,a)-Zo,p=l*Wo(f),d=l*Go(f),v=+e.apply(this,(a[0]=s,a)),g=r.apply(this,a)-Zo,y=i.apply(this,a)-Zo;if(o||(o=u=su()),o.moveTo(p,d),o.arc(0,0,l,f,h),f===g&&h===y||(o.quadraticCurveTo(0,0,v*Wo(g),v*Go(g)),o.arc(0,0,v,g,y)),o.quadraticCurveTo(0,0,p,d),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:eu(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:eu(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:eu(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}var gu="$";function yu(){}function _u(t,n){var e=new yu;if(t instanceof yu)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}yu.prototype=_u.prototype={constructor:yu,has:function(t){return gu+t in this},get:function(t){return this[gu+t]},set:function(t,n){return this[gu+t]=n,this},remove:function(t){var n=gu+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===gu&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===gu&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===gu&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===gu&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===gu&&++t;return t},empty:function(){for(var t in this)if(t[0]===gu)return!1;return!0},each:function(t){for(var n in this)n[0]===gu&&t(this[n],n.slice(1),this)}};const mu=_u;function xu(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,s,l,f=-1,h=e.length,p=r[i++],d=mu(),v=u();++f<h;)(l=d.get(c=p(s=e[f])+""))?l.push(s):d.set(c,[s]);return d.each((function(t,n){a(v,n,o(t,i,u,a))})),v}function u(t,e){if(++e>r.length)return t;var o,a=i[e-1];return null!=n&&e>=r.length?o=t.entries():(o=[],t.each((function(t,n){o.push({key:n,values:u(t,e)})}))),null!=a?o.sort((function(t,n){return a(t.key,n.key)})):o}return e={object:function(t){return o(t,0,bu,wu)},map:function(t){return o(t,0,Mu,Su)},entries:function(t){return u(o(t,0,Mu,Su),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function bu(){return{}}function wu(t,n,e){t[n]=e}function Mu(){return mu()}function Su(t,n,e){t.set(n,e)}function Au(){}var Eu=mu.prototype;function ku(t,n){var e=new Au;if(t instanceof Au)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Au.prototype=ku.prototype={constructor:Au,has:Eu.has,add:function(t){return this[gu+(t+="")]=t,this},remove:Eu.remove,clear:Eu.clear,values:Eu.keys,size:Eu.size,empty:Eu.empty,each:Eu.each};const Tu=ku;function Nu(t){var n=[];for(var e in t)n.push(e);return n}function Cu(t){var n=[];for(var e in t)n.push(t[e]);return n}function Pu(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var Ou={},Ru={};function Lu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function zu(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,s=!1;function l(){if(c)return Ru;if(s)return s=!1,Ou;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?c=!0:10===(r=t.charCodeAt(u++))?s=!0:13===r&&(s=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))s=!0;else if(13===r)s=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=l())!==Ru;){for(var f=[];r!==Ou&&r!==Ru;)f.push(r),r=l();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Lu(t);return function(r,i){return n(e(r),i,t)}}(t,n):Lu(t)}));return o.columns=i,o},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}(n)),[e.map(o).join(t)].concat(n.map((function(n){return e.map((function(t){return o(n[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}}var qu=zu(","),Du=qu.parse,Uu=qu.parseRows,Bu=qu.format,ju=qu.formatRows,Fu=zu("\t"),Iu=Fu.parse,Yu=Fu.parseRows,Hu=Fu.format,Xu=Fu.formatRows;function Vu(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}function Wu(t){return function(){return t}}function Gu(){return 1e-6*(Math.random()-.5)}function $u(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,s,l,f,h,p=t._root,d={data:r},v=t._x0,g=t._y0,y=t._x1,_=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((s=n>=(o=(v+y)/2))?v=o:y=o,(l=e>=(u=(g+_)/2))?g=u:_=u,i=p,!(p=p[f=l<<1|s]))return i[f]=d,t;if(a=+t._x.call(null,p.data),c=+t._y.call(null,p.data),n===a&&e===c)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(s=n>=(o=(v+y)/2))?v=o:y=o,(l=e>=(u=(g+_)/2))?g=u:_=u}while((f=l<<1|s)==(h=(c>=u)<<1|a>=o));return i[h]=p,i[f]=d,t}function Zu(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function Ku(t){return t[0]}function Ju(t){return t[1]}function Qu(t,n,e){var r=new ta(null==n?Ku:n,null==e?Ju:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ta(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function na(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var ea=Qu.prototype=ta.prototype;function ra(t){return t.x+t.vx}function ia(t){return t.y+t.vy}function oa(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,s,l,f,h=n.length,p=0;p<i;++p)for(o=Qu(n,ra,ia).visitAfter(u),t=0;t<h;++t)a=n[t],l=e[a.index],f=l*l,c=a.x+a.vx,s=a.y+a.vy,o.visit(d);function d(t,n,e,i,o){var u=t.data,h=t.r,p=l+h;if(!u)return n>c+p||i<c-p||e>s+p||o<s-p;if(u.index>a.index){var d=c-u.x-u.vx,v=s-u.y-u.vy,g=d*d+v*v;g<p*p&&(0===d&&(g+=(d=Gu())*d),0===v&&(g+=(v=Gu())*v),g=(p-(g=Math.sqrt(g)))/g*r,a.vx+=(d*=g)*(p=(h*=h)/(f+h)),a.vy+=(v*=g)*p,u.vx-=d*(p=1-p),u.vy-=v*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=Wu(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:Wu(+n),a(),o):t},o}function ua(t){return t.index}function aa(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function ca(t){var n,e,r,i,o,u=ua,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=Wu(30),s=1;function l(r){for(var i=0,u=t.length;i<s;++i)for(var a,c,l,f,h,p,d,v=0;v<u;++v)c=(a=t[v]).source,f=(l=a.target).x+l.vx-c.x-c.vx||Gu(),h=l.y+l.vy-c.y-c.vy||Gu(),f*=p=((p=Math.sqrt(f*f+h*h))-e[v])/p*r*n[v],h*=p,l.vx-=f*(d=o[v]),l.vy-=h*d,c.vx+=f*(d=1-d),c.vy+=h*d}function f(){if(r){var a,c,s=r.length,l=t.length,f=mu(r,u);for(a=0,i=new Array(s);a<l;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=aa(f,c.source)),"object"!=typeof c.target&&(c.target=aa(f,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(l);a<l;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(l),h(),e=new Array(l),p()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(n){return arguments.length?(t=n,f(),l):t},l.id=function(t){return arguments.length?(u=t,l):u},l.iterations=function(t){return arguments.length?(s=+t,l):s},l.strength=function(t){return arguments.length?(a="function"==typeof t?t:Wu(+t),h(),l):a},l.distance=function(t){return arguments.length?(c="function"==typeof t?t:Wu(+t),p(),l):c},l}function sa(t){return t.x}function la(t){return t.y}ea.copy=function(){var t,n,e=new ta(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=na(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=na(n));return e},ea.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return $u(this.cover(n,e),n,e,t)},ea.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,s=1/0,l=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>l&&(l=r),i<s&&(s=i),i>f&&(f=i));for(l<c&&(c=this._x0,l=this._x1),f<s&&(s=this._y0,f=this._y1),this.cover(c,s).cover(l,f),e=0;e<o;++e)$u(this,u[e],a[e],t[e]);return this},ea.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var u,a,c=i-e,s=this._root;switch(a=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{(u=new Array(4))[a]=s,s=u}while(o=r+(c*=2),t>(i=e+c)||n>o);break;case 1:do{(u=new Array(4))[a]=s,s=u}while(o=r+(c*=2),(e=i-c)>t||n>o);break;case 2:do{(u=new Array(4))[a]=s,s=u}while(r=o-(c*=2),t>(i=e+c)||r>n);break;case 3:do{(u=new Array(4))[a]=s,s=u}while(r=o-(c*=2),(e=i-c)>t||r>n)}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},ea.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},ea.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ea.find=function(t,n,e){var r,i,o,u,a,c,s,l=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],v=this._root;for(v&&d.push(new Zu(v,l,f,h,p)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,p=n+e,e*=e);c=d.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>p||(u=c.x1)<l||(a=c.y1)<f))if(v.length){var g=(i+u)/2,y=(o+a)/2;d.push(new Zu(v[3],g,y,u,a),new Zu(v[2],i,y,g,a),new Zu(v[1],g,o,u,y),new Zu(v[0],i,o,g,y)),(s=(n>=y)<<1|t>=g)&&(c=d[d.length-1],d[d.length-1]=d[d.length-1-s],d[d.length-1-s]=c)}else{var _=t-+this._x.call(null,v.data),m=n-+this._y.call(null,v.data),x=_*_+m*m;if(x<e){var b=Math.sqrt(e=x);l=t-b,f=n-b,h=t+b,p=n+b,r=v.data}}return r},ea.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,s,l,f,h,p=this._root,d=this._x0,v=this._y0,g=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(a=(d+g)/2))?d=a:g=a,(l=u>=(c=(v+y)/2))?v=c:y=c,n=p,!(p=p[f=l<<1|s]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},ea.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},ea.root=function(){return this._root},ea.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},ea.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new Zu(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var s=(r+o)/2,l=(i+u)/2;(e=c[3])&&a.push(new Zu(e,s,l,o,u)),(e=c[2])&&a.push(new Zu(e,r,l,s,u)),(e=c[1])&&a.push(new Zu(e,s,i,o,l)),(e=c[0])&&a.push(new Zu(e,r,i,s,l))}return this},ea.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Zu(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,s=n.y1,l=(u+c)/2,f=(a+s)/2;(o=i[0])&&e.push(new Zu(o,u,a,l,f)),(o=i[1])&&e.push(new Zu(o,l,a,c,f)),(o=i[2])&&e.push(new Zu(o,u,f,l,s)),(o=i[3])&&e.push(new Zu(o,l,f,c,s))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},ea.x=function(t){return arguments.length?(this._x=t,this):this._x},ea.y=function(t){return arguments.length?(this._y=t,this):this._y};var fa,ha=Math.PI*(3-Math.sqrt(5));function pa(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=mu(),c=Jr(l),s=ht("tick","end");function l(){f(),s.call("tick",n),e<r&&(c.stop(),s.call("end",n))}function f(){var n,r,c=t.length;for(e+=(o-e)*i,a.each((function(t){t(e)})),n=0;n<c;++n)null==(r=t[n]).fx?r.x+=r.vx*=u:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=u:(r.y=r.fy,r.vy=0)}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*ha;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:f,restart:function(){return c.restart(l),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,s=0,l=t.length;for(null==r?r=1/0:r*=r,s=0;s<l;++s)(u=(i=n-(a=t[s]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(s.on(t,e),n):s.on(t)}}}function da(){var t,n,e,r,i=Wu(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=Qu(t,sa,la).visitAfter(l);for(e=r,i=0;i<o;++i)n=t[i],u.visit(f)}function s(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function l(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function f(t,i,c,s){if(!t.value)return!0;var l=t.x-n.x,f=t.y-n.y,h=s-i,p=l*l+f*f;if(h*h/a<p)return p<u&&(0===l&&(p+=(l=Gu())*l),0===f&&(p+=(f=Gu())*f),p<o&&(p=Math.sqrt(o*p)),n.vx+=l*t.value*e/p,n.vy+=f*t.value*e/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===l&&(p+=(l=Gu())*l),0===f&&(p+=(f=Gu())*f),p<o&&(p=Math.sqrt(o*p)));do{t.data!==n&&(h=r[t.data.index]*e/p,n.vx+=l*h,n.vy+=f*h)}while(t=t.next)}}return c.initialize=function(n){t=n,s()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:Wu(+t),s(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c}function va(t,n,e){var r,i,o,u=Wu(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],s=c.x-n||1e-6,l=c.y-e||1e-6,f=Math.sqrt(s*s+l*l),h=(o[u]-f)*i[u]*t/f;c.vx+=s*h,c.vy+=l*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=Wu(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:Wu(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:Wu(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a}function ga(t){var n,e,r,i=Wu(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Wu(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Wu(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:Wu(+n),u(),o):t},o}function ya(t){var n,e,r,i=Wu(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=Wu(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:Wu(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:Wu(+n),u(),o):t},o}function _a(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function ma(t){return(t=_a(Math.abs(t)))?t[1]:NaN}function xa(t,n){var e=_a(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}const ba={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return xa(100*t,n)},r:xa,s:function(t,n){var e=_a(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(fa=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+_a(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};var wa=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function Ma(t){return new Sa(t)}function Sa(t){if(!(n=wa.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",u=!!n[5],a=n[6]&&+n[6],c=!!n[7],s=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(c=!0,l="g"):ba[l]||(l=""),(u||"0"===e&&"="===r)&&(u=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=u,this.width=a,this.comma=c,this.precision=s,this.type=l}function Aa(t){return t}Ma.prototype=Sa.prototype,Sa.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Ea,ka,Ta,Na=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Ca(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):Aa,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(t.numerals):Aa,a=t.percent||"%";function c(t){var n=(t=Ma(t)).fill,e=t.align,c=t.sign,s=t.symbol,l=t.zero,f=t.width,h=t.comma,p=t.precision,d=t.type,v="$"===s?i[0]:"#"===s&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",g="$"===s?i[1]:/[%p]/.test(d)?a:"",y=ba[d],_=!d||/[defgprs%]/.test(d);function m(t){var i,a,s,m=v,x=g;if("c"===d)x=y(t)+x,t="";else{var b=(t=+t)<0;if(t=y(Math.abs(t),p),b&&0==+t&&(b=!1),m=(b?"("===c?c:"-":"-"===c||"("===c?"":c)+m,x=x+("s"===d?Na[8+fa/3]:"")+(b&&"("===c?")":""),_)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){x=(46===s?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var w=m.length+t.length+x.length,M=w<f?new Array(f-w+1).join(n):"";switch(h&&l&&(t=r(M+t,M.length?f-x.length:1/0),M=""),e){case"<":t=m+t+x+M;break;case"=":t=m+M+t+x;break;case"^":t=M.slice(0,w=M.length>>1)+m+t+x+M.slice(w);break;default:t=M+m+t+x}return u(t)}return p=null==p?d?6:12:/[gprs]/.test(d)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),m.toString=function(){return t+""},m}return{format:c,formatPrefix:function(t,n){var e=c(((t=Ma(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ma(n)/3))),i=Math.pow(10,-r),o=Na[8+r/3];return function(t){return e(i*t)+o}}}}function Pa(t){return Ea=Ca(t),ka=Ea.format,Ta=Ea.formatPrefix,Ea}function Oa(t){return Math.max(0,-ma(Math.abs(t)))}function Ra(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ma(n)/3)))-ma(Math.abs(t)))}function La(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ma(n)-ma(t))+1}function za(){return new qa}function qa(){this.reset()}Pa({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),qa.prototype={constructor:qa,reset:function(){this.s=this.t=0},add:function(t){Ua(Da,t,this.t),Ua(this,Da.s,this.s),this.s?this.t+=Da.t:this.s=Da.t},valueOf:function(){return this.s}};var Da=new qa;function Ua(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Ba=1e-6,ja=Math.PI,Fa=ja/2,Ia=ja/4,Ya=2*ja,Ha=180/ja,Xa=ja/180,Va=Math.abs,Wa=Math.atan,Ga=Math.atan2,$a=Math.cos,Za=Math.ceil,Ka=Math.exp,Ja=(Math.floor,Math.log),Qa=Math.pow,tc=Math.sin,nc=Math.sign||function(t){return t>0?1:t<0?-1:0},ec=Math.sqrt,rc=Math.tan;function ic(t){return t>1?0:t<-1?ja:Math.acos(t)}function oc(t){return t>1?Fa:t<-1?-Fa:Math.asin(t)}function uc(t){return(t=tc(t/2))*t}function ac(){}function cc(t,n){t&&lc.hasOwnProperty(t.type)&&lc[t.type](t,n)}var sc={Feature:function(t,n){cc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)cc(e[r].geometry,n)}},lc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){fc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)fc(e[r],n,0)},Polygon:function(t,n){hc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)hc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)cc(e[r],n)}};function fc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function hc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)fc(t[e],n,1);n.polygonEnd()}function pc(t,n){t&&sc.hasOwnProperty(t.type)?sc[t.type](t,n):cc(t,n)}var dc,vc,gc,yc,_c,mc=za(),xc=za(),bc={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){mc.reset(),bc.lineStart=wc,bc.lineEnd=Mc},polygonEnd:function(){var t=+mc;xc.add(t<0?Ya+t:t),this.lineStart=this.lineEnd=this.point=ac},sphere:function(){xc.add(Ya)}};function wc(){bc.point=Sc}function Mc(){Ac(dc,vc)}function Sc(t,n){bc.point=Ac,dc=t,vc=n,gc=t*=Xa,yc=$a(n=(n*=Xa)/2+Ia),_c=tc(n)}function Ac(t,n){var e=(t*=Xa)-gc,r=e>=0?1:-1,i=r*e,o=$a(n=(n*=Xa)/2+Ia),u=tc(n),a=_c*u,c=yc*o+a*$a(i),s=a*r*tc(i);mc.add(Ga(s,c)),gc=t,yc=o,_c=u}function Ec(t){return xc.reset(),pc(t,bc),2*xc}function kc(t){return[Ga(t[1],t[0]),oc(t[2])]}function Tc(t){var n=t[0],e=t[1],r=$a(e);return[r*$a(n),r*tc(n),tc(e)]}function Nc(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Cc(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Pc(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Oc(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Rc(t){var n=ec(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Lc,zc,qc,Dc,Uc,Bc,jc,Fc,Ic,Yc,Hc,Xc,Vc,Wc,Gc,$c,Zc,Kc,Jc,Qc,ts,ns,es,rs,is,os,us=za(),as={point:cs,lineStart:ls,lineEnd:fs,polygonStart:function(){as.point=hs,as.lineStart=ps,as.lineEnd=ds,us.reset(),bc.polygonStart()},polygonEnd:function(){bc.polygonEnd(),as.point=cs,as.lineStart=ls,as.lineEnd=fs,mc<0?(Lc=-(qc=180),zc=-(Dc=90)):us>Ba?Dc=90:us<-1e-6&&(zc=-90),Yc[0]=Lc,Yc[1]=qc}};function cs(t,n){Ic.push(Yc=[Lc=t,qc=t]),n<zc&&(zc=n),n>Dc&&(Dc=n)}function ss(t,n){var e=Tc([t*Xa,n*Xa]);if(Fc){var r=Cc(Fc,e),i=Cc([r[1],-r[0],0],r);Rc(i),i=kc(i);var o,u=t-Uc,a=u>0?1:-1,c=i[0]*Ha*a,s=Va(u)>180;s^(a*Uc<c&&c<a*t)?(o=i[1]*Ha)>Dc&&(Dc=o):s^(a*Uc<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*Ha)<zc&&(zc=o):(n<zc&&(zc=n),n>Dc&&(Dc=n)),s?t<Uc?vs(Lc,t)>vs(Lc,qc)&&(qc=t):vs(t,qc)>vs(Lc,qc)&&(Lc=t):qc>=Lc?(t<Lc&&(Lc=t),t>qc&&(qc=t)):t>Uc?vs(Lc,t)>vs(Lc,qc)&&(qc=t):vs(t,qc)>vs(Lc,qc)&&(Lc=t)}else Ic.push(Yc=[Lc=t,qc=t]);n<zc&&(zc=n),n>Dc&&(Dc=n),Fc=e,Uc=t}function ls(){as.point=ss}function fs(){Yc[0]=Lc,Yc[1]=qc,as.point=cs,Fc=null}function hs(t,n){if(Fc){var e=t-Uc;us.add(Va(e)>180?e+(e>0?360:-360):e)}else Bc=t,jc=n;bc.point(t,n),ss(t,n)}function ps(){bc.lineStart()}function ds(){hs(Bc,jc),bc.lineEnd(),Va(us)>Ba&&(Lc=-(qc=180)),Yc[0]=Lc,Yc[1]=qc,Fc=null}function vs(t,n){return(n-=t)<0?n+360:n}function gs(t,n){return t[0]-n[0]}function ys(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function _s(t){var n,e,r,i,o,u,a;if(Dc=qc=-(Lc=zc=1/0),Ic=[],pc(t,as),e=Ic.length){for(Ic.sort(gs),n=1,o=[r=Ic[0]];n<e;++n)ys(r,(i=Ic[n])[0])||ys(r,i[1])?(vs(r[0],i[1])>vs(r[0],r[1])&&(r[1]=i[1]),vs(i[0],r[1])>vs(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=vs(r[1],i[0]))>u&&(u=a,Lc=i[0],qc=r[1])}return Ic=Yc=null,Lc===1/0||zc===1/0?[[NaN,NaN],[NaN,NaN]]:[[Lc,zc],[qc,Dc]]}var ms={sphere:ac,point:xs,lineStart:ws,lineEnd:As,polygonStart:function(){ms.lineStart=Es,ms.lineEnd=ks},polygonEnd:function(){ms.lineStart=ws,ms.lineEnd=As}};function xs(t,n){t*=Xa;var e=$a(n*=Xa);bs(e*$a(t),e*tc(t),tc(n))}function bs(t,n,e){++Hc,Vc+=(t-Vc)/Hc,Wc+=(n-Wc)/Hc,Gc+=(e-Gc)/Hc}function ws(){ms.point=Ms}function Ms(t,n){t*=Xa;var e=$a(n*=Xa);rs=e*$a(t),is=e*tc(t),os=tc(n),ms.point=Ss,bs(rs,is,os)}function Ss(t,n){t*=Xa;var e=$a(n*=Xa),r=e*$a(t),i=e*tc(t),o=tc(n),u=Ga(ec((u=is*o-os*i)*u+(u=os*r-rs*o)*u+(u=rs*i-is*r)*u),rs*r+is*i+os*o);Xc+=u,$c+=u*(rs+(rs=r)),Zc+=u*(is+(is=i)),Kc+=u*(os+(os=o)),bs(rs,is,os)}function As(){ms.point=xs}function Es(){ms.point=Ts}function ks(){Ns(ns,es),ms.point=xs}function Ts(t,n){ns=t,es=n,t*=Xa,n*=Xa,ms.point=Ns;var e=$a(n);rs=e*$a(t),is=e*tc(t),os=tc(n),bs(rs,is,os)}function Ns(t,n){t*=Xa;var e=$a(n*=Xa),r=e*$a(t),i=e*tc(t),o=tc(n),u=is*o-os*i,a=os*r-rs*o,c=rs*i-is*r,s=ec(u*u+a*a+c*c),l=oc(s),f=s&&-l/s;Jc+=f*u,Qc+=f*a,ts+=f*c,Xc+=l,$c+=l*(rs+(rs=r)),Zc+=l*(is+(is=i)),Kc+=l*(os+(os=o)),bs(rs,is,os)}function Cs(t){Hc=Xc=Vc=Wc=Gc=$c=Zc=Kc=Jc=Qc=ts=0,pc(t,ms);var n=Jc,e=Qc,r=ts,i=n*n+e*e+r*r;return i<1e-12&&(n=$c,e=Zc,r=Kc,Xc<Ba&&(n=Vc,e=Wc,r=Gc),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Ga(e,n)*Ha,oc(r/ec(i))*Ha]}function Ps(t){return function(){return t}}function Os(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Rs(t,n){return[t>ja?t-Ya:t<-ja?t+Ya:t,n]}function Ls(t,n,e){return(t%=Ya)?n||e?Os(qs(t),Ds(n,e)):qs(t):n||e?Ds(n,e):Rs}function zs(t){return function(n,e){return[(n+=t)>ja?n-Ya:n<-ja?n+Ya:n,e]}}function qs(t){var n=zs(t);return n.invert=zs(-t),n}function Ds(t,n){var e=$a(t),r=tc(t),i=$a(n),o=tc(n);function u(t,n){var u=$a(n),a=$a(t)*u,c=tc(t)*u,s=tc(n),l=s*e+a*r;return[Ga(c*i-l*o,a*e-s*r),oc(l*i+c*o)]}return u.invert=function(t,n){var u=$a(n),a=$a(t)*u,c=tc(t)*u,s=tc(n),l=s*i-c*o;return[Ga(c*i+s*o,a*e+l*r),oc(l*e-a*r)]},u}function Us(t){function n(n){return(n=t(n[0]*Xa,n[1]*Xa))[0]*=Ha,n[1]*=Ha,n}return t=Ls(t[0]*Xa,t[1]*Xa,t.length>2?t[2]*Xa:0),n.invert=function(n){return(n=t.invert(n[0]*Xa,n[1]*Xa))[0]*=Ha,n[1]*=Ha,n},n}function Bs(t,n,e,r,i,o){if(e){var u=$a(n),a=tc(n),c=r*e;null==i?(i=n+r*Ya,o=n-c/2):(i=js(u,i),o=js(u,o),(r>0?i<o:i>o)&&(i+=r*Ya));for(var s,l=i;r>0?l>o:l<o;l-=c)s=kc([u,-a*$a(l),-a*tc(l)]),t.point(s[0],s[1])}}function js(t,n){(n=Tc(n))[0]-=t,Rc(n);var e=ic(-n[1]);return((-n[2]<0?-e:e)+Ya-Ba)%Ya}function Fs(){var t,n,e=Ps([0,0]),r=Ps(90),i=Ps(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Ha,e[1]*=Ha}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*Xa,c=i.apply(this,arguments)*Xa;return t=[],n=Ls(-u[0]*Xa,-u[1]*Xa,0).invert,Bs(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:Ps([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:Ps(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:Ps(+t),u):i},u}function Is(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:ac,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Ys(t,n){return Va(t[0]-n[0])<Ba&&Va(t[1]-n[1])<Ba}function Hs(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Xs(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(Ys(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Hs(r,t,null,!0)),c.push(e.o=new Hs(r,null,e,!1)),a.push(e=new Hs(u,t,null,!1)),c.push(e.o=new Hs(u,null,e,!0))}})),a.length){for(c.sort(n),Vs(a),Vs(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var s,l,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((l=s[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((l=s[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}}function Vs(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}Rs.invert=Rs;var Ws=za();function Gs(t,n){var e=n[0],r=n[1],i=[tc(e),-$a(e),0],o=0,u=0;Ws.reset();for(var a=0,c=t.length;a<c;++a)if(l=(s=t[a]).length)for(var s,l,f=s[l-1],h=f[0],p=f[1]/2+Ia,d=tc(p),v=$a(p),g=0;g<l;++g,h=_,d=x,v=b,f=y){var y=s[g],_=y[0],m=y[1]/2+Ia,x=tc(m),b=$a(m),w=_-h,M=w>=0?1:-1,S=M*w,A=S>ja,E=d*x;if(Ws.add(Ga(E*M*tc(S),v*b+E*$a(S))),o+=A?w+M*Ya:w,A^h>=e^_>=e){var k=Cc(Tc(f),Tc(y));Rc(k);var T=Cc(i,k);Rc(T);var N=(A^w>=0?-1:1)*oc(T[2]);(r>N||r===N&&(k[0]||k[1]))&&(u+=A^w>=0?1:-1)}}return(o<-1e-6||o<Ba&&Ws<-1e-6)^1&u}function $s(t,n,e,r){return function(i){var o,u,a,c=n(i),s=Is(),l=n(s),f=!1,h={point:p,lineStart:v,lineEnd:g,polygonStart:function(){h.point=y,h.lineStart=_,h.lineEnd=m,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=v,h.lineEnd=g,u=U(u);var t=Gs(o,r);u.length?(f||(i.polygonStart(),f=!0),Xs(u,Ks,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function d(t,n){c.point(t,n)}function v(){h.point=d,c.lineStart()}function g(){h.point=p,c.lineEnd()}function y(t,n){a.push([t,n]),l.point(t,n)}function _(){l.lineStart(),a=[]}function m(){y(a[0][0],a[0][1]),l.lineEnd();var t,n,e,r,c=l.clean(),h=s.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Zs))}return h}}function Zs(t){return t.length>1}function Ks(t,n){return((t=t.x)[0]<0?t[1]-Fa-Ba:Fa-t[1])-((n=n.x)[0]<0?n[1]-Fa-Ba:Fa-n[1])}const Js=$s((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?ja:-ja,c=Va(o-e);Va(c-ja)<Ba?(t.point(e,r=(r+u)/2>0?Fa:-Fa),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=ja&&(Va(e-i)<Ba&&(e-=i*Ba),Va(o-a)<Ba&&(o-=a*Ba),r=function(t,n,e,r){var i,o,u=tc(t-e);return Va(u)>Ba?Wa((tc(n)*(o=$a(r))*tc(e)-tc(r)*(i=$a(n))*tc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*Fa,r.point(-ja,i),r.point(0,i),r.point(ja,i),r.point(ja,0),r.point(ja,-i),r.point(0,-i),r.point(-ja,-i),r.point(-ja,0),r.point(-ja,i);else if(Va(t[0]-n[0])>Ba){var o=t[0]<n[0]?ja:-ja;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-ja,-Fa]);function Qs(t){var n=$a(t),e=6*Xa,r=n>0,i=Va(n)>Ba;function o(t,e){return $a(t)*$a(e)>n}function u(t,e,r){var i=[1,0,0],o=Cc(Tc(t),Tc(e)),u=Nc(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var s=n*u/c,l=-n*a/c,f=Cc(i,o),h=Oc(i,s);Pc(h,Oc(o,l));var p=f,d=Nc(h,p),v=Nc(p,p),g=d*d-v*(Nc(h,h)-1);if(!(g<0)){var y=ec(g),_=Oc(p,(-d-y)/v);if(Pc(_,h),_=kc(_),!r)return _;var m,x=t[0],b=e[0],w=t[1],M=e[1];b<x&&(m=x,x=b,b=m);var S=b-x,A=Va(S-ja)<Ba;if(!A&&M<w&&(m=w,w=M,M=m),A||S<Ba?A?w+M>0^_[1]<(Va(_[0]-x)<Ba?w:M):w<=_[1]&&_[1]<=M:S>ja^(x<=_[0]&&_[0]<=b)){var E=Oc(p,(-d+y)/v);return Pc(E,h),[_,kc(E)]}}}function a(n,e){var i=r?t:ja-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return $s(o,(function(t){var n,e,c,s,l;return{lineStart:function(){s=c=!1,l=1},point:function(f,h){var p,d=[f,h],v=o(f,h),g=r?v?0:a(f,h):v?a(f+(f<0?ja:-ja),h):0;if(!n&&(s=c=v)&&t.lineStart(),v!==c&&(!(p=u(n,d))||Ys(n,p)||Ys(d,p))&&(d[0]+=Ba,d[1]+=Ba,v=o(d[0],d[1])),v!==c)l=0,v?(t.lineStart(),p=u(d,n),t.point(p[0],p[1])):(p=u(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(i&&n&&r^v){var y;g&e||!(y=u(d,n,!0))||(l=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||n&&Ys(n,d)||t.point(d[0],d[1]),n=d,c=v,e=g},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return l|(s&&c)<<1}}}),(function(n,r,i,o){Bs(o,t,e,i,n,r)}),r?[0,-t]:[-ja,t-ja])}var tl=1e9,nl=-tl;function el(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,s){var l=0,f=0;if(null==i||(l=u(i,a))!==(f=u(o,a))||c(i,o)<0^a>0)do{s.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else s.point(o[0],o[1])}function u(r,i){return Va(r[0]-t)<Ba?i>0?0:3:Va(r[0]-e)<Ba?i>0?2:1:Va(r[1]-n)<Ba?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,s,l,f,h,p,d,v,g,y,_,m=u,x=Is(),b={point:w,lineStart:function(){b.point=M,s&&s.push(l=[]),y=!0,g=!1,d=v=NaN},lineEnd:function(){c&&(M(f,h),p&&g&&x.rejoin(),c.push(x.result())),b.point=w,g&&m.lineEnd()},polygonStart:function(){m=x,c=[],s=[],_=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var o,u,a=s[e],c=1,l=a.length,f=a[0],h=f[0],p=f[1];c<l;++c)o=h,u=p,h=(f=a[c])[0],p=f[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=_&&n,i=(c=U(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&Xs(c,a,n,o,u),u.polygonEnd()),m=u,c=s=l=null}};function w(t,n){i(t,n)&&m.point(t,n)}function M(o,u){var a=i(o,u);if(s&&l.push([o,u]),y)f=o,h=u,p=a,y=!1,a&&(m.lineStart(),m.point(o,u));else if(a&&g)m.point(o,u);else{var c=[d=Math.max(nl,Math.min(tl,d)),v=Math.max(nl,Math.min(tl,v))],x=[o=Math.max(nl,Math.min(tl,o)),u=Math.max(nl,Math.min(tl,u))];!function(t,n,e,r,i,o){var u,a=t[0],c=t[1],s=0,l=1,f=n[0]-a,h=n[1]-c;if(u=e-a,f||!(u>0)){if(u/=f,f<0){if(u<s)return;u<l&&(l=u)}else if(f>0){if(u>l)return;u>s&&(s=u)}if(u=i-a,f||!(u<0)){if(u/=f,f<0){if(u>l)return;u>s&&(s=u)}else if(f>0){if(u<s)return;u<l&&(l=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<l&&(l=u)}else if(h>0){if(u>l)return;u>s&&(s=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>l)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<l&&(l=u)}return s>0&&(t[0]=a+s*f,t[1]=c+s*h),l<1&&(n[0]=a+l*f,n[1]=c+l*h),!0}}}}}(c,x,t,n,e,r)?a&&(m.lineStart(),m.point(o,u),_=!1):(g||(m.lineStart(),m.point(c[0],c[1])),m.point(x[0],x[1]),a||m.lineEnd(),_=!1)}d=o,v=u,g=a}return b}}function rl(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=el(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}}var il,ol,ul,al=za(),cl={sphere:ac,point:ac,lineStart:function(){cl.point=ll,cl.lineEnd=sl},lineEnd:ac,polygonStart:ac,polygonEnd:ac};function sl(){cl.point=cl.lineEnd=ac}function ll(t,n){il=t*=Xa,ol=tc(n*=Xa),ul=$a(n),cl.point=fl}function fl(t,n){t*=Xa;var e=tc(n*=Xa),r=$a(n),i=Va(t-il),o=$a(i),u=r*tc(i),a=ul*e-ol*r*o,c=ol*e+ul*r*o;al.add(Ga(ec(u*u+a*a),c)),il=t,ol=e,ul=r}function hl(t){return al.reset(),pc(t,cl),+al}var pl=[null,null],dl={type:"LineString",coordinates:pl};function vl(t,n){return pl[0]=t,pl[1]=n,hl(dl)}var gl={Feature:function(t,n){return _l(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(_l(e[r].geometry,n))return!0;return!1}},yl={Sphere:function(){return!0},Point:function(t,n){return ml(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ml(e[r],n))return!0;return!1},LineString:function(t,n){return xl(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(xl(e[r],n))return!0;return!1},Polygon:function(t,n){return bl(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(bl(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(_l(e[r],n))return!0;return!1}};function _l(t,n){return!(!t||!yl.hasOwnProperty(t.type))&&yl[t.type](t,n)}function ml(t,n){return 0===vl(t,n)}function xl(t,n){var e=vl(t[0],t[1]);return vl(t[0],n)+vl(n,t[1])<=e+Ba}function bl(t,n){return!!Gs(t.map(wl),Ml(n))}function wl(t){return(t=t.map(Ml)).pop(),t}function Ml(t){return[t[0]*Xa,t[1]*Xa]}function Sl(t,n){return(t&&gl.hasOwnProperty(t.type)?gl[t.type]:_l)(t,n)}function Al(t,n,e){var r=M(t,n-Ba,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function El(t,n,e){var r=M(t,n-Ba,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function kl(){var t,n,e,r,i,o,u,a,c,s,l,f,h=10,p=h,d=90,v=360,g=2.5;function y(){return{type:"MultiLineString",coordinates:_()}}function _(){return M(Za(r/d)*d,e,d).map(l).concat(M(Za(a/v)*v,u,v).map(f)).concat(M(Za(n/h)*h,t,h).filter((function(t){return Va(t%d)>Ba})).map(c)).concat(M(Za(o/p)*p,i,p).filter((function(t){return Va(t%v)>Ba})).map(s))}return y.lines=function(){return _().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(f(u).slice(1),l(e).reverse().slice(1),f(a).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),y.precision(g)):[[r,a],[e,u]]},y.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),y.precision(g)):[[n,o],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(d=+t[0],v=+t[1],y):[d,v]},y.stepMinor=function(t){return arguments.length?(h=+t[0],p=+t[1],y):[h,p]},y.precision=function(h){return arguments.length?(g=+h,c=Al(o,i,90),s=El(n,t,g),l=Al(a,u,90),f=El(r,e,g),y):g},y.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function Tl(){return kl()()}function Nl(t,n){var e=t[0]*Xa,r=t[1]*Xa,i=n[0]*Xa,o=n[1]*Xa,u=$a(r),a=tc(r),c=$a(o),s=tc(o),l=u*$a(e),f=u*tc(e),h=c*$a(i),p=c*tc(i),d=2*oc(ec(uc(o-r)+u*c*uc(i-e))),v=tc(d),g=d?function(t){var n=tc(t*=d)/v,e=tc(d-t)/v,r=e*l+n*h,i=e*f+n*p,o=e*a+n*s;return[Ga(i,r)*Ha,Ga(o,ec(r*r+i*i))*Ha]}:function(){return[e*Ha,r*Ha]};return g.distance=d,g}function Cl(t){return t}var Pl,Ol,Rl,Ll,zl=za(),ql=za(),Dl={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){Dl.lineStart=Ul,Dl.lineEnd=Fl},polygonEnd:function(){Dl.lineStart=Dl.lineEnd=Dl.point=ac,zl.add(Va(ql)),ql.reset()},result:function(){var t=zl/2;return zl.reset(),t}};function Ul(){Dl.point=Bl}function Bl(t,n){Dl.point=jl,Pl=Rl=t,Ol=Ll=n}function jl(t,n){ql.add(Ll*t-Rl*n),Rl=t,Ll=n}function Fl(){jl(Pl,Ol)}const Il=Dl;var Yl=1/0,Hl=Yl,Xl=-Yl,Vl=Xl;const Wl={point:function(t,n){t<Yl&&(Yl=t),t>Xl&&(Xl=t),n<Hl&&(Hl=n),n>Vl&&(Vl=n)},lineStart:ac,lineEnd:ac,polygonStart:ac,polygonEnd:ac,result:function(){var t=[[Yl,Hl],[Xl,Vl]];return Xl=Vl=-(Hl=Yl=1/0),t}};var Gl,$l,Zl,Kl,Jl=0,Ql=0,tf=0,nf=0,ef=0,rf=0,of=0,uf=0,af=0,cf={point:sf,lineStart:lf,lineEnd:pf,polygonStart:function(){cf.lineStart=df,cf.lineEnd=vf},polygonEnd:function(){cf.point=sf,cf.lineStart=lf,cf.lineEnd=pf},result:function(){var t=af?[of/af,uf/af]:rf?[nf/rf,ef/rf]:tf?[Jl/tf,Ql/tf]:[NaN,NaN];return Jl=Ql=tf=nf=ef=rf=of=uf=af=0,t}};function sf(t,n){Jl+=t,Ql+=n,++tf}function lf(){cf.point=ff}function ff(t,n){cf.point=hf,sf(Zl=t,Kl=n)}function hf(t,n){var e=t-Zl,r=n-Kl,i=ec(e*e+r*r);nf+=i*(Zl+t)/2,ef+=i*(Kl+n)/2,rf+=i,sf(Zl=t,Kl=n)}function pf(){cf.point=sf}function df(){cf.point=gf}function vf(){yf(Gl,$l)}function gf(t,n){cf.point=yf,sf(Gl=Zl=t,$l=Kl=n)}function yf(t,n){var e=t-Zl,r=n-Kl,i=ec(e*e+r*r);nf+=i*(Zl+t)/2,ef+=i*(Kl+n)/2,rf+=i,of+=(i=Kl*t-Zl*n)*(Zl+t),uf+=i*(Kl+n),af+=3*i,sf(Zl=t,Kl=n)}const _f=cf;function mf(t){this._context=t}mf.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ya)}},result:ac};var xf,bf,wf,Mf,Sf,Af=za(),Ef={point:ac,lineStart:function(){Ef.point=kf},lineEnd:function(){xf&&Tf(bf,wf),Ef.point=ac},polygonStart:function(){xf=!0},polygonEnd:function(){xf=null},result:function(){var t=+Af;return Af.reset(),t}};function kf(t,n){Ef.point=Tf,bf=Mf=t,wf=Sf=n}function Tf(t,n){Mf-=t,Sf-=n,Af.add(ec(Mf*Mf+Sf*Sf)),Mf=t,Sf=n}const Nf=Ef;function Cf(){this._string=[]}function Pf(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Of(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),pc(t,e(r))),r.result()}return o.area=function(t){return pc(t,e(Il)),Il.result()},o.measure=function(t){return pc(t,e(Nf)),Nf.result()},o.bounds=function(t){return pc(t,e(Wl)),Wl.result()},o.centroid=function(t){return pc(t,e(_f)),_f.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,Cl):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new Cf):new mf(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}function Rf(t){return{stream:Lf(t)}}function Lf(t){return function(n){var e=new zf;for(var r in t)e[r]=t[r];return e.stream=n,e}}function zf(){}function qf(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),pc(e,t.stream(Wl));var u=Wl.result(),a=Math.min(r/(u[1][0]-u[0][0]),i/(u[1][1]-u[0][1])),c=+n[0][0]+(r-a*(u[1][0]+u[0][0]))/2,s=+n[0][1]+(i-a*(u[1][1]+u[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*a).translate([c,s])}function Df(t,n,e){return qf(t,[[0,0],n],e)}Cf.prototype={_radius:4.5,_circle:Pf(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Pf(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},zf.prototype={constructor:zf,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Uf=$a(30*Xa);function Bf(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,s,l,f,h,p,d,v,g){var y=s-r,_=l-i,m=y*y+_*_;if(m>4*n&&v--){var x=u+h,b=a+p,w=c+d,M=ec(x*x+b*b+w*w),S=oc(w/=M),A=Va(Va(w)-1)<Ba||Va(o-f)<Ba?(o+f)/2:Ga(b,x),E=t(A,S),k=E[0],T=E[1],N=k-r,C=T-i,P=_*N-y*C;(P*P/m>n||Va((y*N+_*C)/m-.5)>.3||u*h+a*p+c*d<Uf)&&(e(r,i,o,u,a,c,k,T,A,x/=M,b/=M,w,v,g),g.point(k,T),e(k,T,A,x,b,w,s,l,f,h,p,d,v,g))}}return function(n){var r,i,o,u,a,c,s,l,f,h,p,d,v={point:g,lineStart:y,lineEnd:m,polygonStart:function(){n.polygonStart(),v.lineStart=x},polygonEnd:function(){n.polygonEnd(),v.lineStart=y}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){l=NaN,v.point=_,n.lineStart()}function _(r,i){var o=Tc([r,i]),u=t(r,i);e(l,f,s,h,p,d,l=u[0],f=u[1],s=r,h=o[0],p=o[1],d=o[2],16,n),n.point(l,f)}function m(){v.point=g,n.lineEnd()}function x(){y(),v.point=b,v.lineEnd=w}function b(t,n){_(r=t,n),i=l,o=f,u=h,a=p,c=d,v.point=_}function w(){e(l,f,s,h,p,d,i,o,r,u,a,c,16,n),v.lineEnd=m,m()}return v}}(t,n):function(t){return Lf({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var jf=Lf({point:function(t,n){this.stream.point(t*Xa,n*Xa)}});function Ff(t){return If((function(){return t}))()}function If(t){var n,e,r,i,o,u,a,c,s,l,f=150,h=480,p=250,d=0,v=0,g=0,y=0,_=0,m=null,x=Js,b=null,w=Cl,M=.5,S=Bf(k,M);function A(t){return[(t=o(t[0]*Xa,t[1]*Xa))[0]*f+e,r-t[1]*f]}function E(t){return(t=o.invert((t[0]-e)/f,(r-t[1])/f))&&[t[0]*Ha,t[1]*Ha]}function k(t,i){return[(t=n(t,i))[0]*f+e,r-t[1]*f]}function T(){o=Os(i=Ls(g,y,_),n);var t=n(d,v);return e=h-t[0]*f,r=p+t[1]*f,N()}function N(){return s=l=null,A}return A.stream=function(t){return s&&l===t?s:s=jf(function(t){return Lf({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(i)(x(S(w(l=t)))))},A.preclip=function(t){return arguments.length?(x=t,m=void 0,N()):x},A.postclip=function(t){return arguments.length?(w=t,b=u=a=c=null,N()):w},A.clipAngle=function(t){return arguments.length?(x=+t?Qs(m=t*Xa):(m=null,Js),N()):m*Ha},A.clipExtent=function(t){return arguments.length?(w=null==t?(b=u=a=c=null,Cl):el(b=+t[0][0],u=+t[0][1],a=+t[1][0],c=+t[1][1]),N()):null==b?null:[[b,u],[a,c]]},A.scale=function(t){return arguments.length?(f=+t,T()):f},A.translate=function(t){return arguments.length?(h=+t[0],p=+t[1],T()):[h,p]},A.center=function(t){return arguments.length?(d=t[0]%360*Xa,v=t[1]%360*Xa,T()):[d*Ha,v*Ha]},A.rotate=function(t){return arguments.length?(g=t[0]%360*Xa,y=t[1]%360*Xa,_=t.length>2?t[2]%360*Xa:0,T()):[g*Ha,y*Ha,_*Ha]},A.precision=function(t){return arguments.length?(S=Bf(k,M=t*t),N()):ec(M)},A.fitExtent=function(t,n){return qf(A,t,n)},A.fitSize=function(t,n){return Df(A,t,n)},function(){return n=t.apply(this,arguments),A.invert=n.invert&&E,T()}}function Yf(t){var n=0,e=ja/3,r=If(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Xa,e=t[1]*Xa):[n*Ha,e*Ha]},i}function Hf(t,n){var e=tc(t),r=(e+tc(n))/2;if(Va(r)<Ba)return function(t){var n=$a(t);function e(t,e){return[t*n,tc(e)/n]}return e.invert=function(t,e){return[t/n,oc(e*n)]},e}(t);var i=1+e*(2*r-e),o=ec(i)/r;function u(t,n){var e=ec(i-2*r*tc(n))/r;return[e*tc(t*=r),o-e*$a(t)]}return u.invert=function(t,n){var e=o-n;return[Ga(t,Va(e))/r*nc(e),oc((i-(t*t+e*e)*r*r)/(2*r))]},u}function Xf(){return Yf(Hf).scale(155.424).center([0,33.6442])}function Vf(){return Xf().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Wf(){var t,n,e,r,i,o,u=Vf(),a=Xf().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Xf().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){o=[t,n]}};function l(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function f(){return t=n=null,l}return l.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},l.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},l.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),f()):u.precision()},l.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),l.translate(u.translate())):u.scale()},l.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],l=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,l-.238*n],[o+.455*n,l+.238*n]]).stream(s),r=a.translate([o-.307*n,l+.201*n]).clipExtent([[o-.425*n+Ba,l+.12*n+Ba],[o-.214*n-Ba,l+.234*n-Ba]]).stream(s),i=c.translate([o-.205*n,l+.212*n]).clipExtent([[o-.214*n+Ba,l+.166*n+Ba],[o-.115*n-Ba,l+.234*n-Ba]]).stream(s),f()},l.fitExtent=function(t,n){return qf(l,t,n)},l.fitSize=function(t,n){return Df(l,t,n)},l.scale(1070)}function Gf(t){return function(n,e){var r=$a(n),i=$a(e),o=t(r*i);return[o*i*tc(n),o*tc(e)]}}function $f(t){return function(n,e){var r=ec(n*n+e*e),i=t(r),o=tc(i),u=$a(i);return[Ga(n*o,r*u),oc(r&&e*o/r)]}}var Zf=Gf((function(t){return ec(2/(1+t))}));function Kf(){return Ff(Zf).scale(124.75).clipAngle(179.999)}Zf.invert=$f((function(t){return 2*oc(t/2)}));var Jf=Gf((function(t){return(t=ic(t))&&t/tc(t)}));function Qf(){return Ff(Jf).scale(79.4188).clipAngle(179.999)}function th(t,n){return[t,Ja(rc((Fa+n)/2))]}function nh(){return eh(th).scale(961/Ya)}function eh(t){var n,e,r,i=Ff(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,s=null;function l(){var o=ja*u(),a=i(Us(i.rotate()).invert([0,0]));return c(null==s?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===th?[[Math.max(a[0]-o,s),n],[Math.min(a[0]+o,e),r]]:[[s,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),l()):u()},i.translate=function(t){return arguments.length?(a(t),l()):a()},i.center=function(t){return arguments.length?(o(t),l()):o()},i.clipExtent=function(t){return arguments.length?(null==t?s=n=e=r=null:(s=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),l()):null==s?null:[[s,n],[e,r]]},l()}function rh(t){return rc((Fa+t)/2)}function ih(t,n){var e=$a(t),r=t===n?tc(t):Ja(e/$a(n))/Ja(rh(n)/rh(t)),i=e*Qa(rh(t),r)/r;if(!r)return th;function o(t,n){i>0?n<-Fa+Ba&&(n=-Fa+Ba):n>Fa-Ba&&(n=Fa-Ba);var e=i/Qa(rh(n),r);return[e*tc(r*t),i-e*$a(r*t)]}return o.invert=function(t,n){var e=i-n,o=nc(r)*ec(t*t+e*e);return[Ga(t,Va(e))/r*nc(e),2*Wa(Qa(i/o,1/r))-Fa]},o}function oh(){return Yf(ih).scale(109.5).parallels([30,30])}function uh(t,n){return[t,n]}function ah(){return Ff(uh).scale(152.63)}function ch(t,n){var e=$a(t),r=t===n?tc(t):(e-$a(n))/(n-t),i=e/r+t;if(Va(r)<Ba)return uh;function o(t,n){var e=i-n,o=r*t;return[e*tc(o),i-e*$a(o)]}return o.invert=function(t,n){var e=i-n;return[Ga(t,Va(e))/r*nc(e),i-nc(r)*ec(t*t+e*e)]},o}function sh(){return Yf(ch).scale(131.154).center([0,13.9389])}function lh(t,n){var e=$a(n),r=$a(t)*e;return[e*tc(t)/r,tc(n)/r]}function fh(){return Ff(lh).scale(144.049).clipAngle(60)}function hh(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Cl:Lf({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}function ph(){var t,n,e,r,i,o,u=1,a=0,c=0,s=1,l=1,f=Cl,h=null,p=Cl;function d(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=f(p(i=t))},postclip:function(r){return arguments.length?(p=r,h=t=n=e=null,d()):p},clipExtent:function(r){return arguments.length?(p=null==r?(h=t=n=e=null,Cl):el(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),d()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(f=hh((u=+t)*s,u*l,a,c),d()):u},translate:function(t){return arguments.length?(f=hh(u*s,u*l,a=+t[0],c=+t[1]),d()):[a,c]},reflectX:function(t){return arguments.length?(f=hh(u*(s=t?-1:1),u*l,a,c),d()):s<0},reflectY:function(t){return arguments.length?(f=hh(u*s,u*(l=t?-1:1),a,c),d()):l<0},fitExtent:function(t,n){return qf(o,t,n)},fitSize:function(t,n){return Df(o,t,n)}}}function dh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function vh(){return Ff(dh).scale(175.295)}function gh(t,n){return[$a(n)*tc(t),tc(n)]}function yh(){return Ff(gh).scale(249.5).clipAngle(90.000001)}function _h(t,n){var e=$a(n),r=1+$a(t)*e;return[e*tc(t)/r,tc(n)/r]}function mh(){return Ff(_h).scale(250).clipAngle(142)}function xh(t,n){return[Ja(rc((Fa+n)/2)),-t]}function bh(){var t=eh(xh),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function wh(t,n){return t.parent===n.parent?1:2}function Mh(t,n){return t+n.x}function Sh(t,n){return Math.max(t,n.y)}function Ah(){var t=wh,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Mh,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Sh,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),s=a.x-t(a,c)/2,l=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-s)/(l-s)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Eh(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function kh(t,n){var e,r,i,o,u,a=new Ph(t),c=+t.value&&(a.value=t.value),s=[a];for(null==n&&(n=Th);e=s.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)s.push(r=e.children[o]=new Ph(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Ch)}function Th(t){return t.children}function Nh(t){t.data=t.data.data}function Ch(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Ph(t){this.data=t,this.depth=this.height=0,this.parent=null}Jf.invert=$f((function(t){return t})),th.invert=function(t,n){return[t,2*Wa(Ka(n))-Fa]},uh.invert=uh,lh.invert=$f(Wa),dh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(Va(e)>Ba&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},gh.invert=$f(oc),_h.invert=$f((function(t){return 2*Wa(t)})),xh.invert=function(t,n){return[-n,2*Wa(Ka(t))-Fa]},Ph.prototype=kh.prototype={constructor:Ph,count:function(){return this.eachAfter(Eh)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return kh(this).eachBefore(Nh)}};var Oh=Array.prototype.slice;function Rh(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Oh.call(t))).length,o=[];r<i;)n=t[r],e&&qh(e,n)?++r:(e=Uh(o=Lh(o,n)),r=0);return e}function Lh(t,n){var e,r;if(Dh(n,t))return[n];for(e=0;e<t.length;++e)if(zh(n,t[e])&&Dh(Bh(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(zh(Bh(t[e],t[r]),n)&&zh(Bh(t[e],n),t[r])&&zh(Bh(t[r],n),t[e])&&Dh(jh(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function zh(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function qh(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Dh(t,n){for(var e=0;e<n.length;++e)if(!qh(t,n[e]))return!1;return!0}function Uh(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Bh(t[0],t[1]);case 3:return jh(t[0],t[1],t[2])}}function Bh(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,s=u-r,l=a-i,f=Math.sqrt(c*c+s*s);return{x:(e+o+c/f*l)/2,y:(r+u+s/f*l)/2,r:(f+i+a)/2}}function jh(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,s=e.x,l=e.y,f=e.r,h=r-u,p=r-s,d=i-a,v=i-l,g=c-o,y=f-o,_=r*r+i*i-o*o,m=_-u*u-a*a+c*c,x=_-s*s-l*l+f*f,b=p*d-h*v,w=(d*x-v*m)/(2*b)-r,M=(v*g-d*y)/b,S=(p*m-h*x)/(2*b)-i,A=(h*y-p*g)/b,E=M*M+A*A-1,k=2*(o+w*M+S*A),T=w*w+S*S-o*o,N=-(E?(k+Math.sqrt(k*k-4*E*T))/(2*E):T/k);return{x:r+w+M*N,y:i+S+A*N,r:N}}function Fh(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,u=t.r+e.r,a=n.x-r,c=n.y-i,s=a*a+c*c;if(s){var l=.5+((u*=u)-(o*=o))/(2*s),f=Math.sqrt(Math.max(0,2*o*(u+s)-(u-=s)*u-o*o))/(2*s);e.x=r+l*a+f*c,e.y=i+l*c-f*a}else e.x=r+u,e.y=i}function Ih(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function Yh(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Hh(t){this._=t,this.next=null,this.previous=null}function Xh(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,s,l,f;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Fh(e,n,r=t[2]),n=new Hh(n),e=new Hh(e),r=new Hh(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Fh(n._,e._,r=t[a]),r=new Hh(r),c=e.next,s=n.previous,l=e._.r,f=n._.r;do{if(l<=f){if(Ih(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}l+=c._.r,c=c.next}else{if(Ih(s._,r._)){(n=s).next=e,e.previous=n,--a;continue t}f+=s._.r,s=s.previous}}while(c!==s.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Yh(n);(r=r.next)!==e;)(u=Yh(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=Rh(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}function Vh(t){return Xh(t),t}function Wh(t){return null==t?null:Gh(t)}function Gh(t){if("function"!=typeof t)throw new Error;return t}function $h(){return 0}function Zh(t){return function(){return t}}function Kh(t){return Math.sqrt(t.value)}function Jh(){var t=null,n=1,e=1,r=$h;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Qh(t)).eachAfter(tp(r,.5)).eachBefore(np(1)):i.eachBefore(Qh(Kh)).eachAfter(tp($h,1)).eachAfter(tp(r,i.r/Math.min(n,e))).eachBefore(np(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Wh(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Zh(+t),i):r},i}function Qh(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function tp(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Xh(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function np(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function ep(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function rp(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*s}function ip(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&rp(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(ep),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var op={depth:-1},up={};function ap(t){return t.id}function cp(t){return t.parentId}function sp(){var t=ap,n=cp;function e(e){var r,i,o,u,a,c,s,l=e.length,f=new Array(l),h={};for(i=0;i<l;++i)r=e[i],a=f[i]=new Ph(r),null!=(c=t(r,i,e))&&(c+="")&&(h[s="$"+(a.id=c)]=s in h?up:a);for(i=0;i<l;++i)if(a=f[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h["$"+c]))throw new Error("missing: "+c);if(u===up)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=op,o.eachBefore((function(t){t.depth=t.parent.depth+1,--l})).eachBefore(Ch),o.parent=null,l>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Gh(n),e):t},e.parentId=function(t){return arguments.length?(n=Gh(t),e):n},e}function lp(t,n){return t.parent===n.parent?1:2}function fp(t){var n=t.children;return n?n[0]:t.t}function hp(t){var n=t.children;return n?n[n.length-1]:t.t}function pp(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function dp(t,n,e){return t.a.parent===n.parent?t.a:e}function vp(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function gp(){var t=lp,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new vp(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new vp(r[i],i)),e.parent=n;return(u.parent=new vp(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var s=i,l=i,f=i;i.eachBefore((function(t){t.x<s.x&&(s=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)}));var h=s===l?1:t(s,l)/2,p=h-s.x,d=n/(l.x+h+p),v=e/(f.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*v}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],s=o.m,l=u.m,f=a.m,h=c.m;a=hp(a),o=fp(o),a&&o;)c=fp(c),(u=hp(u)).a=n,(i=a.z+f-o.z-s+t(a._,o._))>0&&(pp(dp(a,n,r),n,i),s+=i,l+=i),f+=a.m,s+=o.m,h+=c.m,l+=u.m;a&&!hp(u)&&(u.t=a,u.m+=f-l),o&&!fp(c)&&(c.t=o,c.m+=s-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function yp(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*s}vp.prototype=Object.create(Ph.prototype);var _p=(1+Math.sqrt(5))/2;function mp(t,n,e,r,i,o){for(var u,a,c,s,l,f,h,p,d,v,g,y=[],_=n.children,m=0,x=0,b=_.length,w=n.value;m<b;){c=i-e,s=o-r;do{l=_[x++].value}while(!l&&x<b);for(f=h=l,g=l*l*(v=Math.max(s/c,c/s)/(w*t)),d=Math.max(h/g,g/f);x<b;++x){if(l+=a=_[x].value,a<f&&(f=a),a>h&&(h=a),g=l*l*v,(p=Math.max(h/g,g/f))>d){l-=a;break}d=p}y.push(u={value:l,dice:c<s,children:_.slice(m,x)}),u.dice?rp(u,e,r,i,w?r+=s*l/w:o):yp(u,e,r,w?e+=c*l/w:i,o),w-=l,m=x}return y}const xp=function t(n){function e(t,e,r,i,o){mp(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(_p);function bp(){var t=xp,n=!1,e=1,r=1,i=[0],o=$h,u=$h,a=$h,c=$h,s=$h;function l(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(f),i=[0],n&&t.eachBefore(ep),t}function f(n){var e=i[n.depth],r=n.x0+e,l=n.y0+e,f=n.x1-e,h=n.y1-e;f<r&&(r=f=(r+f)/2),h<l&&(l=h=(l+h)/2),n.x0=r,n.y0=l,n.x1=f,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=s(n)-e,l+=u(n)-e,(f-=a(n)-e)<r&&(r=f=(r+f)/2),(h-=c(n)-e)<l&&(l=h=(l+h)/2),t(n,r,l,f,h))}return l.round=function(t){return arguments.length?(n=!!t,l):n},l.size=function(t){return arguments.length?(e=+t[0],r=+t[1],l):[e,r]},l.tile=function(n){return arguments.length?(t=Gh(n),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Zh(+t),l):o},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Zh(+t),l):u},l.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Zh(+t),l):a},l.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Zh(+t),l):c},l.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:Zh(+t),l):s},l}function wp(t,n,e,r,i){var o,u,a=t.children,c=a.length,s=new Array(c+1);for(s[0]=u=o=0;o<c;++o)s[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var l=a[n];return l.x0=i,l.y0=o,l.x1=u,void(l.y1=c)}for(var f=s[n],h=r/2+f,p=n+1,d=e-1;p<d;){var v=p+d>>>1;s[v]<h?p=v+1:d=v}h-s[p-1]<s[p]-h&&n+1<p&&--p;var g=s[p]-f,y=r-g;if(u-i>c-o){var _=(i*y+u*g)/r;t(n,p,g,i,o,_,c),t(p,e,y,_,o,u,c)}else{var m=(o*y+c*g)/r;t(n,p,g,i,o,u,m),t(p,e,y,i,m,u,c)}}(0,c,t.value,n,e,r,i)}function Mp(t,n,e,r,i){(1&t.depth?yp:rp)(t,n,e,r,i)}const Sp=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,s,l,f=-1,h=u.length,p=t.value;++f<h;){for(c=(a=u[f]).children,s=a.value=0,l=c.length;s<l;++s)a.value+=c[s].value;a.dice?rp(a,e,r,i,r+=(o-r)*a.value/p):yp(a,e,r,e+=(i-e)*a.value/p,o),p-=a.value}else t._squarify=u=mp(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(_p);function Ap(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function Ep(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]}function kp(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Tp(t,n){return t[0]-n[0]||t[1]-n[1]}function Np(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&kp(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function Cp(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Tp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Np(r),u=Np(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],s=[];for(n=o.length-1;n>=0;--n)s.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)s.push(t[r[u[n]][2]]);return s}function Pp(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],s=o[1],l=!1,f=0;f<i;++f)e=(o=t[f])[0],(r=o[1])>a!=s>a&&u<(c-e)*(a-r)/(s-r)+e&&(l=!l),c=e,s=r;return l}function Op(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c}var Rp=[].slice,Lp={};function zp(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function qp(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Dp(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||Lp)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])Up(t,n);else if(!t._data)throw n}}function Dp(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?Up(t,e):(t._data[n]=r,t._waiting?qp(t):Bp(t))))}}function Up(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Bp(t)}function Bp(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function jp(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new zp(t)}function Fp(){return Math.random()}zp.prototype=jp.prototype={constructor:zp,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Rp.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),qp(this),this},abort:function(){return null==this._error&&Up(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},Bp(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Bp(this),this}};const Ip=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Fp),Yp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Fp),Hp=function t(n){function e(){var t=Yp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Fp),Xp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Fp),Vp=function t(n){function e(t){var e=Xp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Fp),Wp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Fp);function Gp(t,n){var e,r,i,o,u=ht("beforesend","progress","load","error"),a=mu(),c=new XMLHttpRequest,s=null,l=null,f=0;function h(t){var n,r=c.status;if(!r&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(c)||r>=200&&r<300||304===r){if(i)try{n=i.call(e,c)}catch(t){return void u.call("error",e,t)}else n=c;u.call("load",e,n)}else u.call("error",e,t)}if("undefined"!=typeof XDomainRequest&&!("withCredentials"in c)&&/^(http(s)?:)?\/\//.test(t)&&(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=h:c.onreadystatechange=function(t){c.readyState>3&&h(t)},c.onprogress=function(t){u.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?a.get(t):(null==n?a.remove(t):a.set(t,n+""),e)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",e):r},responseType:function(t){return arguments.length?(o=t,e):o},timeout:function(t){return arguments.length?(f=+t,e):f},user:function(t){return arguments.length<1?s:(s=null==t?null:t+"",e)},password:function(t){return arguments.length<1?l:(l=null==t?null:t+"",e)},response:function(t){return i=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,i,h){return c.open(n,t,!0,s,l),null==r||a.has("accept")||a.set("accept",r+",*/*"),c.setRequestHeader&&a.each((function(t,n){c.setRequestHeader(n,t)})),null!=r&&c.overrideMimeType&&c.overrideMimeType(r),null!=o&&(c.responseType=o),f>0&&(c.timeout=f),null==h&&"function"==typeof i&&(h=i,i=null),null!=h&&1===h.length&&(h=function(t){return function(n,e){t(null==n?e:null)}}(h)),null!=h&&e.on("error",h).on("load",(function(t){h(null,t)})),u.call("beforesend",e,c),c.send(null==i?null:i),e},abort:function(){return c.abort(),e},on:function(){var t=u.on.apply(u,arguments);return t===u?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e}function $p(t,n){return function(e,r){var i=Gp(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}}const Zp=$p("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),Kp=$p("application/json",(function(t){return JSON.parse(t.responseText)})),Jp=$p("text/plain",(function(t){return t.responseText})),Qp=$p("application/xml",(function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}));function td(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var o=Gp(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(nd(n,r=t)):r},o.row(r),i?o.get(i):o}}function nd(t,n){return function(e){return t(e.responseText,n)}}const ed=td("text/csv",Du),rd=td("text/tab-separated-values",Iu);var id=Array.prototype,od=id.map,ud=id.slice,ad={name:"implicit"};function cd(t){var n=mu(),e=[],r=ad;function i(i){var o=i+"",u=n.get(o);if(!u){if(r!==ad)return r;n.set(o,u=e.push(i))}return t[(u-1)%t.length]}return t=null==t?[]:ud.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=mu();for(var r,o,u=-1,a=t.length;++u<a;)n.has(o=(r=t[u])+"")||n.set(o,e.push(r));return i},i.range=function(n){return arguments.length?(t=ud.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return cd().domain(e).range(t).unknown(r)},i}function sd(){var t,n,e=cd().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,s=.5;function l(){var e=r().length,l=o[1]<o[0],f=o[l-0],h=o[1-l];t=(h-f)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),f+=(h-f-t*(e-a))*s,n=t*(1-a),u&&(f=Math.round(f),n=Math.round(n));var p=M(e).map((function(n){return f+t*n}));return i(l?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],l()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,l()):u},e.padding=function(t){return arguments.length?(a=c=Math.max(0,Math.min(1,t)),l()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),l()):a},e.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},e.copy=function(){return sd().domain(r()).range(o).round(u).paddingInner(a).paddingOuter(c).align(s)},l()}function ld(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return ld(n())},t}function fd(){return ld(sd().paddingInner(1))}function hd(t){return function(){return t}}function pd(t){return+t}var dd=[0,1];function vd(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:hd(n)}function gd(t,n,e,r){var i=t[0],o=t[1],u=n[0],a=n[1];return o<i?(i=e(o,i),u=r(a,u)):(i=e(i,o),u=r(u,a)),function(t){return u(i(t))}}function yd(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<i;)o[a]=e(t[a],t[a+1]),u[a]=r(n[a],n[a+1]);return function(n){var e=s(t,n,1,i)-1;return u[e](o[e](n))}}function _d(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function md(t,n){var e,r,i,o=dd,u=dd,a=pr,c=!1;function s(){return e=Math.min(o.length,u.length)>2?yd:gd,r=i=null,l}function l(n){return(r||(r=e(o,u,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return l.invert=function(t){return(i||(i=e(u,o,vd,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},l.domain=function(t){return arguments.length?(o=od.call(t,pd),s()):o.slice()},l.range=function(t){return arguments.length?(u=ud.call(t),s()):u.slice()},l.rangeRound=function(t){return u=ud.call(t),a=dr,s()},l.clamp=function(t){return arguments.length?(c=!!t,s()):c},l.interpolate=function(t){return arguments.length?(a=t,s()):a},s()}function xd(t){var n=t.domain;return t.ticks=function(t){var e=n();return k(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return function(t,n,e){var r,i=t[0],o=t[t.length-1],u=N(i,o,null==n?10:n);switch((e=Ma(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=Ra(u,a))||(e.precision=r),Ta(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=La(u,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Oa(u))||(e.precision=r-2*("%"===e.type))}return ka(e)}(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=T(a,c,e))>0?r=T(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=T(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function bd(){var t=md(vd,cr);return t.copy=function(){return _d(t,bd())},xd(t)}function wd(){var t=[0,1];function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=od.call(e,pd),n):t.slice()},n.copy=function(){return wd().domain(t)},xd(n)}function Md(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t}function Sd(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:hd(n)}function Ad(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Ed(t){return isFinite(t)?+("1e"+t):t<0?0:t}function kd(t){return 10===t?Ed:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function Td(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Nd(t){return function(n){return-t(-n)}}function Cd(){var t=md(Sd,Ad).domain([1,10]),n=t.domain,e=10,r=Td(10),i=kd(10);function o(){return r=Td(e),i=kd(e),n()[0]<0&&(r=Nd(r),i=Nd(i)),t}return t.base=function(t){return arguments.length?(e=+t,o()):e},t.domain=function(t){return arguments.length?(n(t),o()):n()},t.ticks=function(t){var o,u=n(),a=u[0],c=u[u.length-1];(o=c<a)&&(h=a,a=c,c=h);var s,l,f,h=r(a),p=r(c),d=null==t?10:+t,v=[];if(!(e%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(l=1,s=i(h);l<e;++l)if(!((f=s*l)<a)){if(f>c)break;v.push(f)}}else for(;h<p;++h)for(l=e-1,s=i(h);l>=1;--l)if(!((f=s*l)<a)){if(f>c)break;v.push(f)}}else v=k(h,p,Math.min(p-h,d)).map(i);return o?v.reverse():v},t.tickFormat=function(n,o){if(null==o&&(o=10===e?".0e":","),"function"!=typeof o&&(o=ka(o)),n===1/0)return o;null==n&&(n=10);var u=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/i(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=u?o(t):""}},t.nice=function(){return n(Md(n(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return _d(t,Cd().base(e))},t}function Pd(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Od(){var t=1,n=md((function(n,e){return(e=Pd(e,t)-(n=Pd(n,t)))?function(r){return(Pd(r,t)-n)/e}:hd(e)}),(function(n,e){return e=Pd(e,t)-(n=Pd(n,t)),function(r){return Pd(n+e*r,1/t)}})),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return _d(n,Od().exponent(t))},xd(n)}function Rd(){return Od().exponent(.5)}function Ld(){var t=[],n=[],e=[];function r(){var r=0,i=Math.max(1,n.length);for(e=new Array(i-1);++r<i;)e[r-1]=O(t,r/i);return o}function o(t){if(!isNaN(t=+t))return n[s(e,t)]}return o.invertExtent=function(r){var i=n.indexOf(r);return i<0?[NaN,NaN]:[i>0?e[i-1]:t[0],i<e.length?e[i]:t[t.length-1]]},o.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var e,o=0,u=n.length;o<u;++o)null==(e=n[o])||isNaN(e=+e)||t.push(e);return t.sort(i),r()},o.range=function(t){return arguments.length?(n=ud.call(t),r()):n.slice()},o.quantiles=function(){return e.slice()},o.copy=function(){return Ld().domain(t).range(n)},o}function zd(){var t=0,n=1,e=1,r=[.5],i=[0,1];function o(t){if(t<=t)return i[s(r,t,0,e)]}function u(){var i=-1;for(r=new Array(e);++i<e;)r[i]=((i+1)*n-(i-e)*t)/(e+1);return o}return o.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],u()):[t,n]},o.range=function(t){return arguments.length?(e=(i=ud.call(t)).length-1,u()):i.slice()},o.invertExtent=function(o){var u=i.indexOf(o);return u<0?[NaN,NaN]:u<1?[t,r[0]]:u>=e?[r[e-1],n]:[r[u-1],r[u]]},o.copy=function(){return zd().domain([t,n]).range(i)},xd(o)}function qd(){var t=[.5],n=[0,1],e=1;function r(r){if(r<=r)return n[s(t,r,0,e)]}return r.domain=function(i){return arguments.length?(t=ud.call(i),e=Math.min(t.length,n.length-1),r):t.slice()},r.range=function(i){return arguments.length?(n=ud.call(i),e=Math.min(t.length,n.length-1),r):n.slice()},r.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},r.copy=function(){return qd().domain(t).range(n)},r}var Dd=new Date,Ud=new Date;function Bd(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(new Date(+e))}while(n(e,o),t(e),e<r);return u},i.filter=function(e){return Bd((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Dd.setTime(+n),Ud.setTime(+r),t(Dd),t(Ud),Math.floor(e(Dd,Ud))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var jd=Bd((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));jd.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Bd((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):jd:null};const Fd=jd;var Id=jd.range,Yd=1e3,Hd=6e4,Xd=36e5,Vd=864e5,Wd=6048e5,Gd=Bd((function(t){t.setTime(Math.floor(t/Yd)*Yd)}),(function(t,n){t.setTime(+t+n*Yd)}),(function(t,n){return(n-t)/Yd}),(function(t){return t.getUTCSeconds()}));const $d=Gd;var Zd=Gd.range,Kd=Bd((function(t){t.setTime(Math.floor(t/Hd)*Hd)}),(function(t,n){t.setTime(+t+n*Hd)}),(function(t,n){return(n-t)/Hd}),(function(t){return t.getMinutes()}));const Jd=Kd;var Qd=Kd.range,tv=Bd((function(t){var n=t.getTimezoneOffset()*Hd%Xd;n<0&&(n+=Xd),t.setTime(Math.floor((+t-n)/Xd)*Xd+n)}),(function(t,n){t.setTime(+t+n*Xd)}),(function(t,n){return(n-t)/Xd}),(function(t){return t.getHours()}));const nv=tv;var ev=tv.range,rv=Bd((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Hd)/Vd}),(function(t){return t.getDate()-1}));const iv=rv;var ov=rv.range;function uv(t){return Bd((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Hd)/Wd}))}var av=uv(0),cv=uv(1),sv=uv(2),lv=uv(3),fv=uv(4),hv=uv(5),pv=uv(6),dv=av.range,vv=cv.range,gv=sv.range,yv=lv.range,_v=fv.range,mv=hv.range,xv=pv.range,bv=Bd((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const wv=bv;var Mv=bv.range,Sv=Bd((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Sv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bd((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const Av=Sv;var Ev=Sv.range,kv=Bd((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*Hd)}),(function(t,n){return(n-t)/Hd}),(function(t){return t.getUTCMinutes()}));const Tv=kv;var Nv=kv.range,Cv=Bd((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*Xd)}),(function(t,n){return(n-t)/Xd}),(function(t){return t.getUTCHours()}));const Pv=Cv;var Ov=Cv.range,Rv=Bd((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/Vd}),(function(t){return t.getUTCDate()-1}));const Lv=Rv;var zv=Rv.range;function qv(t){return Bd((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/Wd}))}var Dv=qv(0),Uv=qv(1),Bv=qv(2),jv=qv(3),Fv=qv(4),Iv=qv(5),Yv=qv(6),Hv=Dv.range,Xv=Uv.range,Vv=Bv.range,Wv=jv.range,Gv=Fv.range,$v=Iv.range,Zv=Yv.range,Kv=Bd((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const Jv=Kv;var Qv=Kv.range,tg=Bd((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));tg.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bd((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const ng=tg;var eg=tg.range;function rg(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ig(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function og(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function ug(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,s=_g(i),l=mg(i),f=_g(o),h=mg(o),p=_g(u),d=mg(u),v=_g(a),g=mg(a),y=_g(c),_=mg(c),m={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Lg,e:Lg,H:zg,I:qg,j:Dg,L:Ug,m:Bg,M:jg,p:function(t){return i[+(t.getHours()>=12)]},S:Fg,U:Ig,w:Yg,W:Hg,x:null,X:null,y:Xg,Y:Vg,Z:Wg,"%":cy},x={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Gg,e:Gg,H:$g,I:Zg,j:Kg,L:Jg,m:Qg,M:ty,p:function(t){return i[+(t.getUTCHours()>=12)]},S:ny,U:ey,w:ry,W:iy,x:null,X:null,y:oy,Y:uy,Z:ay,"%":cy},b={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return S(t,n,e,r)},d:kg,e:kg,H:Ng,I:Ng,j:Tg,L:Og,m:Eg,M:Cg,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},S:Pg,U:bg,w:xg,W:wg,x:function(t,n,r){return S(t,e,n,r)},X:function(t,n,e){return S(t,r,n,e)},y:Sg,Y:Mg,Z:Ag,"%":Rg};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=hg[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function M(t,n){return function(e){var r=og(1900);if(S(r,t,e+="",0)!=e.length)return null;if("p"in r&&(r.H=r.H%12+12*r.p),"W"in r||"U"in r){"w"in r||(r.w="W"in r?1:0);var i="Z"in r?ig(og(r.y)).getUTCDay():n(og(r.y)).getDay();r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(i+5)%7:r.w+7*r.U-(i+6)%7}return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,ig(r)):n(r)}}function S(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=b[i in hg?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",rg);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,ig);return n.toString=function(){return t},n}}}var ag,cg,sg,lg,fg,hg={"-":"",_:" ",0:"0"},pg=/^\s*\d+/,dg=/^%/,vg=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;function gg(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function yg(t){return t.replace(vg,"\\$&")}function _g(t){return new RegExp("^(?:"+t.map(yg).join("|")+")","i")}function mg(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function xg(t,n,e){var r=pg.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function bg(t,n,e){var r=pg.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function wg(t,n,e){var r=pg.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function Mg(t,n,e){var r=pg.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Sg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ag(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Eg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function kg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Tg(t,n,e){var r=pg.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ng(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Cg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Pg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Og(t,n,e){var r=pg.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Rg(t,n,e){var r=dg.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Lg(t,n){return gg(t.getDate(),n,2)}function zg(t,n){return gg(t.getHours(),n,2)}function qg(t,n){return gg(t.getHours()%12||12,n,2)}function Dg(t,n){return gg(1+iv.count(Av(t),t),n,3)}function Ug(t,n){return gg(t.getMilliseconds(),n,3)}function Bg(t,n){return gg(t.getMonth()+1,n,2)}function jg(t,n){return gg(t.getMinutes(),n,2)}function Fg(t,n){return gg(t.getSeconds(),n,2)}function Ig(t,n){return gg(av.count(Av(t),t),n,2)}function Yg(t){return t.getDay()}function Hg(t,n){return gg(cv.count(Av(t),t),n,2)}function Xg(t,n){return gg(t.getFullYear()%100,n,2)}function Vg(t,n){return gg(t.getFullYear()%1e4,n,4)}function Wg(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+gg(n/60|0,"0",2)+gg(n%60,"0",2)}function Gg(t,n){return gg(t.getUTCDate(),n,2)}function $g(t,n){return gg(t.getUTCHours(),n,2)}function Zg(t,n){return gg(t.getUTCHours()%12||12,n,2)}function Kg(t,n){return gg(1+Lv.count(ng(t),t),n,3)}function Jg(t,n){return gg(t.getUTCMilliseconds(),n,3)}function Qg(t,n){return gg(t.getUTCMonth()+1,n,2)}function ty(t,n){return gg(t.getUTCMinutes(),n,2)}function ny(t,n){return gg(t.getUTCSeconds(),n,2)}function ey(t,n){return gg(Dv.count(ng(t),t),n,2)}function ry(t){return t.getUTCDay()}function iy(t,n){return gg(Uv.count(ng(t),t),n,2)}function oy(t,n){return gg(t.getUTCFullYear()%100,n,2)}function uy(t,n){return gg(t.getUTCFullYear()%1e4,n,4)}function ay(){return"+0000"}function cy(){return"%"}function sy(t){return ag=ug(t),cg=ag.format,sg=ag.parse,lg=ag.utcFormat,fg=ag.utcParse,ag}sy({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ly="%Y-%m-%dT%H:%M:%S.%LZ";const fy=Date.prototype.toISOString?function(t){return t.toISOString()}:lg(ly),hy=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:fg(ly);var py=31536e6;function dy(t){return new Date(t)}function vy(t){return t instanceof Date?+t:+new Date(+t)}function gy(t,n,e,r,i,u,a,c,s){var l=md(vd,cr),f=l.invert,h=l.domain,p=s(".%L"),d=s(":%S"),v=s("%I:%M"),g=s("%I %p"),y=s("%a %d"),_=s("%b %d"),m=s("%B"),x=s("%Y"),b=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,py]];function w(o){return(a(o)<o?p:u(o)<o?d:i(o)<o?v:r(o)<o?g:n(o)<o?e(o)<o?y:_:t(o)<o?m:x)(o)}function M(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=o((function(t){return t[2]})).right(b,u);a===b.length?(i=N(e/py,r/py,n),n=t):a?(i=(a=b[u/b[a-1][2]<b[a][2]/u?a-1:a])[1],n=a[0]):(i=N(e,r,n),n=c)}return null==i?n:n.every(i)}return l.invert=function(t){return new Date(f(t))},l.domain=function(t){return arguments.length?h(od.call(t,vy)):h().map(dy)},l.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},l.tickFormat=function(t,n){return null==n?w:s(n)},l.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(Md(e,t)):l},l.copy=function(){return _d(l,gy(t,n,e,r,i,u,a,c,s))},l}function yy(){return gy(Av,wv,av,iv,nv,Jd,$d,Fd,cg).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}function _y(){return gy(ng,Jv,Dv,Lv,Pv,Tv,$d,Fd,lg).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}function my(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))}const xy=my("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),by=my("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),wy=my("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),My=my("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Sy=Dr(We(300,.5,0),We(-240,.5,1));var Ay=Dr(We(-100,.75,.35),We(80,1.5,.8)),Ey=Dr(We(260,.75,.35),We(80,1.5,.8)),ky=We();function Ty(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return ky.h=360*t-100,ky.s=1.5-1.5*n,ky.l=.8-.9*n,ky+""}function Ny(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const Cy=Ny(my("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Py=Ny(my("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Oy=Ny(my("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ry=Ny(my("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Ly(t){var n=0,e=1,r=!1;function i(i){var o=(i-n)/(e-n);return t(r?Math.max(0,Math.min(1,o)):o)}return i.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.clamp=function(t){return arguments.length?(r=!!t,i):r},i.interpolator=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return Ly(t).domain([n,e]).clamp(r)},xd(i)}function zy(t){return function(){return t}}var qy=Math.abs,Dy=Math.atan2,Uy=Math.cos,By=Math.max,jy=Math.min,Fy=Math.sin,Iy=Math.sqrt,Yy=1e-12,Hy=Math.PI,Xy=Hy/2,Vy=2*Hy;function Wy(t){return t>1?0:t<-1?Hy:Math.acos(t)}function Gy(t){return t>=1?Xy:t<=-1?-Xy:Math.asin(t)}function $y(t){return t.innerRadius}function Zy(t){return t.outerRadius}function Ky(t){return t.startAngle}function Jy(t){return t.endAngle}function Qy(t){return t&&t.padAngle}function t_(t,n,e,r,i,o,u,a){var c=e-t,s=r-n,l=u-i,f=a-o,h=(l*(n-o)-f*(t-i))/(f*c-l*s);return[t+h*c,n+h*s]}function n_(t,n,e,r,i,o,u){var a=t-e,c=n-r,s=(u?o:-o)/Iy(a*a+c*c),l=s*c,f=-s*a,h=t+l,p=n+f,d=e+l,v=r+f,g=(h+d)/2,y=(p+v)/2,_=d-h,m=v-p,x=_*_+m*m,b=i-o,w=h*v-d*p,M=(m<0?-1:1)*Iy(By(0,b*b*x-w*w)),S=(w*m-_*M)/x,A=(-w*_-m*M)/x,E=(w*m+_*M)/x,k=(-w*_+m*M)/x,T=S-g,N=A-y,C=E-g,P=k-y;return T*T+N*N>C*C+P*P&&(S=E,A=k),{cx:S,cy:A,x01:-l,y01:-f,x11:S*(i/b-1),y11:A*(i/b-1)}}function e_(){var t=$y,n=Zy,e=zy(0),r=null,i=Ky,o=Jy,u=Qy,a=null;function c(){var c,s,l=+t.apply(this,arguments),f=+n.apply(this,arguments),h=i.apply(this,arguments)-Xy,p=o.apply(this,arguments)-Xy,d=qy(p-h),v=p>h;if(a||(a=c=su()),f<l&&(s=f,f=l,l=s),f>Yy)if(d>Vy-Yy)a.moveTo(f*Uy(h),f*Fy(h)),a.arc(0,0,f,h,p,!v),l>Yy&&(a.moveTo(l*Uy(p),l*Fy(p)),a.arc(0,0,l,p,h,v));else{var g,y,_=h,m=p,x=h,b=p,w=d,M=d,S=u.apply(this,arguments)/2,A=S>Yy&&(r?+r.apply(this,arguments):Iy(l*l+f*f)),E=jy(qy(f-l)/2,+e.apply(this,arguments)),k=E,T=E;if(A>Yy){var N=Gy(A/l*Fy(S)),C=Gy(A/f*Fy(S));(w-=2*N)>Yy?(x+=N*=v?1:-1,b-=N):(w=0,x=b=(h+p)/2),(M-=2*C)>Yy?(_+=C*=v?1:-1,m-=C):(M=0,_=m=(h+p)/2)}var P=f*Uy(_),O=f*Fy(_),R=l*Uy(b),L=l*Fy(b);if(E>Yy){var z=f*Uy(m),q=f*Fy(m),D=l*Uy(x),U=l*Fy(x);if(d<Hy){var B=w>Yy?t_(P,O,D,U,z,q,R,L):[R,L],j=P-B[0],F=O-B[1],I=z-B[0],Y=q-B[1],H=1/Fy(Wy((j*I+F*Y)/(Iy(j*j+F*F)*Iy(I*I+Y*Y)))/2),X=Iy(B[0]*B[0]+B[1]*B[1]);k=jy(E,(l-X)/(H-1)),T=jy(E,(f-X)/(H+1))}}M>Yy?T>Yy?(g=n_(D,U,P,O,f,T,v),y=n_(z,q,R,L,f,T,v),a.moveTo(g.cx+g.x01,g.cy+g.y01),T<E?a.arc(g.cx,g.cy,T,Dy(g.y01,g.x01),Dy(y.y01,y.x01),!v):(a.arc(g.cx,g.cy,T,Dy(g.y01,g.x01),Dy(g.y11,g.x11),!v),a.arc(0,0,f,Dy(g.cy+g.y11,g.cx+g.x11),Dy(y.cy+y.y11,y.cx+y.x11),!v),a.arc(y.cx,y.cy,T,Dy(y.y11,y.x11),Dy(y.y01,y.x01),!v))):(a.moveTo(P,O),a.arc(0,0,f,_,m,!v)):a.moveTo(P,O),l>Yy&&w>Yy?k>Yy?(g=n_(R,L,z,q,l,-k,v),y=n_(P,O,D,U,l,-k,v),a.lineTo(g.cx+g.x01,g.cy+g.y01),k<E?a.arc(g.cx,g.cy,k,Dy(g.y01,g.x01),Dy(y.y01,y.x01),!v):(a.arc(g.cx,g.cy,k,Dy(g.y01,g.x01),Dy(g.y11,g.x11),!v),a.arc(0,0,l,Dy(g.cy+g.y11,g.cx+g.x11),Dy(y.cy+y.y11,y.cx+y.x11),v),a.arc(y.cx,y.cy,k,Dy(y.y11,y.x11),Dy(y.y01,y.x01),!v))):a.arc(0,0,l,b,x,v):a.lineTo(R,L)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Hy/2;return[Uy(r)*e,Fy(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:zy(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:zy(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:zy(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:zy(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:zy(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:zy(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:zy(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c}function r_(t){this._context=t}function i_(t){return new r_(t)}function o_(t){return t[0]}function u_(t){return t[1]}function a_(){var t=o_,n=u_,e=zy(!0),r=null,i=i_,o=null;function u(u){var a,c,s,l=u.length,f=!1;for(null==r&&(o=i(s=su())),a=0;a<=l;++a)!(a<l&&e(c=u[a],a,u))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(c,a,u),+n(c,a,u));if(s)return o=null,s+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:zy(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:zy(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:zy(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u}function c_(){var t=o_,n=null,e=zy(0),r=u_,i=zy(!0),o=null,u=i_,a=null;function c(c){var s,l,f,h,p,d=c.length,v=!1,g=new Array(d),y=new Array(d);for(null==o&&(a=u(p=su())),s=0;s<=d;++s){if(!(s<d&&i(h=c[s],s,c))===v)if(v=!v)l=s,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),f=s-1;f>=l;--f)a.point(g[f],y[f]);a.lineEnd(),a.areaEnd()}v&&(g[s]=+t(h,s,c),y[s]=+e(h,s,c),a.point(n?+n(h,s,c):g[s],r?+r(h,s,c):y[s]))}if(p)return a=null,p+""||null}function s(){return a_().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:zy(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:zy(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:zy(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:zy(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:zy(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:zy(+t),c):r},c.lineX0=c.lineY0=function(){return s().x(t).y(e)},c.lineY1=function(){return s().x(t).y(r)},c.lineX1=function(){return s().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:zy(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c}function s_(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function l_(t){return t}function f_(){var t=l_,n=s_,e=null,r=zy(0),i=zy(Vy),o=zy(0);function u(u){var a,c,s,l,f,h=u.length,p=0,d=new Array(h),v=new Array(h),g=+r.apply(this,arguments),y=Math.min(Vy,Math.max(-Vy,i.apply(this,arguments)-g)),_=Math.min(Math.abs(y)/h,o.apply(this,arguments)),m=_*(y<0?-1:1);for(a=0;a<h;++a)(f=v[d[a]=a]=+t(u[a],a,u))>0&&(p+=f);for(null!=n?d.sort((function(t,e){return n(v[t],v[e])})):null!=e&&d.sort((function(t,n){return e(u[t],u[n])})),a=0,s=p?(y-h*m)/p:0;a<h;++a,g=l)c=d[a],l=g+((f=v[c])>0?f*s:0)+m,v[c]={data:u[c],index:a,value:f,startAngle:g,endAngle:l,padAngle:_};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:zy(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:zy(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:zy(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:zy(+t),u):o},u}r_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var h_=d_(i_);function p_(t){this._curve=t}function d_(t){function n(n){return new p_(t(n))}return n._curve=t,n}function v_(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(d_(t)):n()._curve},t}function g_(){return v_(a_().curve(h_))}function y_(){var t=c_().curve(h_),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return v_(e())},delete t.lineX0,t.lineEndAngle=function(){return v_(r())},delete t.lineX1,t.lineInnerRadius=function(){return v_(i())},delete t.lineY0,t.lineOuterRadius=function(){return v_(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(d_(t)):n()._curve},t}function __(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}p_.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var m_=Array.prototype.slice;function x_(t){return t.source}function b_(t){return t.target}function w_(t){var n=x_,e=b_,r=o_,i=u_,o=null;function u(){var u,a=m_.call(arguments),c=n.apply(this,a),s=e.apply(this,a);if(o||(o=u=su()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=s,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:zy(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:zy(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function M_(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function S_(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function A_(t,n,e,r,i){var o=__(n,e),u=__(n,e=(e+i)/2),a=__(r,e),c=__(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function E_(){return w_(M_)}function k_(){return w_(S_)}function T_(){var t=w_(A_);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const N_={draw:function(t,n){var e=Math.sqrt(n/Hy);t.moveTo(e,0),t.arc(0,0,e,0,Vy)}},C_={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}};var P_=Math.sqrt(1/3),O_=2*P_;const R_={draw:function(t,n){var e=Math.sqrt(n/O_),r=e*P_;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}};var L_=Math.sin(Hy/10)/Math.sin(7*Hy/10),z_=Math.sin(Vy/10)*L_,q_=-Math.cos(Vy/10)*L_;const D_={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=z_*e,i=q_*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Vy*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},U_={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}};var B_=Math.sqrt(3);const j_={draw:function(t,n){var e=-Math.sqrt(n/(3*B_));t.moveTo(0,2*e),t.lineTo(-B_*e,-e),t.lineTo(B_*e,-e),t.closePath()}};var F_=-.5,I_=Math.sqrt(3)/2,Y_=1/Math.sqrt(12),H_=3*(Y_/2+1);const X_={draw:function(t,n){var e=Math.sqrt(n/H_),r=e/2,i=e*Y_,o=r,u=e*Y_+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(F_*r-I_*i,I_*r+F_*i),t.lineTo(F_*o-I_*u,I_*o+F_*u),t.lineTo(F_*a-I_*c,I_*a+F_*c),t.lineTo(F_*r+I_*i,F_*i-I_*r),t.lineTo(F_*o+I_*u,F_*u-I_*o),t.lineTo(F_*a+I_*c,F_*c-I_*a),t.closePath()}};var V_=[N_,C_,R_,U_,D_,j_,X_];function W_(){var t=zy(N_),n=zy(64),e=null;function r(){var r;if(e||(e=r=su()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:zy(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:zy(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function G_(){}function $_(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Z_(t){this._context=t}function K_(t){return new Z_(t)}function J_(t){this._context=t}function Q_(t){return new J_(t)}function tm(t){this._context=t}function nm(t){return new tm(t)}function em(t,n){this._basis=new Z_(t),this._beta=n}Z_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:$_(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:$_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},J_.prototype={areaStart:G_,areaEnd:G_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:$_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},tm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:$_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},em.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const rm=function t(n){function e(t){return 1===n?new Z_(t):new em(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function im(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function om(t,n){this._context=t,this._k=(1-n)/6}om.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:im(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const um=function t(n){function e(t){return new om(t,n)}return e.tension=function(n){return t(+n)},e}(0);function am(t,n){this._context=t,this._k=(1-n)/6}am.prototype={areaStart:G_,areaEnd:G_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const cm=function t(n){function e(t){return new am(t,n)}return e.tension=function(n){return t(+n)},e}(0);function sm(t,n){this._context=t,this._k=(1-n)/6}sm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const lm=function t(n){function e(t){return new sm(t,n)}return e.tension=function(n){return t(+n)},e}(0);function fm(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Yy){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Yy){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-n*t._l12_2a)/l,u=(u*s+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function hm(t,n){this._context=t,this._alpha=n}hm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:fm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const pm=function t(n){function e(t){return n?new hm(t,n):new om(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function dm(t,n){this._context=t,this._alpha=n}dm.prototype={areaStart:G_,areaEnd:G_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:fm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const vm=function t(n){function e(t){return n?new dm(t,n):new am(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function gm(t,n){this._context=t,this._alpha=n}gm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:fm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const ym=function t(n){function e(t){return n?new gm(t,n):new sm(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function _m(t){this._context=t}function mm(t){return new _m(t)}function xm(t){return t<0?-1:1}function bm(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(xm(o)+xm(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function wm(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Mm(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Sm(t){this._context=t}function Am(t){this._context=new Em(t)}function Em(t){this._context=t}function km(t){return new Sm(t)}function Tm(t){return new Am(t)}function Nm(t){this._context=t}function Cm(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function Pm(t){return new Nm(t)}function Om(t,n){this._context=t,this._t=n}function Rm(t){return new Om(t,.5)}function Lm(t){return new Om(t,0)}function zm(t){return new Om(t,1)}function qm(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Dm(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function Um(t,n){return t[n]}function Bm(){var t=zy([]),n=Dm,e=qm,r=Um;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,s=a.length,l=new Array(s);for(o=0;o<s;++o){for(var f,h=a[o],p=l[o]=new Array(c),d=0;d<c;++d)p[d]=f=[0,+r(i[d],h,d,i)],f.data=i[d];p.key=h}for(o=0,u=n(l);o<s;++o)l[u[o]].index=o;return e(l,u),l}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:zy(m_.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:zy(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Dm:"function"==typeof t?t:zy(m_.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?qm:t,i):e},i}function jm(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}qm(t,n)}}function Fm(t,n){if((a=t.length)>1)for(var e,r,i,o,u,a,c=0,s=t[n[0]].length;c<s;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o}function Im(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}qm(t,n)}}function Ym(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,s=0;a<i;++a){for(var l=t[n[a]],f=l[u][1]||0,h=(f-(l[u-1][1]||0))/2,p=0;p<a;++p){var d=t[n[p]];h+=(d[u][1]||0)-(d[u-1][1]||0)}c+=f,s+=h*f}e[u-1][1]+=e[u-1][0]=o,c&&(o-=s/c)}e[u-1][1]+=e[u-1][0]=o,qm(t,n)}}function Hm(t){var n=t.map(Xm);return Dm(t).sort((function(t,e){return n[t]-n[e]}))}function Xm(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Vm(t){return Hm(t).reverse()}function Wm(t){var n,e,r=t.length,i=t.map(Xm),o=Dm(t).sort((function(t,n){return i[n]-i[t]})),u=0,a=0,c=[],s=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],s.push(e));return s.reverse().concat(c)}function Gm(t){return Dm(t).reverse()}function $m(t){return function(){return t}}function Zm(t){return t[0]}function Km(t){return t[1]}function Jm(){this._=null}function Qm(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function tx(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function nx(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function ex(t){for(;t.L;)t=t.L;return t}_m.prototype={areaStart:G_,areaEnd:G_,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Sm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Mm(this,this._t0,wm(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Mm(this,wm(this,e=bm(this,t,n)),e);break;default:Mm(this,this._t0,e=bm(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Am.prototype=Object.create(Sm.prototype)).point=function(t,n){Sm.prototype.point.call(this,n,t)},Em.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Nm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Cm(t),i=Cm(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Om.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}},Jm.prototype={constructor:Jm,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=ex(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(tx(this,e),e=(t=e).U),e.C=!1,r.C=!0,nx(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(nx(this,e),e=(t=e).U),e.C=!1,r.C=!0,tx(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?ex(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,tx(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,nx(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,tx(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,nx(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,tx(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,nx(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};const rx=Jm;function ix(t,n,e,r){var i=[null,null],o=Tx.push(i)-1;return i.left=t,i.right=n,e&&ux(i,t,n,e),r&&ux(i,n,t,r),Ex[t.index].halfedges.push(o),Ex[n.index].halfedges.push(o),i}function ox(t,n,e){var r=[n,e];return r.left=t,r}function ux(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function ax(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],s=u[1],l=0,f=1,h=a[0]-c,p=a[1]-s;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>l&&(l=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<f&&(f=o)}if(o=e-s,p||!(o>0)){if(o/=p,p<0){if(o<l)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>l&&(l=o)}if(o=i-s,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>l&&(l=o)}else if(p>0){if(o<l)return;o<f&&(f=o)}return!(l>0||f<1)||(l>0&&(t[0]=[c+l*h,s+l*p]),f<1&&(t[1]=[c+f*h,s+f*p]),!0)}}}}}function cx(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],s=t.left,l=t.right,f=s[0],h=s[1],p=l[0],d=l[1],v=(f+p)/2,g=(h+d)/2;if(d===h){if(v<n||v>=r)return;if(f>p){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=g-(u=(f-p)/(d-h))*v,u<-1||u>1)if(f>p){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<d){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function sx(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function lx(t,n){return n[+(n.left!==t.site)]}function fx(t,n){return n[+(n.left===t.site)]}var hx,px=[];function dx(){Qm(this),this.x=this.y=this.arc=this.site=this.cy=null}function vx(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,s=r[1]-a,l=o[0]-u,f=o[1]-a,h=2*(c*f-s*l);if(!(h>=-Cx)){var p=c*c+s*s,d=l*l+f*f,v=(f*p-s*d)/h,g=(c*d-l*p)/h,y=px.pop()||new dx;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=g+a)+Math.sqrt(v*v+g*g),t.circle=y;for(var _=null,m=kx._;m;)if(y.y<m.y||y.y===m.y&&y.x<=m.x){if(!m.L){_=m.P;break}m=m.L}else{if(!m.R){_=m;break}m=m.R}kx.insert(_,y),_||(hx=y)}}}}function gx(t){var n=t.circle;n&&(n.P||(hx=n.N),kx.remove(n),px.push(n),Qm(n),t.circle=null)}var yx=[];function _x(){Qm(this),this.edge=this.site=this.circle=null}function mx(t){var n=yx.pop()||new _x;return n.site=t,n}function xx(t){gx(t),Ax.remove(t),yx.push(t),Qm(t)}function bx(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];xx(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Nx&&Math.abs(r-c.circle.cy)<Nx;)o=c.P,a.unshift(c),xx(c),c=o;a.unshift(c),gx(c);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<Nx&&Math.abs(r-s.circle.cy)<Nx;)u=s.N,a.push(s),xx(s),s=u;a.push(s),gx(s);var l,f=a.length;for(l=1;l<f;++l)s=a[l],c=a[l-1],ux(s.edge,c.site,s.site,i);c=a[0],(s=a[f-1]).edge=ix(c.site,s.site,null,i),vx(c),vx(s)}function wx(t){for(var n,e,r,i,o=t[0],u=t[1],a=Ax._;a;)if((r=Mx(a,u)-o)>Nx)a=a.L;else{if(!((i=o-Sx(a,u))>Nx)){r>-Nx?(n=a.P,e=a):i>-Nx?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Ex[t.index]={site:t,halfedges:[]}}(t);var c=mx(t);if(Ax.insert(n,c),n||e){if(n===e)return gx(n),e=mx(n.site),Ax.insert(c,e),c.edge=e.edge=ix(n.site,c.site),vx(n),void vx(e);if(e){gx(n),gx(e);var s=n.site,l=s[0],f=s[1],h=t[0]-l,p=t[1]-f,d=e.site,v=d[0]-l,g=d[1]-f,y=2*(h*g-p*v),_=h*h+p*p,m=v*v+g*g,x=[(g*_-p*m)/y+l,(h*m-v*_)/y+f];ux(e.edge,s,d,x),c.edge=ix(s,t,null,x),e.edge=ix(t,d,null,x),vx(n),vx(e)}else c.edge=ix(n.site,c.site)}}function Mx(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],s=c-n;if(!s)return a;var l=a-r,f=1/o-1/s,h=l/s;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*s)-c+s/2+i-o/2)))/f+r:(r+a)/2}function Sx(t,n){var e=t.N;if(e)return Mx(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Ax,Ex,kx,Tx,Nx=1e-6,Cx=1e-12;function Px(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Ox(t,n){return n[1]-t[1]||n[0]-t[0]}function Rx(t,n){var e,r,i,o=t.sort(Ox).pop();for(Tx=[],Ex=new Array(t.length),Ax=new rx,kx=new rx;;)if(i=hx,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(wx(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;bx(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Ex.length;i<o;++i)if((t=Ex[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=sx(t,Tx[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],s=+n[1][1];!function(t,n,e,r){for(var i,o=Tx.length;o--;)cx(i=Tx[o],t,n,e,r)&&ax(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Nx||Math.abs(i[0][1]-i[1][1])>Nx)||delete Tx[o]}(u,a,c,s),function(t,n,e,r){var i,o,u,a,c,s,l,f,h,p,d,v,g=Ex.length,y=!0;for(i=0;i<g;++i)if(o=Ex[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)Tx[c[a]]||c.splice(a,1);for(a=0,s=c.length;a<s;)d=(p=fx(o,Tx[c[a]]))[0],v=p[1],f=(l=lx(o,Tx[c[++a%s]]))[0],h=l[1],(Math.abs(d-f)>Nx||Math.abs(v-h)>Nx)&&(c.splice(a,0,Tx.push(ox(u,p,Math.abs(d-t)<Nx&&r-v>Nx?[t,Math.abs(f-t)<Nx?h:r]:Math.abs(v-r)<Nx&&e-d>Nx?[Math.abs(h-r)<Nx?f:e,r]:Math.abs(d-e)<Nx&&v-n>Nx?[e,Math.abs(f-e)<Nx?h:n]:Math.abs(v-n)<Nx&&d-t>Nx?[Math.abs(h-n)<Nx?f:t,n]:null))-1),++s);s&&(y=!1)}if(y){var _,m,x,b=1/0;for(i=0,y=null;i<g;++i)(o=Ex[i])&&(x=(_=(u=o.site)[0]-t)*_+(m=u[1]-n)*m)<b&&(b=x,y=o);if(y){var w=[t,n],M=[t,r],S=[e,r],A=[e,n];y.halfedges.push(Tx.push(ox(u=y.site,w,M))-1,Tx.push(ox(u,M,S))-1,Tx.push(ox(u,S,A))-1,Tx.push(ox(u,A,w))-1)}}for(i=0;i<g;++i)(o=Ex[i])&&(o.halfedges.length||delete Ex[i])}(u,a,c,s)}this.edges=Tx,this.cells=Ex,Ax=kx=Tx=Ex=null}function Lx(){var t=Zm,n=Km,e=null;function r(r){return new Rx(r.map((function(e,i){var o=[Math.round(t(e,i,r)/Nx)*Nx,Math.round(n(e,i,r)/Nx)*Nx];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:$m(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:$m(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r}function zx(t){return function(){return t}}function qx(t,n,e){this.target=t,this.type=n,this.transform=e}function Dx(t,n,e){this.k=t,this.x=n,this.y=e}Rx.prototype={constructor:Rx,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return lx(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a=e.site,c=-1,s=n[i[o-1]],l=s.left===a?s.right:s.left;++c<o;)u=l,l=(s=n[i[c]]).left===a?s.right:s.left,u&&l&&r<u.index&&r<l.index&&Px(a,u,l)<0&&t.push([a.data,u.data,l.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],s=n-i.site[1],l=c*c+s*s;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],s=n-a[1],f=c*c+s*s;f<l&&(l=f,u=a.index)}}))}while(null!==u);return o._found=r,null==e||l<=e*e?i.site:null}},Dx.prototype={constructor:Dx,scale:function(t){return 1===t?this:new Dx(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Dx(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Ux=new Dx(1,0,0);function Bx(t){return t.__zoom||Ux}function jx(){kt.stopImmediatePropagation()}function Fx(){kt.preventDefault(),kt.stopImmediatePropagation()}function Ix(){return!kt.button}function Yx(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Hx(){return this.__zoom||Ux}function Xx(){return-kt.deltaY*(kt.deltaMode?120:1)/500}function Vx(){return"ontouchstart"in this}function Wx(){var t,n,e=Ix,r=Yx,i=Xx,o=Vx,u=0,a=1/0,c=-a,s=a,l=c,f=s,h=250,p=kr,d=[],v=ht("start","zoom","end"),g=500,y=0;function _(t){t.property("__zoom",Hx).on("wheel.zoom",E).on("mousedown.zoom",k).on("dblclick.zoom",T).filter(o).on("touchstart.zoom",N).on("touchmove.zoom",C).on("touchend.zoom touchcancel.zoom",P).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function m(t,n){return(n=Math.max(u,Math.min(a,n)))===t.k?t:new Dx(n,t.x,t.y)}function x(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Dx(t.k,r,i)}function b(t,n){var e=t.invertX(n[0][0])-c,r=t.invertX(n[1][0])-s,i=t.invertY(n[0][1])-l,o=t.invertY(n[1][1])-f;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function w(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function M(t,n,e){t.on("start.zoom",(function(){S(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){S(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=S(t,i),u=r.apply(t,i),a=e||w(u),c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=t.__zoom,l="function"==typeof n?n.apply(t,i):n,f=p(s.invert(a).concat(c/s.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=f(t),e=c/n[2];t=new Dx(e,a[0]-n[0]*e,a[1]-n[1]*e)}o.zoom(null,t)}}))}function S(t,n){for(var e,r=0,i=d.length;r<i;++r)if((e=d[r]).that===t)return e;return new A(t,n)}function A(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=r.apply(t,n)}function E(){if(e.apply(this,arguments)){var t=S(this,arguments),n=this.__zoom,r=Math.max(u,Math.min(a,n.k*Math.pow(2,i.apply(this,arguments)))),o=qt(this);if(t.wheel)t.mouse[0][0]===o[0]&&t.mouse[0][1]===o[1]||(t.mouse[1]=n.invert(t.mouse[0]=o)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[o,n.invert(o)],fi(this),t.start()}Fx(),t.wheel=setTimeout(c,150),t.zoom("mouse",b(x(m(n,r),t.mouse[0],t.mouse[1]),t.extent))}function c(){t.wheel=null,t.end()}}function k(){if(!n&&e.apply(this,arguments)){var t=S(this,arguments),r=On(kt.view).on("mousemove.zoom",a,!0).on("mouseup.zoom",c,!0),i=qt(this),o=kt.clientX,u=kt.clientY;Un(kt.view),jx(),t.mouse=[i,this.__zoom.invert(i)],fi(this),t.start()}function a(){if(Fx(),!t.moved){var n=kt.clientX-o,e=kt.clientY-u;t.moved=n*n+e*e>y}t.zoom("mouse",b(x(t.that.__zoom,t.mouse[0]=qt(t.that),t.mouse[1]),t.extent))}function c(){r.on("mousemove.zoom mouseup.zoom",null),Bn(kt.view,t.moved),Fx(),t.end()}}function T(){if(e.apply(this,arguments)){var t=this.__zoom,n=qt(this),i=t.invert(n),o=t.k*(kt.shiftKey?.5:2),u=b(x(m(t,o),n,i),r.apply(this,arguments));Fx(),h>0?On(this).transition().duration(h).call(M,u,n):On(this).call(_.transform,u)}}function N(){if(e.apply(this,arguments)){var n,r,i,o,u=S(this,arguments),a=kt.changedTouches,c=a.length;for(jx(),r=0;r<c;++r)o=[o=Ln(this,a,(i=a[r]).identifier),this.__zoom.invert(o),i.identifier],u.touch0?u.touch1||(u.touch1=o):(u.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!u.touch1))return u.end(),void((o=On(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout((function(){t=null}),g),fi(this),u.start())}}function C(){var n,e,r,i,o=S(this,arguments),u=kt.changedTouches,a=u.length;for(Fx(),t&&(t=clearTimeout(t)),n=0;n<a;++n)r=Ln(this,u,(e=u[n]).identifier),o.touch0&&o.touch0[2]===e.identifier?o.touch0[0]=r:o.touch1&&o.touch1[2]===e.identifier&&(o.touch1[0]=r);if(e=o.that.__zoom,o.touch1){var c=o.touch0[0],s=o.touch0[1],l=o.touch1[0],f=o.touch1[1],h=(h=l[0]-c[0])*h+(h=l[1]-c[1])*h,p=(p=f[0]-s[0])*p+(p=f[1]-s[1])*p;e=m(e,Math.sqrt(h/p)),r=[(c[0]+l[0])/2,(c[1]+l[1])/2],i=[(s[0]+f[0])/2,(s[1]+f[1])/2]}else{if(!o.touch0)return;r=o.touch0[0],i=o.touch0[1]}o.zoom("touch",b(x(e,r,i),o.extent))}function P(){var t,e,r=S(this,arguments),i=kt.changedTouches,o=i.length;for(jx(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),g),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return _.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Hx),t!==e?M(t,n):e.interrupt().each((function(){S(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},_.scaleBy=function(t,n){_.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}))},_.scaleTo=function(t,n){_.transform(t,(function(){var t=r.apply(this,arguments),e=this.__zoom,i=w(t),o=e.invert(i),u="function"==typeof n?n.apply(this,arguments):n;return b(x(m(e,u),i,o),t)}))},_.translateBy=function(t,n,e){_.transform(t,(function(){return b(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments))}))},_.translateTo=function(t,n,e){_.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,o=w(t);return b(Ux.translate(o[0],o[1]).scale(i.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t)}))},A.prototype={start:function(){return 1==++this.active&&(this.index=d.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(d.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Rt(new qx(_,t,this.that.__zoom),v.apply,v,[t,this.that,this.args])}},_.wheelDelta=function(t){return arguments.length?(i="function"==typeof t?t:zx(+t),_):i},_.filter=function(t){return arguments.length?(e="function"==typeof t?t:zx(!!t),_):e},_.touchable=function(t){return arguments.length?(o="function"==typeof t?t:zx(!!t),_):o},_.extent=function(t){return arguments.length?(r="function"==typeof t?t:zx([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),_):r},_.scaleExtent=function(t){return arguments.length?(u=+t[0],a=+t[1],_):[u,a]},_.translateExtent=function(t){return arguments.length?(c=+t[0][0],s=+t[1][0],l=+t[0][1],f=+t[1][1],_):[[c,l],[s,f]]},_.duration=function(t){return arguments.length?(h=+t,_):h},_.interpolate=function(t){return arguments.length?(p=t,_):p},_.on=function(){var t=v.on.apply(v,arguments);return t===v?_:t},_.clickDistance=function(t){return arguments.length?(y=(t=+t)*t,_):Math.sqrt(y)},_}Bx.prototype=Dx.prototype},178:(t,n,e)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Application=void 0;var r=e(326),i=function(){function t(){}return t.run=function(){r.json("https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/metadata.json",(function(n){t.metadata=n,t.dates=t.metadata.filter((function(t){return"joined"===t.type})).map((function(t){return t.date})).reverse(),t.pages=t.Pages.map((function(n){return new n(t.metadata)})),t.pages.forEach((function(t){return t.init()})),t.pages[0].update()}))},t.build={withBlank:function(){return t},withPages:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.Pages=n,t}},t}();n.Application=i},759:function(t,n,e){var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.BRHeatMapPage=void 0;var o=e(178),u=e(953),a=e(984),c=e(326),s=e(593),l=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="br-heatmap",n.name="BR HeatMap",n}return i(n,t),n.prototype.update=function(){var t=this;c.select("#sidebar").selectAll("*").remove(),c.select("#content").selectAll("*").remove();var n=c.select("#sidebar"),e=n.append("label").text("Date: ").append("select").attr("id","date-selection").classed("br-heatmap-selection",!0);o.Application.dates.forEach((function(t){e.append("option").attr("value",t).html(t)})),n.append("label").text("Class: ").append("select").attr("id","class-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"Ground_vehicles",text:"Ground Vehicles"},{id:"Aviation",text:"Aviation"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"Ground_vehicles"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Mode: ").append("select").attr("id","mode-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"ab",text:"AB"},{id:"rb",text:"RB"},{id:"sb",text:"SB"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"rb"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Measurement: ").append("select").attr("id","measurement-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"win_rate",text:"Win Rate"},{id:"battles_sum",text:"Battles"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"win_rate"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("BR Range: ").append("select").attr("id","br-range-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"0"},{id:"1"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"1"===t.id?"selected":void 0})).html((function(t){return t.id})),this.plot=new u.BrHeatmap(800,600,{top:20,right:30,bottom:30,left:100}),s.utils.setEvent.byClass("br-heatmap-selection").onchange((function(){return t.plot.update(!1)})),s.utils.setEvent.byIds("mode-selection","br-range-selection").onchange((function(){return t.plot.update(!0)}))},n}(a.Page);n.BRHeatMapPage=l},984:(t,n,e)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Page=void 0;var r=e(326),i=function(){function t(){}return t.prototype.init=function(){r.select("#navbar").append("li").append("a").attr("id",this.id).attr("href","#"+this.id).html(this.name).on("click",this.update)},t}();n.Page=i},42:function(t,n,e){var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.StackedAreaPage=void 0;var o=e(984),u=e(326),a=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="stacked-area",n.name="Trends",n}return i(n,t),n.prototype.update=function(){u.select("#sidebar").selectAll("*").remove(),u.select("#content").selectAll("*").remove()},n}(o.Page);n.StackedAreaPage=a},519:(t,n,e)=>{var r=e(178),i=e(759),o=e(42);r.Application.build.withPages(i.BRHeatMapPage,o.StackedAreaPage).run()},953:function(t,n,e){var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.BrHeatmap=void 0;var o=e(326),u=e(830),a=e(593),c=e(380),s=function(t){function n(n,e,r){var i=t.call(this,n,e,r)||this;return i.mouseoverEvent=function(){o.select(this).style("stroke","white")},i.mouseleaveEvent=function(){o.select(this).style("stroke","black")},i.svg=o.select("#content").append("svg").attr("height",i.svgHeight).attr("width",i.svgWidth).attr("id","main-svg"),i.g=i.svg.append("g").attr("id","main-g").attr("transform","translate("+i.margin.left+", "+i.margin.top+")"),i.init(),i}return i(n,t),n.prototype.init=function(){var t=this;o.csv(this.dataPath,(function(n){var e=t.extractData(n),r=t.width/a.utils.nations.length,i=t.height/a.utils.brs[t.brRange].length,o=t.buildAxis(),u=o.x,c=o.y,s=t.getValue2color();t.g.selectAll().data(e).enter().append("rect").attr("x",(function(t){return u(t.nation)})).attr("y",(function(t){return c(t.br)})).attr("width",r).attr("height",i).style("fill",(function(t){return s(t.value)})).style("stroke-width",1).style("stroke","black").on("mouseover",t.mouseoverEvent).on("mouseleave",t.mouseleaveEvent),t.cache=n}))},n.prototype.update=function(t){var n=this,e=o.selectAll("g#br-heatmap-x, g#br-heatmap-y");t?o.csv(this.dataPath,(function(t){n.updateSquares(t),n.cache=t})):this.updateSquares(this.cache),this.buildAxis(),e.remove()},n.prototype.updateSquares=function(t){var n=this.extractData(t),e=this.getValue2color();this.g.selectAll("rect").data(n).transition().style("fill",(function(t){return e(t.value)}))},n.prototype.buildAxis=function(){var t=o.scaleBand().range([0,this.width]).domain(a.utils.nations);this.g.append("g").attr("id","br-heatmap-x").style("font-size",13).attr("transform","translate(0, "+(this.height+10)+")").call(o.axisBottom(t).tickSize(0)).select("#main-g g path.domain").remove();var n=o.scaleBand().range([this.height,0]).domain(a.utils.brs[this.brRange]);return this.g.append("g").attr("id","br-heatmap-y").style("font-size",15).attr("transform","translate(-5, 0)").call(o.axisLeft(n).tickSize(0)).select("#main-g g path.domain").remove(),{x:t,y:n}},n.prototype.extractData=function(t){var n=this;return t.filter((function(t){return t.date===n.date})).map((function(t){return{nation:t.nation,br:n.getBr(t),value:n.getValue(t)}}))},n.prototype.getValue=function(t){return t[this.mode+"_"+this.measurement]},n.prototype.getBr=function(t){return t[this.mode+"_br"]},n.prototype.getValue2color=function(){var t,n,e,r;switch(this.measurement){case"win_rate":e=0,r=100,t=o.scaleLinear().domain([e,r]).range([0,1]),"Ground_vehicles"===this.clazz?n=o.scaleLinear().domain([0,.05,.4,.5,.6,.95,1]).range([a.COLORS.WHITE,a.COLORS.BLACK,a.COLORS.RED,a.COLORS.YELLOW,a.COLORS.GREEN,a.COLORS.BLACK,a.COLORS.BLACK]).interpolate(o.interpolateHcl):"Aviation"===this.clazz&&(n=o.scaleLinear().domain([0,.01,.5,.6,.7,.99,1]).range([a.COLORS.WHITE,a.COLORS.BLACK,a.COLORS.RED,a.COLORS.YELLOW,a.COLORS.GREEN,a.COLORS.BLACK,a.COLORS.BLACK]).interpolate(o.interpolateHcl));break;case"battles_sum":e=Math.pow(10,2.5),r=Math.pow(10,5.5),t=o.scaleLog().domain([e,r]).range([0,1]),n=o.scaleLinear().domain([0,.01,.4,.5,.6,.99,1]).range([a.COLORS.WHITE,a.COLORS.BLACK,a.COLORS.RED,a.COLORS.YELLOW,a.COLORS.GREEN,a.COLORS.BLACK]).interpolate(o.interpolateHcl)}var i=function(e){return n(t(e))};return void 0===this.colorBar?this.colorBar=new c.ColorBar(this,e,r,i,800,60,{bottom:this.margin.bottom,left:0,right:40,top:this.margin.top}):this.colorBar.update(e,r,i),function(e){return 0===e?a.COLORS.GRAY:n(t(e))}},Object.defineProperty(n.prototype,"dataPath",{get:function(){return"https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/"+this.mode.toLowerCase()+"_ranks_"+this.brRange+".csv"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"date",{get:function(){return a.utils.getSelectedValue("date-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"clazz",{get:function(){return a.utils.getSelectedValue("class-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"mode",{get:function(){return a.utils.getSelectedValue("mode-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"measurement",{get:function(){return a.utils.getSelectedValue("measurement-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"brRange",{get:function(){return a.utils.getSelectedValue("br-range-selection")},enumerable:!1,configurable:!0}),n}(u.Plot);n.BrHeatmap=s},380:function(t,n,e){var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.ColorBar=void 0;var o=e(326),u=e(830),a=e(593),c=function(t){function n(n,e,r,i,u,a,c){var s=t.call(this,u,a,c)||this;return s.brHeatmap=n,s.valueMin=e,s.valueMax=r,s.value2color=i,s.svg=o.select("#content").append("svg").attr("height",s.svgHeight).attr("width",s.svgWidth).attr("id","color-bar-svg"),s.g=s.svg.append("g").attr("id","color-bar-g").attr("transform","translate("+s.margin.left+", "+s.margin.top+")"),s.init(),s}return i(n,t),n.prototype.init=function(){var t="battles_sum"===this.brHeatmap.measurement?"log":"linear",n=("log"===t?a.utils.logspace(this.valueMin,this.valueMax,100):a.utils.linspace(this.valueMin,this.valueMax,100)).map(this.value2color);this.g.selectAll("*").remove();var e=this.svg.attr("id")+"-gradient",r=this.g.append("defs").append("linearGradient").attr("id",e).attr("x1","0%").attr("y1","100%").attr("x2","0%").attr("y2","0%").attr("spreadMethod","pad"),i=a.utils.linspace(0,100,100).map((function(t){return Math.round(t)+"%"}));o.zip(i,n).forEach((function(t){var n=t[0],e=t[1];r.append("stop").attr("offset",n).attr("stop-color",e).attr("stop-opacity",1)}));var u,c=this.height,s=this.width;this.g.append("rect").attr("x1",0).attr("y1",10).attr("width",s).attr("height",c).style("fill","url(#"+e+")"),u="log"===t?o.scaleLog().domain([this.valueMin,this.valueMax]).range([c,0]):o.scaleLinear().domain([this.valueMin,this.valueMax]).range([c,0]);var l=o.axisRight(u);"log"===t&&(l=l.ticks(3)),l=l.tickFormat((function(n){return"log"===t?10+a.utils.formatPower(Math.round(Math.log10(n))):n+"%"})),this.g.append("g").style("font-size","log"===t?12:null).attr("class","legend-axis").attr("transform","translate("+s+", 0)").call(l)},n.prototype.update=function(t,n,e){this.valueMin=t,this.valueMax=n,this.value2color=e,this.init()},n}(u.Plot);n.ColorBar=c},830:(t,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Margin=n.Plot=void 0;var e=function(){function t(t,n,e){this.svgHeight=t,this.svgWidth=n,this.margin=e}return Object.defineProperty(t.prototype,"width",{get:function(){return this.svgWidth-this.margin.left-this.margin.right},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.svgHeight-this.margin.top-this.margin.bottom},enumerable:!1,configurable:!0}),t}();n.Plot=e;n.Margin=function(){}},593:(t,n)=>{var e,r;Object.defineProperty(n,"__esModule",{value:!0}),n.COLORS=n.utils=void 0,(r=n.utils||(n.utils={})).getSelectedValue=function(t){return document.getElementById(t).value},r.setEvent={byIds:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.map((function(t){return document.getElementById(t)}));return{onchange:function(t){return e.forEach((function(n){return n.onchange=t}))}}},byClass:function(t){var n=Array.from(document.getElementsByClassName(t));return{onchange:function(t){return n.forEach((function(n){return n.onchange=t}))}}}},r.nations=["USA","Germany","USSR","Britain","Japan","France","Italy","China","Sweden"],r.brs={1:["1.0 ~ 2.0","1.3 ~ 2.3","1.7 ~ 2.7","2.0 ~ 3.0","2.3 ~ 3.3","2.7 ~ 3.7","3.0 ~ 4.0","3.3 ~ 4.3","3.7 ~ 4.7","4.0 ~ 5.0","4.3 ~ 5.3","4.7 ~ 5.7","5.0 ~ 6.0","5.3 ~ 6.3","5.7 ~ 6.7","6.0 ~ 7.0","6.3 ~ 7.3","6.7 ~ 7.7","7.0 ~ 8.0","7.3 ~ 8.3","7.7 ~ 8.7","8.0 ~ 9.0","8.3 ~ 9.3","8.7 ~ 9.7","9.0 ~ 10.0","9.3 ~ 10.3","9.7 ~ 10.7","10.0 ~ 11.0","10.3 ~ 11.3","10.7 ~ 11.7"],0:["1.0","1.3","1.7","2.0","2.3","2.7","3.0","3.3","3.7","4.0","4.3","4.7","5.0","5.3","5.7","6.0","6.3","6.7","7.0","7.3","7.7","8.0","8.3","8.7","9.0","9.3","9.7","10.0","10.3","10.7"]},r.isNotNull=function(t){return null!=t},r.linspace=function(t,n,e){for(var r=[],i=(n-t)/(e-1),o=0;o<e-1;)r.push(t+o*i),o++;return r.push(n),r},r.logspace=function(t,n,e){return t=Math.log10(t),n=Math.log10(n),this.linspace(t,n,e).map((function(t){return Math.pow(10,t)}))},r.formatPower=function(t){return(t<0?"⁻":"")+(t+"").split("").map((function(t){return"⁰¹²³⁴⁵⁶⁷⁸⁹"[+t]})).join("")},(e=n.COLORS||(n.COLORS={})).GREEN="#C3E88D",e.YELLOW="#FFCB6B",e.RED="#F07178",e.BLUE="#82AAFF",e.PURPLE="#C792EA",e.ORANGE="#F78C6C",e.AZURE="#467CDA",e.SKY="#89DDFF",e.BLACK="#2B2B2B",e.GRAY="#616161",e.WHITE="#EEFFFF"}},n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{}};return t[r].call(i.exports,i,i.exports,e),i.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,