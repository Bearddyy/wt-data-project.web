/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={481:(t,n,e)=>{"use strict";e.r(n),e.d(n,{active:()=>mu,arc:()=>ey,area:()=>cy,areaRadial:()=>_y,ascending:()=>i,axisBottom:()=>it,axisLeft:()=>ut,axisRight:()=>rt,axisTop:()=>et,bisect:()=>s,bisectLeft:()=>c,bisectRight:()=>a,bisector:()=>u,brush:()=>Hu,brushSelection:()=>Uu,brushX:()=>qu,brushY:()=>$u,chord:()=>Qu,cluster:()=>Ch,color:()=>le,creator:()=>yt,cross:()=>h,csv:()=>ed,csvFormat:()=>Lo,csvFormatRows:()=>Io,csvParse:()=>Po,csvParseRows:()=>jo,cubehelix:()=>Ge,curveBasis:()=>Ky,curveBasisClosed:()=>Qy,curveBasisOpen:()=>nm,curveBundle:()=>rm,curveCardinal:()=>om,curveCardinalClosed:()=>cm,curveCardinalOpen:()=>lm,curveCatmullRom:()=>pm,curveCatmullRomClosed:()=>gm,curveCatmullRomOpen:()=>_m,curveLinear:()=>iy,curveLinearClosed:()=>mm,curveMonotoneX:()=>km,curveMonotoneY:()=>Mm,curveNatural:()=>Tm,curveStep:()=>Bm,curveStepAfter:()=>zm,curveStepBefore:()=>Nm,customEvent:()=>Bt,descending:()=>p,deviation:()=>v,dispatch:()=>ht,drag:()=>Wn,dragDisable:()=>jn,dragEnable:()=>Ln,dsvFormat:()=>zo,easeBack:()=>fu,easeBackIn:()=>su,easeBackInOut:()=>fu,easeBackOut:()=>lu,easeBounce:()=>ou,easeBounceIn:()=>uu,easeBounceInOut:()=>au,easeBounceOut:()=>ou,easeCircle:()=>ru,easeCircleIn:()=>nu,easeCircleInOut:()=>ru,easeCircleOut:()=>eu,easeCubic:()=>$i,easeCubicIn:()=>Ui,easeCubicInOut:()=>$i,easeCubicOut:()=>qi,easeElastic:()=>du,easeElasticIn:()=>pu,easeElasticInOut:()=>gu,easeElasticOut:()=>du,easeExp:()=>tu,easeExpIn:()=>Ji,easeExpInOut:()=>tu,easeExpOut:()=>Qi,easeLinear:()=>Pi,easePoly:()=>Wi,easePolyIn:()=>Hi,easePolyInOut:()=>Wi,easePolyOut:()=>Yi,easeQuad:()=>Ii,easeQuadIn:()=>ji,easeQuadInOut:()=>Ii,easeQuadOut:()=>Li,easeSin:()=>Ki,easeSinIn:()=>Xi,easeSinInOut:()=>Ki,easeSinOut:()=>Vi,entries:()=>To,event:()=>kt,extent:()=>_,forceCenter:()=>Wo,forceCollide:()=>ua,forceLink:()=>ca,forceManyBody:()=>da,forceRadial:()=>ga,forceSimulation:()=>pa,forceX:()=>va,forceY:()=>_a,format:()=>ka,formatDefaultLocale:()=>Ta,formatLocale:()=>Sa,formatPrefix:()=>Ma,formatSpecifier:()=>Da,geoAlbers:()=>Wf,geoAlbersUsa:()=>Gf,geoArea:()=>Ec,geoAzimuthalEqualArea:()=>Kf,geoAzimuthalEqualAreaRaw:()=>Vf,geoAzimuthalEquidistant:()=>Qf,geoAzimuthalEquidistantRaw:()=>Jf,geoBounds:()=>ys,geoCentroid:()=>Ss,geoCircle:()=>Us,geoClipAntimeridian:()=>Js,geoClipCircle:()=>Qs,geoClipExtent:()=>rl,geoClipRectangle:()=>el,geoConicConformal:()=>uh,geoConicConformalRaw:()=>ih,geoConicEqualArea:()=>Yf,geoConicEqualAreaRaw:()=>Hf,geoConicEquidistant:()=>sh,geoConicEquidistantRaw:()=>ch,geoContains:()=>Al,geoDistance:()=>gl,geoEquirectangular:()=>ah,geoEquirectangularRaw:()=>oh,geoGnomonic:()=>fh,geoGnomonicRaw:()=>lh,geoGraticule:()=>kl,geoGraticule10:()=>Ml,geoIdentity:()=>ph,geoInterpolate:()=>Fl,geoLength:()=>hl,geoMercator:()=>nh,geoMercatorRaw:()=>th,geoNaturalEarth1:()=>gh,geoNaturalEarth1Raw:()=>dh,geoOrthographic:()=>_h,geoOrthographicRaw:()=>vh,geoPath:()=>Of,geoProjection:()=>Uf,geoProjectionMutator:()=>qf,geoRotation:()=>js,geoStereographic:()=>mh,geoStereographicRaw:()=>yh,geoStream:()=>pc,geoTransform:()=>Bf,geoTransverseMercator:()=>xh,geoTransverseMercatorRaw:()=>bh,hcl:()=>Re,hierarchy:()=>kh,histogram:()=>T,hsl:()=>ye,html:()=>Vp,interpolate:()=>pr,interpolateArray:()=>or,interpolateBasis:()=>Ve,interpolateBasisClosed:()=>Ke,interpolateCool:()=>E_,interpolateCubehelix:()=>Rr,interpolateCubehelixDefault:()=>A_,interpolateCubehelixLong:()=>Pr,interpolateDate:()=>ar,interpolateHcl:()=>Br,interpolateHclLong:()=>Nr,interpolateHsl:()=>Fr,interpolateHslLong:()=>Sr,interpolateInferno:()=>O_,interpolateLab:()=>Tr,interpolateMagma:()=>T_,interpolateNumber:()=>cr,interpolateObject:()=>sr,interpolatePlasma:()=>B_,interpolateRainbow:()=>M_,interpolateRgb:()=>er,interpolateRgbBasis:()=>ir,interpolateRgbBasisClosed:()=>ur,interpolateRound:()=>dr,interpolateString:()=>hr,interpolateTransformCss:()=>Dr,interpolateTransformSvg:()=>Ar,interpolateViridis:()=>S_,interpolateWarm:()=>C_,interpolateZoom:()=>kr,interrupt:()=>fi,interval:()=>ii,isoFormat:()=>f_,isoParse:()=>h_,json:()=>Kp,keys:()=>Fo,lab:()=>Fe,line:()=>ay,lineRadial:()=>vy,linkHorizontal:()=>Ey,linkRadial:()=>My,linkVertical:()=>ky,local:()=>bt,map:()=>mo,matcher:()=>Ct,max:()=>z,mean:()=>R,median:()=>P,merge:()=>j,min:()=>L,mouse:()=>Rt,namespace:()=>gt,namespaces:()=>dt,nest:()=>bo,now:()=>Xr,pack:()=>Jh,packEnclose:()=>Bh,packSiblings:()=>Wh,pairs:()=>l,partition:()=>ip,path:()=>co,permute:()=>I,pie:()=>fy,pointRadial:()=>yy,polygonArea:()=>Cp,polygonCentroid:()=>Ep,polygonContains:()=>Tp,polygonHull:()=>Sp,polygonLength:()=>Op,precisionFixed:()=>Oa,precisionPrefix:()=>Ba,precisionRound:()=>Na,quadtree:()=>Qo,quantile:()=>O,quantize:()=>jr,queue:()=>Ip,radialArea:()=>_y,radialLine:()=>vy,randomBates:()=>Wp,randomExponential:()=>Gp,randomIrwinHall:()=>Yp,randomLogNormal:()=>Hp,randomNormal:()=>$p,randomUniform:()=>qp,range:()=>D,request:()=>Zp,rgb:()=>de,ribbon:()=>go,scaleBand:()=>sd,scaleIdentity:()=>wd,scaleImplicit:()=>ad,scaleLinear:()=>xd,scaleLog:()=>Sd,scaleOrdinal:()=>cd,scalePoint:()=>fd,scalePow:()=>Od,scaleQuantile:()=>Nd,scaleQuantize:()=>zd,scaleSequential:()=>N_,scaleSqrt:()=>Bd,scaleThreshold:()=>Rd,scaleTime:()=>__,scaleUtc:()=>y_,scan:()=>U,schemeCategory10:()=>b_,schemeCategory20:()=>D_,schemeCategory20b:()=>x_,schemeCategory20c:()=>w_,select:()=>On,selectAll:()=>Bn,selection:()=>Tn,selector:()=>jt,selectorAll:()=>It,set:()=>Mo,shuffle:()=>q,stack:()=>Lm,stackOffsetDiverging:()=>Um,stackOffsetExpand:()=>Im,stackOffsetNone:()=>Rm,stackOffsetSilhouette:()=>qm,stackOffsetWiggle:()=>$m,stackOrderAscending:()=>Hm,stackOrderDescending:()=>Wm,stackOrderInsideOut:()=>Gm,stackOrderNone:()=>Pm,stackOrderReverse:()=>Zm,stratify:()=>sp,style:()=>en,sum:()=>$,symbol:()=>Gy,symbolCircle:()=>Fy,symbolCross:()=>Sy,symbolDiamond:()=>By,symbolSquare:()=>jy,symbolStar:()=>Py,symbolTriangle:()=>Iy,symbolWye:()=>Yy,symbols:()=>Wy,text:()=>Jp,thresholdFreedmanDiaconis:()=>B,thresholdScott:()=>N,thresholdSturges:()=>S,tickIncrement:()=>M,tickStep:()=>F,ticks:()=>k,timeDay:()=>ig,timeDays:()=>ug,timeFormat:()=>cv,timeFormatDefaultLocale:()=>s_,timeFormatLocale:()=>ov,timeFriday:()=>hg,timeFridays:()=>mg,timeHour:()=>ng,timeHours:()=>eg,timeInterval:()=>Ld,timeMillisecond:()=>Ud,timeMilliseconds:()=>qd,timeMinute:()=>Jd,timeMinutes:()=>Qd,timeMonday:()=>cg,timeMondays:()=>gg,timeMonth:()=>wg,timeMonths:()=>Dg,timeParse:()=>sv,timeSaturday:()=>pg,timeSaturdays:()=>bg,timeSecond:()=>Xd,timeSeconds:()=>Vd,timeSunday:()=>ag,timeSundays:()=>dg,timeThursday:()=>fg,timeThursdays:()=>yg,timeTuesday:()=>sg,timeTuesdays:()=>vg,timeWednesday:()=>lg,timeWednesdays:()=>_g,timeWeek:()=>ag,timeWeeks:()=>dg,timeYear:()=>Cg,timeYears:()=>Eg,timeout:()=>ri,timer:()=>Jr,timerFlush:()=>Qr,touch:()=>Nn,touches:()=>zn,transition:()=>Ni,transpose:()=>H,tree:()=>vp,treemap:()=>xp,treemapBinary:()=>wp,treemapDice:()=>rp,treemapResquarify:()=>Ap,treemapSlice:()=>_p,treemapSliceDice:()=>Dp,treemapSquarify:()=>bp,tsv:()=>rd,tsvFormat:()=>Ho,tsvFormatRows:()=>Yo,tsvParse:()=>qo,tsvParseRows:()=>$o,utcDay:()=>Ng,utcDays:()=>zg,utcFormat:()=>lv,utcFriday:()=>qg,utcFridays:()=>Xg,utcHour:()=>Tg,utcHours:()=>Og,utcMillisecond:()=>Ud,utcMilliseconds:()=>qd,utcMinute:()=>Mg,utcMinutes:()=>Fg,utcMonday:()=>jg,utcMondays:()=>Yg,utcMonth:()=>Jg,utcMonths:()=>Qg,utcParse:()=>fv,utcSaturday:()=>$g,utcSaturdays:()=>Vg,utcSecond:()=>Xd,utcSeconds:()=>Vd,utcSunday:()=>Pg,utcSundays:()=>Hg,utcThursday:()=>Ug,utcThursdays:()=>Zg,utcTuesday:()=>Lg,utcTuesdays:()=>Wg,utcWednesday:()=>Ig,utcWednesdays:()=>Gg,utcWeek:()=>Pg,utcWeeks:()=>Hg,utcYear:()=>nv,utcYears:()=>ev,values:()=>So,variance:()=>g,version:()=>r,voronoi:()=>Nb,window:()=>Jt,xml:()=>Qp,zip:()=>W,zoom:()=>Gb,zoomIdentity:()=>jb,zoomTransform:()=>Lb});var r="4.11.0";function i(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function u(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)<0?r=u+1:i=u}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)>0?i=u:r=u+1}return r}}}var o=u(i),a=o.right,c=o.left;const s=a;function l(t,n){null==n&&(n=f);for(var e=0,r=t.length-1,i=t[0],u=new Array(r<0?0:r);e<r;)u[e]=n(i,i=t[++e]);return u}function f(t,n){return[t,n]}function h(t,n,e){var r,i,u,o,a=t.length,c=n.length,s=new Array(a*c);for(null==e&&(e=f),r=u=0;r<a;++r)for(o=t[r],i=0;i<c;++i,++u)s[u]=e(o,n[i]);return s}function p(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function d(t){return null===t?NaN:+t}function g(t,n){var e,r,i=t.length,u=0,o=-1,a=0,c=0;if(null==n)for(;++o<i;)isNaN(e=d(t[o]))||(c+=(r=e-a)*(e-(a+=r/++u)));else for(;++o<i;)isNaN(e=d(n(t[o],o,t)))||(c+=(r=e-a)*(e-(a+=r/++u)));if(u>1)return c/(u-1)}function v(t,n){var e=g(t,n);return e?Math.sqrt(e):e}function _(t,n){var e,r,i,u=t.length,o=-1;if(null==n){for(;++o<u;)if(null!=(e=t[o])&&e>=e)for(r=i=e;++o<u;)null!=(e=t[o])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++o<u;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=i=e;++o<u;)null!=(e=n(t[o],o,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var y=Array.prototype,m=y.slice,b=y.map;function x(t){return function(){return t}}function w(t){return t}function D(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),u=new Array(i);++r<i;)u[r]=t+r*e;return u}var A=Math.sqrt(50),C=Math.sqrt(10),E=Math.sqrt(2);function k(t,n,e){var r,i,u,o,a=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(o=M(t,n,e))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),n=Math.floor(n/o),u=new Array(i=Math.ceil(n-t+1));++a<i;)u[a]=(t+a)*o;else for(t=Math.floor(t*o),n=Math.ceil(n*o),u=new Array(i=Math.ceil(t-n+1));++a<i;)u[a]=(t-a)/o;return r&&u.reverse(),u}function M(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),u=r/Math.pow(10,i);return i>=0?(u>=A?10:u>=C?5:u>=E?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(u>=A?10:u>=C?5:u>=E?2:1)}function F(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),u=r/i;return u>=A?i*=10:u>=C?i*=5:u>=E&&(i*=2),n<t?-i:i}function S(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function T(){var t=w,n=_,e=S;function r(r){var i,u,o=r.length,a=new Array(o);for(i=0;i<o;++i)a[i]=t(r[i],i,r);var c=n(a),l=c[0],f=c[1],h=e(a,l,f);Array.isArray(h)||(h=F(l,f,h),h=D(Math.ceil(l/h)*h,Math.floor(f/h)*h,h));for(var p=h.length;h[0]<=l;)h.shift(),--p;for(;h[p-1]>f;)h.pop(),--p;var d,g=new Array(p+1);for(i=0;i<=p;++i)(d=g[i]=[]).x0=i>0?h[i-1]:l,d.x1=i<p?h[i]:f;for(i=0;i<o;++i)l<=(u=a[i])&&u<=f&&g[s(h,u,0,p)].push(r[i]);return g}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(m.call(t)):x(t),r):e},r}function O(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,u=Math.floor(i),o=+e(t[u],u,t);return o+(+e(t[u+1],u+1,t)-o)*(i-u)}}function B(t,n,e){return t=b.call(t,d).sort(i),Math.ceil((e-n)/(2*(O(t,.75)-O(t,.25))*Math.pow(t.length,-1/3)))}function N(t,n,e){return Math.ceil((e-n)/(3.5*v(t)*Math.pow(t.length,-1/3)))}function z(t,n){var e,r,i=t.length,u=-1;if(null==n){for(;++u<i;)if(null!=(e=t[u])&&e>=e)for(r=e;++u<i;)null!=(e=t[u])&&e>r&&(r=e)}else for(;++u<i;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=e;++u<i;)null!=(e=n(t[u],u,t))&&e>r&&(r=e);return r}function R(t,n){var e,r=t.length,i=r,u=-1,o=0;if(null==n)for(;++u<r;)isNaN(e=d(t[u]))?--i:o+=e;else for(;++u<r;)isNaN(e=d(n(t[u],u,t)))?--i:o+=e;if(i)return o/i}function P(t,n){var e,r=t.length,u=-1,o=[];if(null==n)for(;++u<r;)isNaN(e=d(t[u]))||o.push(e);else for(;++u<r;)isNaN(e=d(n(t[u],u,t)))||o.push(e);return O(o.sort(i),.5)}function j(t){for(var n,e,r,i=t.length,u=-1,o=0;++u<i;)o+=t[u].length;for(e=new Array(o);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--o]=r[n];return e}function L(t,n){var e,r,i=t.length,u=-1;if(null==n){for(;++u<i;)if(null!=(e=t[u])&&e>=e)for(r=e;++u<i;)null!=(e=t[u])&&r>e&&(r=e)}else for(;++u<i;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=e;++u<i;)null!=(e=n(t[u],u,t))&&r>e&&(r=e);return r}function I(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function U(t,n){if(e=t.length){var e,r,u=0,o=0,a=t[o];for(null==n&&(n=i);++u<e;)(n(r=t[u],a)<0||0!==n(a,a))&&(a=r,o=u);return 0===n(a,a)?o:void 0}}function q(t,n,e){for(var r,i,u=(null==e?t.length:e)-(n=null==n?0:+n);u;)i=Math.random()*u--|0,r=t[u+n],t[u+n]=t[i+n],t[i+n]=r;return t}function $(t,n){var e,r=t.length,i=-1,u=0;if(null==n)for(;++i<r;)(e=+t[i])&&(u+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(u+=e);return u}function H(t){if(!(i=t.length))return[];for(var n=-1,e=L(t,Y),r=new Array(e);++n<e;)for(var i,u=-1,o=r[n]=new Array(i);++u<i;)o[u]=t[u][n];return r}function Y(t){return t.length}function W(){return H(arguments)}var G=Array.prototype.slice;function Z(t){return t}var X=1e-6;function V(t){return"translate("+(t+.5)+",0)"}function K(t){return"translate(0,"+(t+.5)+")"}function J(t){return function(n){return+t(n)}}function Q(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function tt(){return!this.__axis}function nt(t,n){var e=[],r=null,i=null,u=6,o=6,a=3,c=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",l=1===t||3===t?V:K;function f(f){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):Z:i,d=Math.max(u,0)+a,g=n.range(),v=+g[0]+.5,_=+g[g.length-1]+.5,y=(n.bandwidth?Q:J)(n.copy()),m=f.selection?f.selection():f,b=m.selectAll(".domain").data([null]),x=m.selectAll(".tick").data(h,n).order(),w=x.exit(),D=x.enter().append("g").attr("class","tick"),A=x.select("line"),C=x.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(D),A=A.merge(D.append("line").attr("stroke","#000").attr(s+"2",c*u)),C=C.merge(D.append("text").attr("fill","#000").attr(s,c*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==m&&(b=b.transition(f),x=x.transition(f),A=A.transition(f),C=C.transition(f),w=w.transition(f).attr("opacity",X).attr("transform",(function(t){return isFinite(t=y(t))?l(t):this.getAttribute("transform")})),D.attr("opacity",X).attr("transform",(function(t){var n=this.parentNode.__axis;return l(n&&isFinite(n=n(t))?n:y(t))}))),w.remove(),b.attr("d",4===t||2==t?"M"+c*o+","+v+"H0.5V"+_+"H"+c*o:"M"+v+","+c*o+"V0.5H"+_+"V"+c*o),x.attr("opacity",1).attr("transform",(function(t){return l(y(t))})),A.attr(s+"2",c*u),C.attr(s,c*d).text(p),m.filter(tt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),m.each((function(){this.__axis=y}))}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=G.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:G.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:G.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(u=o=+t,f):u},f.tickSizeInner=function(t){return arguments.length?(u=+t,f):u},f.tickSizeOuter=function(t){return arguments.length?(o=+t,f):o},f.tickPadding=function(t){return arguments.length?(a=+t,f):a},f}function et(t){return nt(1,t)}function rt(t){return nt(2,t)}function it(t){return nt(3,t)}function ut(t){return nt(4,t)}var ot={value:function(){}};function at(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function st(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function lt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ft(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ot,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=at.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=st(t+"",r),u=-1,o=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<o;)if(e=(t=i[u]).type)r[e]=ft(r[e],t.name,n);else if(null==n)for(e in r)r[e]=ft(r[e],t.name,null);return this}for(;++u<o;)if((e=(t=i[u]).type)&&(e=lt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),u=0;u<e;++u)i[u]=arguments[u+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(u=0,e=(r=this._[t]).length;u<e;++u)r[u].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,u=r.length;i<u;++i)r[i].value.apply(n,e)}};const ht=at;var pt="http://www.w3.org/1999/xhtml";const dt={svg:"http://www.w3.org/2000/svg",xhtml:pt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function gt(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),dt.hasOwnProperty(n)?{space:dt[n],local:t}:t}function vt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===pt&&n.documentElement.namespaceURI===pt?n.createElement(t):n.createElementNS(e,t)}}function _t(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function yt(t){var n=gt(t);return(n.local?_t:vt)(n)}var mt=0;function bt(){return new xt}function xt(){this._="@"+(++mt).toString(36)}xt.prototype=bt.prototype={constructor:xt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var wt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Dt=document.documentElement;if(!Dt.matches){var At=Dt.webkitMatchesSelector||Dt.msMatchesSelector||Dt.mozMatchesSelector||Dt.oMatchesSelector;wt=function(t){return function(){return At.call(this,t)}}}}const Ct=wt;var Et={},kt=null;function Mt(t,n,e){return t=Ft(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Ft(t,n,e){return function(r){var i=kt;kt=r;try{t.call(this,this.__data__,n,e)}finally{kt=i}}}function St(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Tt(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,u=n.length;r<u;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Ot(t,n,e){var r=Et.hasOwnProperty(t.type)?Mt:Ft;return function(i,u,o){var a,c=this.__on,s=r(n,u,o);if(c)for(var l=0,f=c.length;l<f;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function Bt(t,n,e,r){var i=kt;t.sourceEvent=kt,kt=t;try{return n.apply(e,r)}finally{kt=i}}function Nt(){for(var t,n=kt;t=n.sourceEvent;)n=t;return n}function zt(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function Rt(t){var n=Nt();return n.changedTouches&&(n=n.changedTouches[0]),zt(t,n)}function Pt(){}function jt(t){return null==t?Pt:function(){return this.querySelector(t)}}function Lt(){return[]}function It(t){return null==t?Lt:function(){return this.querySelectorAll(t)}}function Ut(t){return new Array(t.length)}function qt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function $t(t,n,e,r,i,u){for(var o,a=0,c=n.length,s=u.length;a<s;++a)(o=n[a])?(o.__data__=u[a],r[a]=o):e[a]=new qt(t,u[a]);for(;a<c;++a)(o=n[a])&&(i[a]=o)}function Ht(t,n,e,r,i,u,o){var a,c,s,l={},f=n.length,h=u.length,p=new Array(f);for(a=0;a<f;++a)(c=n[a])&&(p[a]=s="$"+o.call(c,c.__data__,a,n),s in l?i[a]=c:l[s]=c);for(a=0;a<h;++a)(c=l[s="$"+o.call(t,u[a],a,u)])?(r[a]=c,c.__data__=u[a],l[s]=null):e[a]=new qt(t,u[a]);for(a=0;a<f;++a)(c=n[a])&&l[p[a]]===c&&(i[a]=c)}function Yt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Wt(t){return function(){this.removeAttribute(t)}}function Gt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Zt(t,n){return function(){this.setAttribute(t,n)}}function Xt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Vt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Kt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Jt(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Qt(t){return function(){this.style.removeProperty(t)}}function tn(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nn(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function en(t,n){return t.style.getPropertyValue(n)||Jt(t).getComputedStyle(t,null).getPropertyValue(n)}function rn(t){return function(){delete this[t]}}function un(t,n){return function(){this[t]=n}}function on(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function an(t){return t.trim().split(/^|\s+/)}function cn(t){return t.classList||new sn(t)}function sn(t){this._node=t,this._names=an(t.getAttribute("class")||"")}function ln(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function fn(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function hn(t){return function(){ln(this,t)}}function pn(t){return function(){fn(this,t)}}function dn(t,n){return function(){(n.apply(this,arguments)?ln:fn)(this,t)}}function gn(){this.textContent=""}function vn(t){return function(){this.textContent=t}}function _n(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function yn(){this.innerHTML=""}function mn(t){return function(){this.innerHTML=t}}function bn(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function xn(){this.nextSibling&&this.parentNode.appendChild(this)}function wn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Dn(){return null}function An(){var t=this.parentNode;t&&t.removeChild(this)}function Cn(t,n,e){var r=Jt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function En(t,n){return function(){return Cn(this,t,n)}}function kn(t,n){return function(){return Cn(this,t,n.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Et={mouseenter:"mouseover",mouseleave:"mouseout"})),qt.prototype={constructor:qt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},sn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Mn=[null];function Fn(t,n){this._groups=t,this._parents=n}function Sn(){return new Fn([[document.documentElement]],Mn)}Fn.prototype=Sn.prototype={constructor:Fn,select:function(t){"function"!=typeof t&&(t=jt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o,a=n[i],c=a.length,s=r[i]=new Array(c),l=0;l<c;++l)(u=a[l])&&(o=t.call(u,u.__data__,l,a))&&("__data__"in u&&(o.__data__=u.__data__),s[l]=o);return new Fn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=It(t));for(var n=this._groups,e=n.length,r=[],i=[],u=0;u<e;++u)for(var o,a=n[u],c=a.length,s=0;s<c;++s)(o=a[s])&&(r.push(t.call(o,o.__data__,s,a)),i.push(o));return new Fn(r,i)},filter:function(t){"function"!=typeof t&&(t=Ct(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,c=r[i]=[],s=0;s<a;++s)(u=o[s])&&t.call(u,u.__data__,s,o)&&c.push(u);return new Fn(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each((function(t){d[++l]=t})),d;var e,r=n?Ht:$t,i=this._parents,u=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var o=u.length,a=new Array(o),c=new Array(o),s=new Array(o),l=0;l<o;++l){var f=i[l],h=u[l],p=h.length,d=t.call(f,f&&f.__data__,l,i),g=d.length,v=c[l]=new Array(g),_=a[l]=new Array(g);r(f,h,v,_,s[l]=new Array(p),d,n);for(var y,m,b=0,x=0;b<g;++b)if(y=v[b]){for(b>=x&&(x=b+1);!(m=_[x])&&++x<g;);y._next=m||null}}return(a=new Fn(a,i))._enter=c,a._exit=s,a},enter:function(){return new Fn(this._enter||this._groups.map(Ut),this._parents)},exit:function(){return new Fn(this._exit||this._groups.map(Ut),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var c,s=n[a],l=e[a],f=s.length,h=o[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)o[a]=n[a];return new Fn(o,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],u=i.length-1,o=i[u];--u>=0;)(r=i[u])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Yt);for(var e=this._groups,r=e.length,i=new Array(r),u=0;u<r;++u){for(var o,a=e[u],c=a.length,s=i[u]=new Array(c),l=0;l<c;++l)(o=a[l])&&(s[l]=o);s.sort(n)}return new Fn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,u=r.length;i<u;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,u=n[e],o=0,a=u.length;o<a;++o)(i=u[o])&&t.call(i,i.__data__,o,u);return this},attr:function(t,n){var e=gt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Gt:Wt:"function"==typeof n?e.local?Kt:Vt:e.local?Xt:Zt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Qt:"function"==typeof n?nn:tn)(t,n,null==e?"":e)):en(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rn:"function"==typeof n?on:un)(t,n)):this.node()[t]},classed:function(t,n){var e=an(t+"");if(arguments.length<2){for(var r=cn(this.node()),i=-1,u=e.length;++i<u;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?dn:n?hn:pn)(e,n))},text:function(t){return arguments.length?this.each(null==t?gn:("function"==typeof t?_n:vn)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?yn:("function"==typeof t?bn:mn)(t)):this.node().innerHTML},raise:function(){return this.each(xn)},lower:function(){return this.each(wn)},append:function(t){var n="function"==typeof t?t:yt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:yt(t),r=null==n?Dn:"function"==typeof n?n:jt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(An)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,u=St(t+""),o=u.length;if(!(arguments.length<2)){for(a=n?Ot:Tt,null==e&&(e=!1),r=0;r<o;++r)this.each(a(u[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,l=a.length;s<l;++s)for(r=0,c=a[s];r<o;++r)if((i=u[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?kn:En)(t,n))}};const Tn=Sn;function On(t){return"string"==typeof t?new Fn([[document.querySelector(t)]],[document.documentElement]):new Fn([[t]],Mn)}function Bn(t){return"string"==typeof t?new Fn([document.querySelectorAll(t)],[document.documentElement]):new Fn([null==t?[]:t],Mn)}function Nn(t,n,e){arguments.length<3&&(e=n,n=Nt().changedTouches);for(var r,i=0,u=n?n.length:0;i<u;++i)if((r=n[i]).identifier===e)return zt(t,r);return null}function zn(t,n){null==n&&(n=Nt().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=zt(t,n[e]);return i}function Rn(){kt.stopImmediatePropagation()}function Pn(){kt.preventDefault(),kt.stopImmediatePropagation()}function jn(t){var n=t.document.documentElement,e=On(t).on("dragstart.drag",Pn,!0);"onselectstart"in n?e.on("selectstart.drag",Pn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function Ln(t,n){var e=t.document.documentElement,r=On(t).on("dragstart.drag",null);n&&(r.on("click.drag",Pn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function In(t){return function(){return t}}function Un(t,n,e,r,i,u,o,a,c,s){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=u,this.y=o,this.dx=a,this.dy=c,this._=s}function qn(){return!kt.button}function $n(){return this.parentNode}function Hn(t){return null==t?{x:kt.x,y:kt.y}:t}function Yn(){return"ontouchstart"in this}function Wn(){var t,n,e,r,i=qn,u=$n,o=Hn,a=Yn,c={},s=ht("start","drag","end"),l=0,f=0;function h(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",v).on("touchmove.drag",_).on("touchend.drag touchcancel.drag",y).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var o=m("mouse",u.apply(this,arguments),Rt,this,arguments);o&&(On(kt.view).on("mousemove.drag",d,!0).on("mouseup.drag",g,!0),jn(kt.view),Rn(),e=!1,t=kt.clientX,n=kt.clientY,o("start"))}}function d(){if(Pn(),!e){var r=kt.clientX-t,i=kt.clientY-n;e=r*r+i*i>f}c.mouse("drag")}function g(){On(kt.view).on("mousemove.drag mouseup.drag",null),Ln(kt.view,e),Pn(),c.mouse("end")}function v(){if(i.apply(this,arguments)){var t,n,e=kt.changedTouches,r=u.apply(this,arguments),o=e.length;for(t=0;t<o;++t)(n=m(e[t].identifier,r,Nn,this,arguments))&&(Rn(),n("start"))}}function _(){var t,n,e=kt.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(Pn(),n("drag"))}function y(){var t,n,e=kt.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(Rn(),n("end"))}function m(t,n,e,r,i){var u,a,f,p=e(n,t),d=s.copy();if(Bt(new Un(h,"beforestart",u,t,l,p[0],p[1],0,0,d),(function(){return null!=(kt.subject=u=o.apply(r,i))&&(a=u.x-p[0]||0,f=u.y-p[1]||0,!0)})))return function o(s){var g,v=p;switch(s){case"start":c[t]=o,g=l++;break;case"end":delete c[t],--l;case"drag":p=e(n,t),g=l}Bt(new Un(h,s,u,t,g,p[0]+a,p[1]+f,p[0]-v[0],p[1]-v[1],d),d.apply,d,[s,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:In(!!t),h):i},h.container=function(t){return arguments.length?(u="function"==typeof t?t:In(t),h):u},h.subject=function(t){return arguments.length?(o="function"==typeof t?t:In(t),h):o},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:In(!!t),h):a},h.on=function(){var t=s.on.apply(s,arguments);return t===s?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h}function Gn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Zn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Xn(){}Un.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Vn=.7,Kn=1/Vn,Jn="\\s*([+-]?\\d+)\\s*",Qn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ne=/^#([0-9a-f]{3})$/,ee=/^#([0-9a-f]{6})$/,re=new RegExp("^rgb\\("+[Jn,Jn,Jn]+"\\)$"),ie=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),ue=new RegExp("^rgba\\("+[Jn,Jn,Jn,Qn]+"\\)$"),oe=new RegExp("^rgba\\("+[te,te,te,Qn]+"\\)$"),ae=new RegExp("^hsl\\("+[Qn,te,te]+"\\)$"),ce=new RegExp("^hsla\\("+[Qn,te,te,Qn]+"\\)$"),se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function le(t){var n;return t=(t+"").trim().toLowerCase(),(n=ne.exec(t))?new ge((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=ee.exec(t))?fe(parseInt(n[1],16)):(n=re.exec(t))?new ge(n[1],n[2],n[3],1):(n=ie.exec(t))?new ge(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=ue.exec(t))?he(n[1],n[2],n[3],n[4]):(n=oe.exec(t))?he(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ae.exec(t))?ve(n[1],n[2]/100,n[3]/100,1):(n=ce.exec(t))?ve(n[1],n[2]/100,n[3]/100,n[4]):se.hasOwnProperty(t)?fe(se[t]):"transparent"===t?new ge(NaN,NaN,NaN,0):null}function fe(t){return new ge(t>>16&255,t>>8&255,255&t,1)}function he(t,n,e,r){return r<=0&&(t=n=e=NaN),new ge(t,n,e,r)}function pe(t){return t instanceof Xn||(t=le(t)),t?new ge((t=t.rgb()).r,t.g,t.b,t.opacity):new ge}function de(t,n,e,r){return 1===arguments.length?pe(t):new ge(t,n,e,null==r?1:r)}function ge(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function ve(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new me(t,n,e,r)}function _e(t){if(t instanceof me)return new me(t.h,t.s,t.l,t.opacity);if(t instanceof Xn||(t=le(t)),!t)return new me;if(t instanceof me)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),u=Math.max(n,e,r),o=NaN,a=u-i,c=(u+i)/2;return a?(o=n===u?(e-r)/a+6*(e<r):e===u?(r-n)/a+2:(n-e)/a+4,a/=c<.5?u+i:2-u-i,o*=60):a=c>0&&c<1?0:o,new me(o,a,c,t.opacity)}function ye(t,n,e,r){return 1===arguments.length?_e(t):new me(t,n,e,null==r?1:r)}function me(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function be(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Gn(Xn,le,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Gn(ge,de,Zn(Xn,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new ge(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?Vn:Math.pow(Vn,t),new ge(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Gn(me,ye,Zn(Xn,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new me(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Vn:Math.pow(Vn,t),new me(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new ge(be(t>=240?t-240:t+120,i,r),be(t,i,r),be(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var xe=Math.PI/180,we=180/Math.PI,De=.95047,Ae=1.08883,Ce=4/29,Ee=6/29,ke=3*Ee*Ee;function Me(t){if(t instanceof Se)return new Se(t.l,t.a,t.b,t.opacity);if(t instanceof Pe){var n=t.h*xe;return new Se(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof ge||(t=pe(t));var e=Ne(t.r),r=Ne(t.g),i=Ne(t.b),u=Te((.4124564*e+.3575761*r+.1804375*i)/De),o=Te((.2126729*e+.7151522*r+.072175*i)/1);return new Se(116*o-16,500*(u-o),200*(o-Te((.0193339*e+.119192*r+.9503041*i)/Ae)),t.opacity)}function Fe(t,n,e,r){return 1===arguments.length?Me(t):new Se(t,n,e,null==r?1:r)}function Se(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Te(t){return t>.008856451679035631?Math.pow(t,1/3):t/ke+Ce}function Oe(t){return t>Ee?t*t*t:ke*(t-Ce)}function Be(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ne(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ze(t){if(t instanceof Pe)return new Pe(t.h,t.c,t.l,t.opacity);t instanceof Se||(t=Me(t));var n=Math.atan2(t.b,t.a)*we;return new Pe(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Re(t,n,e,r){return 1===arguments.length?ze(t):new Pe(t,n,e,null==r?1:r)}function Pe(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}Gn(Se,Fe,Zn(Xn,{brighter:function(t){return new Se(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Se(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=1*Oe(t),new ge(Be(3.2404542*(n=De*Oe(n))-1.5371385*t-.4985314*(e=Ae*Oe(e))),Be(-.969266*n+1.8760108*t+.041556*e),Be(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),Gn(Pe,Re,Zn(Xn,{brighter:function(t){return new Pe(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Pe(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Me(this).rgb()}}));var je=-.14861,Le=1.78277,Ie=-.29227,Ue=-.90649,qe=1.97294,$e=qe*Ue,He=qe*Le,Ye=Le*Ie-Ue*je;function We(t){if(t instanceof Ze)return new Ze(t.h,t.s,t.l,t.opacity);t instanceof ge||(t=pe(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Ye*r+$e*n-He*e)/(Ye+$e-He),u=r-i,o=(qe*(e-i)-Ie*u)/Ue,a=Math.sqrt(o*o+u*u)/(qe*i*(1-i)),c=a?Math.atan2(o,u)*we-120:NaN;return new Ze(c<0?c+360:c,a,i,t.opacity)}function Ge(t,n,e,r){return 1===arguments.length?We(t):new Ze(t,n,e,null==r?1:r)}function Ze(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Xe(t,n,e,r,i){var u=t*t,o=u*t;return((1-3*t+3*u-o)*n+(4-6*u+3*o)*e+(1+3*t+3*u-3*o)*r+o*i)/6}function Ve(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],u=t[r+1],o=r>0?t[r-1]:2*i-u,a=r<n-1?t[r+2]:2*u-i;return Xe((e-r/n)*n,o,i,u,a)}}function Ke(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],u=t[r%n],o=t[(r+1)%n],a=t[(r+2)%n];return Xe((e-r/n)*n,i,u,o,a)}}function Je(t){return function(){return t}}function Qe(t,n){return function(e){return t+e*n}}function tr(t,n){var e=n-t;return e?Qe(t,e>180||e<-180?e-360*Math.round(e/360):e):Je(isNaN(t)?n:t)}function nr(t,n){var e=n-t;return e?Qe(t,e):Je(isNaN(t)?n:t)}Gn(Ze,Ge,Zn(Xn,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new Ze(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Vn:Math.pow(Vn,t),new Ze(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*xe,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new ge(255*(n+e*(je*r+Le*i)),255*(n+e*(Ie*r+Ue*i)),255*(n+e*(qe*r)),this.opacity)}}));const er=function t(n){var e=function(t){return 1==(t=+t)?nr:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Je(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=de(t)).r,(n=de(n)).r),i=e(t.g,n.g),u=e(t.b,n.b),o=nr(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=u(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function rr(t){return function(n){var e,r,i=n.length,u=new Array(i),o=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=de(n[e]),u[e]=r.r||0,o[e]=r.g||0,a[e]=r.b||0;return u=t(u),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=u(t),r.g=o(t),r.b=a(t),r+""}}}var ir=rr(Ve),ur=rr(Ke);function or(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,u=new Array(r),o=new Array(r);for(e=0;e<i;++e)u[e]=pr(t[e],n[e]);for(;e<r;++e)o[e]=n[e];return function(t){for(e=0;e<i;++e)o[e]=u[e](t);return o}}function ar(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}function cr(t,n){return n-=t=+t,function(e){return t+n*e}}function sr(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=pr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var lr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,fr=new RegExp(lr.source,"g");function hr(t,n){var e,r,i,u=lr.lastIndex=fr.lastIndex=0,o=-1,a=[],c=[];for(t+="",n+="";(e=lr.exec(t))&&(r=fr.exec(n));)(i=r.index)>u&&(i=n.slice(u,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,c.push({i:o,x:cr(e,r)})),u=fr.lastIndex;return u<n.length&&(i=n.slice(u),a[o]?a[o]+=i:a[++o]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})}function pr(t,n){var e,r=typeof n;return null==n||"boolean"===r?Je(n):("number"===r?cr:"string"===r?(e=le(n))?(n=e,er):hr:n instanceof le?er:n instanceof Date?ar:Array.isArray(n)?or:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?sr:cr)(t,n)}function dr(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var gr,vr,_r,yr,mr=180/Math.PI,br={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function xr(t,n,e,r,i,u){var o,a,c;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,o=-o),{translateX:i,translateY:u,rotate:Math.atan2(n,t)*mr,skewX:Math.atan(c)*mr,scaleX:o,scaleY:a}}function wr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(u,o){var a=[],c=[];return u=t(u),o=t(o),function(t,r,i,u,o,a){if(t!==i||r!==u){var c=o.push("translate(",null,n,null,e);a.push({i:c-4,x:cr(t,i)},{i:c-2,x:cr(r,u)})}else(i||u)&&o.push("translate("+i+n+u+e)}(u.translateX,u.translateY,o.translateX,o.translateY,a,c),function(t,n,e,u){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),u.push({i:e.push(i(e)+"rotate(",null,r)-2,x:cr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(u.rotate,o.rotate,a,c),function(t,n,e,u){t!==n?u.push({i:e.push(i(e)+"skewX(",null,r)-2,x:cr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(u.skewX,o.skewX,a,c),function(t,n,e,r,u,o){if(t!==e||n!==r){var a=u.push(i(u)+"scale(",null,",",null,")");o.push({i:a-4,x:cr(t,e)},{i:a-2,x:cr(n,r)})}else 1===e&&1===r||u.push(i(u)+"scale("+e+","+r+")")}(u.scaleX,u.scaleY,o.scaleX,o.scaleY,a,c),u=o=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var Dr=wr((function(t){return"none"===t?br:(gr||(gr=document.createElement("DIV"),vr=document.documentElement,_r=document.defaultView),gr.style.transform=t,t=_r.getComputedStyle(vr.appendChild(gr),null).getPropertyValue("transform"),vr.removeChild(gr),xr(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Ar=wr((function(t){return null==t?br:(yr||(yr=document.createElementNS("http://www.w3.org/2000/svg","g")),yr.setAttribute("transform",t),(t=yr.transform.baseVal.consolidate())?xr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):br)}),", ",")",")"),Cr=Math.SQRT2;function Er(t){return((t=Math.exp(t))+1/t)/2}function kr(t,n){var e,r,i=t[0],u=t[1],o=t[2],a=n[0],c=n[1],s=n[2],l=a-i,f=c-u,h=l*l+f*f;if(h<1e-12)r=Math.log(s/o)/Cr,e=function(t){return[i+t*l,u+t*f,o*Math.exp(Cr*t*r)]};else{var p=Math.sqrt(h),d=(s*s-o*o+4*h)/(2*o*2*p),g=(s*s-o*o-4*h)/(2*s*2*p),v=Math.log(Math.sqrt(d*d+1)-d),_=Math.log(Math.sqrt(g*g+1)-g);r=(_-v)/Cr,e=function(t){var n,e=t*r,a=Er(v),c=o/(2*p)*(a*(n=Cr*e+v,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(v));return[i+c*l,u+c*f,o*a/Er(Cr*e+v)]}}return e.duration=1e3*r,e}function Mr(t){return function(n,e){var r=t((n=ye(n)).h,(e=ye(e)).h),i=nr(n.s,e.s),u=nr(n.l,e.l),o=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=u(t),n.opacity=o(t),n+""}}}const Fr=Mr(tr);var Sr=Mr(nr);function Tr(t,n){var e=nr((t=Fe(t)).l,(n=Fe(n)).l),r=nr(t.a,n.a),i=nr(t.b,n.b),u=nr(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=u(n),t+""}}function Or(t){return function(n,e){var r=t((n=Re(n)).h,(e=Re(e)).h),i=nr(n.c,e.c),u=nr(n.l,e.l),o=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=u(t),n.opacity=o(t),n+""}}}const Br=Or(tr);var Nr=Or(nr);function zr(t){return function n(e){function r(n,r){var i=t((n=Ge(n)).h,(r=Ge(r)).h),u=nr(n.s,r.s),o=nr(n.l,r.l),a=nr(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=u(t),n.l=o(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}const Rr=zr(tr);var Pr=zr(nr);function jr(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}var Lr,Ir,Ur=0,qr=0,$r=0,Hr=0,Yr=0,Wr=0,Gr="object"==typeof performance&&performance.now?performance:Date,Zr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Xr(){return Yr||(Zr(Vr),Yr=Gr.now()+Wr)}function Vr(){Yr=0}function Kr(){this._call=this._time=this._next=null}function Jr(t,n,e){var r=new Kr;return r.restart(t,n,e),r}function Qr(){Xr(),++Ur;for(var t,n=Lr;n;)(t=Yr-n._time)>=0&&n._call.call(null,t),n=n._next;--Ur}function ti(){Yr=(Hr=Gr.now())+Wr,Ur=qr=0;try{Qr()}finally{Ur=0,function(){for(var t,n,e=Lr,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Lr=n);Ir=t,ei(r)}(),Yr=0}}function ni(){var t=Gr.now(),n=t-Hr;n>1e3&&(Wr-=n,Hr=t)}function ei(t){Ur||(qr&&(qr=clearTimeout(qr)),t-Yr>24?(t<1/0&&(qr=setTimeout(ti,t-Gr.now()-Wr)),$r&&($r=clearInterval($r))):($r||(Hr=Gr.now(),$r=setInterval(ni,1e3)),Ur=1,Zr(ti)))}function ri(t,n,e){var r=new Kr;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}function ii(t,n,e){var r=new Kr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Xr():+e,r.restart((function u(o){o+=i,r.restart(u,i+=n,e),t(o)}),n,e),r)}Kr.prototype=Jr.prototype={constructor:Kr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Xr():+e)+(null==n?0:+n),this._next||Ir===this||(Ir?Ir._next=this:Lr=this,Ir=this),this._call=t,this._time=e,ei()},stop:function(){this._call&&(this._call=null,this._time=1/0,ei())}};var ui=ht("start","end","interrupt"),oi=[];function ai(t,n,e,r,i,u){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function u(c){var s,l,f,h;if(1!==e.state)return a();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return ri(u);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),delete i[s])}if(ri((function(){3===e.state&&(e.state=4,e.timer.restart(o,e.delay,e.time),o(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),u=-1,o=r.length;++u<o;)r[u].call(null,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Jr((function(t){e.state=1,e.timer.restart(u,e.delay,e.time),e.delay<=t&&u(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:ui,tween:oi,time:u.time,delay:u.delay,duration:u.duration,ease:u.ease,timer:null,state:0})}function ci(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>0)throw new Error("too late");return e}function si(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>2)throw new Error("too late");return e}function li(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function fi(t,n){var e,r,i,u=t.__transition,o=!0;if(u){for(i in n=null==n?null:n+"",u)(e=u[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete u[i]):o=!1;o&&delete t.__transition}}function hi(t,n){var e,r;return function(){var i=si(this,t),u=i.tween;if(u!==e)for(var o=0,a=(r=e=u).length;o<a;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}function pi(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var u=si(this,t),o=u.tween;if(o!==r){i=(r=o).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}u.tween=i}}function di(t,n,e){var r=t._id;return t.each((function(){var t=si(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return li(t,r).value[n]}}function gi(t,n){var e;return("number"==typeof n?cr:n instanceof le?er:(e=le(n))?(n=e,er):hr)(t,n)}function vi(t){return function(){this.removeAttribute(t)}}function _i(t){return function(){this.removeAttributeNS(t.space,t.local)}}function yi(t,n,e){var r,i;return function(){var u=this.getAttribute(t);return u===e?null:u===r?i:i=n(r=u,e)}}function mi(t,n,e){var r,i;return function(){var u=this.getAttributeNS(t.space,t.local);return u===e?null:u===r?i:i=n(r=u,e)}}function bi(t,n,e){var r,i,u;return function(){var o,a=e(this);if(null!=a)return(o=this.getAttribute(t))===a?null:o===r&&a===i?u:u=n(r=o,i=a);this.removeAttribute(t)}}function xi(t,n,e){var r,i,u;return function(){var o,a=e(this);if(null!=a)return(o=this.getAttributeNS(t.space,t.local))===a?null:o===r&&a===i?u:u=n(r=o,i=a);this.removeAttributeNS(t.space,t.local)}}function wi(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function Di(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function Ai(t,n){return function(){ci(this,t).delay=+n.apply(this,arguments)}}function Ci(t,n){return n=+n,function(){ci(this,t).delay=n}}function Ei(t,n){return function(){si(this,t).duration=+n.apply(this,arguments)}}function ki(t,n){return n=+n,function(){si(this,t).duration=n}}function Mi(t,n){if("function"!=typeof n)throw new Error;return function(){si(this,t).ease=n}}function Fi(t,n,e){var r,i,u=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?ci:si;return function(){var o=u(this,t),a=o.on;a!==r&&(i=(r=a).copy()).on(n,e),o.on=i}}var Si=Tn.prototype.constructor;function Ti(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}var Oi=0;function Bi(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ni(t){return Tn().transition(t)}function zi(){return++Oi}var Ri=Tn.prototype;function Pi(t){return+t}function ji(t){return t*t}function Li(t){return t*(2-t)}function Ii(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function Ui(t){return t*t*t}function qi(t){return--t*t*t+1}function $i(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Bi.prototype=Ni.prototype={constructor:Bi,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=jt(t));for(var r=this._groups,i=r.length,u=new Array(i),o=0;o<i;++o)for(var a,c,s=r[o],l=s.length,f=u[o]=new Array(l),h=0;h<l;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),f[h]=c,ai(f[h],n,e,h,f,li(a,e)));return new Bi(u,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=It(t));for(var r=this._groups,i=r.length,u=[],o=[],a=0;a<i;++a)for(var c,s=r[a],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),d=li(c,e),g=0,v=p.length;g<v;++g)(h=p[g])&&ai(h,n,e,g,p,d);u.push(p),o.push(c)}return new Bi(u,o,n,e)},filter:function(t){"function"!=typeof t&&(t=Ct(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var u,o=n[i],a=o.length,c=r[i]=[],s=0;s<a;++s)(u=o[s])&&t.call(u,u.__data__,s,o)&&c.push(u);return new Bi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,u=Math.min(r,i),o=new Array(r),a=0;a<u;++a)for(var c,s=n[a],l=e[a],f=s.length,h=o[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)o[a]=n[a];return new Bi(o,this._parents,this._name,this._id)},selection:function(){return new Si(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=zi(),r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],c=a.length,s=0;s<c;++s)if(o=a[s]){var l=li(o,n);ai(o,t,e,s,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Bi(r,this._parents,t,e)},call:Ri.call,nodes:Ri.nodes,node:Ri.node,size:Ri.size,empty:Ri.empty,each:Ri.each,on:function(t,n){var e=this._id;return arguments.length<2?li(this.node(),e).on.on(t):this.each(Fi(e,t,n))},attr:function(t,n){var e=gt(t),r="transform"===e?Ar:gi;return this.attrTween(t,"function"==typeof n?(e.local?xi:bi)(e,r,di(this,"attr."+t,n)):null==n?(e.local?_i:vi)(e):(e.local?mi:yi)(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=gt(t);return this.tween(e,(r.local?wi:Di)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Dr:gi;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var u=en(this,t),o=(this.style.removeProperty(t),en(this,t));return u===o?null:u===e&&o===r?i:i=n(e=u,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,u;return function(){var o=en(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=en(this,t)),o===a?null:o===r&&a===i?u:u=n(r=o,i=a)}}(t,r,di(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var u=en(this,t);return u===e?null:u===r?i:i=n(r=u,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Ti(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(di(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=li(this.node(),e).tween,u=0,o=i.length;u<o;++u)if((r=i[u]).name===t)return r.value;return null}return this.each((null==n?hi:pi)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ai:Ci)(n,t)):li(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ei:ki)(n,t)):li(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Mi(n,t)):li(this.node(),n).ease}};var Hi=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Yi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Wi=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Gi=Math.PI,Zi=Gi/2;function Xi(t){return 1-Math.cos(t*Zi)}function Vi(t){return Math.sin(t*Zi)}function Ki(t){return(1-Math.cos(Gi*t))/2}function Ji(t){return Math.pow(2,10*t-10)}function Qi(t){return 1-Math.pow(2,-10*t)}function tu(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function nu(t){return 1-Math.sqrt(1-t*t)}function eu(t){return Math.sqrt(1- --t*t)}function ru(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var iu=7.5625;function uu(t){return 1-ou(1-t)}function ou(t){return(t=+t)<.36363636363636365?iu*t*t:t<.7272727272727273?iu*(t-=.5454545454545454)*t+.75:t<.9090909090909091?iu*(t-=.8181818181818182)*t+.9375:iu*(t-=.9545454545454546)*t+.984375}function au(t){return((t*=2)<=1?1-ou(1-t):ou(t-1)+1)/2}var cu=1.70158,su=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(cu),lu=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(cu),fu=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(cu),hu=2*Math.PI,pu=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=hu);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*hu)},i.period=function(e){return t(n,e)},i}(1,.3),du=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=hu);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*hu)},i.period=function(e){return t(n,e)},i}(1,.3),gu=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=hu);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*hu)},i.period=function(e){return t(n,e)},i}(1,.3),vu={time:null,delay:0,duration:250,ease:$i};function _u(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return vu.time=Xr(),vu;return e}Tn.prototype.interrupt=function(t){return this.each((function(){fi(this,t)}))},Tn.prototype.transition=function(t){var n,e;t instanceof Bi?(n=t._id,t=t._name):(n=zi(),(e=vu).time=Xr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,u=0;u<i;++u)for(var o,a=r[u],c=a.length,s=0;s<c;++s)(o=a[s])&&ai(o,t,n,s,a,e||_u(o,n));return new Bi(r,this._parents,t,n)};var yu=[null];function mu(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Bi([[t]],yu,n,+r);return null}function bu(t){return function(){return t}}function xu(t,n,e){this.target=t,this.type=n,this.selection=e}function wu(){kt.stopImmediatePropagation()}function Du(){kt.preventDefault(),kt.stopImmediatePropagation()}var Au={name:"drag"},Cu={name:"space"},Eu={name:"handle"},ku={name:"center"},Mu={name:"x",handles:["e","w"].map(Ru),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Fu={name:"y",handles:["n","s"].map(Ru),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Su={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Ru),input:function(t){return t},output:function(t){return t}},Tu={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ou={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Bu={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Nu={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},zu={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ru(t){return{type:t}}function Pu(){return!kt.button}function ju(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Lu(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Iu(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Uu(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function qu(){return Yu(Mu)}function $u(){return Yu(Fu)}function Hu(){return Yu(Su)}function Yu(t){var n,e=ju,r=Pu,i=ht(o,"start","brush","end"),u=6;function o(n){var e=n.property("__brush",f).selectAll(".overlay").data([Ru("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Tu.overlay).merge(e).each((function(){var t=Lu(this).extent;On(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Ru("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Tu.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Tu[t.type]})),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function a(){var t=On(this),n=Lu(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-u/2:n[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-u/2:n[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new s(t,n)}function s(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function l(){if(kt.touches){if(kt.changedTouches.length<kt.touches.length)return Du()}else if(n)return;if(r.apply(this,arguments)){var e,i,u,o,s,l,f,h,p,d,g,v,_,y=this,m=kt.target.__data__.type,b="selection"===(kt.metaKey?m="overlay":m)?Au:kt.altKey?ku:Eu,x=t===Fu?null:Nu[m],w=t===Mu?null:zu[m],D=Lu(y),A=D.extent,C=D.selection,E=A[0][0],k=A[0][1],M=A[1][0],F=A[1][1],S=x&&w&&kt.shiftKey,T=Rt(y),O=T,B=c(y,arguments).beforestart();"overlay"===m?D.selection=C=[[e=t===Fu?E:T[0],u=t===Mu?k:T[1]],[s=t===Fu?M:e,f=t===Mu?F:u]]:(e=C[0][0],u=C[0][1],s=C[1][0],f=C[1][1]),i=e,o=u,l=s,h=f;var N=On(y).attr("pointer-events","none"),z=N.selectAll(".overlay").attr("cursor",Tu[m]);if(kt.touches)N.on("touchmove.brush",P,!0).on("touchend.brush touchcancel.brush",L,!0);else{var R=On(kt.view).on("keydown.brush",I,!0).on("keyup.brush",U,!0).on("mousemove.brush",P,!0).on("mouseup.brush",L,!0);jn(kt.view)}wu(),fi(y),a.call(y),B.start()}function P(){var t=Rt(y);!S||v||_||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?_=!0:v=!0),O=t,g=!0,Du(),j()}function j(){var t;switch(p=O[0]-T[0],d=O[1]-T[1],b){case Cu:case Au:x&&(p=Math.max(E-e,Math.min(M-s,p)),i=e+p,l=s+p),w&&(d=Math.max(k-u,Math.min(F-f,d)),o=u+d,h=f+d);break;case Eu:x<0?(p=Math.max(E-e,Math.min(M-e,p)),i=e+p,l=s):x>0&&(p=Math.max(E-s,Math.min(M-s,p)),i=e,l=s+p),w<0?(d=Math.max(k-u,Math.min(F-u,d)),o=u+d,h=f):w>0&&(d=Math.max(k-f,Math.min(F-f,d)),o=u,h=f+d);break;case ku:x&&(i=Math.max(E,Math.min(M,e-p*x)),l=Math.max(E,Math.min(M,s+p*x))),w&&(o=Math.max(k,Math.min(F,u-d*w)),h=Math.max(k,Math.min(F,f+d*w)))}l<i&&(x*=-1,t=e,e=s,s=t,t=i,i=l,l=t,m in Ou&&z.attr("cursor",Tu[m=Ou[m]])),h<o&&(w*=-1,t=u,u=f,f=t,t=o,o=h,h=t,m in Bu&&z.attr("cursor",Tu[m=Bu[m]])),D.selection&&(C=D.selection),v&&(i=C[0][0],l=C[1][0]),_&&(o=C[0][1],h=C[1][1]),C[0][0]===i&&C[0][1]===o&&C[1][0]===l&&C[1][1]===h||(D.selection=[[i,o],[l,h]],a.call(y),B.brush())}function L(){if(wu(),kt.touches){if(kt.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),N.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Ln(kt.view,g),R.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);N.attr("pointer-events","all"),z.attr("cursor",Tu.overlay),D.selection&&(C=D.selection),Iu(C)&&(D.selection=null,a.call(y)),B.end()}function I(){switch(kt.keyCode){case 16:S=x&&w;break;case 18:b===Eu&&(x&&(s=l-p*x,e=i+p*x),w&&(f=h-d*w,u=o+d*w),b=ku,j());break;case 32:b!==Eu&&b!==ku||(x<0?s=l-p:x>0&&(e=i-p),w<0?f=h-d:w>0&&(u=o-d),b=Cu,z.attr("cursor",Tu.selection),j());break;default:return}Du()}function U(){switch(kt.keyCode){case 16:S&&(v=_=S=!1,j());break;case 18:b===ku&&(x<0?s=l:x>0&&(e=i),w<0?f=h:w>0&&(u=o),b=Eu,j());break;case 32:b===Cu&&(kt.altKey?(x&&(s=l-p*x,e=i+p*x),w&&(f=h-d*w,u=o+d*w),b=ku):(x<0?s=l:x>0&&(e=i),w<0?f=h:w>0&&(u=o),b=Eu),z.attr("cursor",Tu[m]),j());break;default:return}Du()}}function f(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return o.move=function(n,e){n.selection?n.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=c(n,arguments),u=r.selection,o=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),s=pr(u,o);function l(t){r.selection=1===t&&Iu(o)?null:s(t),a.call(n),i.brush()}return u&&o?l:l(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,u=t.input("function"==typeof e?e.apply(n,r):e,i.extent),o=c(n,r).beforestart();fi(n),i.selection=null==u||Iu(u)?null:u,a.call(n),o.start().brush().end()}))},s.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){Bt(new xu(o,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},o.extent=function(t){return arguments.length?(e="function"==typeof t?t:bu([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):e},o.filter=function(t){return arguments.length?(r="function"==typeof t?t:bu(!!t),o):r},o.handleSize=function(t){return arguments.length?(u=+t,o):u},o.on=function(){var t=i.on.apply(i,arguments);return t===i?o:t},o}var Wu=Math.cos,Gu=Math.sin,Zu=Math.PI,Xu=Zu/2,Vu=2*Zu,Ku=Math.max;function Ju(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function Qu(){var t=0,n=null,e=null,r=null;function i(i){var u,o,a,c,s,l,f=i.length,h=[],p=D(f),d=[],g=[],v=g.groups=new Array(f),_=new Array(f*f);for(u=0,s=-1;++s<f;){for(o=0,l=-1;++l<f;)o+=i[s][l];h.push(o),d.push(D(f)),u+=o}for(n&&p.sort((function(t,e){return n(h[t],h[e])})),e&&d.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(u=Ku(0,Vu-t*f)/u)?t:Vu/f,o=0,s=-1;++s<f;){for(a=o,l=-1;++l<f;){var y=p[s],m=d[y][l],b=i[y][m],x=o,w=o+=b*u;_[m*f+y]={index:y,subindex:m,startAngle:x,endAngle:w,value:b}}v[y]={index:y,startAngle:a,endAngle:o,value:h[y]},o+=c}for(s=-1;++s<f;)for(l=s-1;++l<f;){var A=_[l*f+s],C=_[s*f+l];(A.value||C.value)&&g.push(A.value<C.value?{source:C,target:A}:{source:A,target:C})}return r?g.sort(r):g}return i.padAngle=function(n){return arguments.length?(t=Ku(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Ju(t))._=t,i):r&&r._},i}var to=Array.prototype.slice;function no(t){return function(){return t}}var eo=Math.PI,ro=2*eo,io=1e-6,uo=ro-io;function oo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function ao(){return new oo}oo.prototype=ao.prototype={constructor:oo,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,u){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+u)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var u=this._x1,o=this._y1,a=e-t,c=r-n,s=u-t,l=o-n,f=s*s+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>io)if(Math.abs(l*a-c*s)>io&&i){var h=e-u,p=r-o,d=a*a+c*c,g=h*h+p*p,v=Math.sqrt(d),_=Math.sqrt(f),y=i*Math.tan((eo-Math.acos((d+f-g)/(2*v*_)))/2),m=y/_,b=y/v;Math.abs(m-1)>io&&(this._+="L"+(t+m*s)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>s*p)+","+(this._x1=t+b*a)+","+(this._y1=n+b*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,u){t=+t,n=+n;var o=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+o,s=n+a,l=1^u,f=u?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>io||Math.abs(this._y1-s)>io)&&(this._+="L"+c+","+s),e&&(f<0&&(f=f%ro+ro),f>uo?this._+="A"+e+","+e+",0,1,"+l+","+(t-o)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=c)+","+(this._y1=s):f>io&&(this._+="A"+e+","+e+",0,"+ +(f>=eo)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const co=ao;function so(t){return t.source}function lo(t){return t.target}function fo(t){return t.radius}function ho(t){return t.startAngle}function po(t){return t.endAngle}function go(){var t=so,n=lo,e=fo,r=ho,i=po,u=null;function o(){var o,a=to.call(arguments),c=t.apply(this,a),s=n.apply(this,a),l=+e.apply(this,(a[0]=c,a)),f=r.apply(this,a)-Xu,h=i.apply(this,a)-Xu,p=l*Wu(f),d=l*Gu(f),g=+e.apply(this,(a[0]=s,a)),v=r.apply(this,a)-Xu,_=i.apply(this,a)-Xu;if(u||(u=o=co()),u.moveTo(p,d),u.arc(0,0,l,f,h),f===v&&h===_||(u.quadraticCurveTo(0,0,g*Wu(v),g*Gu(v)),u.arc(0,0,g,v,_)),u.quadraticCurveTo(0,0,p,d),u.closePath(),o)return u=null,o+""||null}return o.radius=function(t){return arguments.length?(e="function"==typeof t?t:no(+t),o):e},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:no(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:no(+t),o):i},o.source=function(n){return arguments.length?(t=n,o):t},o.target=function(t){return arguments.length?(n=t,o):n},o.context=function(t){return arguments.length?(u=null==t?null:t,o):u},o}var vo="$";function _o(){}function yo(t,n){var e=new _o;if(t instanceof _o)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,u=t.length;if(null==n)for(;++i<u;)e.set(i,t[i]);else for(;++i<u;)e.set(n(r=t[i],i,t),r)}else if(t)for(var o in t)e.set(o,t[o]);return e}_o.prototype=yo.prototype={constructor:_o,has:function(t){return vo+t in this},get:function(t){return this[vo+t]},set:function(t,n){return this[vo+t]=n,this},remove:function(t){var n=vo+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===vo&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===vo&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===vo&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===vo&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===vo&&++t;return t},empty:function(){for(var t in this)if(t[0]===vo)return!1;return!0},each:function(t){for(var n in this)n[0]===vo&&t(this[n],n.slice(1),this)}};const mo=yo;function bo(){var t,n,e,r=[],i=[];function u(e,i,o,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,s,l,f=-1,h=e.length,p=r[i++],d=mo(),g=o();++f<h;)(l=d.get(c=p(s=e[f])+""))?l.push(s):d.set(c,[s]);return d.each((function(t,n){a(g,n,u(t,i,o,a))})),g}function o(t,e){if(++e>r.length)return t;var u,a=i[e-1];return null!=n&&e>=r.length?u=t.entries():(u=[],t.each((function(t,n){u.push({key:n,values:o(t,e)})}))),null!=a?u.sort((function(t,n){return a(t.key,n.key)})):u}return e={object:function(t){return u(t,0,xo,wo)},map:function(t){return u(t,0,Do,Ao)},entries:function(t){return o(u(t,0,Do,Ao),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function xo(){return{}}function wo(t,n,e){t[n]=e}function Do(){return mo()}function Ao(t,n,e){t.set(n,e)}function Co(){}var Eo=mo.prototype;function ko(t,n){var e=new Co;if(t instanceof Co)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Co.prototype=ko.prototype={constructor:Co,has:Eo.has,add:function(t){return this[vo+(t+="")]=t,this},remove:Eo.remove,clear:Eo.clear,values:Eo.keys,size:Eo.size,empty:Eo.empty,each:Eo.each};const Mo=ko;function Fo(t){var n=[];for(var e in t)n.push(e);return n}function So(t){var n=[];for(var e in t)n.push(t[e]);return n}function To(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var Oo={},Bo={};function No(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function zo(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],u=t.length,o=0,a=0,c=u<=0,s=!1;function l(){if(c)return Bo;if(s)return s=!1,Oo;var n,r,i=o;if(34===t.charCodeAt(i)){for(;o++<u&&34!==t.charCodeAt(o)||34===t.charCodeAt(++o););return(n=o)>=u?c=!0:10===(r=t.charCodeAt(o++))?s=!0:13===r&&(s=!0,10===t.charCodeAt(o)&&++o),t.slice(i+1,n-1).replace(/""/g,'"')}for(;o<u;){if(10===(r=t.charCodeAt(n=o++)))s=!0;else if(13===r)s=!0,10===t.charCodeAt(o)&&++o;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,u)}for(10===t.charCodeAt(u-1)&&--u,13===t.charCodeAt(u-1)&&--u;(r=l())!==Bo;){for(var f=[];r!==Oo&&r!==Bo;)f.push(r),r=l();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n){return n.map(u).join(t)}function u(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,u=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=No(t);return function(r,i){return n(e(r),i,t)}}(t,n):No(t)}));return u.columns=i,u},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}(n)),[e.map(u).join(t)].concat(n.map((function(n){return e.map((function(t){return u(n[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}}var Ro=zo(","),Po=Ro.parse,jo=Ro.parseRows,Lo=Ro.format,Io=Ro.formatRows,Uo=zo("\t"),qo=Uo.parse,$o=Uo.parseRows,Ho=Uo.format,Yo=Uo.formatRows;function Wo(t,n){var e;function r(){var r,i,u=e.length,o=0,a=0;for(r=0;r<u;++r)o+=(i=e[r]).x,a+=i.y;for(o=o/u-t,a=a/u-n,r=0;r<u;++r)(i=e[r]).x-=o,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}function Go(t){return function(){return t}}function Zo(){return 1e-6*(Math.random()-.5)}function Xo(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,u,o,a,c,s,l,f,h,p=t._root,d={data:r},g=t._x0,v=t._y0,_=t._x1,y=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((s=n>=(u=(g+_)/2))?g=u:_=u,(l=e>=(o=(v+y)/2))?v=o:y=o,i=p,!(p=p[f=l<<1|s]))return i[f]=d,t;if(a=+t._x.call(null,p.data),c=+t._y.call(null,p.data),n===a&&e===c)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(s=n>=(u=(g+_)/2))?g=u:_=u,(l=e>=(o=(v+y)/2))?v=o:y=o}while((f=l<<1|s)==(h=(c>=o)<<1|a>=u));return i[h]=p,i[f]=d,t}function Vo(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function Ko(t){return t[0]}function Jo(t){return t[1]}function Qo(t,n,e){var r=new ta(null==n?Ko:n,null==e?Jo:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ta(t,n,e,r,i,u){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=u,this._root=void 0}function na(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var ea=Qo.prototype=ta.prototype;function ra(t){return t.x+t.vx}function ia(t){return t.y+t.vy}function ua(t){var n,e,r=1,i=1;function u(){for(var t,u,a,c,s,l,f,h=n.length,p=0;p<i;++p)for(u=Qo(n,ra,ia).visitAfter(o),t=0;t<h;++t)a=n[t],l=e[a.index],f=l*l,c=a.x+a.vx,s=a.y+a.vy,u.visit(d);function d(t,n,e,i,u){var o=t.data,h=t.r,p=l+h;if(!o)return n>c+p||i<c-p||e>s+p||u<s-p;if(o.index>a.index){var d=c-o.x-o.vx,g=s-o.y-o.vy,v=d*d+g*g;v<p*p&&(0===d&&(v+=(d=Zo())*d),0===g&&(v+=(g=Zo())*g),v=(p-(v=Math.sqrt(v)))/v*r,a.vx+=(d*=v)*(p=(h*=h)/(f+h)),a.vy+=(g*=v)*p,o.vx-=d*(p=1-p),o.vy-=g*p)}}}function o(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,u=n.length;for(e=new Array(u),r=0;r<u;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=Go(null==t?1:+t)),u.initialize=function(t){n=t,a()},u.iterations=function(t){return arguments.length?(i=+t,u):i},u.strength=function(t){return arguments.length?(r=+t,u):r},u.radius=function(n){return arguments.length?(t="function"==typeof n?n:Go(+n),a(),u):t},u}function oa(t){return t.index}function aa(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function ca(t){var n,e,r,i,u,o=oa,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=Go(30),s=1;function l(r){for(var i=0,o=t.length;i<s;++i)for(var a,c,l,f,h,p,d,g=0;g<o;++g)c=(a=t[g]).source,f=(l=a.target).x+l.vx-c.x-c.vx||Zo(),h=l.y+l.vy-c.y-c.vy||Zo(),f*=p=((p=Math.sqrt(f*f+h*h))-e[g])/p*r*n[g],h*=p,l.vx-=f*(d=u[g]),l.vy-=h*d,c.vx+=f*(d=1-d),c.vy+=h*d}function f(){if(r){var a,c,s=r.length,l=t.length,f=mo(r,o);for(a=0,i=new Array(s);a<l;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=aa(f,c.source)),"object"!=typeof c.target&&(c.target=aa(f,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,u=new Array(l);a<l;++a)c=t[a],u[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(l),h(),e=new Array(l),p()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(n){return arguments.length?(t=n,f(),l):t},l.id=function(t){return arguments.length?(o=t,l):o},l.iterations=function(t){return arguments.length?(s=+t,l):s},l.strength=function(t){return arguments.length?(a="function"==typeof t?t:Go(+t),h(),l):a},l.distance=function(t){return arguments.length?(c="function"==typeof t?t:Go(+t),p(),l):c},l}function sa(t){return t.x}function la(t){return t.y}ea.copy=function(){var t,n,e=new ta(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=na(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=na(n));return e},ea.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Xo(this.cover(n,e),n,e,t)},ea.addAll=function(t){var n,e,r,i,u=t.length,o=new Array(u),a=new Array(u),c=1/0,s=1/0,l=-1/0,f=-1/0;for(e=0;e<u;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(o[e]=r,a[e]=i,r<c&&(c=r),r>l&&(l=r),i<s&&(s=i),i>f&&(f=i));for(l<c&&(c=this._x0,l=this._x1),f<s&&(s=this._y0,f=this._y1),this.cover(c,s).cover(l,f),e=0;e<u;++e)Xo(this,o[e],a[e],t[e]);return this},ea.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,u=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,u=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>u))return this;var o,a,c=i-e,s=this._root;switch(a=(n<(r+u)/2)<<1|t<(e+i)/2){case 0:do{(o=new Array(4))[a]=s,s=o}while(u=r+(c*=2),t>(i=e+c)||n>u);break;case 1:do{(o=new Array(4))[a]=s,s=o}while(u=r+(c*=2),(e=i-c)>t||n>u);break;case 2:do{(o=new Array(4))[a]=s,s=o}while(r=u-(c*=2),t>(i=e+c)||r>n);break;case 3:do{(o=new Array(4))[a]=s,s=o}while(r=u-(c*=2),(e=i-c)>t||r>n)}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=r,this._x1=i,this._y1=u,this},ea.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},ea.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ea.find=function(t,n,e){var r,i,u,o,a,c,s,l=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new Vo(g,l,f,h,p)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,p=n+e,e*=e);c=d.pop();)if(!(!(g=c.node)||(i=c.x0)>h||(u=c.y0)>p||(o=c.x1)<l||(a=c.y1)<f))if(g.length){var v=(i+o)/2,_=(u+a)/2;d.push(new Vo(g[3],v,_,o,a),new Vo(g[2],i,_,v,a),new Vo(g[1],v,u,o,_),new Vo(g[0],i,u,v,_)),(s=(n>=_)<<1|t>=v)&&(c=d[d.length-1],d[d.length-1]=d[d.length-1-s],d[d.length-1-s]=c)}else{var y=t-+this._x.call(null,g.data),m=n-+this._y.call(null,g.data),b=y*y+m*m;if(b<e){var x=Math.sqrt(e=b);l=t-x,f=n-x,h=t+x,p=n+x,r=g.data}}return r},ea.remove=function(t){if(isNaN(u=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var n,e,r,i,u,o,a,c,s,l,f,h,p=this._root,d=this._x0,g=this._y0,v=this._x1,_=this._y1;if(!p)return this;if(p.length)for(;;){if((s=u>=(a=(d+v)/2))?d=a:v=a,(l=o>=(c=(g+_)/2))?g=c:_=c,n=p,!(p=p[f=l<<1|s]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},ea.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},ea.root=function(){return this._root},ea.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},ea.visit=function(t){var n,e,r,i,u,o,a=[],c=this._root;for(c&&a.push(new Vo(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,u=n.x1,o=n.y1)&&c.length){var s=(r+u)/2,l=(i+o)/2;(e=c[3])&&a.push(new Vo(e,s,l,u,o)),(e=c[2])&&a.push(new Vo(e,r,l,s,o)),(e=c[1])&&a.push(new Vo(e,s,i,u,l)),(e=c[0])&&a.push(new Vo(e,r,i,s,l))}return this},ea.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Vo(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var u,o=n.x0,a=n.y0,c=n.x1,s=n.y1,l=(o+c)/2,f=(a+s)/2;(u=i[0])&&e.push(new Vo(u,o,a,l,f)),(u=i[1])&&e.push(new Vo(u,l,a,c,f)),(u=i[2])&&e.push(new Vo(u,o,f,l,s)),(u=i[3])&&e.push(new Vo(u,l,f,c,s))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},ea.x=function(t){return arguments.length?(this._x=t,this):this._x},ea.y=function(t){return arguments.length?(this._y=t,this):this._y};var fa,ha=Math.PI*(3-Math.sqrt(5));function pa(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),u=0,o=.6,a=mo(),c=Jr(l),s=ht("tick","end");function l(){f(),s.call("tick",n),e<r&&(c.stop(),s.call("end",n))}function f(){var n,r,c=t.length;for(e+=(u-e)*i,a.each((function(t){t(e)})),n=0;n<c;++n)null==(r=t[n]).fx?r.x+=r.vx*=o:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=o:(r.y=r.fy,r.vy=0)}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),u=e*ha;n.x=i*Math.cos(u),n.y=i*Math.sin(u)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:f,restart:function(){return c.restart(l),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(u=+t,n):u},velocityDecay:function(t){return arguments.length?(o=1-t,n):1-o},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,u,o,a,c,s=0,l=t.length;for(null==r?r=1/0:r*=r,s=0;s<l;++s)(o=(i=n-(a=t[s]).x)*i+(u=e-a.y)*u)<r&&(c=a,r=o);return c},on:function(t,e){return arguments.length>1?(s.on(t,e),n):s.on(t)}}}function da(){var t,n,e,r,i=Go(-30),u=1,o=1/0,a=.81;function c(r){var i,u=t.length,o=Qo(t,sa,la).visitAfter(l);for(e=r,i=0;i<u;++i)n=t[i],o.visit(f)}function s(){if(t){var n,e,u=t.length;for(r=new Array(u),n=0;n<u;++n)e=t[n],r[e.index]=+i(e,n,t)}}function l(t){var n,e,i,u,o,a=0,c=0;if(t.length){for(i=u=o=0;o<4;++o)(n=t[o])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,u+=e*n.y);t.x=i/c,t.y=u/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function f(t,i,c,s){if(!t.value)return!0;var l=t.x-n.x,f=t.y-n.y,h=s-i,p=l*l+f*f;if(h*h/a<p)return p<o&&(0===l&&(p+=(l=Zo())*l),0===f&&(p+=(f=Zo())*f),p<u&&(p=Math.sqrt(u*p)),n.vx+=l*t.value*e/p,n.vy+=f*t.value*e/p),!0;if(!(t.length||p>=o)){(t.data!==n||t.next)&&(0===l&&(p+=(l=Zo())*l),0===f&&(p+=(f=Zo())*f),p<u&&(p=Math.sqrt(u*p)));do{t.data!==n&&(h=r[t.data.index]*e/p,n.vx+=l*h,n.vy+=f*h)}while(t=t.next)}}return c.initialize=function(n){t=n,s()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:Go(+t),s(),c):i},c.distanceMin=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.distanceMax=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c}function ga(t,n,e){var r,i,u,o=Go(.1);function a(t){for(var o=0,a=r.length;o<a;++o){var c=r[o],s=c.x-n||1e-6,l=c.y-e||1e-6,f=Math.sqrt(s*s+l*l),h=(u[o]-f)*i[o]*t/f;c.vx+=s*h,c.vy+=l*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),u=new Array(e),n=0;n<e;++n)u[n]=+t(r[n],n,r),i[n]=isNaN(u[n])?0:+o(r[n],n,r)}}return"function"!=typeof t&&(t=Go(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(o="function"==typeof t?t:Go(+t),c(),a):o},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:Go(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a}function va(t){var n,e,r,i=Go(.1);function u(t){for(var i,u=0,o=n.length;u<o;++u)(i=n[u]).vx+=(r[u]-i.x)*e[u]*t}function o(){if(n){var u,o=n.length;for(e=new Array(o),r=new Array(o),u=0;u<o;++u)e[u]=isNaN(r[u]=+t(n[u],u,n))?0:+i(n[u],u,n)}}return"function"!=typeof t&&(t=Go(null==t?0:+t)),u.initialize=function(t){n=t,o()},u.strength=function(t){return arguments.length?(i="function"==typeof t?t:Go(+t),o(),u):i},u.x=function(n){return arguments.length?(t="function"==typeof n?n:Go(+n),o(),u):t},u}function _a(t){var n,e,r,i=Go(.1);function u(t){for(var i,u=0,o=n.length;u<o;++u)(i=n[u]).vy+=(r[u]-i.y)*e[u]*t}function o(){if(n){var u,o=n.length;for(e=new Array(o),r=new Array(o),u=0;u<o;++u)e[u]=isNaN(r[u]=+t(n[u],u,n))?0:+i(n[u],u,n)}}return"function"!=typeof t&&(t=Go(null==t?0:+t)),u.initialize=function(t){n=t,o()},u.strength=function(t){return arguments.length?(i="function"==typeof t?t:Go(+t),o(),u):i},u.y=function(n){return arguments.length?(t="function"==typeof n?n:Go(+n),o(),u):t},u}function ya(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function ma(t){return(t=ya(Math.abs(t)))?t[1]:NaN}function ba(t,n){var e=ya(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}const xa={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,u=-1;i<r;++i)switch(t[i]){case".":u=e=i;break;case"0":0===u&&(u=i),e=i;break;case"e":break t;default:u>0&&(u=0)}return u>0?t.slice(0,u)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ba(100*t,n)},r:ba,s:function(t,n){var e=ya(t,n);if(!e)return t+"";var r=e[0],i=e[1],u=i-(fa=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return u===o?r:u>o?r+new Array(u-o+1).join("0"):u>0?r.slice(0,u)+"."+r.slice(u):"0."+new Array(1-u).join("0")+ya(t,Math.max(0,n+u-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};var wa=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function Da(t){return new Aa(t)}function Aa(t){if(!(n=wa.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",u=n[4]||"",o=!!n[5],a=n[6]&&+n[6],c=!!n[7],s=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(c=!0,l="g"):xa[l]||(l=""),(o||"0"===e&&"="===r)&&(o=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=u,this.zero=o,this.width=a,this.comma=c,this.precision=s,this.type=l}function Ca(t){return t}Da.prototype=Aa.prototype,Aa.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Ea,ka,Ma,Fa=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Sa(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,u=[],o=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),u.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[o=(o+1)%n.length];return u.reverse().join(e)}):Ca,i=t.currency,u=t.decimal,o=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(t.numerals):Ca,a=t.percent||"%";function c(t){var n=(t=Da(t)).fill,e=t.align,c=t.sign,s=t.symbol,l=t.zero,f=t.width,h=t.comma,p=t.precision,d=t.type,g="$"===s?i[0]:"#"===s&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",v="$"===s?i[1]:/[%p]/.test(d)?a:"",_=xa[d],y=!d||/[defgprs%]/.test(d);function m(t){var i,a,s,m=g,b=v;if("c"===d)b=_(t)+b,t="";else{var x=(t=+t)<0;if(t=_(Math.abs(t),p),x&&0==+t&&(x=!1),m=(x?"("===c?c:"-":"-"===c||"("===c?"":c)+m,b=b+("s"===d?Fa[8+fa/3]:"")+(x&&"("===c?")":""),y)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?u+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var w=m.length+t.length+b.length,D=w<f?new Array(f-w+1).join(n):"";switch(h&&l&&(t=r(D+t,D.length?f-b.length:1/0),D=""),e){case"<":t=m+t+b+D;break;case"=":t=m+D+t+b;break;case"^":t=D.slice(0,w=D.length>>1)+m+t+b+D.slice(w);break;default:t=D+m+t+b}return o(t)}return p=null==p?d?6:12:/[gprs]/.test(d)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),m.toString=function(){return t+""},m}return{format:c,formatPrefix:function(t,n){var e=c(((t=Da(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ma(n)/3))),i=Math.pow(10,-r),u=Fa[8+r/3];return function(t){return e(i*t)+u}}}}function Ta(t){return Ea=Sa(t),ka=Ea.format,Ma=Ea.formatPrefix,Ea}function Oa(t){return Math.max(0,-ma(Math.abs(t)))}function Ba(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ma(n)/3)))-ma(Math.abs(t)))}function Na(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ma(n)-ma(t))+1}function za(){return new Ra}function Ra(){this.reset()}Ta({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Ra.prototype={constructor:Ra,reset:function(){this.s=this.t=0},add:function(t){ja(Pa,t,this.t),ja(this,Pa.s,this.s),this.s?this.t+=Pa.t:this.s=Pa.t},valueOf:function(){return this.s}};var Pa=new Ra;function ja(t,n,e){var r=t.s=n+e,i=r-n,u=r-i;t.t=n-u+(e-i)}var La=1e-6,Ia=Math.PI,Ua=Ia/2,qa=Ia/4,$a=2*Ia,Ha=180/Ia,Ya=Ia/180,Wa=Math.abs,Ga=Math.atan,Za=Math.atan2,Xa=Math.cos,Va=Math.ceil,Ka=Math.exp,Ja=(Math.floor,Math.log),Qa=Math.pow,tc=Math.sin,nc=Math.sign||function(t){return t>0?1:t<0?-1:0},ec=Math.sqrt,rc=Math.tan;function ic(t){return t>1?0:t<-1?Ia:Math.acos(t)}function uc(t){return t>1?Ua:t<-1?-Ua:Math.asin(t)}function oc(t){return(t=tc(t/2))*t}function ac(){}function cc(t,n){t&&lc.hasOwnProperty(t.type)&&lc[t.type](t,n)}var sc={Feature:function(t,n){cc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)cc(e[r].geometry,n)}},lc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){fc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)fc(e[r],n,0)},Polygon:function(t,n){hc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)hc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)cc(e[r],n)}};function fc(t,n,e){var r,i=-1,u=t.length-e;for(n.lineStart();++i<u;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function hc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)fc(t[e],n,1);n.polygonEnd()}function pc(t,n){t&&sc.hasOwnProperty(t.type)?sc[t.type](t,n):cc(t,n)}var dc,gc,vc,_c,yc,mc=za(),bc=za(),xc={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){mc.reset(),xc.lineStart=wc,xc.lineEnd=Dc},polygonEnd:function(){var t=+mc;bc.add(t<0?$a+t:t),this.lineStart=this.lineEnd=this.point=ac},sphere:function(){bc.add($a)}};function wc(){xc.point=Ac}function Dc(){Cc(dc,gc)}function Ac(t,n){xc.point=Cc,dc=t,gc=n,vc=t*=Ya,_c=Xa(n=(n*=Ya)/2+qa),yc=tc(n)}function Cc(t,n){var e=(t*=Ya)-vc,r=e>=0?1:-1,i=r*e,u=Xa(n=(n*=Ya)/2+qa),o=tc(n),a=yc*o,c=_c*u+a*Xa(i),s=a*r*tc(i);mc.add(Za(s,c)),vc=t,_c=u,yc=o}function Ec(t){return bc.reset(),pc(t,xc),2*bc}function kc(t){return[Za(t[1],t[0]),uc(t[2])]}function Mc(t){var n=t[0],e=t[1],r=Xa(e);return[r*Xa(n),r*tc(n),tc(e)]}function Fc(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Sc(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Tc(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Oc(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Bc(t){var n=ec(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Nc,zc,Rc,Pc,jc,Lc,Ic,Uc,qc,$c,Hc,Yc,Wc,Gc,Zc,Xc,Vc,Kc,Jc,Qc,ts,ns,es,rs,is,us,os=za(),as={point:cs,lineStart:ls,lineEnd:fs,polygonStart:function(){as.point=hs,as.lineStart=ps,as.lineEnd=ds,os.reset(),xc.polygonStart()},polygonEnd:function(){xc.polygonEnd(),as.point=cs,as.lineStart=ls,as.lineEnd=fs,mc<0?(Nc=-(Rc=180),zc=-(Pc=90)):os>La?Pc=90:os<-1e-6&&(zc=-90),$c[0]=Nc,$c[1]=Rc}};function cs(t,n){qc.push($c=[Nc=t,Rc=t]),n<zc&&(zc=n),n>Pc&&(Pc=n)}function ss(t,n){var e=Mc([t*Ya,n*Ya]);if(Uc){var r=Sc(Uc,e),i=Sc([r[1],-r[0],0],r);Bc(i),i=kc(i);var u,o=t-jc,a=o>0?1:-1,c=i[0]*Ha*a,s=Wa(o)>180;s^(a*jc<c&&c<a*t)?(u=i[1]*Ha)>Pc&&(Pc=u):s^(a*jc<(c=(c+360)%360-180)&&c<a*t)?(u=-i[1]*Ha)<zc&&(zc=u):(n<zc&&(zc=n),n>Pc&&(Pc=n)),s?t<jc?gs(Nc,t)>gs(Nc,Rc)&&(Rc=t):gs(t,Rc)>gs(Nc,Rc)&&(Nc=t):Rc>=Nc?(t<Nc&&(Nc=t),t>Rc&&(Rc=t)):t>jc?gs(Nc,t)>gs(Nc,Rc)&&(Rc=t):gs(t,Rc)>gs(Nc,Rc)&&(Nc=t)}else qc.push($c=[Nc=t,Rc=t]);n<zc&&(zc=n),n>Pc&&(Pc=n),Uc=e,jc=t}function ls(){as.point=ss}function fs(){$c[0]=Nc,$c[1]=Rc,as.point=cs,Uc=null}function hs(t,n){if(Uc){var e=t-jc;os.add(Wa(e)>180?e+(e>0?360:-360):e)}else Lc=t,Ic=n;xc.point(t,n),ss(t,n)}function ps(){xc.lineStart()}function ds(){hs(Lc,Ic),xc.lineEnd(),Wa(os)>La&&(Nc=-(Rc=180)),$c[0]=Nc,$c[1]=Rc,Uc=null}function gs(t,n){return(n-=t)<0?n+360:n}function vs(t,n){return t[0]-n[0]}function _s(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function ys(t){var n,e,r,i,u,o,a;if(Pc=Rc=-(Nc=zc=1/0),qc=[],pc(t,as),e=qc.length){for(qc.sort(vs),n=1,u=[r=qc[0]];n<e;++n)_s(r,(i=qc[n])[0])||_s(r,i[1])?(gs(r[0],i[1])>gs(r[0],r[1])&&(r[1]=i[1]),gs(i[0],r[1])>gs(r[0],r[1])&&(r[0]=i[0])):u.push(r=i);for(o=-1/0,n=0,r=u[e=u.length-1];n<=e;r=i,++n)i=u[n],(a=gs(r[1],i[0]))>o&&(o=a,Nc=i[0],Rc=r[1])}return qc=$c=null,Nc===1/0||zc===1/0?[[NaN,NaN],[NaN,NaN]]:[[Nc,zc],[Rc,Pc]]}var ms={sphere:ac,point:bs,lineStart:ws,lineEnd:Cs,polygonStart:function(){ms.lineStart=Es,ms.lineEnd=ks},polygonEnd:function(){ms.lineStart=ws,ms.lineEnd=Cs}};function bs(t,n){t*=Ya;var e=Xa(n*=Ya);xs(e*Xa(t),e*tc(t),tc(n))}function xs(t,n,e){++Hc,Wc+=(t-Wc)/Hc,Gc+=(n-Gc)/Hc,Zc+=(e-Zc)/Hc}function ws(){ms.point=Ds}function Ds(t,n){t*=Ya;var e=Xa(n*=Ya);rs=e*Xa(t),is=e*tc(t),us=tc(n),ms.point=As,xs(rs,is,us)}function As(t,n){t*=Ya;var e=Xa(n*=Ya),r=e*Xa(t),i=e*tc(t),u=tc(n),o=Za(ec((o=is*u-us*i)*o+(o=us*r-rs*u)*o+(o=rs*i-is*r)*o),rs*r+is*i+us*u);Yc+=o,Xc+=o*(rs+(rs=r)),Vc+=o*(is+(is=i)),Kc+=o*(us+(us=u)),xs(rs,is,us)}function Cs(){ms.point=bs}function Es(){ms.point=Ms}function ks(){Fs(ns,es),ms.point=bs}function Ms(t,n){ns=t,es=n,t*=Ya,n*=Ya,ms.point=Fs;var e=Xa(n);rs=e*Xa(t),is=e*tc(t),us=tc(n),xs(rs,is,us)}function Fs(t,n){t*=Ya;var e=Xa(n*=Ya),r=e*Xa(t),i=e*tc(t),u=tc(n),o=is*u-us*i,a=us*r-rs*u,c=rs*i-is*r,s=ec(o*o+a*a+c*c),l=uc(s),f=s&&-l/s;Jc+=f*o,Qc+=f*a,ts+=f*c,Yc+=l,Xc+=l*(rs+(rs=r)),Vc+=l*(is+(is=i)),Kc+=l*(us+(us=u)),xs(rs,is,us)}function Ss(t){Hc=Yc=Wc=Gc=Zc=Xc=Vc=Kc=Jc=Qc=ts=0,pc(t,ms);var n=Jc,e=Qc,r=ts,i=n*n+e*e+r*r;return i<1e-12&&(n=Xc,e=Vc,r=Kc,Yc<La&&(n=Wc,e=Gc,r=Zc),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Za(e,n)*Ha,uc(r/ec(i))*Ha]}function Ts(t){return function(){return t}}function Os(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Bs(t,n){return[t>Ia?t-$a:t<-Ia?t+$a:t,n]}function Ns(t,n,e){return(t%=$a)?n||e?Os(Rs(t),Ps(n,e)):Rs(t):n||e?Ps(n,e):Bs}function zs(t){return function(n,e){return[(n+=t)>Ia?n-$a:n<-Ia?n+$a:n,e]}}function Rs(t){var n=zs(t);return n.invert=zs(-t),n}function Ps(t,n){var e=Xa(t),r=tc(t),i=Xa(n),u=tc(n);function o(t,n){var o=Xa(n),a=Xa(t)*o,c=tc(t)*o,s=tc(n),l=s*e+a*r;return[Za(c*i-l*u,a*e-s*r),uc(l*i+c*u)]}return o.invert=function(t,n){var o=Xa(n),a=Xa(t)*o,c=tc(t)*o,s=tc(n),l=s*i-c*u;return[Za(c*i+s*u,a*e+l*r),uc(l*e-a*r)]},o}function js(t){function n(n){return(n=t(n[0]*Ya,n[1]*Ya))[0]*=Ha,n[1]*=Ha,n}return t=Ns(t[0]*Ya,t[1]*Ya,t.length>2?t[2]*Ya:0),n.invert=function(n){return(n=t.invert(n[0]*Ya,n[1]*Ya))[0]*=Ha,n[1]*=Ha,n},n}function Ls(t,n,e,r,i,u){if(e){var o=Xa(n),a=tc(n),c=r*e;null==i?(i=n+r*$a,u=n-c/2):(i=Is(o,i),u=Is(o,u),(r>0?i<u:i>u)&&(i+=r*$a));for(var s,l=i;r>0?l>u:l<u;l-=c)s=kc([o,-a*Xa(l),-a*tc(l)]),t.point(s[0],s[1])}}function Is(t,n){(n=Mc(n))[0]-=t,Bc(n);var e=ic(-n[1]);return((-n[2]<0?-e:e)+$a-La)%$a}function Us(){var t,n,e=Ts([0,0]),r=Ts(90),i=Ts(6),u={point:function(e,r){t.push(e=n(e,r)),e[0]*=Ha,e[1]*=Ha}};function o(){var o=e.apply(this,arguments),a=r.apply(this,arguments)*Ya,c=i.apply(this,arguments)*Ya;return t=[],n=Ns(-o[0]*Ya,-o[1]*Ya,0).invert,Ls(u,a,c,1),o={type:"Polygon",coordinates:[t]},t=n=null,o}return o.center=function(t){return arguments.length?(e="function"==typeof t?t:Ts([+t[0],+t[1]]),o):e},o.radius=function(t){return arguments.length?(r="function"==typeof t?t:Ts(+t),o):r},o.precision=function(t){return arguments.length?(i="function"==typeof t?t:Ts(+t),o):i},o}function qs(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:ac,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function $s(t,n){return Wa(t[0]-n[0])<La&&Wa(t[1]-n[1])<La}function Hs(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Ys(t,n,e,r,i){var u,o,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],o=t[n];if($s(r,o)){for(i.lineStart(),u=0;u<n;++u)i.point((r=t[u])[0],r[1]);i.lineEnd()}else a.push(e=new Hs(r,t,null,!0)),c.push(e.o=new Hs(r,null,e,!1)),a.push(e=new Hs(o,t,null,!1)),c.push(e.o=new Hs(o,null,e,!0))}})),a.length){for(c.sort(n),Ws(a),Ws(c),u=0,o=c.length;u<o;++u)c[u].e=e=!e;for(var s,l,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(u=0,o=s.length;u<o;++u)i.point((l=s[u])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,u=s.length-1;u>=0;--u)i.point((l=s[u])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}}function Ws(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}Bs.invert=Bs;var Gs=za();function Zs(t,n){var e=n[0],r=n[1],i=[tc(e),-Xa(e),0],u=0,o=0;Gs.reset();for(var a=0,c=t.length;a<c;++a)if(l=(s=t[a]).length)for(var s,l,f=s[l-1],h=f[0],p=f[1]/2+qa,d=tc(p),g=Xa(p),v=0;v<l;++v,h=y,d=b,g=x,f=_){var _=s[v],y=_[0],m=_[1]/2+qa,b=tc(m),x=Xa(m),w=y-h,D=w>=0?1:-1,A=D*w,C=A>Ia,E=d*b;if(Gs.add(Za(E*D*tc(A),g*x+E*Xa(A))),u+=C?w+D*$a:w,C^h>=e^y>=e){var k=Sc(Mc(f),Mc(_));Bc(k);var M=Sc(i,k);Bc(M);var F=(C^w>=0?-1:1)*uc(M[2]);(r>F||r===F&&(k[0]||k[1]))&&(o+=C^w>=0?1:-1)}}return(u<-1e-6||u<La&&Gs<-1e-6)^1&o}function Xs(t,n,e,r){return function(i){var u,o,a,c=n(i),s=qs(),l=n(s),f=!1,h={point:p,lineStart:g,lineEnd:v,polygonStart:function(){h.point=_,h.lineStart=y,h.lineEnd=m,o=[],u=[]},polygonEnd:function(){h.point=p,h.lineStart=g,h.lineEnd=v,o=j(o);var t=Zs(u,r);o.length?(f||(i.polygonStart(),f=!0),Ys(o,Ks,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),o=u=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function d(t,n){c.point(t,n)}function g(){h.point=d,c.lineStart()}function v(){h.point=p,c.lineEnd()}function _(t,n){a.push([t,n]),l.point(t,n)}function y(){l.lineStart(),a=[]}function m(){_(a[0][0],a[0][1]),l.lineEnd();var t,n,e,r,c=l.clean(),h=s.result(),p=h.length;if(a.pop(),u.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),o.push(h.filter(Vs))}return h}}function Vs(t){return t.length>1}function Ks(t,n){return((t=t.x)[0]<0?t[1]-Ua-La:Ua-t[1])-((n=n.x)[0]<0?n[1]-Ua-La:Ua-n[1])}const Js=Xs((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(u,o){var a=u>0?Ia:-Ia,c=Wa(u-e);Wa(c-Ia)<La?(t.point(e,r=(r+o)/2>0?Ua:-Ua),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(u,r),n=0):i!==a&&c>=Ia&&(Wa(e-i)<La&&(e-=i*La),Wa(u-a)<La&&(u-=a*La),r=function(t,n,e,r){var i,u,o=tc(t-e);return Wa(o)>La?Ga((tc(n)*(u=Xa(r))*tc(e)-tc(r)*(i=Xa(n))*tc(t))/(i*u*o)):(n+r)/2}(e,r,u,o),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=u,r=o),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*Ua,r.point(-Ia,i),r.point(0,i),r.point(Ia,i),r.point(Ia,0),r.point(Ia,-i),r.point(0,-i),r.point(-Ia,-i),r.point(-Ia,0),r.point(-Ia,i);else if(Wa(t[0]-n[0])>La){var u=t[0]<n[0]?Ia:-Ia;i=e*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(n[0],n[1])}),[-Ia,-Ua]);function Qs(t){var n=Xa(t),e=6*Ya,r=n>0,i=Wa(n)>La;function u(t,e){return Xa(t)*Xa(e)>n}function o(t,e,r){var i=[1,0,0],u=Sc(Mc(t),Mc(e)),o=Fc(u,u),a=u[0],c=o-a*a;if(!c)return!r&&t;var s=n*o/c,l=-n*a/c,f=Sc(i,u),h=Oc(i,s);Tc(h,Oc(u,l));var p=f,d=Fc(h,p),g=Fc(p,p),v=d*d-g*(Fc(h,h)-1);if(!(v<0)){var _=ec(v),y=Oc(p,(-d-_)/g);if(Tc(y,h),y=kc(y),!r)return y;var m,b=t[0],x=e[0],w=t[1],D=e[1];x<b&&(m=b,b=x,x=m);var A=x-b,C=Wa(A-Ia)<La;if(!C&&D<w&&(m=w,w=D,D=m),C||A<La?C?w+D>0^y[1]<(Wa(y[0]-b)<La?w:D):w<=y[1]&&y[1]<=D:A>Ia^(b<=y[0]&&y[0]<=x)){var E=Oc(p,(-d+_)/g);return Tc(E,h),[y,kc(E)]}}}function a(n,e){var i=r?t:Ia-t,u=0;return n<-i?u|=1:n>i&&(u|=2),e<-i?u|=4:e>i&&(u|=8),u}return Xs(u,(function(t){var n,e,c,s,l;return{lineStart:function(){s=c=!1,l=1},point:function(f,h){var p,d=[f,h],g=u(f,h),v=r?g?0:a(f,h):g?a(f+(f<0?Ia:-Ia),h):0;if(!n&&(s=c=g)&&t.lineStart(),g!==c&&(!(p=o(n,d))||$s(n,p)||$s(d,p))&&(d[0]+=La,d[1]+=La,g=u(d[0],d[1])),g!==c)l=0,g?(t.lineStart(),p=o(d,n),t.point(p[0],p[1])):(p=o(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(i&&n&&r^g){var _;v&e||!(_=o(d,n,!0))||(l=0,r?(t.lineStart(),t.point(_[0][0],_[0][1]),t.point(_[1][0],_[1][1]),t.lineEnd()):(t.point(_[1][0],_[1][1]),t.lineEnd(),t.lineStart(),t.point(_[0][0],_[0][1])))}!g||n&&$s(n,d)||t.point(d[0],d[1]),n=d,c=g,e=v},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return l|(s&&c)<<1}}}),(function(n,r,i,u){Ls(u,t,e,i,n,r)}),r?[0,-t]:[-Ia,t-Ia])}var tl=1e9,nl=-tl;function el(t,n,e,r){function i(i,u){return t<=i&&i<=e&&n<=u&&u<=r}function u(i,u,a,s){var l=0,f=0;if(null==i||(l=o(i,a))!==(f=o(u,a))||c(i,u)<0^a>0)do{s.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else s.point(u[0],u[1])}function o(r,i){return Wa(r[0]-t)<La?i>0?0:3:Wa(r[0]-e)<La?i>0?2:1:Wa(r[1]-n)<La?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=o(t,1),r=o(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(o){var c,s,l,f,h,p,d,g,v,_,y,m=o,b=qs(),x={point:w,lineStart:function(){x.point=D,s&&s.push(l=[]),_=!0,v=!1,d=g=NaN},lineEnd:function(){c&&(D(f,h),p&&v&&b.rejoin(),c.push(b.result())),x.point=w,v&&m.lineEnd()},polygonStart:function(){m=b,c=[],s=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var u,o,a=s[e],c=1,l=a.length,f=a[0],h=f[0],p=f[1];c<l;++c)u=h,o=p,h=(f=a[c])[0],p=f[1],o<=r?p>r&&(h-u)*(r-o)>(p-o)*(t-u)&&++n:p<=r&&(h-u)*(r-o)<(p-o)*(t-u)&&--n;return n}(),e=y&&n,i=(c=j(c)).length;(e||i)&&(o.polygonStart(),e&&(o.lineStart(),u(null,null,1,o),o.lineEnd()),i&&Ys(c,a,n,u,o),o.polygonEnd()),m=o,c=s=l=null}};function w(t,n){i(t,n)&&m.point(t,n)}function D(u,o){var a=i(u,o);if(s&&l.push([u,o]),_)f=u,h=o,p=a,_=!1,a&&(m.lineStart(),m.point(u,o));else if(a&&v)m.point(u,o);else{var c=[d=Math.max(nl,Math.min(tl,d)),g=Math.max(nl,Math.min(tl,g))],b=[u=Math.max(nl,Math.min(tl,u)),o=Math.max(nl,Math.min(tl,o))];!function(t,n,e,r,i,u){var o,a=t[0],c=t[1],s=0,l=1,f=n[0]-a,h=n[1]-c;if(o=e-a,f||!(o>0)){if(o/=f,f<0){if(o<s)return;o<l&&(l=o)}else if(f>0){if(o>l)return;o>s&&(s=o)}if(o=i-a,f||!(o<0)){if(o/=f,f<0){if(o>l)return;o>s&&(s=o)}else if(f>0){if(o<s)return;o<l&&(l=o)}if(o=r-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=u-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}return s>0&&(t[0]=a+s*f,t[1]=c+s*h),l<1&&(n[0]=a+l*f,n[1]=c+l*h),!0}}}}}(c,b,t,n,e,r)?a&&(m.lineStart(),m.point(u,o),y=!1):(v||(m.lineStart(),m.point(c[0],c[1])),m.point(b[0],b[1]),a||m.lineEnd(),y=!1)}d=u,g=o,v=a}return x}}function rl(){var t,n,e,r=0,i=0,u=960,o=500;return e={stream:function(e){return t&&n===e?t:t=el(r,i,u,o)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],u=+a[1][0],o=+a[1][1],t=n=null,e):[[r,i],[u,o]]}}}var il,ul,ol,al=za(),cl={sphere:ac,point:ac,lineStart:function(){cl.point=ll,cl.lineEnd=sl},lineEnd:ac,polygonStart:ac,polygonEnd:ac};function sl(){cl.point=cl.lineEnd=ac}function ll(t,n){il=t*=Ya,ul=tc(n*=Ya),ol=Xa(n),cl.point=fl}function fl(t,n){t*=Ya;var e=tc(n*=Ya),r=Xa(n),i=Wa(t-il),u=Xa(i),o=r*tc(i),a=ol*e-ul*r*u,c=ul*e+ol*r*u;al.add(Za(ec(o*o+a*a),c)),il=t,ul=e,ol=r}function hl(t){return al.reset(),pc(t,cl),+al}var pl=[null,null],dl={type:"LineString",coordinates:pl};function gl(t,n){return pl[0]=t,pl[1]=n,hl(dl)}var vl={Feature:function(t,n){return yl(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(yl(e[r].geometry,n))return!0;return!1}},_l={Sphere:function(){return!0},Point:function(t,n){return ml(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ml(e[r],n))return!0;return!1},LineString:function(t,n){return bl(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(bl(e[r],n))return!0;return!1},Polygon:function(t,n){return xl(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(xl(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(yl(e[r],n))return!0;return!1}};function yl(t,n){return!(!t||!_l.hasOwnProperty(t.type))&&_l[t.type](t,n)}function ml(t,n){return 0===gl(t,n)}function bl(t,n){var e=gl(t[0],t[1]);return gl(t[0],n)+gl(n,t[1])<=e+La}function xl(t,n){return!!Zs(t.map(wl),Dl(n))}function wl(t){return(t=t.map(Dl)).pop(),t}function Dl(t){return[t[0]*Ya,t[1]*Ya]}function Al(t,n){return(t&&vl.hasOwnProperty(t.type)?vl[t.type]:yl)(t,n)}function Cl(t,n,e){var r=D(t,n-La,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function El(t,n,e){var r=D(t,n-La,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function kl(){var t,n,e,r,i,u,o,a,c,s,l,f,h=10,p=h,d=90,g=360,v=2.5;function _(){return{type:"MultiLineString",coordinates:y()}}function y(){return D(Va(r/d)*d,e,d).map(l).concat(D(Va(a/g)*g,o,g).map(f)).concat(D(Va(n/h)*h,t,h).filter((function(t){return Wa(t%d)>La})).map(c)).concat(D(Va(u/p)*p,i,p).filter((function(t){return Wa(t%g)>La})).map(s))}return _.lines=function(){return y().map((function(t){return{type:"LineString",coordinates:t}}))},_.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(f(o).slice(1),l(e).reverse().slice(1),f(a).reverse().slice(1))]}},_.extent=function(t){return arguments.length?_.extentMajor(t).extentMinor(t):_.extentMinor()},_.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],o=+t[1][1],r>e&&(t=r,r=e,e=t),a>o&&(t=a,a=o,o=t),_.precision(v)):[[r,a],[e,o]]},_.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],u=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),u>i&&(e=u,u=i,i=e),_.precision(v)):[[n,u],[t,i]]},_.step=function(t){return arguments.length?_.stepMajor(t).stepMinor(t):_.stepMinor()},_.stepMajor=function(t){return arguments.length?(d=+t[0],g=+t[1],_):[d,g]},_.stepMinor=function(t){return arguments.length?(h=+t[0],p=+t[1],_):[h,p]},_.precision=function(h){return arguments.length?(v=+h,c=Cl(u,i,90),s=El(n,t,v),l=Cl(a,o,90),f=El(r,e,v),_):v},_.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function Ml(){return kl()()}function Fl(t,n){var e=t[0]*Ya,r=t[1]*Ya,i=n[0]*Ya,u=n[1]*Ya,o=Xa(r),a=tc(r),c=Xa(u),s=tc(u),l=o*Xa(e),f=o*tc(e),h=c*Xa(i),p=c*tc(i),d=2*uc(ec(oc(u-r)+o*c*oc(i-e))),g=tc(d),v=d?function(t){var n=tc(t*=d)/g,e=tc(d-t)/g,r=e*l+n*h,i=e*f+n*p,u=e*a+n*s;return[Za(i,r)*Ha,Za(u,ec(r*r+i*i))*Ha]}:function(){return[e*Ha,r*Ha]};return v.distance=d,v}function Sl(t){return t}var Tl,Ol,Bl,Nl,zl=za(),Rl=za(),Pl={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){Pl.lineStart=jl,Pl.lineEnd=Ul},polygonEnd:function(){Pl.lineStart=Pl.lineEnd=Pl.point=ac,zl.add(Wa(Rl)),Rl.reset()},result:function(){var t=zl/2;return zl.reset(),t}};function jl(){Pl.point=Ll}function Ll(t,n){Pl.point=Il,Tl=Bl=t,Ol=Nl=n}function Il(t,n){Rl.add(Nl*t-Bl*n),Bl=t,Nl=n}function Ul(){Il(Tl,Ol)}const ql=Pl;var $l=1/0,Hl=$l,Yl=-$l,Wl=Yl;const Gl={point:function(t,n){t<$l&&($l=t),t>Yl&&(Yl=t),n<Hl&&(Hl=n),n>Wl&&(Wl=n)},lineStart:ac,lineEnd:ac,polygonStart:ac,polygonEnd:ac,result:function(){var t=[[$l,Hl],[Yl,Wl]];return Yl=Wl=-(Hl=$l=1/0),t}};var Zl,Xl,Vl,Kl,Jl=0,Ql=0,tf=0,nf=0,ef=0,rf=0,uf=0,of=0,af=0,cf={point:sf,lineStart:lf,lineEnd:pf,polygonStart:function(){cf.lineStart=df,cf.lineEnd=gf},polygonEnd:function(){cf.point=sf,cf.lineStart=lf,cf.lineEnd=pf},result:function(){var t=af?[uf/af,of/af]:rf?[nf/rf,ef/rf]:tf?[Jl/tf,Ql/tf]:[NaN,NaN];return Jl=Ql=tf=nf=ef=rf=uf=of=af=0,t}};function sf(t,n){Jl+=t,Ql+=n,++tf}function lf(){cf.point=ff}function ff(t,n){cf.point=hf,sf(Vl=t,Kl=n)}function hf(t,n){var e=t-Vl,r=n-Kl,i=ec(e*e+r*r);nf+=i*(Vl+t)/2,ef+=i*(Kl+n)/2,rf+=i,sf(Vl=t,Kl=n)}function pf(){cf.point=sf}function df(){cf.point=vf}function gf(){_f(Zl,Xl)}function vf(t,n){cf.point=_f,sf(Zl=Vl=t,Xl=Kl=n)}function _f(t,n){var e=t-Vl,r=n-Kl,i=ec(e*e+r*r);nf+=i*(Vl+t)/2,ef+=i*(Kl+n)/2,rf+=i,uf+=(i=Kl*t-Vl*n)*(Vl+t),of+=i*(Kl+n),af+=3*i,sf(Vl=t,Kl=n)}const yf=cf;function mf(t){this._context=t}mf.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,$a)}},result:ac};var bf,xf,wf,Df,Af,Cf=za(),Ef={point:ac,lineStart:function(){Ef.point=kf},lineEnd:function(){bf&&Mf(xf,wf),Ef.point=ac},polygonStart:function(){bf=!0},polygonEnd:function(){bf=null},result:function(){var t=+Cf;return Cf.reset(),t}};function kf(t,n){Ef.point=Mf,xf=Df=t,wf=Af=n}function Mf(t,n){Df-=t,Af-=n,Cf.add(ec(Df*Df+Af*Af)),Df=t,Af=n}const Ff=Ef;function Sf(){this._string=[]}function Tf(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Of(t,n){var e,r,i=4.5;function u(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),pc(t,e(r))),r.result()}return u.area=function(t){return pc(t,e(ql)),ql.result()},u.measure=function(t){return pc(t,e(Ff)),Ff.result()},u.bounds=function(t){return pc(t,e(Gl)),Gl.result()},u.centroid=function(t){return pc(t,e(yf)),yf.result()},u.projection=function(n){return arguments.length?(e=null==n?(t=null,Sl):(t=n).stream,u):t},u.context=function(t){return arguments.length?(r=null==t?(n=null,new Sf):new mf(n=t),"function"!=typeof i&&r.pointRadius(i),u):n},u.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),u):i},u.projection(t).context(n)}function Bf(t){return{stream:Nf(t)}}function Nf(t){return function(n){var e=new zf;for(var r in t)e[r]=t[r];return e.stream=n,e}}function zf(){}function Rf(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],u=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=u&&t.clipExtent(null),pc(e,t.stream(Gl));var o=Gl.result(),a=Math.min(r/(o[1][0]-o[0][0]),i/(o[1][1]-o[0][1])),c=+n[0][0]+(r-a*(o[1][0]+o[0][0]))/2,s=+n[0][1]+(i-a*(o[1][1]+o[0][1]))/2;return null!=u&&t.clipExtent(u),t.scale(150*a).translate([c,s])}function Pf(t,n,e){return Rf(t,[[0,0],n],e)}Sf.prototype={_radius:4.5,_circle:Tf(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Tf(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},zf.prototype={constructor:zf,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var jf=Xa(30*Ya);function Lf(t,n){return+n?function(t,n){function e(r,i,u,o,a,c,s,l,f,h,p,d,g,v){var _=s-r,y=l-i,m=_*_+y*y;if(m>4*n&&g--){var b=o+h,x=a+p,w=c+d,D=ec(b*b+x*x+w*w),A=uc(w/=D),C=Wa(Wa(w)-1)<La||Wa(u-f)<La?(u+f)/2:Za(x,b),E=t(C,A),k=E[0],M=E[1],F=k-r,S=M-i,T=y*F-_*S;(T*T/m>n||Wa((_*F+y*S)/m-.5)>.3||o*h+a*p+c*d<jf)&&(e(r,i,u,o,a,c,k,M,C,b/=D,x/=D,w,g,v),v.point(k,M),e(k,M,C,b,x,w,s,l,f,h,p,d,g,v))}}return function(n){var r,i,u,o,a,c,s,l,f,h,p,d,g={point:v,lineStart:_,lineEnd:m,polygonStart:function(){n.polygonStart(),g.lineStart=b},polygonEnd:function(){n.polygonEnd(),g.lineStart=_}};function v(e,r){e=t(e,r),n.point(e[0],e[1])}function _(){l=NaN,g.point=y,n.lineStart()}function y(r,i){var u=Mc([r,i]),o=t(r,i);e(l,f,s,h,p,d,l=o[0],f=o[1],s=r,h=u[0],p=u[1],d=u[2],16,n),n.point(l,f)}function m(){g.point=v,n.lineEnd()}function b(){_(),g.point=x,g.lineEnd=w}function x(t,n){y(r=t,n),i=l,u=f,o=h,a=p,c=d,g.point=y}function w(){e(l,f,s,h,p,d,i,u,r,o,a,c,16,n),g.lineEnd=m,m()}return g}}(t,n):function(t){return Nf({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var If=Nf({point:function(t,n){this.stream.point(t*Ya,n*Ya)}});function Uf(t){return qf((function(){return t}))()}function qf(t){var n,e,r,i,u,o,a,c,s,l,f=150,h=480,p=250,d=0,g=0,v=0,_=0,y=0,m=null,b=Js,x=null,w=Sl,D=.5,A=Lf(k,D);function C(t){return[(t=u(t[0]*Ya,t[1]*Ya))[0]*f+e,r-t[1]*f]}function E(t){return(t=u.invert((t[0]-e)/f,(r-t[1])/f))&&[t[0]*Ha,t[1]*Ha]}function k(t,i){return[(t=n(t,i))[0]*f+e,r-t[1]*f]}function M(){u=Os(i=Ns(v,_,y),n);var t=n(d,g);return e=h-t[0]*f,r=p+t[1]*f,F()}function F(){return s=l=null,C}return C.stream=function(t){return s&&l===t?s:s=If(function(t){return Nf({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(i)(b(A(w(l=t)))))},C.preclip=function(t){return arguments.length?(b=t,m=void 0,F()):b},C.postclip=function(t){return arguments.length?(w=t,x=o=a=c=null,F()):w},C.clipAngle=function(t){return arguments.length?(b=+t?Qs(m=t*Ya):(m=null,Js),F()):m*Ha},C.clipExtent=function(t){return arguments.length?(w=null==t?(x=o=a=c=null,Sl):el(x=+t[0][0],o=+t[0][1],a=+t[1][0],c=+t[1][1]),F()):null==x?null:[[x,o],[a,c]]},C.scale=function(t){return arguments.length?(f=+t,M()):f},C.translate=function(t){return arguments.length?(h=+t[0],p=+t[1],M()):[h,p]},C.center=function(t){return arguments.length?(d=t[0]%360*Ya,g=t[1]%360*Ya,M()):[d*Ha,g*Ha]},C.rotate=function(t){return arguments.length?(v=t[0]%360*Ya,_=t[1]%360*Ya,y=t.length>2?t[2]%360*Ya:0,M()):[v*Ha,_*Ha,y*Ha]},C.precision=function(t){return arguments.length?(A=Lf(k,D=t*t),F()):ec(D)},C.fitExtent=function(t,n){return Rf(C,t,n)},C.fitSize=function(t,n){return Pf(C,t,n)},function(){return n=t.apply(this,arguments),C.invert=n.invert&&E,M()}}function $f(t){var n=0,e=Ia/3,r=qf(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Ya,e=t[1]*Ya):[n*Ha,e*Ha]},i}function Hf(t,n){var e=tc(t),r=(e+tc(n))/2;if(Wa(r)<La)return function(t){var n=Xa(t);function e(t,e){return[t*n,tc(e)/n]}return e.invert=function(t,e){return[t/n,uc(e*n)]},e}(t);var i=1+e*(2*r-e),u=ec(i)/r;function o(t,n){var e=ec(i-2*r*tc(n))/r;return[e*tc(t*=r),u-e*Xa(t)]}return o.invert=function(t,n){var e=u-n;return[Za(t,Wa(e))/r*nc(e),uc((i-(t*t+e*e)*r*r)/(2*r))]},o}function Yf(){return $f(Hf).scale(155.424).center([0,33.6442])}function Wf(){return Yf().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Gf(){var t,n,e,r,i,u,o=Wf(),a=Yf().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Yf().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){u=[t,n]}};function l(t){var n=t[0],o=t[1];return u=null,e.point(n,o),u||(r.point(n,o),u)||(i.point(n,o),u)}function f(){return t=n=null,l}return l.invert=function(t){var n=o.scale(),e=o.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:o).invert(t)},l.stream=function(e){return t&&n===e?t:(r=[o.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},l.precision=function(t){return arguments.length?(o.precision(t),a.precision(t),c.precision(t),f()):o.precision()},l.scale=function(t){return arguments.length?(o.scale(t),a.scale(.35*t),c.scale(t),l.translate(o.translate())):o.scale()},l.translate=function(t){if(!arguments.length)return o.translate();var n=o.scale(),u=+t[0],l=+t[1];return e=o.translate(t).clipExtent([[u-.455*n,l-.238*n],[u+.455*n,l+.238*n]]).stream(s),r=a.translate([u-.307*n,l+.201*n]).clipExtent([[u-.425*n+La,l+.12*n+La],[u-.214*n-La,l+.234*n-La]]).stream(s),i=c.translate([u-.205*n,l+.212*n]).clipExtent([[u-.214*n+La,l+.166*n+La],[u-.115*n-La,l+.234*n-La]]).stream(s),f()},l.fitExtent=function(t,n){return Rf(l,t,n)},l.fitSize=function(t,n){return Pf(l,t,n)},l.scale(1070)}function Zf(t){return function(n,e){var r=Xa(n),i=Xa(e),u=t(r*i);return[u*i*tc(n),u*tc(e)]}}function Xf(t){return function(n,e){var r=ec(n*n+e*e),i=t(r),u=tc(i),o=Xa(i);return[Za(n*u,r*o),uc(r&&e*u/r)]}}var Vf=Zf((function(t){return ec(2/(1+t))}));function Kf(){return Uf(Vf).scale(124.75).clipAngle(179.999)}Vf.invert=Xf((function(t){return 2*uc(t/2)}));var Jf=Zf((function(t){return(t=ic(t))&&t/tc(t)}));function Qf(){return Uf(Jf).scale(79.4188).clipAngle(179.999)}function th(t,n){return[t,Ja(rc((Ua+n)/2))]}function nh(){return eh(th).scale(961/$a)}function eh(t){var n,e,r,i=Uf(t),u=i.center,o=i.scale,a=i.translate,c=i.clipExtent,s=null;function l(){var u=Ia*o(),a=i(js(i.rotate()).invert([0,0]));return c(null==s?[[a[0]-u,a[1]-u],[a[0]+u,a[1]+u]]:t===th?[[Math.max(a[0]-u,s),n],[Math.min(a[0]+u,e),r]]:[[s,Math.max(a[1]-u,n)],[e,Math.min(a[1]+u,r)]])}return i.scale=function(t){return arguments.length?(o(t),l()):o()},i.translate=function(t){return arguments.length?(a(t),l()):a()},i.center=function(t){return arguments.length?(u(t),l()):u()},i.clipExtent=function(t){return arguments.length?(null==t?s=n=e=r=null:(s=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),l()):null==s?null:[[s,n],[e,r]]},l()}function rh(t){return rc((Ua+t)/2)}function ih(t,n){var e=Xa(t),r=t===n?tc(t):Ja(e/Xa(n))/Ja(rh(n)/rh(t)),i=e*Qa(rh(t),r)/r;if(!r)return th;function u(t,n){i>0?n<-Ua+La&&(n=-Ua+La):n>Ua-La&&(n=Ua-La);var e=i/Qa(rh(n),r);return[e*tc(r*t),i-e*Xa(r*t)]}return u.invert=function(t,n){var e=i-n,u=nc(r)*ec(t*t+e*e);return[Za(t,Wa(e))/r*nc(e),2*Ga(Qa(i/u,1/r))-Ua]},u}function uh(){return $f(ih).scale(109.5).parallels([30,30])}function oh(t,n){return[t,n]}function ah(){return Uf(oh).scale(152.63)}function ch(t,n){var e=Xa(t),r=t===n?tc(t):(e-Xa(n))/(n-t),i=e/r+t;if(Wa(r)<La)return oh;function u(t,n){var e=i-n,u=r*t;return[e*tc(u),i-e*Xa(u)]}return u.invert=function(t,n){var e=i-n;return[Za(t,Wa(e))/r*nc(e),i-nc(r)*ec(t*t+e*e)]},u}function sh(){return $f(ch).scale(131.154).center([0,13.9389])}function lh(t,n){var e=Xa(n),r=Xa(t)*e;return[e*tc(t)/r,tc(n)/r]}function fh(){return Uf(lh).scale(144.049).clipAngle(60)}function hh(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Sl:Nf({point:function(i,u){this.stream.point(i*t+e,u*n+r)}})}function ph(){var t,n,e,r,i,u,o=1,a=0,c=0,s=1,l=1,f=Sl,h=null,p=Sl;function d(){return r=i=null,u}return u={stream:function(t){return r&&i===t?r:r=f(p(i=t))},postclip:function(r){return arguments.length?(p=r,h=t=n=e=null,d()):p},clipExtent:function(r){return arguments.length?(p=null==r?(h=t=n=e=null,Sl):el(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),d()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(f=hh((o=+t)*s,o*l,a,c),d()):o},translate:function(t){return arguments.length?(f=hh(o*s,o*l,a=+t[0],c=+t[1]),d()):[a,c]},reflectX:function(t){return arguments.length?(f=hh(o*(s=t?-1:1),o*l,a,c),d()):s<0},reflectY:function(t){return arguments.length?(f=hh(o*s,o*(l=t?-1:1),a,c),d()):l<0},fitExtent:function(t,n){return Rf(u,t,n)},fitSize:function(t,n){return Pf(u,t,n)}}}function dh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function gh(){return Uf(dh).scale(175.295)}function vh(t,n){return[Xa(n)*tc(t),tc(n)]}function _h(){return Uf(vh).scale(249.5).clipAngle(90.000001)}function yh(t,n){var e=Xa(n),r=1+Xa(t)*e;return[e*tc(t)/r,tc(n)/r]}function mh(){return Uf(yh).scale(250).clipAngle(142)}function bh(t,n){return[Ja(rc((Ua+n)/2)),-t]}function xh(){var t=eh(bh),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function wh(t,n){return t.parent===n.parent?1:2}function Dh(t,n){return t+n.x}function Ah(t,n){return Math.max(t,n.y)}function Ch(){var t=wh,n=1,e=1,r=!1;function i(i){var u,o=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Dh,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Ah,0)}(e)):(n.x=u?o+=t(n,u):0,n.y=0,u=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),s=a.x-t(a,c)/2,l=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-s)/(l-s)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Eh(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function kh(t,n){var e,r,i,u,o,a=new Th(t),c=+t.value&&(a.value=t.value),s=[a];for(null==n&&(n=Mh);e=s.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(o=i.length))for(e.children=new Array(o),u=o-1;u>=0;--u)s.push(r=e.children[u]=new Th(i[u])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Sh)}function Mh(t){return t.children}function Fh(t){t.data=t.data.data}function Sh(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Th(t){this.data=t,this.depth=this.height=0,this.parent=null}Jf.invert=Xf((function(t){return t})),th.invert=function(t,n){return[t,2*Ga(Ka(n))-Ua]},oh.invert=oh,lh.invert=Xf(Ga),dh.invert=function(t,n){var e,r=n,i=25;do{var u=r*r,o=u*u;r-=e=(r*(1.007226+u*(.015085+o*(.028874*u-.044475-.005916*o)))-n)/(1.007226+u*(.045255+o*(.259866*u-.311325-.005916*11*o)))}while(Wa(e)>La&&--i>0);return[t/(.8707+(u=r*r)*(u*(u*u*u*(.003971-.001529*u)-.013791)-.131979)),r]},vh.invert=Xf(uc),yh.invert=Xf((function(t){return 2*Ga(t)})),bh.invert=function(t,n){return[-n,2*Ga(Ka(t))-Ua]},Th.prototype=kh.prototype={constructor:Th,count:function(){return this.eachAfter(Eh)},each:function(t){var n,e,r,i,u=this,o=[u];do{for(n=o.reverse(),o=[];u=n.pop();)if(t(u),e=u.children)for(r=0,i=e.length;r<i;++r)o.push(e[r])}while(o.length);return this},eachAfter:function(t){for(var n,e,r,i=this,u=[i],o=[];i=u.pop();)if(o.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)u.push(n[e]);for(;i=o.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return kh(this).eachBefore(Fh)}};var Oh=Array.prototype.slice;function Bh(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Oh.call(t))).length,u=[];r<i;)n=t[r],e&&Rh(e,n)?++r:(e=jh(u=Nh(u,n)),r=0);return e}function Nh(t,n){var e,r;if(Ph(n,t))return[n];for(e=0;e<t.length;++e)if(zh(n,t[e])&&Ph(Lh(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(zh(Lh(t[e],t[r]),n)&&zh(Lh(t[e],n),t[r])&&zh(Lh(t[r],n),t[e])&&Ph(Ih(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function zh(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Rh(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Ph(t,n){for(var e=0;e<n.length;++e)if(!Rh(t,n[e]))return!1;return!0}function jh(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Lh(t[0],t[1]);case 3:return Ih(t[0],t[1],t[2])}}function Lh(t,n){var e=t.x,r=t.y,i=t.r,u=n.x,o=n.y,a=n.r,c=u-e,s=o-r,l=a-i,f=Math.sqrt(c*c+s*s);return{x:(e+u+c/f*l)/2,y:(r+o+s/f*l)/2,r:(f+i+a)/2}}function Ih(t,n,e){var r=t.x,i=t.y,u=t.r,o=n.x,a=n.y,c=n.r,s=e.x,l=e.y,f=e.r,h=r-o,p=r-s,d=i-a,g=i-l,v=c-u,_=f-u,y=r*r+i*i-u*u,m=y-o*o-a*a+c*c,b=y-s*s-l*l+f*f,x=p*d-h*g,w=(d*b-g*m)/(2*x)-r,D=(g*v-d*_)/x,A=(p*m-h*b)/(2*x)-i,C=(h*_-p*v)/x,E=D*D+C*C-1,k=2*(u+w*D+A*C),M=w*w+A*A-u*u,F=-(E?(k+Math.sqrt(k*k-4*E*M))/(2*E):M/k);return{x:r+w+D*F,y:i+A+C*F,r:F}}function Uh(t,n,e){var r=t.x,i=t.y,u=n.r+e.r,o=t.r+e.r,a=n.x-r,c=n.y-i,s=a*a+c*c;if(s){var l=.5+((o*=o)-(u*=u))/(2*s),f=Math.sqrt(Math.max(0,2*u*(o+s)-(o-=s)*o-u*u))/(2*s);e.x=r+l*a+f*c,e.y=i+l*c-f*a}else e.x=r+o,e.y=i}function qh(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function $h(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,u=(n.y*e.r+e.y*n.r)/r;return i*i+u*u}function Hh(t){this._=t,this.next=null,this.previous=null}function Yh(t){if(!(i=t.length))return 0;var n,e,r,i,u,o,a,c,s,l,f;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Uh(e,n,r=t[2]),n=new Hh(n),e=new Hh(e),r=new Hh(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Uh(n._,e._,r=t[a]),r=new Hh(r),c=e.next,s=n.previous,l=e._.r,f=n._.r;do{if(l<=f){if(qh(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}l+=c._.r,c=c.next}else{if(qh(s._,r._)){(n=s).next=e,e.previous=n,--a;continue t}f+=s._.r,s=s.previous}}while(c!==s.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,u=$h(n);(r=r.next)!==e;)(o=$h(r))<u&&(n=r,u=o);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=Bh(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}function Wh(t){return Yh(t),t}function Gh(t){return null==t?null:Zh(t)}function Zh(t){if("function"!=typeof t)throw new Error;return t}function Xh(){return 0}function Vh(t){return function(){return t}}function Kh(t){return Math.sqrt(t.value)}function Jh(){var t=null,n=1,e=1,r=Xh;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Qh(t)).eachAfter(tp(r,.5)).eachBefore(np(1)):i.eachBefore(Qh(Kh)).eachAfter(tp(Xh,1)).eachAfter(tp(r,i.r/Math.min(n,e))).eachBefore(np(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=Gh(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Vh(+t),i):r},i}function Qh(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function tp(t,n){return function(e){if(r=e.children){var r,i,u,o=r.length,a=t(e)*n||0;if(a)for(i=0;i<o;++i)r[i].r+=a;if(u=Yh(r),a)for(i=0;i<o;++i)r[i].r-=a;e.r=u+a}}}function np(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function ep(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function rp(t,n,e,r,i){for(var u,o=t.children,a=-1,c=o.length,s=t.value&&(r-n)/t.value;++a<c;)(u=o[a]).y0=e,u.y1=i,u.x0=n,u.x1=n+=u.value*s}function ip(){var t=1,n=1,e=0,r=!1;function i(i){var u=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/u,i.eachBefore(function(t,n){return function(r){r.children&&rp(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,u=r.y0,o=r.x1-e,a=r.y1-e;o<i&&(i=o=(i+o)/2),a<u&&(u=a=(u+a)/2),r.x0=i,r.y0=u,r.x1=o,r.y1=a}}(n,u)),r&&i.eachBefore(ep),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var up={depth:-1},op={};function ap(t){return t.id}function cp(t){return t.parentId}function sp(){var t=ap,n=cp;function e(e){var r,i,u,o,a,c,s,l=e.length,f=new Array(l),h={};for(i=0;i<l;++i)r=e[i],a=f[i]=new Th(r),null!=(c=t(r,i,e))&&(c+="")&&(h[s="$"+(a.id=c)]=s in h?op:a);for(i=0;i<l;++i)if(a=f[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(o=h["$"+c]))throw new Error("missing: "+c);if(o===op)throw new Error("ambiguous: "+c);o.children?o.children.push(a):o.children=[a],a.parent=o}else{if(u)throw new Error("multiple roots");u=a}if(!u)throw new Error("no root");if(u.parent=up,u.eachBefore((function(t){t.depth=t.parent.depth+1,--l})).eachBefore(Sh),u.parent=null,l>0)throw new Error("cycle");return u}return e.id=function(n){return arguments.length?(t=Zh(n),e):t},e.parentId=function(t){return arguments.length?(n=Zh(t),e):n},e}function lp(t,n){return t.parent===n.parent?1:2}function fp(t){var n=t.children;return n?n[0]:t.t}function hp(t){var n=t.children;return n?n[n.length-1]:t.t}function pp(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function dp(t,n,e){return t.a.parent===n.parent?t.a:e}function gp(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function vp(){var t=lp,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,u,o=new gp(t,0),a=[o];n=a.pop();)if(r=n._.children)for(n.children=new Array(u=r.length),i=u-1;i>=0;--i)a.push(e=n.children[i]=new gp(r[i],i)),e.parent=n;return(o.parent=new gp(null,0)).children=[o],o}(i);if(c.eachAfter(u),c.parent.m=-c.z,c.eachBefore(o),r)i.eachBefore(a);else{var s=i,l=i,f=i;i.eachBefore((function(t){t.x<s.x&&(s=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)}));var h=s===l?1:t(s,l)/2,p=h-s.x,d=n/(l.x+h+p),g=e/(f.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*g}))}return i}function u(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,u=i.length;--u>=0;)(n=i[u]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var u=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-u):n.z=u}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,u=n,o=n,a=e,c=u.parent.children[0],s=u.m,l=o.m,f=a.m,h=c.m;a=hp(a),u=fp(u),a&&u;)c=fp(c),(o=hp(o)).a=n,(i=a.z+f-u.z-s+t(a._,u._))>0&&(pp(dp(a,n,r),n,i),s+=i,l+=i),f+=a.m,s+=u.m,h+=c.m,l+=o.m;a&&!hp(o)&&(o.t=a,o.m+=f-l),u&&!fp(c)&&(c.t=u,c.m+=s-h,r=n)}return r}(n,i,n.parent.A||r[0])}function o(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function _p(t,n,e,r,i){for(var u,o=t.children,a=-1,c=o.length,s=t.value&&(i-e)/t.value;++a<c;)(u=o[a]).x0=n,u.x1=r,u.y0=e,u.y1=e+=u.value*s}gp.prototype=Object.create(Th.prototype);var yp=(1+Math.sqrt(5))/2;function mp(t,n,e,r,i,u){for(var o,a,c,s,l,f,h,p,d,g,v,_=[],y=n.children,m=0,b=0,x=y.length,w=n.value;m<x;){c=i-e,s=u-r;do{l=y[b++].value}while(!l&&b<x);for(f=h=l,v=l*l*(g=Math.max(s/c,c/s)/(w*t)),d=Math.max(h/v,v/f);b<x;++b){if(l+=a=y[b].value,a<f&&(f=a),a>h&&(h=a),v=l*l*g,(p=Math.max(h/v,v/f))>d){l-=a;break}d=p}_.push(o={value:l,dice:c<s,children:y.slice(m,b)}),o.dice?rp(o,e,r,i,w?r+=s*l/w:u):_p(o,e,r,w?e+=c*l/w:i,u),w-=l,m=b}return _}const bp=function t(n){function e(t,e,r,i,u){mp(n,t,e,r,i,u)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(yp);function xp(){var t=bp,n=!1,e=1,r=1,i=[0],u=Xh,o=Xh,a=Xh,c=Xh,s=Xh;function l(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(f),i=[0],n&&t.eachBefore(ep),t}function f(n){var e=i[n.depth],r=n.x0+e,l=n.y0+e,f=n.x1-e,h=n.y1-e;f<r&&(r=f=(r+f)/2),h<l&&(l=h=(l+h)/2),n.x0=r,n.y0=l,n.x1=f,n.y1=h,n.children&&(e=i[n.depth+1]=u(n)/2,r+=s(n)-e,l+=o(n)-e,(f-=a(n)-e)<r&&(r=f=(r+f)/2),(h-=c(n)-e)<l&&(l=h=(l+h)/2),t(n,r,l,f,h))}return l.round=function(t){return arguments.length?(n=!!t,l):n},l.size=function(t){return arguments.length?(e=+t[0],r=+t[1],l):[e,r]},l.tile=function(n){return arguments.length?(t=Zh(n),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(u="function"==typeof t?t:Vh(+t),l):u},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(o="function"==typeof t?t:Vh(+t),l):o},l.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Vh(+t),l):a},l.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Vh(+t),l):c},l.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:Vh(+t),l):s},l}function wp(t,n,e,r,i){var u,o,a=t.children,c=a.length,s=new Array(c+1);for(s[0]=o=u=0;u<c;++u)s[u+1]=o+=a[u].value;!function t(n,e,r,i,u,o,c){if(n>=e-1){var l=a[n];return l.x0=i,l.y0=u,l.x1=o,void(l.y1=c)}for(var f=s[n],h=r/2+f,p=n+1,d=e-1;p<d;){var g=p+d>>>1;s[g]<h?p=g+1:d=g}h-s[p-1]<s[p]-h&&n+1<p&&--p;var v=s[p]-f,_=r-v;if(o-i>c-u){var y=(i*_+o*v)/r;t(n,p,v,i,u,y,c),t(p,e,_,y,u,o,c)}else{var m=(u*_+c*v)/r;t(n,p,v,i,u,o,m),t(p,e,_,i,m,o,c)}}(0,c,t.value,n,e,r,i)}function Dp(t,n,e,r,i){(1&t.depth?_p:rp)(t,n,e,r,i)}const Ap=function t(n){function e(t,e,r,i,u){if((o=t._squarify)&&o.ratio===n)for(var o,a,c,s,l,f=-1,h=o.length,p=t.value;++f<h;){for(c=(a=o[f]).children,s=a.value=0,l=c.length;s<l;++s)a.value+=c[s].value;a.dice?rp(a,e,r,i,r+=(u-r)*a.value/p):_p(a,e,r,e+=(i-e)*a.value/p,u),p-=a.value}else t._squarify=o=mp(n,t,e,r,i,u),o.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(yp);function Cp(t){for(var n,e=-1,r=t.length,i=t[r-1],u=0;++e<r;)n=i,i=t[e],u+=n[1]*i[0]-n[0]*i[1];return u/2}function Ep(t){for(var n,e,r=-1,i=t.length,u=0,o=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],u+=(n[0]+a[0])*e,o+=(n[1]+a[1])*e;return[u/(c*=3),o/c]}function kp(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Mp(t,n){return t[0]-n[0]||t[1]-n[1]}function Fp(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&kp(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function Sp(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Mp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var u=Fp(r),o=Fp(i),a=o[0]===u[0],c=o[o.length-1]===u[u.length-1],s=[];for(n=u.length-1;n>=0;--n)s.push(t[r[u[n]][2]]);for(n=+a;n<o.length-c;++n)s.push(t[r[o[n]][2]]);return s}function Tp(t,n){for(var e,r,i=t.length,u=t[i-1],o=n[0],a=n[1],c=u[0],s=u[1],l=!1,f=0;f<i;++f)e=(u=t[f])[0],(r=u[1])>a!=s>a&&o<(c-e)*(a-r)/(s-r)+e&&(l=!l),c=e,s=r;return l}function Op(t){for(var n,e,r=-1,i=t.length,u=t[i-1],o=u[0],a=u[1],c=0;++r<i;)n=o,e=a,n-=o=(u=t[r])[0],e-=a=u[1],c+=Math.sqrt(n*n+e*e);return c}var Bp=[].slice,Np={};function zp(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function Rp(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Pp(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||Np)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])jp(t,n);else if(!t._data)throw n}}function Pp(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?jp(t,e):(t._data[n]=r,t._waiting?Rp(t):Lp(t))))}}function jp(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Lp(t)}function Lp(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function Ip(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new zp(t)}function Up(){return Math.random()}zp.prototype=Ip.prototype={constructor:zp,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Bp.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),Rp(this),this},abort:function(){return null==this._error&&jp(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},Lp(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Lp(this),this}};const qp=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Up),$p=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var u;if(null!=r)u=r,r=null;else do{r=2*n()-1,u=2*n()-1,i=r*r+u*u}while(!i||i>1);return t+e*u*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Up),Hp=function t(n){function e(){var t=$p.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Up),Yp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Up),Wp=function t(n){function e(t){var e=Yp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Up),Gp=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Up);function Zp(t,n){var e,r,i,u,o=ht("beforesend","progress","load","error"),a=mo(),c=new XMLHttpRequest,s=null,l=null,f=0;function h(t){var n,r=c.status;if(!r&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(c)||r>=200&&r<300||304===r){if(i)try{n=i.call(e,c)}catch(t){return void o.call("error",e,t)}else n=c;o.call("load",e,n)}else o.call("error",e,t)}if("undefined"!=typeof XDomainRequest&&!("withCredentials"in c)&&/^(http(s)?:)?\/\//.test(t)&&(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=h:c.onreadystatechange=function(t){c.readyState>3&&h(t)},c.onprogress=function(t){o.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?a.get(t):(null==n?a.remove(t):a.set(t,n+""),e)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",e):r},responseType:function(t){return arguments.length?(u=t,e):u},timeout:function(t){return arguments.length?(f=+t,e):f},user:function(t){return arguments.length<1?s:(s=null==t?null:t+"",e)},password:function(t){return arguments.length<1?l:(l=null==t?null:t+"",e)},response:function(t){return i=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,i,h){return c.open(n,t,!0,s,l),null==r||a.has("accept")||a.set("accept",r+",*/*"),c.setRequestHeader&&a.each((function(t,n){c.setRequestHeader(n,t)})),null!=r&&c.overrideMimeType&&c.overrideMimeType(r),null!=u&&(c.responseType=u),f>0&&(c.timeout=f),null==h&&"function"==typeof i&&(h=i,i=null),null!=h&&1===h.length&&(h=function(t){return function(n,e){t(null==n?e:null)}}(h)),null!=h&&e.on("error",h).on("load",(function(t){h(null,t)})),o.call("beforesend",e,c),c.send(null==i?null:i),e},abort:function(){return c.abort(),e},on:function(){var t=o.on.apply(o,arguments);return t===o?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e}function Xp(t,n){return function(e,r){var i=Zp(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}}const Vp=Xp("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),Kp=Xp("application/json",(function(t){return JSON.parse(t.responseText)})),Jp=Xp("text/plain",(function(t){return t.responseText})),Qp=Xp("application/xml",(function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}));function td(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var u=Zp(e).mimeType(t);return u.row=function(t){return arguments.length?u.response(nd(n,r=t)):r},u.row(r),i?u.get(i):u}}function nd(t,n){return function(e){return t(e.responseText,n)}}const ed=td("text/csv",Po),rd=td("text/tab-separated-values",qo);var id=Array.prototype,ud=id.map,od=id.slice,ad={name:"implicit"};function cd(t){var n=mo(),e=[],r=ad;function i(i){var u=i+"",o=n.get(u);if(!o){if(r!==ad)return r;n.set(u,o=e.push(i))}return t[(o-1)%t.length]}return t=null==t?[]:od.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=mo();for(var r,u,o=-1,a=t.length;++o<a;)n.has(u=(r=t[o])+"")||n.set(u,e.push(r));return i},i.range=function(n){return arguments.length?(t=od.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return cd().domain(e).range(t).unknown(r)},i}function sd(){var t,n,e=cd().unknown(void 0),r=e.domain,i=e.range,u=[0,1],o=!1,a=0,c=0,s=.5;function l(){var e=r().length,l=u[1]<u[0],f=u[l-0],h=u[1-l];t=(h-f)/Math.max(1,e-a+2*c),o&&(t=Math.floor(t)),f+=(h-f-t*(e-a))*s,n=t*(1-a),o&&(f=Math.round(f),n=Math.round(n));var p=D(e).map((function(n){return f+t*n}));return i(l?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?(u=[+t[0],+t[1]],l()):u.slice()},e.rangeRound=function(t){return u=[+t[0],+t[1]],o=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(o=!!t,l()):o},e.padding=function(t){return arguments.length?(a=c=Math.max(0,Math.min(1,t)),l()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),l()):a},e.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},e.copy=function(){return sd().domain(r()).range(u).round(o).paddingInner(a).paddingOuter(c).align(s)},l()}function ld(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return ld(n())},t}function fd(){return ld(sd().paddingInner(1))}function hd(t){return function(){return t}}function pd(t){return+t}var dd=[0,1];function gd(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:hd(n)}function vd(t,n,e,r){var i=t[0],u=t[1],o=n[0],a=n[1];return u<i?(i=e(u,i),o=r(a,o)):(i=e(i,u),o=r(o,a)),function(t){return o(i(t))}}function _d(t,n,e,r){var i=Math.min(t.length,n.length)-1,u=new Array(i),o=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<i;)u[a]=e(t[a],t[a+1]),o[a]=r(n[a],n[a+1]);return function(n){var e=s(t,n,1,i)-1;return o[e](u[e](n))}}function yd(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function md(t,n){var e,r,i,u=dd,o=dd,a=pr,c=!1;function s(){return e=Math.min(u.length,o.length)>2?_d:vd,r=i=null,l}function l(n){return(r||(r=e(u,o,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return l.invert=function(t){return(i||(i=e(o,u,gd,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},l.domain=function(t){return arguments.length?(u=ud.call(t,pd),s()):u.slice()},l.range=function(t){return arguments.length?(o=od.call(t),s()):o.slice()},l.rangeRound=function(t){return o=od.call(t),a=dr,s()},l.clamp=function(t){return arguments.length?(c=!!t,s()):c},l.interpolate=function(t){return arguments.length?(a=t,s()):a},s()}function bd(t){var n=t.domain;return t.ticks=function(t){var e=n();return k(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return function(t,n,e){var r,i=t[0],u=t[t.length-1],o=F(i,u,null==n?10:n);switch((e=Da(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(u));return null!=e.precision||isNaN(r=Ba(o,a))||(e.precision=r),Ma(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=Na(o,Math.max(Math.abs(i),Math.abs(u))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Oa(o))||(e.precision=r-2*("%"===e.type))}return ka(e)}(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),u=0,o=i.length-1,a=i[u],c=i[o];return c<a&&(r=a,a=c,c=r,r=u,u=o,o=r),(r=M(a,c,e))>0?r=M(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=M(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[u]=Math.floor(a/r)*r,i[o]=Math.ceil(c/r)*r,n(i)):r<0&&(i[u]=Math.ceil(a*r)/r,i[o]=Math.floor(c*r)/r,n(i)),t},t}function xd(){var t=md(gd,cr);return t.copy=function(){return yd(t,xd())},bd(t)}function wd(){var t=[0,1];function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=ud.call(e,pd),n):t.slice()},n.copy=function(){return wd().domain(t)},bd(n)}function Dd(t,n){var e,r=0,i=(t=t.slice()).length-1,u=t[r],o=t[i];return o<u&&(e=r,r=i,i=e,e=u,u=o,o=e),t[r]=n.floor(u),t[i]=n.ceil(o),t}function Ad(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:hd(n)}function Cd(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Ed(t){return isFinite(t)?+("1e"+t):t<0?0:t}function kd(t){return 10===t?Ed:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function Md(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Fd(t){return function(n){return-t(-n)}}function Sd(){var t=md(Ad,Cd).domain([1,10]),n=t.domain,e=10,r=Md(10),i=kd(10);function u(){return r=Md(e),i=kd(e),n()[0]<0&&(r=Fd(r),i=Fd(i)),t}return t.base=function(t){return arguments.length?(e=+t,u()):e},t.domain=function(t){return arguments.length?(n(t),u()):n()},t.ticks=function(t){var u,o=n(),a=o[0],c=o[o.length-1];(u=c<a)&&(h=a,a=c,c=h);var s,l,f,h=r(a),p=r(c),d=null==t?10:+t,g=[];if(!(e%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(l=1,s=i(h);l<e;++l)if(!((f=s*l)<a)){if(f>c)break;g.push(f)}}else for(;h<p;++h)for(l=e-1,s=i(h);l>=1;--l)if(!((f=s*l)<a)){if(f>c)break;g.push(f)}}else g=k(h,p,Math.min(p-h,d)).map(i);return u?g.reverse():g},t.tickFormat=function(n,u){if(null==u&&(u=10===e?".0e":","),"function"!=typeof u&&(u=ka(u)),n===1/0)return u;null==n&&(n=10);var o=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/i(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=o?u(t):""}},t.nice=function(){return n(Dd(n(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return yd(t,Sd().base(e))},t}function Td(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Od(){var t=1,n=md((function(n,e){return(e=Td(e,t)-(n=Td(n,t)))?function(r){return(Td(r,t)-n)/e}:hd(e)}),(function(n,e){return e=Td(e,t)-(n=Td(n,t)),function(r){return Td(n+e*r,1/t)}})),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return yd(n,Od().exponent(t))},bd(n)}function Bd(){return Od().exponent(.5)}function Nd(){var t=[],n=[],e=[];function r(){var r=0,i=Math.max(1,n.length);for(e=new Array(i-1);++r<i;)e[r-1]=O(t,r/i);return u}function u(t){if(!isNaN(t=+t))return n[s(e,t)]}return u.invertExtent=function(r){var i=n.indexOf(r);return i<0?[NaN,NaN]:[i>0?e[i-1]:t[0],i<e.length?e[i]:t[t.length-1]]},u.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var e,u=0,o=n.length;u<o;++u)null==(e=n[u])||isNaN(e=+e)||t.push(e);return t.sort(i),r()},u.range=function(t){return arguments.length?(n=od.call(t),r()):n.slice()},u.quantiles=function(){return e.slice()},u.copy=function(){return Nd().domain(t).range(n)},u}function zd(){var t=0,n=1,e=1,r=[.5],i=[0,1];function u(t){if(t<=t)return i[s(r,t,0,e)]}function o(){var i=-1;for(r=new Array(e);++i<e;)r[i]=((i+1)*n-(i-e)*t)/(e+1);return u}return u.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],o()):[t,n]},u.range=function(t){return arguments.length?(e=(i=od.call(t)).length-1,o()):i.slice()},u.invertExtent=function(u){var o=i.indexOf(u);return o<0?[NaN,NaN]:o<1?[t,r[0]]:o>=e?[r[e-1],n]:[r[o-1],r[o]]},u.copy=function(){return zd().domain([t,n]).range(i)},bd(u)}function Rd(){var t=[.5],n=[0,1],e=1;function r(r){if(r<=r)return n[s(t,r,0,e)]}return r.domain=function(i){return arguments.length?(t=od.call(i),e=Math.min(t.length,n.length-1),r):t.slice()},r.range=function(i){return arguments.length?(n=od.call(i),e=Math.min(t.length,n.length-1),r):n.slice()},r.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},r.copy=function(){return Rd().domain(t).range(n)},r}var Pd=new Date,jd=new Date;function Ld(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,u){var o=[];if(e=i.ceil(e),u=null==u?1:Math.floor(u),!(e<r&&u>0))return o;do{o.push(new Date(+e))}while(n(e,u),t(e),e<r);return o},i.filter=function(e){return Ld((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Pd.setTime(+n),jd.setTime(+r),t(Pd),t(jd),Math.floor(e(Pd,jd))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Id=Ld((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));Id.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ld((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Id:null};const Ud=Id;var qd=Id.range,$d=1e3,Hd=6e4,Yd=36e5,Wd=864e5,Gd=6048e5,Zd=Ld((function(t){t.setTime(Math.floor(t/$d)*$d)}),(function(t,n){t.setTime(+t+n*$d)}),(function(t,n){return(n-t)/$d}),(function(t){return t.getUTCSeconds()}));const Xd=Zd;var Vd=Zd.range,Kd=Ld((function(t){t.setTime(Math.floor(t/Hd)*Hd)}),(function(t,n){t.setTime(+t+n*Hd)}),(function(t,n){return(n-t)/Hd}),(function(t){return t.getMinutes()}));const Jd=Kd;var Qd=Kd.range,tg=Ld((function(t){var n=t.getTimezoneOffset()*Hd%Yd;n<0&&(n+=Yd),t.setTime(Math.floor((+t-n)/Yd)*Yd+n)}),(function(t,n){t.setTime(+t+n*Yd)}),(function(t,n){return(n-t)/Yd}),(function(t){return t.getHours()}));const ng=tg;var eg=tg.range,rg=Ld((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Hd)/Wd}),(function(t){return t.getDate()-1}));const ig=rg;var ug=rg.range;function og(t){return Ld((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Hd)/Gd}))}var ag=og(0),cg=og(1),sg=og(2),lg=og(3),fg=og(4),hg=og(5),pg=og(6),dg=ag.range,gg=cg.range,vg=sg.range,_g=lg.range,yg=fg.range,mg=hg.range,bg=pg.range,xg=Ld((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const wg=xg;var Dg=xg.range,Ag=Ld((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Ag.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ld((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const Cg=Ag;var Eg=Ag.range,kg=Ld((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*Hd)}),(function(t,n){return(n-t)/Hd}),(function(t){return t.getUTCMinutes()}));const Mg=kg;var Fg=kg.range,Sg=Ld((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*Yd)}),(function(t,n){return(n-t)/Yd}),(function(t){return t.getUTCHours()}));const Tg=Sg;var Og=Sg.range,Bg=Ld((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/Wd}),(function(t){return t.getUTCDate()-1}));const Ng=Bg;var zg=Bg.range;function Rg(t){return Ld((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/Gd}))}var Pg=Rg(0),jg=Rg(1),Lg=Rg(2),Ig=Rg(3),Ug=Rg(4),qg=Rg(5),$g=Rg(6),Hg=Pg.range,Yg=jg.range,Wg=Lg.range,Gg=Ig.range,Zg=Ug.range,Xg=qg.range,Vg=$g.range,Kg=Ld((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const Jg=Kg;var Qg=Kg.range,tv=Ld((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));tv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ld((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const nv=tv;var ev=tv.range;function rv(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function iv(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function uv(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function ov(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,u=t.days,o=t.shortDays,a=t.months,c=t.shortMonths,s=yv(i),l=mv(i),f=yv(u),h=mv(u),p=yv(o),d=mv(o),g=yv(a),v=mv(a),_=yv(c),y=mv(c),m={a:function(t){return o[t.getDay()]},A:function(t){return u[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Nv,e:Nv,H:zv,I:Rv,j:Pv,L:jv,m:Lv,M:Iv,p:function(t){return i[+(t.getHours()>=12)]},S:Uv,U:qv,w:$v,W:Hv,x:null,X:null,y:Yv,Y:Wv,Z:Gv,"%":c_},b={a:function(t){return o[t.getUTCDay()]},A:function(t){return u[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Zv,e:Zv,H:Xv,I:Vv,j:Kv,L:Jv,m:Qv,M:t_,p:function(t){return i[+(t.getUTCHours()>=12)]},S:n_,U:e_,w:r_,W:i_,x:null,X:null,y:u_,Y:o_,Z:a_,"%":c_},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:kv,e:kv,H:Fv,I:Fv,j:Mv,L:Ov,m:Ev,M:Sv,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},S:Tv,U:xv,w:bv,W:wv,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:Av,Y:Dv,Z:Cv,"%":Bv};function w(t,n){return function(e){var r,i,u,o=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(o.push(t.slice(c,a)),null!=(i=hv[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(u=n[r])&&(r=u(e,i)),o.push(r),c=a+1);return o.push(t.slice(c,a)),o.join("")}}function D(t,n){return function(e){var r=uv(1900);if(A(r,t,e+="",0)!=e.length)return null;if("p"in r&&(r.H=r.H%12+12*r.p),"W"in r||"U"in r){"w"in r||(r.w="W"in r?1:0);var i="Z"in r?iv(uv(r.y)).getUTCDay():n(uv(r.y)).getDay();r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(i+5)%7:r.w+7*r.U-(i+6)%7}return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,iv(r)):n(r)}}function A(t,n,e,r){for(var i,u,o=0,a=n.length,c=e.length;o<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(o++))){if(i=n.charAt(o++),!(u=x[i in hv?n.charAt(o++):i])||(r=u(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),{format:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=D(t+="",rv);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},utcParse:function(t){var n=D(t,iv);return n.toString=function(){return t},n}}}var av,cv,sv,lv,fv,hv={"-":"",_:" ",0:"0"},pv=/^\s*\d+/,dv=/^%/,gv=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;function vv(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",u=i.length;return r+(u<e?new Array(e-u+1).join(n)+i:i)}function _v(t){return t.replace(gv,"\\$&")}function yv(t){return new RegExp("^(?:"+t.map(_v).join("|")+")","i")}function mv(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function bv(t,n,e){var r=pv.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function xv(t,n,e){var r=pv.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function wv(t,n,e){var r=pv.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function Dv(t,n,e){var r=pv.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Av(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Cv(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Ev(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function kv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Mv(t,n,e){var r=pv.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Fv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Sv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Tv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Ov(t,n,e){var r=pv.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Bv(t,n,e){var r=dv.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Nv(t,n){return vv(t.getDate(),n,2)}function zv(t,n){return vv(t.getHours(),n,2)}function Rv(t,n){return vv(t.getHours()%12||12,n,2)}function Pv(t,n){return vv(1+ig.count(Cg(t),t),n,3)}function jv(t,n){return vv(t.getMilliseconds(),n,3)}function Lv(t,n){return vv(t.getMonth()+1,n,2)}function Iv(t,n){return vv(t.getMinutes(),n,2)}function Uv(t,n){return vv(t.getSeconds(),n,2)}function qv(t,n){return vv(ag.count(Cg(t),t),n,2)}function $v(t){return t.getDay()}function Hv(t,n){return vv(cg.count(Cg(t),t),n,2)}function Yv(t,n){return vv(t.getFullYear()%100,n,2)}function Wv(t,n){return vv(t.getFullYear()%1e4,n,4)}function Gv(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+vv(n/60|0,"0",2)+vv(n%60,"0",2)}function Zv(t,n){return vv(t.getUTCDate(),n,2)}function Xv(t,n){return vv(t.getUTCHours(),n,2)}function Vv(t,n){return vv(t.getUTCHours()%12||12,n,2)}function Kv(t,n){return vv(1+Ng.count(nv(t),t),n,3)}function Jv(t,n){return vv(t.getUTCMilliseconds(),n,3)}function Qv(t,n){return vv(t.getUTCMonth()+1,n,2)}function t_(t,n){return vv(t.getUTCMinutes(),n,2)}function n_(t,n){return vv(t.getUTCSeconds(),n,2)}function e_(t,n){return vv(Pg.count(nv(t),t),n,2)}function r_(t){return t.getUTCDay()}function i_(t,n){return vv(jg.count(nv(t),t),n,2)}function u_(t,n){return vv(t.getUTCFullYear()%100,n,2)}function o_(t,n){return vv(t.getUTCFullYear()%1e4,n,4)}function a_(){return"+0000"}function c_(){return"%"}function s_(t){return av=ov(t),cv=av.format,sv=av.parse,lv=av.utcFormat,fv=av.utcParse,av}s_({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var l_="%Y-%m-%dT%H:%M:%S.%LZ";const f_=Date.prototype.toISOString?function(t){return t.toISOString()}:lv(l_),h_=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:fv(l_);var p_=31536e6;function d_(t){return new Date(t)}function g_(t){return t instanceof Date?+t:+new Date(+t)}function v_(t,n,e,r,i,o,a,c,s){var l=md(gd,cr),f=l.invert,h=l.domain,p=s(".%L"),d=s(":%S"),g=s("%I:%M"),v=s("%I %p"),_=s("%a %d"),y=s("%b %d"),m=s("%B"),b=s("%Y"),x=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,p_]];function w(u){return(a(u)<u?p:o(u)<u?d:i(u)<u?g:r(u)<u?v:n(u)<u?e(u)<u?_:y:t(u)<u?m:b)(u)}function D(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var o=Math.abs(r-e)/n,a=u((function(t){return t[2]})).right(x,o);a===x.length?(i=F(e/p_,r/p_,n),n=t):a?(i=(a=x[o/x[a-1][2]<x[a][2]/o?a-1:a])[1],n=a[0]):(i=F(e,r,n),n=c)}return null==i?n:n.every(i)}return l.invert=function(t){return new Date(f(t))},l.domain=function(t){return arguments.length?h(ud.call(t,g_)):h().map(d_)},l.ticks=function(t,n){var e,r=h(),i=r[0],u=r[r.length-1],o=u<i;return o&&(e=i,i=u,u=e),e=(e=D(t,i,u,n))?e.range(i,u+1):[],o?e.reverse():e},l.tickFormat=function(t,n){return null==n?w:s(n)},l.nice=function(t,n){var e=h();return(t=D(t,e[0],e[e.length-1],n))?h(Dd(e,t)):l},l.copy=function(){return yd(l,v_(t,n,e,r,i,o,a,c,s))},l}function __(){return v_(Cg,wg,ag,ig,ng,Jd,Xd,Ud,cv).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}function y_(){return v_(nv,Jg,Pg,Ng,Tg,Mg,Xd,Ud,lv).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}function m_(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))}const b_=m_("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),x_=m_("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),w_=m_("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),D_=m_("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),A_=Pr(Ge(300,.5,0),Ge(-240,.5,1));var C_=Pr(Ge(-100,.75,.35),Ge(80,1.5,.8)),E_=Pr(Ge(260,.75,.35),Ge(80,1.5,.8)),k_=Ge();function M_(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return k_.h=360*t-100,k_.s=1.5-1.5*n,k_.l=.8-.9*n,k_+""}function F_(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const S_=F_(m_("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var T_=F_(m_("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),O_=F_(m_("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),B_=F_(m_("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function N_(t){var n=0,e=1,r=!1;function i(i){var u=(i-n)/(e-n);return t(r?Math.max(0,Math.min(1,u)):u)}return i.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.clamp=function(t){return arguments.length?(r=!!t,i):r},i.interpolator=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return N_(t).domain([n,e]).clamp(r)},bd(i)}function z_(t){return function(){return t}}var R_=Math.abs,P_=Math.atan2,j_=Math.cos,L_=Math.max,I_=Math.min,U_=Math.sin,q_=Math.sqrt,$_=1e-12,H_=Math.PI,Y_=H_/2,W_=2*H_;function G_(t){return t>1?0:t<-1?H_:Math.acos(t)}function Z_(t){return t>=1?Y_:t<=-1?-Y_:Math.asin(t)}function X_(t){return t.innerRadius}function V_(t){return t.outerRadius}function K_(t){return t.startAngle}function J_(t){return t.endAngle}function Q_(t){return t&&t.padAngle}function ty(t,n,e,r,i,u,o,a){var c=e-t,s=r-n,l=o-i,f=a-u,h=(l*(n-u)-f*(t-i))/(f*c-l*s);return[t+h*c,n+h*s]}function ny(t,n,e,r,i,u,o){var a=t-e,c=n-r,s=(o?u:-u)/q_(a*a+c*c),l=s*c,f=-s*a,h=t+l,p=n+f,d=e+l,g=r+f,v=(h+d)/2,_=(p+g)/2,y=d-h,m=g-p,b=y*y+m*m,x=i-u,w=h*g-d*p,D=(m<0?-1:1)*q_(L_(0,x*x*b-w*w)),A=(w*m-y*D)/b,C=(-w*y-m*D)/b,E=(w*m+y*D)/b,k=(-w*y+m*D)/b,M=A-v,F=C-_,S=E-v,T=k-_;return M*M+F*F>S*S+T*T&&(A=E,C=k),{cx:A,cy:C,x01:-l,y01:-f,x11:A*(i/x-1),y11:C*(i/x-1)}}function ey(){var t=X_,n=V_,e=z_(0),r=null,i=K_,u=J_,o=Q_,a=null;function c(){var c,s,l=+t.apply(this,arguments),f=+n.apply(this,arguments),h=i.apply(this,arguments)-Y_,p=u.apply(this,arguments)-Y_,d=R_(p-h),g=p>h;if(a||(a=c=co()),f<l&&(s=f,f=l,l=s),f>$_)if(d>W_-$_)a.moveTo(f*j_(h),f*U_(h)),a.arc(0,0,f,h,p,!g),l>$_&&(a.moveTo(l*j_(p),l*U_(p)),a.arc(0,0,l,p,h,g));else{var v,_,y=h,m=p,b=h,x=p,w=d,D=d,A=o.apply(this,arguments)/2,C=A>$_&&(r?+r.apply(this,arguments):q_(l*l+f*f)),E=I_(R_(f-l)/2,+e.apply(this,arguments)),k=E,M=E;if(C>$_){var F=Z_(C/l*U_(A)),S=Z_(C/f*U_(A));(w-=2*F)>$_?(b+=F*=g?1:-1,x-=F):(w=0,b=x=(h+p)/2),(D-=2*S)>$_?(y+=S*=g?1:-1,m-=S):(D=0,y=m=(h+p)/2)}var T=f*j_(y),O=f*U_(y),B=l*j_(x),N=l*U_(x);if(E>$_){var z=f*j_(m),R=f*U_(m),P=l*j_(b),j=l*U_(b);if(d<H_){var L=w>$_?ty(T,O,P,j,z,R,B,N):[B,N],I=T-L[0],U=O-L[1],q=z-L[0],$=R-L[1],H=1/U_(G_((I*q+U*$)/(q_(I*I+U*U)*q_(q*q+$*$)))/2),Y=q_(L[0]*L[0]+L[1]*L[1]);k=I_(E,(l-Y)/(H-1)),M=I_(E,(f-Y)/(H+1))}}D>$_?M>$_?(v=ny(P,j,T,O,f,M,g),_=ny(z,R,B,N,f,M,g),a.moveTo(v.cx+v.x01,v.cy+v.y01),M<E?a.arc(v.cx,v.cy,M,P_(v.y01,v.x01),P_(_.y01,_.x01),!g):(a.arc(v.cx,v.cy,M,P_(v.y01,v.x01),P_(v.y11,v.x11),!g),a.arc(0,0,f,P_(v.cy+v.y11,v.cx+v.x11),P_(_.cy+_.y11,_.cx+_.x11),!g),a.arc(_.cx,_.cy,M,P_(_.y11,_.x11),P_(_.y01,_.x01),!g))):(a.moveTo(T,O),a.arc(0,0,f,y,m,!g)):a.moveTo(T,O),l>$_&&w>$_?k>$_?(v=ny(B,N,z,R,l,-k,g),_=ny(T,O,P,j,l,-k,g),a.lineTo(v.cx+v.x01,v.cy+v.y01),k<E?a.arc(v.cx,v.cy,k,P_(v.y01,v.x01),P_(_.y01,_.x01),!g):(a.arc(v.cx,v.cy,k,P_(v.y01,v.x01),P_(v.y11,v.x11),!g),a.arc(0,0,l,P_(v.cy+v.y11,v.cx+v.x11),P_(_.cy+_.y11,_.cx+_.x11),g),a.arc(_.cx,_.cy,k,P_(_.y11,_.x11),P_(_.y01,_.x01),!g))):a.arc(0,0,l,x,b,g):a.lineTo(B,N)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +u.apply(this,arguments))/2-H_/2;return[j_(r)*e,U_(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:z_(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:z_(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:z_(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:z_(+t),c):i},c.endAngle=function(t){return arguments.length?(u="function"==typeof t?t:z_(+t),c):u},c.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:z_(+t),c):o},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c}function ry(t){this._context=t}function iy(t){return new ry(t)}function uy(t){return t[0]}function oy(t){return t[1]}function ay(){var t=uy,n=oy,e=z_(!0),r=null,i=iy,u=null;function o(o){var a,c,s,l=o.length,f=!1;for(null==r&&(u=i(s=co())),a=0;a<=l;++a)!(a<l&&e(c=o[a],a,o))===f&&((f=!f)?u.lineStart():u.lineEnd()),f&&u.point(+t(c,a,o),+n(c,a,o));if(s)return u=null,s+""||null}return o.x=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),o):t},o.y=function(t){return arguments.length?(n="function"==typeof t?t:z_(+t),o):n},o.defined=function(t){return arguments.length?(e="function"==typeof t?t:z_(!!t),o):e},o.curve=function(t){return arguments.length?(i=t,null!=r&&(u=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=u=null:u=i(r=t),o):r},o}function cy(){var t=uy,n=null,e=z_(0),r=oy,i=z_(!0),u=null,o=iy,a=null;function c(c){var s,l,f,h,p,d=c.length,g=!1,v=new Array(d),_=new Array(d);for(null==u&&(a=o(p=co())),s=0;s<=d;++s){if(!(s<d&&i(h=c[s],s,c))===g)if(g=!g)l=s,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),f=s-1;f>=l;--f)a.point(v[f],_[f]);a.lineEnd(),a.areaEnd()}g&&(v[s]=+t(h,s,c),_[s]=+e(h,s,c),a.point(n?+n(h,s,c):v[s],r?+r(h,s,c):_[s]))}if(p)return a=null,p+""||null}function s(){return ay().defined(i).curve(o).context(u)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:z_(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:z_(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:z_(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:z_(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:z_(+t),c):r},c.lineX0=c.lineY0=function(){return s().x(t).y(e)},c.lineY1=function(){return s().x(t).y(r)},c.lineX1=function(){return s().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:z_(!!t),c):i},c.curve=function(t){return arguments.length?(o=t,null!=u&&(a=o(u)),c):o},c.context=function(t){return arguments.length?(null==t?u=a=null:a=o(u=t),c):u},c}function sy(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function ly(t){return t}function fy(){var t=ly,n=sy,e=null,r=z_(0),i=z_(W_),u=z_(0);function o(o){var a,c,s,l,f,h=o.length,p=0,d=new Array(h),g=new Array(h),v=+r.apply(this,arguments),_=Math.min(W_,Math.max(-W_,i.apply(this,arguments)-v)),y=Math.min(Math.abs(_)/h,u.apply(this,arguments)),m=y*(_<0?-1:1);for(a=0;a<h;++a)(f=g[d[a]=a]=+t(o[a],a,o))>0&&(p+=f);for(null!=n?d.sort((function(t,e){return n(g[t],g[e])})):null!=e&&d.sort((function(t,n){return e(o[t],o[n])})),a=0,s=p?(_-h*m)/p:0;a<h;++a,v=l)c=d[a],l=v+((f=g[c])>0?f*s:0)+m,g[c]={data:o[c],index:a,value:f,startAngle:v,endAngle:l,padAngle:y};return g}return o.value=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),o):t},o.sortValues=function(t){return arguments.length?(n=t,e=null,o):n},o.sort=function(t){return arguments.length?(e=t,n=null,o):e},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:z_(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:z_(+t),o):i},o.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:z_(+t),o):u},o}ry.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var hy=dy(iy);function py(t){this._curve=t}function dy(t){function n(n){return new py(t(n))}return n._curve=t,n}function gy(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(dy(t)):n()._curve},t}function vy(){return gy(ay().curve(hy))}function _y(){var t=cy().curve(hy),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,u=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return gy(e())},delete t.lineX0,t.lineEndAngle=function(){return gy(r())},delete t.lineX1,t.lineInnerRadius=function(){return gy(i())},delete t.lineY0,t.lineOuterRadius=function(){return gy(u())},delete t.lineY1,t.curve=function(t){return arguments.length?n(dy(t)):n()._curve},t}function yy(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}py.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var my=Array.prototype.slice;function by(t){return t.source}function xy(t){return t.target}function wy(t){var n=by,e=xy,r=uy,i=oy,u=null;function o(){var o,a=my.call(arguments),c=n.apply(this,a),s=e.apply(this,a);if(u||(u=o=co()),t(u,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=s,a)),+i.apply(this,a)),o)return u=null,o+""||null}return o.source=function(t){return arguments.length?(n=t,o):n},o.target=function(t){return arguments.length?(e=t,o):e},o.x=function(t){return arguments.length?(r="function"==typeof t?t:z_(+t),o):r},o.y=function(t){return arguments.length?(i="function"==typeof t?t:z_(+t),o):i},o.context=function(t){return arguments.length?(u=null==t?null:t,o):u},o}function Dy(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Ay(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Cy(t,n,e,r,i){var u=yy(n,e),o=yy(n,e=(e+i)/2),a=yy(r,e),c=yy(r,i);t.moveTo(u[0],u[1]),t.bezierCurveTo(o[0],o[1],a[0],a[1],c[0],c[1])}function Ey(){return wy(Dy)}function ky(){return wy(Ay)}function My(){var t=wy(Cy);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const Fy={draw:function(t,n){var e=Math.sqrt(n/H_);t.moveTo(e,0),t.arc(0,0,e,0,W_)}},Sy={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}};var Ty=Math.sqrt(1/3),Oy=2*Ty;const By={draw:function(t,n){var e=Math.sqrt(n/Oy),r=e*Ty;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}};var Ny=Math.sin(H_/10)/Math.sin(7*H_/10),zy=Math.sin(W_/10)*Ny,Ry=-Math.cos(W_/10)*Ny;const Py={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=zy*e,i=Ry*e;t.moveTo(0,-e),t.lineTo(r,i);for(var u=1;u<5;++u){var o=W_*u/5,a=Math.cos(o),c=Math.sin(o);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},jy={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}};var Ly=Math.sqrt(3);const Iy={draw:function(t,n){var e=-Math.sqrt(n/(3*Ly));t.moveTo(0,2*e),t.lineTo(-Ly*e,-e),t.lineTo(Ly*e,-e),t.closePath()}};var Uy=-.5,qy=Math.sqrt(3)/2,$y=1/Math.sqrt(12),Hy=3*($y/2+1);const Yy={draw:function(t,n){var e=Math.sqrt(n/Hy),r=e/2,i=e*$y,u=r,o=e*$y+e,a=-u,c=o;t.moveTo(r,i),t.lineTo(u,o),t.lineTo(a,c),t.lineTo(Uy*r-qy*i,qy*r+Uy*i),t.lineTo(Uy*u-qy*o,qy*u+Uy*o),t.lineTo(Uy*a-qy*c,qy*a+Uy*c),t.lineTo(Uy*r+qy*i,Uy*i-qy*r),t.lineTo(Uy*u+qy*o,Uy*o-qy*u),t.lineTo(Uy*a+qy*c,Uy*c-qy*a),t.closePath()}};var Wy=[Fy,Sy,By,jy,Py,Iy,Yy];function Gy(){var t=z_(Fy),n=z_(64),e=null;function r(){var r;if(e||(e=r=co()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:z_(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:z_(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function Zy(){}function Xy(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Vy(t){this._context=t}function Ky(t){return new Vy(t)}function Jy(t){this._context=t}function Qy(t){return new Jy(t)}function tm(t){this._context=t}function nm(t){return new tm(t)}function em(t,n){this._basis=new Vy(t),this._beta=n}Vy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Xy(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Xy(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Jy.prototype={areaStart:Zy,areaEnd:Zy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Xy(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},tm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Xy(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},em.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],u=n[0],o=t[e]-i,a=n[e]-u,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*o),this._beta*n[c]+(1-this._beta)*(u+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const rm=function t(n){function e(t){return 1===n?new Vy(t):new em(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function im(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function um(t,n){this._context=t,this._k=(1-n)/6}um.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:im(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const om=function t(n){function e(t){return new um(t,n)}return e.tension=function(n){return t(+n)},e}(0);function am(t,n){this._context=t,this._k=(1-n)/6}am.prototype={areaStart:Zy,areaEnd:Zy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const cm=function t(n){function e(t){return new am(t,n)}return e.tension=function(n){return t(+n)},e}(0);function sm(t,n){this._context=t,this._k=(1-n)/6}sm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const lm=function t(n){function e(t){return new sm(t,n)}return e.tension=function(n){return t(+n)},e}(0);function fm(t,n,e){var r=t._x1,i=t._y1,u=t._x2,o=t._y2;if(t._l01_a>$_){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>$_){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);u=(u*s+t._x1*t._l23_2a-n*t._l12_2a)/l,o=(o*s+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(r,i,u,o,t._x2,t._y2)}function hm(t,n){this._context=t,this._alpha=n}hm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:fm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const pm=function t(n){function e(t){return n?new hm(t,n):new um(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function dm(t,n){this._context=t,this._alpha=n}dm.prototype={areaStart:Zy,areaEnd:Zy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:fm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const gm=function t(n){function e(t){return n?new dm(t,n):new am(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function vm(t,n){this._context=t,this._alpha=n}vm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:fm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const _m=function t(n){function e(t){return n?new vm(t,n):new sm(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function ym(t){this._context=t}function mm(t){return new ym(t)}function bm(t){return t<0?-1:1}function xm(t,n,e){var r=t._x1-t._x0,i=n-t._x1,u=(t._y1-t._y0)/(r||i<0&&-0),o=(e-t._y1)/(i||r<0&&-0),a=(u*i+o*r)/(r+i);return(bm(u)+bm(o))*Math.min(Math.abs(u),Math.abs(o),.5*Math.abs(a))||0}function wm(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Dm(t,n,e){var r=t._x0,i=t._y0,u=t._x1,o=t._y1,a=(u-r)/3;t._context.bezierCurveTo(r+a,i+a*n,u-a,o-a*e,u,o)}function Am(t){this._context=t}function Cm(t){this._context=new Em(t)}function Em(t){this._context=t}function km(t){return new Am(t)}function Mm(t){return new Cm(t)}function Fm(t){this._context=t}function Sm(t){var n,e,r=t.length-1,i=new Array(r),u=new Array(r),o=new Array(r);for(i[0]=0,u[0]=2,o[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,u[n]=4,o[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,u[r-1]=7,o[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/u[n-1],u[n]-=e,o[n]-=e*o[n-1];for(i[r-1]=o[r-1]/u[r-1],n=r-2;n>=0;--n)i[n]=(o[n]-i[n+1])/u[n];for(u[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)u[n]=2*t[n+1]-i[n+1];return[i,u]}function Tm(t){return new Fm(t)}function Om(t,n){this._context=t,this._t=n}function Bm(t){return new Om(t,.5)}function Nm(t){return new Om(t,0)}function zm(t){return new Om(t,1)}function Rm(t,n){if((i=t.length)>1)for(var e,r,i,u=1,o=t[n[0]],a=o.length;u<i;++u)for(r=o,o=t[n[u]],e=0;e<a;++e)o[e][1]+=o[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Pm(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function jm(t,n){return t[n]}function Lm(){var t=z_([]),n=Pm,e=Rm,r=jm;function i(i){var u,o,a=t.apply(this,arguments),c=i.length,s=a.length,l=new Array(s);for(u=0;u<s;++u){for(var f,h=a[u],p=l[u]=new Array(c),d=0;d<c;++d)p[d]=f=[0,+r(i[d],h,d,i)],f.data=i[d];p.key=h}for(u=0,o=n(l);u<s;++u)l[o[u]].index=u;return e(l,o),l}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:z_(my.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:z_(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Pm:"function"==typeof t?t:z_(my.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Rm:t,i):e},i}function Im(t,n){if((r=t.length)>0){for(var e,r,i,u=0,o=t[0].length;u<o;++u){for(i=e=0;e<r;++e)i+=t[e][u][1]||0;if(i)for(e=0;e<r;++e)t[e][u][1]/=i}Rm(t,n)}}function Um(t,n){if((a=t.length)>1)for(var e,r,i,u,o,a,c=0,s=t[n[0]].length;c<s;++c)for(u=o=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=u,r[1]=u+=i):i<0?(r[1]=o,r[0]=o+=i):r[0]=u}function qm(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],u=i.length;r<u;++r){for(var o=0,a=0;o<e;++o)a+=t[o][r][1]||0;i[r][1]+=i[r][0]=-a/2}Rm(t,n)}}function $m(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,u=0,o=1;o<r;++o){for(var a=0,c=0,s=0;a<i;++a){for(var l=t[n[a]],f=l[o][1]||0,h=(f-(l[o-1][1]||0))/2,p=0;p<a;++p){var d=t[n[p]];h+=(d[o][1]||0)-(d[o-1][1]||0)}c+=f,s+=h*f}e[o-1][1]+=e[o-1][0]=u,c&&(u-=s/c)}e[o-1][1]+=e[o-1][0]=u,Rm(t,n)}}function Hm(t){var n=t.map(Ym);return Pm(t).sort((function(t,e){return n[t]-n[e]}))}function Ym(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Wm(t){return Hm(t).reverse()}function Gm(t){var n,e,r=t.length,i=t.map(Ym),u=Pm(t).sort((function(t,n){return i[n]-i[t]})),o=0,a=0,c=[],s=[];for(n=0;n<r;++n)e=u[n],o<a?(o+=i[e],c.push(e)):(a+=i[e],s.push(e));return s.reverse().concat(c)}function Zm(t){return Pm(t).reverse()}function Xm(t){return function(){return t}}function Vm(t){return t[0]}function Km(t){return t[1]}function Jm(){this._=null}function Qm(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function tb(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function nb(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function eb(t){for(;t.L;)t=t.L;return t}ym.prototype={areaStart:Zy,areaEnd:Zy,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Am.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Dm(this,this._t0,wm(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Dm(this,wm(this,e=xm(this,t,n)),e);break;default:Dm(this,this._t0,e=xm(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Cm.prototype=Object.create(Am.prototype)).point=function(t,n){Am.prototype.point.call(this,n,t)},Em.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,u){this._context.bezierCurveTo(n,t,r,e,u,i)}},Fm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Sm(t),i=Sm(n),u=0,o=1;o<e;++u,++o)this._context.bezierCurveTo(r[0][u],i[0][u],r[1][u],i[1][u],t[o],n[o]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Om.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}},Jm.prototype={constructor:Jm,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=eb(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(tb(this,e),e=(t=e).U),e.C=!1,r.C=!0,nb(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(nb(this,e),e=(t=e).U),e.C=!1,r.C=!0,tb(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,u=t.L,o=t.R;if(e=u?o?eb(o):u:o,i?i.L===t?i.L=e:i.R=e:this._=e,u&&o?(r=e.C,e.C=t.C,e.L=u,u.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,tb(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,nb(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,tb(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,nb(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,tb(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,nb(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};const rb=Jm;function ib(t,n,e,r){var i=[null,null],u=Mb.push(i)-1;return i.left=t,i.right=n,e&&ob(i,t,n,e),r&&ob(i,n,t,r),Eb[t.index].halfedges.push(u),Eb[n.index].halfedges.push(u),i}function ub(t,n,e){var r=[n,e];return r.left=t,r}function ob(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function ab(t,n,e,r,i){var u,o=t[0],a=t[1],c=o[0],s=o[1],l=0,f=1,h=a[0]-c,p=a[1]-s;if(u=n-c,h||!(u>0)){if(u/=h,h<0){if(u<l)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>l&&(l=u)}if(u=r-c,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>l&&(l=u)}else if(h>0){if(u<l)return;u<f&&(f=u)}if(u=e-s,p||!(u>0)){if(u/=p,p<0){if(u<l)return;u<f&&(f=u)}else if(p>0){if(u>f)return;u>l&&(l=u)}if(u=i-s,p||!(u<0)){if(u/=p,p<0){if(u>f)return;u>l&&(l=u)}else if(p>0){if(u<l)return;u<f&&(f=u)}return!(l>0||f<1)||(l>0&&(t[0]=[c+l*h,s+l*p]),f<1&&(t[1]=[c+f*h,s+f*p]),!0)}}}}}function cb(t,n,e,r,i){var u=t[1];if(u)return!0;var o,a,c=t[0],s=t.left,l=t.right,f=s[0],h=s[1],p=l[0],d=l[1],g=(f+p)/2,v=(h+d)/2;if(d===h){if(g<n||g>=r)return;if(f>p){if(c){if(c[1]>=i)return}else c=[g,e];u=[g,i]}else{if(c){if(c[1]<e)return}else c=[g,i];u=[g,e]}}else if(a=v-(o=(f-p)/(d-h))*g,o<-1||o>1)if(f>p){if(c){if(c[1]>=i)return}else c=[(e-a)/o,e];u=[(i-a)/o,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/o,i];u=[(e-a)/o,e]}else if(h<d){if(c){if(c[0]>=r)return}else c=[n,o*n+a];u=[r,o*r+a]}else{if(c){if(c[0]<n)return}else c=[r,o*r+a];u=[n,o*n+a]}return t[0]=c,t[1]=u,!0}function sb(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function lb(t,n){return n[+(n.left!==t.site)]}function fb(t,n){return n[+(n.left===t.site)]}var hb,pb=[];function db(){Qm(this),this.x=this.y=this.arc=this.site=this.cy=null}function gb(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,u=e.site;if(r!==u){var o=i[0],a=i[1],c=r[0]-o,s=r[1]-a,l=u[0]-o,f=u[1]-a,h=2*(c*f-s*l);if(!(h>=-Sb)){var p=c*c+s*s,d=l*l+f*f,g=(f*p-s*d)/h,v=(c*d-l*p)/h,_=pb.pop()||new db;_.arc=t,_.site=i,_.x=g+o,_.y=(_.cy=v+a)+Math.sqrt(g*g+v*v),t.circle=_;for(var y=null,m=kb._;m;)if(_.y<m.y||_.y===m.y&&_.x<=m.x){if(!m.L){y=m.P;break}m=m.L}else{if(!m.R){y=m;break}m=m.R}kb.insert(y,_),y||(hb=_)}}}}function vb(t){var n=t.circle;n&&(n.P||(hb=n.N),kb.remove(n),pb.push(n),Qm(n),t.circle=null)}var _b=[];function yb(){Qm(this),this.edge=this.site=this.circle=null}function mb(t){var n=_b.pop()||new yb;return n.site=t,n}function bb(t){vb(t),Cb.remove(t),_b.push(t),Qm(t)}function xb(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],u=t.P,o=t.N,a=[t];bb(t);for(var c=u;c.circle&&Math.abs(e-c.circle.x)<Fb&&Math.abs(r-c.circle.cy)<Fb;)u=c.P,a.unshift(c),bb(c),c=u;a.unshift(c),vb(c);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<Fb&&Math.abs(r-s.circle.cy)<Fb;)o=s.N,a.push(s),bb(s),s=o;a.push(s),vb(s);var l,f=a.length;for(l=1;l<f;++l)s=a[l],c=a[l-1],ob(s.edge,c.site,s.site,i);c=a[0],(s=a[f-1]).edge=ib(c.site,s.site,null,i),gb(c),gb(s)}function wb(t){for(var n,e,r,i,u=t[0],o=t[1],a=Cb._;a;)if((r=Db(a,o)-u)>Fb)a=a.L;else{if(!((i=u-Ab(a,o))>Fb)){r>-Fb?(n=a.P,e=a):i>-Fb?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Eb[t.index]={site:t,halfedges:[]}}(t);var c=mb(t);if(Cb.insert(n,c),n||e){if(n===e)return vb(n),e=mb(n.site),Cb.insert(c,e),c.edge=e.edge=ib(n.site,c.site),gb(n),void gb(e);if(e){vb(n),vb(e);var s=n.site,l=s[0],f=s[1],h=t[0]-l,p=t[1]-f,d=e.site,g=d[0]-l,v=d[1]-f,_=2*(h*v-p*g),y=h*h+p*p,m=g*g+v*v,b=[(v*y-p*m)/_+l,(h*m-g*y)/_+f];ob(e.edge,s,d,b),c.edge=ib(s,t,null,b),e.edge=ib(t,d,null,b),gb(n),gb(e)}else c.edge=ib(n.site,c.site)}}function Db(t,n){var e=t.site,r=e[0],i=e[1],u=i-n;if(!u)return r;var o=t.P;if(!o)return-1/0;var a=(e=o.site)[0],c=e[1],s=c-n;if(!s)return a;var l=a-r,f=1/u-1/s,h=l/s;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*s)-c+s/2+i-u/2)))/f+r:(r+a)/2}function Ab(t,n){var e=t.N;if(e)return Db(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Cb,Eb,kb,Mb,Fb=1e-6,Sb=1e-12;function Tb(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Ob(t,n){return n[1]-t[1]||n[0]-t[0]}function Bb(t,n){var e,r,i,u=t.sort(Ob).pop();for(Mb=[],Eb=new Array(t.length),Cb=new rb,kb=new rb;;)if(i=hb,u&&(!i||u[1]<i.y||u[1]===i.y&&u[0]<i.x))u[0]===e&&u[1]===r||(wb(u),e=u[0],r=u[1]),u=t.pop();else{if(!i)break;xb(i.arc)}if(function(){for(var t,n,e,r,i=0,u=Eb.length;i<u;++i)if((t=Eb[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=sb(t,Mb[n[e]]);for(o.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var o=+n[0][0],a=+n[0][1],c=+n[1][0],s=+n[1][1];!function(t,n,e,r){for(var i,u=Mb.length;u--;)cb(i=Mb[u],t,n,e,r)&&ab(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Fb||Math.abs(i[0][1]-i[1][1])>Fb)||delete Mb[u]}(o,a,c,s),function(t,n,e,r){var i,u,o,a,c,s,l,f,h,p,d,g,v=Eb.length,_=!0;for(i=0;i<v;++i)if(u=Eb[i]){for(o=u.site,a=(c=u.halfedges).length;a--;)Mb[c[a]]||c.splice(a,1);for(a=0,s=c.length;a<s;)d=(p=fb(u,Mb[c[a]]))[0],g=p[1],f=(l=lb(u,Mb[c[++a%s]]))[0],h=l[1],(Math.abs(d-f)>Fb||Math.abs(g-h)>Fb)&&(c.splice(a,0,Mb.push(ub(o,p,Math.abs(d-t)<Fb&&r-g>Fb?[t,Math.abs(f-t)<Fb?h:r]:Math.abs(g-r)<Fb&&e-d>Fb?[Math.abs(h-r)<Fb?f:e,r]:Math.abs(d-e)<Fb&&g-n>Fb?[e,Math.abs(f-e)<Fb?h:n]:Math.abs(g-n)<Fb&&d-t>Fb?[Math.abs(h-n)<Fb?f:t,n]:null))-1),++s);s&&(_=!1)}if(_){var y,m,b,x=1/0;for(i=0,_=null;i<v;++i)(u=Eb[i])&&(b=(y=(o=u.site)[0]-t)*y+(m=o[1]-n)*m)<x&&(x=b,_=u);if(_){var w=[t,n],D=[t,r],A=[e,r],C=[e,n];_.halfedges.push(Mb.push(ub(o=_.site,w,D))-1,Mb.push(ub(o,D,A))-1,Mb.push(ub(o,A,C))-1,Mb.push(ub(o,C,w))-1)}}for(i=0;i<v;++i)(u=Eb[i])&&(u.halfedges.length||delete Eb[i])}(o,a,c,s)}this.edges=Mb,this.cells=Eb,Cb=kb=Mb=Eb=null}function Nb(){var t=Vm,n=Km,e=null;function r(r){return new Bb(r.map((function(e,i){var u=[Math.round(t(e,i,r)/Fb)*Fb,Math.round(n(e,i,r)/Fb)*Fb];return u.index=i,u.data=e,u})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:Xm(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:Xm(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r}function zb(t){return function(){return t}}function Rb(t,n,e){this.target=t,this.type=n,this.transform=e}function Pb(t,n,e){this.k=t,this.x=n,this.y=e}Bb.prototype={constructor:Bb,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return lb(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(u=(i=e.halfedges).length)for(var i,u,o,a=e.site,c=-1,s=n[i[u-1]],l=s.left===a?s.right:s.left;++c<u;)o=l,l=(s=n[i[c]]).left===a?s.right:s.left,o&&l&&r<o.index&&r<l.index&&Tb(a,o,l)<0&&t.push([a.data,o.data,l.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,u=this,o=u._found||0,a=u.cells.length;!(i=u.cells[o]);)if(++o>=a)return null;var c=t-i.site[0],s=n-i.site[1],l=c*c+s*s;do{i=u.cells[r=o],o=null,i.halfedges.forEach((function(e){var r=u.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],s=n-a[1],f=c*c+s*s;f<l&&(l=f,o=a.index)}}))}while(null!==o);return u._found=r,null==e||l<=e*e?i.site:null}},Pb.prototype={constructor:Pb,scale:function(t){return 1===t?this:new Pb(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Pb(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var jb=new Pb(1,0,0);function Lb(t){return t.__zoom||jb}function Ib(){kt.stopImmediatePropagation()}function Ub(){kt.preventDefault(),kt.stopImmediatePropagation()}function qb(){return!kt.button}function $b(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Hb(){return this.__zoom||jb}function Yb(){return-kt.deltaY*(kt.deltaMode?120:1)/500}function Wb(){return"ontouchstart"in this}function Gb(){var t,n,e=qb,r=$b,i=Yb,u=Wb,o=0,a=1/0,c=-a,s=a,l=c,f=s,h=250,p=kr,d=[],g=ht("start","zoom","end"),v=500,_=0;function y(t){t.property("__zoom",Hb).on("wheel.zoom",E).on("mousedown.zoom",k).on("dblclick.zoom",M).filter(u).on("touchstart.zoom",F).on("touchmove.zoom",S).on("touchend.zoom touchcancel.zoom",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function m(t,n){return(n=Math.max(o,Math.min(a,n)))===t.k?t:new Pb(n,t.x,t.y)}function b(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Pb(t.k,r,i)}function x(t,n){var e=t.invertX(n[0][0])-c,r=t.invertX(n[1][0])-s,i=t.invertY(n[0][1])-l,u=t.invertY(n[1][1])-f;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),u>i?(i+u)/2:Math.min(0,i)||Math.max(0,u))}function w(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function D(t,n,e){t.on("start.zoom",(function(){A(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){A(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,u=A(t,i),o=r.apply(t,i),a=e||w(o),c=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),s=t.__zoom,l="function"==typeof n?n.apply(t,i):n,f=p(s.invert(a).concat(c/s.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=f(t),e=c/n[2];t=new Pb(e,a[0]-n[0]*e,a[1]-n[1]*e)}u.zoom(null,t)}}))}function A(t,n){for(var e,r=0,i=d.length;r<i;++r)if((e=d[r]).that===t)return e;return new C(t,n)}function C(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=r.apply(t,n)}function E(){if(e.apply(this,arguments)){var t=A(this,arguments),n=this.__zoom,r=Math.max(o,Math.min(a,n.k*Math.pow(2,i.apply(this,arguments)))),u=Rt(this);if(t.wheel)t.mouse[0][0]===u[0]&&t.mouse[0][1]===u[1]||(t.mouse[1]=n.invert(t.mouse[0]=u)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[u,n.invert(u)],fi(this),t.start()}Ub(),t.wheel=setTimeout(c,150),t.zoom("mouse",x(b(m(n,r),t.mouse[0],t.mouse[1]),t.extent))}function c(){t.wheel=null,t.end()}}function k(){if(!n&&e.apply(this,arguments)){var t=A(this,arguments),r=On(kt.view).on("mousemove.zoom",a,!0).on("mouseup.zoom",c,!0),i=Rt(this),u=kt.clientX,o=kt.clientY;jn(kt.view),Ib(),t.mouse=[i,this.__zoom.invert(i)],fi(this),t.start()}function a(){if(Ub(),!t.moved){var n=kt.clientX-u,e=kt.clientY-o;t.moved=n*n+e*e>_}t.zoom("mouse",x(b(t.that.__zoom,t.mouse[0]=Rt(t.that),t.mouse[1]),t.extent))}function c(){r.on("mousemove.zoom mouseup.zoom",null),Ln(kt.view,t.moved),Ub(),t.end()}}function M(){if(e.apply(this,arguments)){var t=this.__zoom,n=Rt(this),i=t.invert(n),u=t.k*(kt.shiftKey?.5:2),o=x(b(m(t,u),n,i),r.apply(this,arguments));Ub(),h>0?On(this).transition().duration(h).call(D,o,n):On(this).call(y.transform,o)}}function F(){if(e.apply(this,arguments)){var n,r,i,u,o=A(this,arguments),a=kt.changedTouches,c=a.length;for(Ib(),r=0;r<c;++r)u=[u=Nn(this,a,(i=a[r]).identifier),this.__zoom.invert(u),i.identifier],o.touch0?o.touch1||(o.touch1=u):(o.touch0=u,n=!0);if(t&&(t=clearTimeout(t),!o.touch1))return o.end(),void((u=On(this).on("dblclick.zoom"))&&u.apply(this,arguments));n&&(t=setTimeout((function(){t=null}),v),fi(this),o.start())}}function S(){var n,e,r,i,u=A(this,arguments),o=kt.changedTouches,a=o.length;for(Ub(),t&&(t=clearTimeout(t)),n=0;n<a;++n)r=Nn(this,o,(e=o[n]).identifier),u.touch0&&u.touch0[2]===e.identifier?u.touch0[0]=r:u.touch1&&u.touch1[2]===e.identifier&&(u.touch1[0]=r);if(e=u.that.__zoom,u.touch1){var c=u.touch0[0],s=u.touch0[1],l=u.touch1[0],f=u.touch1[1],h=(h=l[0]-c[0])*h+(h=l[1]-c[1])*h,p=(p=f[0]-s[0])*p+(p=f[1]-s[1])*p;e=m(e,Math.sqrt(h/p)),r=[(c[0]+l[0])/2,(c[1]+l[1])/2],i=[(s[0]+f[0])/2,(s[1]+f[1])/2]}else{if(!u.touch0)return;r=u.touch0[0],i=u.touch0[1]}u.zoom("touch",x(b(e,r,i),u.extent))}function T(){var t,e,r=A(this,arguments),i=kt.changedTouches,u=i.length;for(Ib(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),v),t=0;t<u;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return y.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Hb),t!==e?D(t,n):e.interrupt().each((function(){A(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},y.scaleBy=function(t,n){y.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}))},y.scaleTo=function(t,n){y.transform(t,(function(){var t=r.apply(this,arguments),e=this.__zoom,i=w(t),u=e.invert(i),o="function"==typeof n?n.apply(this,arguments):n;return x(b(m(e,o),i,u),t)}))},y.translateBy=function(t,n,e){y.transform(t,(function(){return x(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments))}))},y.translateTo=function(t,n,e){y.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,u=w(t);return x(jb.translate(u[0],u[1]).scale(i.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t)}))},C.prototype={start:function(){return 1==++this.active&&(this.index=d.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(d.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Bt(new Rb(y,t,this.that.__zoom),g.apply,g,[t,this.that,this.args])}},y.wheelDelta=function(t){return arguments.length?(i="function"==typeof t?t:zb(+t),y):i},y.filter=function(t){return arguments.length?(e="function"==typeof t?t:zb(!!t),y):e},y.touchable=function(t){return arguments.length?(u="function"==typeof t?t:zb(!!t),y):u},y.extent=function(t){return arguments.length?(r="function"==typeof t?t:zb([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):r},y.scaleExtent=function(t){return arguments.length?(o=+t[0],a=+t[1],y):[o,a]},y.translateExtent=function(t){return arguments.length?(c=+t[0][0],s=+t[1][0],l=+t[0][1],f=+t[1][1],y):[[c,l],[s,f]]},y.duration=function(t){return arguments.length?(h=+t,y):h},y.interpolate=function(t){return arguments.length?(p=t,y):p},y.on=function(){var t=g.on.apply(g,arguments);return t===g?y:t},y.clickDistance=function(t){return arguments.length?(_=(t=+t)*t,y):Math.sqrt(_)},y}Lb.prototype=Pb.prototype},486:function(t,n,e){var r;t=e.nmd(t),function(){var i,u="Expected a function",o="__lodash_hash_undefined__",a="__lodash_placeholder__",c=32,s=128,l=1/0,f=9007199254740991,h=NaN,p=4294967295,d=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],g="[object Arguments]",v="[object Array]",_="[object Boolean]",y="[object Date]",m="[object Error]",b="[object Function]",x="[object GeneratorFunction]",w="[object Map]",D="[object Number]",A="[object Object]",C="[object Promise]",E="[object RegExp]",k="[object Set]",M="[object String]",F="[object Symbol]",S="[object WeakMap]",T="[object ArrayBuffer]",O="[object DataView]",B="[object Float32Array]",N="[object Float64Array]",z="[object Int8Array]",R="[object Int16Array]",P="[object Int32Array]",j="[object Uint8Array]",L="[object Uint8ClampedArray]",I="[object Uint16Array]",U="[object Uint32Array]",q=/\b__p \+= '';/g,$=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Y=/&(?:amp|lt|gt|quot|#39);/g,W=/[&<>"']/g,G=RegExp(Y.source),Z=RegExp(W.source),X=/<%-([\s\S]+?)%>/g,V=/<%([\s\S]+?)%>/g,K=/<%=([\s\S]+?)%>/g,J=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,nt=/[\\^$.*+?()[\]{}|]/g,et=RegExp(nt.source),rt=/^\s+/,it=/\s/,ut=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ot=/\{\n\/\* \[wrapped with (.+)\] \*/,at=/,? & /,ct=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,st=/[()=,{}\[\]\/\s]/,lt=/\\(\\)?/g,ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,gt=/^\[object .+?Constructor\]$/,vt=/^0o[0-7]+$/i,_t=/^(?:0|[1-9]\d*)$/,yt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,mt=/($^)/,bt=/['\n\r\u2028\u2029\\]/g,xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",wt="a-z\\xdf-\\xf6\\xf8-\\xff",Dt="A-Z\\xc0-\\xd6\\xd8-\\xde",At="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ct="["+At+"]",Et="["+xt+"]",kt="\\d+",Mt="["+wt+"]",Ft="[^\\ud800-\\udfff"+At+kt+"\\u2700-\\u27bf"+wt+Dt+"]",St="\\ud83c[\\udffb-\\udfff]",Tt="[^\\ud800-\\udfff]",Ot="(?:\\ud83c[\\udde6-\\uddff]){2}",Bt="[\\ud800-\\udbff][\\udc00-\\udfff]",Nt="["+Dt+"]",zt="(?:"+Mt+"|"+Ft+")",Rt="(?:"+Nt+"|"+Ft+")",Pt="(?:['’](?:d|ll|m|re|s|t|ve))?",jt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Lt="(?:"+Et+"|"+St+")?",It="[\\ufe0e\\ufe0f]?",Ut=It+Lt+"(?:\\u200d(?:"+[Tt,Ot,Bt].join("|")+")"+It+Lt+")*",qt="(?:"+["[\\u2700-\\u27bf]",Ot,Bt].join("|")+")"+Ut,$t="(?:"+[Tt+Et+"?",Et,Ot,Bt,"[\\ud800-\\udfff]"].join("|")+")",Ht=RegExp("['’]","g"),Yt=RegExp(Et,"g"),Wt=RegExp(St+"(?="+St+")|"+$t+Ut,"g"),Gt=RegExp([Nt+"?"+Mt+"+"+Pt+"(?="+[Ct,Nt,"$"].join("|")+")",Rt+"+"+jt+"(?="+[Ct,Nt+zt,"$"].join("|")+")",Nt+"?"+zt+"+"+Pt,Nt+"+"+jt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",kt,qt].join("|"),"g"),Zt=RegExp("[\\u200d\\ud800-\\udfff"+xt+"\\ufe0e\\ufe0f]"),Xt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Vt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Kt=-1,Jt={};Jt[B]=Jt[N]=Jt[z]=Jt[R]=Jt[P]=Jt[j]=Jt[L]=Jt[I]=Jt[U]=!0,Jt[g]=Jt[v]=Jt[T]=Jt[_]=Jt[O]=Jt[y]=Jt[m]=Jt[b]=Jt[w]=Jt[D]=Jt[A]=Jt[E]=Jt[k]=Jt[M]=Jt[S]=!1;var Qt={};Qt[g]=Qt[v]=Qt[T]=Qt[O]=Qt[_]=Qt[y]=Qt[B]=Qt[N]=Qt[z]=Qt[R]=Qt[P]=Qt[w]=Qt[D]=Qt[A]=Qt[E]=Qt[k]=Qt[M]=Qt[F]=Qt[j]=Qt[L]=Qt[I]=Qt[U]=!0,Qt[m]=Qt[b]=Qt[S]=!1;var tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},nn=parseFloat,en=parseInt,rn="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,un="object"==typeof self&&self&&self.Object===Object&&self,on=rn||un||Function("return this")(),an=n&&!n.nodeType&&n,cn=an&&t&&!t.nodeType&&t,sn=cn&&cn.exports===an,ln=sn&&rn.process,fn=function(){try{return cn&&cn.require&&cn.require("util").types||ln&&ln.binding&&ln.binding("util")}catch(t){}}(),hn=fn&&fn.isArrayBuffer,pn=fn&&fn.isDate,dn=fn&&fn.isMap,gn=fn&&fn.isRegExp,vn=fn&&fn.isSet,_n=fn&&fn.isTypedArray;function yn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function mn(t,n,e,r){for(var i=-1,u=null==t?0:t.length;++i<u;){var o=t[i];n(r,o,e(o),t)}return r}function bn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function xn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function wn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Dn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,u=[];++e<r;){var o=t[e];n(o,e,t)&&(u[i++]=o)}return u}function An(t,n){return!(null==t||!t.length)&&Nn(t,n,0)>-1}function Cn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function En(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function kn(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function Mn(t,n,e,r){var i=-1,u=null==t?0:t.length;for(r&&u&&(e=t[++i]);++i<u;)e=n(e,t[i],i,t);return e}function Fn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function Sn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var Tn=jn("length");function On(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function Bn(t,n,e,r){for(var i=t.length,u=e+(r?1:-1);r?u--:++u<i;)if(n(t[u],u,t))return u;return-1}function Nn(t,n,e){return n==n?function(t,n,e){for(var r=e-1,i=t.length;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):Bn(t,Rn,e)}function zn(t,n,e,r){for(var i=e-1,u=t.length;++i<u;)if(r(t[i],n))return i;return-1}function Rn(t){return t!=t}function Pn(t,n){var e=null==t?0:t.length;return e?Un(t,n)/e:h}function jn(t){return function(n){return null==n?i:n[t]}}function Ln(t){return function(n){return null==t?i:t[n]}}function In(t,n,e,r,i){return i(t,(function(t,i,u){e=r?(r=!1,t):n(e,t,i,u)})),e}function Un(t,n){for(var e,r=-1,u=t.length;++r<u;){var o=n(t[r]);o!==i&&(e=e===i?o:e+o)}return e}function qn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function $n(t){return t?t.slice(0,ae(t)+1).replace(rt,""):t}function Hn(t){return function(n){return t(n)}}function Yn(t,n){return En(n,(function(n){return t[n]}))}function Wn(t,n){return t.has(n)}function Gn(t,n){for(var e=-1,r=t.length;++e<r&&Nn(n,t[e],0)>-1;);return e}function Zn(t,n){for(var e=t.length;e--&&Nn(n,t[e],0)>-1;);return e}function Xn(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var Vn=Ln({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Kn=Ln({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Jn(t){return"\\"+tn[t]}function Qn(t){return Zt.test(t)}function te(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function ne(t,n){return function(e){return t(n(e))}}function ee(t,n){for(var e=-1,r=t.length,i=0,u=[];++e<r;){var o=t[e];o!==n&&o!==a||(t[e]=a,u[i++]=e)}return u}function re(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function ie(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function ue(t){return Qn(t)?function(t){for(var n=Wt.lastIndex=0;Wt.test(t);)++n;return n}(t):Tn(t)}function oe(t){return Qn(t)?function(t){return t.match(Wt)||[]}(t):function(t){return t.split("")}(t)}function ae(t){for(var n=t.length;n--&&it.test(t.charAt(n)););return n}var ce=Ln({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),se=function t(n){var e,r=(n=null==n?on:se.defaults(on.Object(),n,se.pick(on,Vt))).Array,it=n.Date,xt=n.Error,wt=n.Function,Dt=n.Math,At=n.Object,Ct=n.RegExp,Et=n.String,kt=n.TypeError,Mt=r.prototype,Ft=wt.prototype,St=At.prototype,Tt=n["__core-js_shared__"],Ot=Ft.toString,Bt=St.hasOwnProperty,Nt=0,zt=(e=/[^.]+$/.exec(Tt&&Tt.keys&&Tt.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Rt=St.toString,Pt=Ot.call(At),jt=on._,Lt=Ct("^"+Ot.call(Bt).replace(nt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),It=sn?n.Buffer:i,Ut=n.Symbol,qt=n.Uint8Array,$t=It?It.allocUnsafe:i,Wt=ne(At.getPrototypeOf,At),Zt=At.create,tn=St.propertyIsEnumerable,rn=Mt.splice,un=Ut?Ut.isConcatSpreadable:i,an=Ut?Ut.iterator:i,cn=Ut?Ut.toStringTag:i,ln=function(){try{var t=su(At,"defineProperty");return t({},"",{}),t}catch(t){}}(),fn=n.clearTimeout!==on.clearTimeout&&n.clearTimeout,Tn=it&&it.now!==on.Date.now&&it.now,Ln=n.setTimeout!==on.setTimeout&&n.setTimeout,le=Dt.ceil,fe=Dt.floor,he=At.getOwnPropertySymbols,pe=It?It.isBuffer:i,de=n.isFinite,ge=Mt.join,ve=ne(At.keys,At),_e=Dt.max,ye=Dt.min,me=it.now,be=n.parseInt,xe=Dt.random,we=Mt.reverse,De=su(n,"DataView"),Ae=su(n,"Map"),Ce=su(n,"Promise"),Ee=su(n,"Set"),ke=su(n,"WeakMap"),Me=su(At,"create"),Fe=ke&&new ke,Se={},Te=ju(De),Oe=ju(Ae),Be=ju(Ce),Ne=ju(Ee),ze=ju(ke),Re=Ut?Ut.prototype:i,Pe=Re?Re.valueOf:i,je=Re?Re.toString:i;function Le(t){if(ea(t)&&!Yo(t)&&!(t instanceof $e)){if(t instanceof qe)return t;if(Bt.call(t,"__wrapped__"))return Lu(t)}return new qe(t)}var Ie=function(){function t(){}return function(n){if(!na(n))return{};if(Zt)return Zt(n);t.prototype=n;var e=new t;return t.prototype=i,e}}();function Ue(){}function qe(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function $e(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function He(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function We(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ge(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new We;++n<e;)this.add(t[n])}function Ze(t){var n=this.__data__=new Ye(t);this.size=n.size}function Xe(t,n){var e=Yo(t),r=!e&&Ho(t),i=!e&&!r&&Xo(t),u=!e&&!r&&!i&&la(t),o=e||r||i||u,a=o?qn(t.length,Et):[],c=a.length;for(var s in t)!n&&!Bt.call(t,s)||o&&("length"==s||i&&("offset"==s||"parent"==s)||u&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||vu(s,c))||a.push(s);return a}function Ve(t){var n=t.length;return n?t[Wr(0,n-1)]:i}function Ke(t,n){return Bu(ki(t),or(n,0,t.length))}function Je(t){return Bu(ki(t))}function Qe(t,n,e){(e!==i&&!Uo(t[n],e)||e===i&&!(n in t))&&ir(t,n,e)}function tr(t,n,e){var r=t[n];Bt.call(t,n)&&Uo(r,e)&&(e!==i||n in t)||ir(t,n,e)}function nr(t,n){for(var e=t.length;e--;)if(Uo(t[e][0],n))return e;return-1}function er(t,n,e,r){return fr(t,(function(t,i,u){n(r,t,e(t),u)})),r}function rr(t,n){return t&&Mi(n,Oa(n),t)}function ir(t,n,e){"__proto__"==n&&ln?ln(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function ur(t,n){for(var e=-1,u=n.length,o=r(u),a=null==t;++e<u;)o[e]=a?i:ka(t,n[e]);return o}function or(t,n,e){return t==t&&(e!==i&&(t=t<=e?t:e),n!==i&&(t=t>=n?t:n)),t}function ar(t,n,e,r,u,o){var a,c=1&n,s=2&n,l=4&n;if(e&&(a=u?e(t,r,u,o):e(t)),a!==i)return a;if(!na(t))return t;var f=Yo(t);if(f){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&Bt.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return ki(t,a)}else{var h=hu(t),p=h==b||h==x;if(Xo(t))return xi(t,c);if(h==A||h==g||p&&!u){if(a=s||p?{}:du(t),!c)return s?function(t,n){return Mi(t,fu(t),n)}(t,function(t,n){return t&&Mi(n,Ba(n),t)}(a,t)):function(t,n){return Mi(t,lu(t),n)}(t,rr(a,t))}else{if(!Qt[h])return u?t:{};a=function(t,n,e){var r,i=t.constructor;switch(n){case T:return wi(t);case _:case y:return new i(+t);case O:return function(t,n){var e=n?wi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case B:case N:case z:case R:case P:case j:case L:case I:case U:return Di(t,e);case w:return new i;case D:case M:return new i(t);case E:return function(t){var n=new t.constructor(t.source,ht.exec(t));return n.lastIndex=t.lastIndex,n}(t);case k:return new i;case F:return r=t,Pe?At(Pe.call(r)):{}}}(t,h,c)}}o||(o=new Ze);var d=o.get(t);if(d)return d;o.set(t,a),aa(t)?t.forEach((function(r){a.add(ar(r,n,e,r,t,o))})):ra(t)&&t.forEach((function(r,i){a.set(i,ar(r,n,e,i,t,o))}));var v=f?i:(l?s?eu:nu:s?Ba:Oa)(t);return bn(v||t,(function(r,i){v&&(r=t[i=r]),tr(a,i,ar(r,n,e,i,t,o))})),a}function cr(t,n,e){var r=e.length;if(null==t)return!r;for(t=At(t);r--;){var u=e[r],o=n[u],a=t[u];if(a===i&&!(u in t)||!o(a))return!1}return!0}function sr(t,n,e){if("function"!=typeof t)throw new kt(u);return Fu((function(){t.apply(i,e)}),n)}function lr(t,n,e,r){var i=-1,u=An,o=!0,a=t.length,c=[],s=n.length;if(!a)return c;e&&(n=En(n,Hn(e))),r?(u=Cn,o=!1):n.length>=200&&(u=Wn,o=!1,n=new Ge(n));t:for(;++i<a;){var l=t[i],f=null==e?l:e(l);if(l=r||0!==l?l:0,o&&f==f){for(var h=s;h--;)if(n[h]===f)continue t;c.push(l)}else u(n,f,r)||c.push(l)}return c}Le.templateSettings={escape:X,evaluate:V,interpolate:K,variable:"",imports:{_:Le}},Le.prototype=Ue.prototype,Le.prototype.constructor=Le,qe.prototype=Ie(Ue.prototype),qe.prototype.constructor=qe,$e.prototype=Ie(Ue.prototype),$e.prototype.constructor=$e,He.prototype.clear=function(){this.__data__=Me?Me(null):{},this.size=0},He.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},He.prototype.get=function(t){var n=this.__data__;if(Me){var e=n[t];return e===o?i:e}return Bt.call(n,t)?n[t]:i},He.prototype.has=function(t){var n=this.__data__;return Me?n[t]!==i:Bt.call(n,t)},He.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Me&&n===i?o:n,this},Ye.prototype.clear=function(){this.__data__=[],this.size=0},Ye.prototype.delete=function(t){var n=this.__data__,e=nr(n,t);return!(e<0||(e==n.length-1?n.pop():rn.call(n,e,1),--this.size,0))},Ye.prototype.get=function(t){var n=this.__data__,e=nr(n,t);return e<0?i:n[e][1]},Ye.prototype.has=function(t){return nr(this.__data__,t)>-1},Ye.prototype.set=function(t,n){var e=this.__data__,r=nr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},We.prototype.clear=function(){this.size=0,this.__data__={hash:new He,map:new(Ae||Ye),string:new He}},We.prototype.delete=function(t){var n=au(this,t).delete(t);return this.size-=n?1:0,n},We.prototype.get=function(t){return au(this,t).get(t)},We.prototype.has=function(t){return au(this,t).has(t)},We.prototype.set=function(t,n){var e=au(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},Ge.prototype.add=Ge.prototype.push=function(t){return this.__data__.set(t,o),this},Ge.prototype.has=function(t){return this.__data__.has(t)},Ze.prototype.clear=function(){this.__data__=new Ye,this.size=0},Ze.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},Ze.prototype.get=function(t){return this.__data__.get(t)},Ze.prototype.has=function(t){return this.__data__.has(t)},Ze.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ye){var r=e.__data__;if(!Ae||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new We(r)}return e.set(t,n),this.size=e.size,this};var fr=Ti(mr),hr=Ti(br,!0);function pr(t,n){var e=!0;return fr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function dr(t,n,e){for(var r=-1,u=t.length;++r<u;){var o=t[r],a=n(o);if(null!=a&&(c===i?a==a&&!sa(a):e(a,c)))var c=a,s=o}return s}function gr(t,n){var e=[];return fr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function vr(t,n,e,r,i){var u=-1,o=t.length;for(e||(e=gu),i||(i=[]);++u<o;){var a=t[u];n>0&&e(a)?n>1?vr(a,n-1,e,r,i):kn(i,a):r||(i[i.length]=a)}return i}var _r=Oi(),yr=Oi(!0);function mr(t,n){return t&&_r(t,n,Oa)}function br(t,n){return t&&yr(t,n,Oa)}function xr(t,n){return Dn(n,(function(n){return Jo(t[n])}))}function wr(t,n){for(var e=0,r=(n=_i(n,t)).length;null!=t&&e<r;)t=t[Pu(n[e++])];return e&&e==r?t:i}function Dr(t,n,e){var r=n(t);return Yo(t)?r:kn(r,e(t))}function Ar(t){return null==t?t===i?"[object Undefined]":"[object Null]":cn&&cn in At(t)?function(t){var n=Bt.call(t,cn),e=t[cn];try{t[cn]=i;var r=!0}catch(t){}var u=Rt.call(t);return r&&(n?t[cn]=e:delete t[cn]),u}(t):function(t){return Rt.call(t)}(t)}function Cr(t,n){return t>n}function Er(t,n){return null!=t&&Bt.call(t,n)}function kr(t,n){return null!=t&&n in At(t)}function Mr(t,n,e){for(var u=e?Cn:An,o=t[0].length,a=t.length,c=a,s=r(a),l=1/0,f=[];c--;){var h=t[c];c&&n&&(h=En(h,Hn(n))),l=ye(h.length,l),s[c]=!e&&(n||o>=120&&h.length>=120)?new Ge(c&&h):i}h=t[0];var p=-1,d=s[0];t:for(;++p<o&&f.length<l;){var g=h[p],v=n?n(g):g;if(g=e||0!==g?g:0,!(d?Wn(d,v):u(f,v,e))){for(c=a;--c;){var _=s[c];if(!(_?Wn(_,v):u(t[c],v,e)))continue t}d&&d.push(v),f.push(g)}}return f}function Fr(t,n,e){var r=null==(t=Cu(t,n=_i(n,t)))?t:t[Pu(Vu(n))];return null==r?i:yn(r,t,e)}function Sr(t){return ea(t)&&Ar(t)==g}function Tr(t,n,e,r,u){return t===n||(null==t||null==n||!ea(t)&&!ea(n)?t!=t&&n!=n:function(t,n,e,r,u,o){var a=Yo(t),c=Yo(n),s=a?v:hu(t),l=c?v:hu(n),f=(s=s==g?A:s)==A,h=(l=l==g?A:l)==A,p=s==l;if(p&&Xo(t)){if(!Xo(n))return!1;a=!0,f=!1}if(p&&!f)return o||(o=new Ze),a||la(t)?Qi(t,n,e,r,u,o):function(t,n,e,r,i,u,o){switch(e){case O:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case T:return!(t.byteLength!=n.byteLength||!u(new qt(t),new qt(n)));case _:case y:case D:return Uo(+t,+n);case m:return t.name==n.name&&t.message==n.message;case E:case M:return t==n+"";case w:var a=te;case k:var c=1&r;if(a||(a=re),t.size!=n.size&&!c)return!1;var s=o.get(t);if(s)return s==n;r|=2,o.set(t,n);var l=Qi(a(t),a(n),r,i,u,o);return o.delete(t),l;case F:if(Pe)return Pe.call(t)==Pe.call(n)}return!1}(t,n,s,e,r,u,o);if(!(1&e)){var d=f&&Bt.call(t,"__wrapped__"),b=h&&Bt.call(n,"__wrapped__");if(d||b){var x=d?t.value():t,C=b?n.value():n;return o||(o=new Ze),u(x,C,e,r,o)}}return!!p&&(o||(o=new Ze),function(t,n,e,r,u,o){var a=1&e,c=nu(t),s=c.length;if(s!=nu(n).length&&!a)return!1;for(var l=s;l--;){var f=c[l];if(!(a?f in n:Bt.call(n,f)))return!1}var h=o.get(t),p=o.get(n);if(h&&p)return h==n&&p==t;var d=!0;o.set(t,n),o.set(n,t);for(var g=a;++l<s;){var v=t[f=c[l]],_=n[f];if(r)var y=a?r(_,v,f,n,t,o):r(v,_,f,t,n,o);if(!(y===i?v===_||u(v,_,e,r,o):y)){d=!1;break}g||(g="constructor"==f)}if(d&&!g){var m=t.constructor,b=n.constructor;m==b||!("constructor"in t)||!("constructor"in n)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(d=!1)}return o.delete(t),o.delete(n),d}(t,n,e,r,u,o))}(t,n,e,r,Tr,u))}function Or(t,n,e,r){var u=e.length,o=u,a=!r;if(null==t)return!o;for(t=At(t);u--;){var c=e[u];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++u<o;){var s=(c=e[u])[0],l=t[s],f=c[1];if(a&&c[2]){if(l===i&&!(s in t))return!1}else{var h=new Ze;if(r)var p=r(l,f,s,t,n,h);if(!(p===i?Tr(f,l,3,r,h):p))return!1}}return!0}function Br(t){return!(!na(t)||(n=t,zt&&zt in n))&&(Jo(t)?Lt:gt).test(ju(t));var n}function Nr(t){return"function"==typeof t?t:null==t?ic:"object"==typeof t?Yo(t)?Lr(t[0],t[1]):jr(t):pc(t)}function zr(t){if(!xu(t))return ve(t);var n=[];for(var e in At(t))Bt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function Rr(t,n){return t<n}function Pr(t,n){var e=-1,i=Go(t)?r(t.length):[];return fr(t,(function(t,r,u){i[++e]=n(t,r,u)})),i}function jr(t){var n=cu(t);return 1==n.length&&n[0][2]?Du(n[0][0],n[0][1]):function(e){return e===t||Or(e,t,n)}}function Lr(t,n){return yu(t)&&wu(n)?Du(Pu(t),n):function(e){var r=ka(e,t);return r===i&&r===n?Ma(e,t):Tr(n,r,3)}}function Ir(t,n,e,r,u){t!==n&&_r(n,(function(o,a){if(u||(u=new Ze),na(o))!function(t,n,e,r,u,o,a){var c=ku(t,e),s=ku(n,e),l=a.get(s);if(l)Qe(t,e,l);else{var f=o?o(c,s,e+"",t,n,a):i,h=f===i;if(h){var p=Yo(s),d=!p&&Xo(s),g=!p&&!d&&la(s);f=s,p||d||g?Yo(c)?f=c:Zo(c)?f=ki(c):d?(h=!1,f=xi(s,!0)):g?(h=!1,f=Di(s,!0)):f=[]:ua(s)||Ho(s)?(f=c,Ho(c)?f=ya(c):na(c)&&!Jo(c)||(f=du(s))):h=!1}h&&(a.set(s,f),u(f,s,r,o,a),a.delete(s)),Qe(t,e,f)}}(t,n,a,e,Ir,r,u);else{var c=r?r(ku(t,a),o,a+"",t,n,u):i;c===i&&(c=o),Qe(t,a,c)}}),Ba)}function Ur(t,n){var e=t.length;if(e)return vu(n+=n<0?e:0,e)?t[n]:i}function qr(t,n,e){n=n.length?En(n,(function(t){return Yo(t)?function(n){return wr(n,1===t.length?t[0]:t)}:t})):[ic];var r=-1;return n=En(n,Hn(ou())),function(t,n){var r=t.length;for(t.sort((function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,u=n.criteria,o=i.length,a=e.length;++r<o;){var c=Ai(i[r],u[r]);if(c)return r>=a?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}));r--;)t[r]=t[r].value;return t}(Pr(t,(function(t,e,i){return{criteria:En(n,(function(n){return n(t)})),index:++r,value:t}})))}function $r(t,n,e){for(var r=-1,i=n.length,u={};++r<i;){var o=n[r],a=wr(t,o);e(a,o)&&Kr(u,_i(o,t),a)}return u}function Hr(t,n,e,r){var i=r?zn:Nn,u=-1,o=n.length,a=t;for(t===n&&(n=ki(n)),e&&(a=En(t,Hn(e)));++u<o;)for(var c=0,s=n[u],l=e?e(s):s;(c=i(a,l,c,r))>-1;)a!==t&&rn.call(a,c,1),rn.call(t,c,1);return t}function Yr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==u){var u=i;vu(i)?rn.call(t,i,1):si(t,i)}}return t}function Wr(t,n){return t+fe(xe()*(n-t+1))}function Gr(t,n){var e="";if(!t||n<1||n>f)return e;do{n%2&&(e+=t),(n=fe(n/2))&&(t+=t)}while(n);return e}function Zr(t,n){return Su(Au(t,n,ic),t+"")}function Xr(t){return Ve(Ua(t))}function Vr(t,n){var e=Ua(t);return Bu(e,or(n,0,e.length))}function Kr(t,n,e,r){if(!na(t))return t;for(var u=-1,o=(n=_i(n,t)).length,a=o-1,c=t;null!=c&&++u<o;){var s=Pu(n[u]),l=e;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(u!=a){var f=c[s];(l=r?r(f,s,c):i)===i&&(l=na(f)?f:vu(n[u+1])?[]:{})}tr(c,s,l),c=c[s]}return t}var Jr=Fe?function(t,n){return Fe.set(t,n),t}:ic,Qr=ln?function(t,n){return ln(t,"toString",{configurable:!0,enumerable:!1,value:nc(n),writable:!0})}:ic;function ti(t){return Bu(Ua(t))}function ni(t,n,e){var i=-1,u=t.length;n<0&&(n=-n>u?0:u+n),(e=e>u?u:e)<0&&(e+=u),u=n>e?0:e-n>>>0,n>>>=0;for(var o=r(u);++i<u;)o[i]=t[i+n];return o}function ei(t,n){var e;return fr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function ri(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var u=r+i>>>1,o=t[u];null!==o&&!sa(o)&&(e?o<=n:o<n)?r=u+1:i=u}return i}return ii(t,n,ic,e)}function ii(t,n,e,r){var u=0,o=null==t?0:t.length;if(0===o)return 0;for(var a=(n=e(n))!=n,c=null===n,s=sa(n),l=n===i;u<o;){var f=fe((u+o)/2),h=e(t[f]),p=h!==i,d=null===h,g=h==h,v=sa(h);if(a)var _=r||g;else _=l?g&&(r||p):c?g&&p&&(r||!d):s?g&&p&&!d&&(r||!v):!d&&!v&&(r?h<=n:h<n);_?u=f+1:o=f}return ye(o,4294967294)}function ui(t,n){for(var e=-1,r=t.length,i=0,u=[];++e<r;){var o=t[e],a=n?n(o):o;if(!e||!Uo(a,c)){var c=a;u[i++]=0===o?0:o}}return u}function oi(t){return"number"==typeof t?t:sa(t)?h:+t}function ai(t){if("string"==typeof t)return t;if(Yo(t))return En(t,ai)+"";if(sa(t))return je?je.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ci(t,n,e){var r=-1,i=An,u=t.length,o=!0,a=[],c=a;if(e)o=!1,i=Cn;else if(u>=200){var s=n?null:Gi(t);if(s)return re(s);o=!1,i=Wn,c=new Ge}else c=n?[]:a;t:for(;++r<u;){var l=t[r],f=n?n(l):l;if(l=e||0!==l?l:0,o&&f==f){for(var h=c.length;h--;)if(c[h]===f)continue t;n&&c.push(f),a.push(l)}else i(c,f,e)||(c!==a&&c.push(f),a.push(l))}return a}function si(t,n){return null==(t=Cu(t,n=_i(n,t)))||delete t[Pu(Vu(n))]}function li(t,n,e,r){return Kr(t,n,e(wr(t,n)),r)}function fi(t,n,e,r){for(var i=t.length,u=r?i:-1;(r?u--:++u<i)&&n(t[u],u,t););return e?ni(t,r?0:u,r?u+1:i):ni(t,r?u+1:0,r?i:u)}function hi(t,n){var e=t;return e instanceof $e&&(e=e.value()),Mn(n,(function(t,n){return n.func.apply(n.thisArg,kn([t],n.args))}),e)}function pi(t,n,e){var i=t.length;if(i<2)return i?ci(t[0]):[];for(var u=-1,o=r(i);++u<i;)for(var a=t[u],c=-1;++c<i;)c!=u&&(o[u]=lr(o[u]||a,t[c],n,e));return ci(vr(o,1),n,e)}function di(t,n,e){for(var r=-1,u=t.length,o=n.length,a={};++r<u;){var c=r<o?n[r]:i;e(a,t[r],c)}return a}function gi(t){return Zo(t)?t:[]}function vi(t){return"function"==typeof t?t:ic}function _i(t,n){return Yo(t)?t:yu(t,n)?[t]:Ru(ma(t))}var yi=Zr;function mi(t,n,e){var r=t.length;return e=e===i?r:e,!n&&e>=r?t:ni(t,n,e)}var bi=fn||function(t){return on.clearTimeout(t)};function xi(t,n){if(n)return t.slice();var e=t.length,r=$t?$t(e):new t.constructor(e);return t.copy(r),r}function wi(t){var n=new t.constructor(t.byteLength);return new qt(n).set(new qt(t)),n}function Di(t,n){var e=n?wi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Ai(t,n){if(t!==n){var e=t!==i,r=null===t,u=t==t,o=sa(t),a=n!==i,c=null===n,s=n==n,l=sa(n);if(!c&&!l&&!o&&t>n||o&&a&&s&&!c&&!l||r&&a&&s||!e&&s||!u)return 1;if(!r&&!o&&!l&&t<n||l&&e&&u&&!r&&!o||c&&e&&u||!a&&u||!s)return-1}return 0}function Ci(t,n,e,i){for(var u=-1,o=t.length,a=e.length,c=-1,s=n.length,l=_e(o-a,0),f=r(s+l),h=!i;++c<s;)f[c]=n[c];for(;++u<a;)(h||u<o)&&(f[e[u]]=t[u]);for(;l--;)f[c++]=t[u++];return f}function Ei(t,n,e,i){for(var u=-1,o=t.length,a=-1,c=e.length,s=-1,l=n.length,f=_e(o-c,0),h=r(f+l),p=!i;++u<f;)h[u]=t[u];for(var d=u;++s<l;)h[d+s]=n[s];for(;++a<c;)(p||u<o)&&(h[d+e[a]]=t[u++]);return h}function ki(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function Mi(t,n,e,r){var u=!e;e||(e={});for(var o=-1,a=n.length;++o<a;){var c=n[o],s=r?r(e[c],t[c],c,e,t):i;s===i&&(s=t[c]),u?ir(e,c,s):tr(e,c,s)}return e}function Fi(t,n){return function(e,r){var i=Yo(e)?mn:er,u=n?n():{};return i(e,t,ou(r,2),u)}}function Si(t){return Zr((function(n,e){var r=-1,u=e.length,o=u>1?e[u-1]:i,a=u>2?e[2]:i;for(o=t.length>3&&"function"==typeof o?(u--,o):i,a&&_u(e[0],e[1],a)&&(o=u<3?i:o,u=1),n=At(n);++r<u;){var c=e[r];c&&t(n,c,r,o)}return n}))}function Ti(t,n){return function(e,r){if(null==e)return e;if(!Go(e))return t(e,r);for(var i=e.length,u=n?i:-1,o=At(e);(n?u--:++u<i)&&!1!==r(o[u],u,o););return e}}function Oi(t){return function(n,e,r){for(var i=-1,u=At(n),o=r(n),a=o.length;a--;){var c=o[t?a:++i];if(!1===e(u[c],c,u))break}return n}}function Bi(t){return function(n){var e=Qn(n=ma(n))?oe(n):i,r=e?e[0]:n.charAt(0),u=e?mi(e,1).join(""):n.slice(1);return r[t]()+u}}function Ni(t){return function(n){return Mn(Ja(Ha(n).replace(Ht,"")),t,"")}}function zi(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Ie(t.prototype),r=t.apply(e,n);return na(r)?r:e}}function Ri(t){return function(n,e,r){var u=At(n);if(!Go(n)){var o=ou(e,3);n=Oa(n),e=function(t){return o(u[t],t,u)}}var a=t(n,e,r);return a>-1?u[o?n[a]:a]:i}}function Pi(t){return tu((function(n){var e=n.length,r=e,o=qe.prototype.thru;for(t&&n.reverse();r--;){var a=n[r];if("function"!=typeof a)throw new kt(u);if(o&&!c&&"wrapper"==iu(a))var c=new qe([],!0)}for(r=c?r:e;++r<e;){var s=iu(a=n[r]),l="wrapper"==s?ru(a):i;c=l&&mu(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?c[iu(l[0])].apply(c,l[3]):1==a.length&&mu(a)?c[s]():c.thru(a)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Yo(r))return c.plant(r).value();for(var i=0,u=e?n[i].apply(this,t):r;++i<e;)u=n[i].call(this,u);return u}}))}function ji(t,n,e,u,o,a,c,l,f,h){var p=n&s,d=1&n,g=2&n,v=24&n,_=512&n,y=g?i:zi(t);return function i(){for(var s=arguments.length,m=r(s),b=s;b--;)m[b]=arguments[b];if(v)var x=uu(i),w=Xn(m,x);if(u&&(m=Ci(m,u,o,v)),a&&(m=Ei(m,a,c,v)),s-=w,v&&s<h){var D=ee(m,x);return Yi(t,n,ji,i.placeholder,e,m,D,l,f,h-s)}var A=d?e:this,C=g?A[t]:t;return s=m.length,l?m=Eu(m,l):_&&s>1&&m.reverse(),p&&f<s&&(m.length=f),this&&this!==on&&this instanceof i&&(C=y||zi(C)),C.apply(A,m)}}function Li(t,n){return function(e,r){return function(t,n,e,r){return mr(t,(function(t,i,u){n(r,e(t),i,u)})),r}(e,t,n(r),{})}}function Ii(t,n){return function(e,r){var u;if(e===i&&r===i)return n;if(e!==i&&(u=e),r!==i){if(u===i)return r;"string"==typeof e||"string"==typeof r?(e=ai(e),r=ai(r)):(e=oi(e),r=oi(r)),u=t(e,r)}return u}}function Ui(t){return tu((function(n){return n=En(n,Hn(ou())),Zr((function(e){var r=this;return t(n,(function(t){return yn(t,r,e)}))}))}))}function qi(t,n){var e=(n=n===i?" ":ai(n)).length;if(e<2)return e?Gr(n,t):n;var r=Gr(n,le(t/ue(n)));return Qn(n)?mi(oe(r),0,t).join(""):r.slice(0,t)}function $i(t){return function(n,e,u){return u&&"number"!=typeof u&&_u(n,e,u)&&(e=u=i),n=da(n),e===i?(e=n,n=0):e=da(e),function(t,n,e,i){for(var u=-1,o=_e(le((n-t)/(e||1)),0),a=r(o);o--;)a[i?o:++u]=t,t+=e;return a}(n,e,u=u===i?n<e?1:-1:da(u),t)}}function Hi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=_a(n),e=_a(e)),t(n,e)}}function Yi(t,n,e,r,u,o,a,s,l,f){var h=8&n;n|=h?c:64,4&(n&=~(h?64:c))||(n&=-4);var p=[t,n,u,h?o:i,h?a:i,h?i:o,h?i:a,s,l,f],d=e.apply(i,p);return mu(t)&&Mu(d,p),d.placeholder=r,Tu(d,t,n)}function Wi(t){var n=Dt[t];return function(t,e){if(t=_a(t),(e=null==e?0:ye(ga(e),292))&&de(t)){var r=(ma(t)+"e").split("e");return+((r=(ma(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Gi=Ee&&1/re(new Ee([,-0]))[1]==l?function(t){return new Ee(t)}:sc;function Zi(t){return function(n){var e=hu(n);return e==w?te(n):e==k?ie(n):function(t,n){return En(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Xi(t,n,e,o,l,f,h,p){var d=2&n;if(!d&&"function"!=typeof t)throw new kt(u);var g=o?o.length:0;if(g||(n&=-97,o=l=i),h=h===i?h:_e(ga(h),0),p=p===i?p:ga(p),g-=l?l.length:0,64&n){var v=o,_=l;o=l=i}var y=d?i:ru(t),m=[t,n,e,o,l,v,_,f,h,p];if(y&&function(t,n){var e=t[1],r=n[1],i=e|r,u=i<131,o=r==s&&8==e||r==s&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!u&&!o)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var l=t[3];t[3]=l?Ci(l,c,n[4]):c,t[4]=l?ee(t[3],a):n[4]}(c=n[5])&&(l=t[5],t[5]=l?Ei(l,c,n[6]):c,t[6]=l?ee(t[5],a):n[6]),(c=n[7])&&(t[7]=c),r&s&&(t[8]=null==t[8]?n[8]:ye(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(m,y),t=m[0],n=m[1],e=m[2],o=m[3],l=m[4],!(p=m[9]=m[9]===i?d?0:t.length:_e(m[9]-g,0))&&24&n&&(n&=-25),n&&1!=n)b=8==n||16==n?function(t,n,e){var u=zi(t);return function o(){for(var a=arguments.length,c=r(a),s=a,l=uu(o);s--;)c[s]=arguments[s];var f=a<3&&c[0]!==l&&c[a-1]!==l?[]:ee(c,l);return(a-=f.length)<e?Yi(t,n,ji,o.placeholder,i,c,f,i,i,e-a):yn(this&&this!==on&&this instanceof o?u:t,this,c)}}(t,n,p):n!=c&&33!=n||l.length?ji.apply(i,m):function(t,n,e,i){var u=1&n,o=zi(t);return function n(){for(var a=-1,c=arguments.length,s=-1,l=i.length,f=r(l+c),h=this&&this!==on&&this instanceof n?o:t;++s<l;)f[s]=i[s];for(;c--;)f[s++]=arguments[++a];return yn(h,u?e:this,f)}}(t,n,e,o);else var b=function(t,n,e){var r=1&n,i=zi(t);return function n(){return(this&&this!==on&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return Tu((y?Jr:Mu)(b,m),t,n)}function Vi(t,n,e,r){return t===i||Uo(t,St[e])&&!Bt.call(r,e)?n:t}function Ki(t,n,e,r,u,o){return na(t)&&na(n)&&(o.set(n,t),Ir(t,n,i,Ki,o),o.delete(n)),t}function Ji(t){return ua(t)?i:t}function Qi(t,n,e,r,u,o){var a=1&e,c=t.length,s=n.length;if(c!=s&&!(a&&s>c))return!1;var l=o.get(t),f=o.get(n);if(l&&f)return l==n&&f==t;var h=-1,p=!0,d=2&e?new Ge:i;for(o.set(t,n),o.set(n,t);++h<c;){var g=t[h],v=n[h];if(r)var _=a?r(v,g,h,n,t,o):r(g,v,h,t,n,o);if(_!==i){if(_)continue;p=!1;break}if(d){if(!Sn(n,(function(t,n){if(!Wn(d,n)&&(g===t||u(g,t,e,r,o)))return d.push(n)}))){p=!1;break}}else if(g!==v&&!u(g,v,e,r,o)){p=!1;break}}return o.delete(t),o.delete(n),p}function tu(t){return Su(Au(t,i,Yu),t+"")}function nu(t){return Dr(t,Oa,lu)}function eu(t){return Dr(t,Ba,fu)}var ru=Fe?function(t){return Fe.get(t)}:sc;function iu(t){for(var n=t.name+"",e=Se[n],r=Bt.call(Se,n)?e.length:0;r--;){var i=e[r],u=i.func;if(null==u||u==t)return i.name}return n}function uu(t){return(Bt.call(Le,"placeholder")?Le:t).placeholder}function ou(){var t=Le.iteratee||uc;return t=t===uc?Nr:t,arguments.length?t(arguments[0],arguments[1]):t}function au(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function cu(t){for(var n=Oa(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,wu(i)]}return n}function su(t,n){var e=function(t,n){return null==t?i:t[n]}(t,n);return Br(e)?e:i}var lu=he?function(t){return null==t?[]:(t=At(t),Dn(he(t),(function(n){return tn.call(t,n)})))}:vc,fu=he?function(t){for(var n=[];t;)kn(n,lu(t)),t=Wt(t);return n}:vc,hu=Ar;function pu(t,n,e){for(var r=-1,i=(n=_i(n,t)).length,u=!1;++r<i;){var o=Pu(n[r]);if(!(u=null!=t&&e(t,o)))break;t=t[o]}return u||++r!=i?u:!!(i=null==t?0:t.length)&&ta(i)&&vu(o,i)&&(Yo(t)||Ho(t))}function du(t){return"function"!=typeof t.constructor||xu(t)?{}:Ie(Wt(t))}function gu(t){return Yo(t)||Ho(t)||!!(un&&t&&t[un])}function vu(t,n){var e=typeof t;return!!(n=null==n?f:n)&&("number"==e||"symbol"!=e&&_t.test(t))&&t>-1&&t%1==0&&t<n}function _u(t,n,e){if(!na(e))return!1;var r=typeof n;return!!("number"==r?Go(e)&&vu(n,e.length):"string"==r&&n in e)&&Uo(e[n],t)}function yu(t,n){if(Yo(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!sa(t))||Q.test(t)||!J.test(t)||null!=n&&t in At(n)}function mu(t){var n=iu(t),e=Le[n];if("function"!=typeof e||!(n in $e.prototype))return!1;if(t===e)return!0;var r=ru(e);return!!r&&t===r[0]}(De&&hu(new De(new ArrayBuffer(1)))!=O||Ae&&hu(new Ae)!=w||Ce&&hu(Ce.resolve())!=C||Ee&&hu(new Ee)!=k||ke&&hu(new ke)!=S)&&(hu=function(t){var n=Ar(t),e=n==A?t.constructor:i,r=e?ju(e):"";if(r)switch(r){case Te:return O;case Oe:return w;case Be:return C;case Ne:return k;case ze:return S}return n});var bu=Tt?Jo:_c;function xu(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||St)}function wu(t){return t==t&&!na(t)}function Du(t,n){return function(e){return null!=e&&e[t]===n&&(n!==i||t in At(e))}}function Au(t,n,e){return n=_e(n===i?t.length-1:n,0),function(){for(var i=arguments,u=-1,o=_e(i.length-n,0),a=r(o);++u<o;)a[u]=i[n+u];u=-1;for(var c=r(n+1);++u<n;)c[u]=i[u];return c[n]=e(a),yn(t,this,c)}}function Cu(t,n){return n.length<2?t:wr(t,ni(n,0,-1))}function Eu(t,n){for(var e=t.length,r=ye(n.length,e),u=ki(t);r--;){var o=n[r];t[r]=vu(o,e)?u[o]:i}return t}function ku(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Mu=Ou(Jr),Fu=Ln||function(t,n){return on.setTimeout(t,n)},Su=Ou(Qr);function Tu(t,n,e){var r=n+"";return Su(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(ut,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return bn(d,(function(e){var r="_."+e[0];n&e[1]&&!An(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(ot);return n?n[1].split(at):[]}(r),e)))}function Ou(t){var n=0,e=0;return function(){var r=me(),u=16-(r-e);if(e=r,u>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(i,arguments)}}function Bu(t,n){var e=-1,r=t.length,u=r-1;for(n=n===i?r:n;++e<n;){var o=Wr(e,u),a=t[o];t[o]=t[e],t[e]=a}return t.length=n,t}var Nu,zu,Ru=(Nu=zo((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(tt,(function(t,e,r,i){n.push(r?i.replace(lt,"$1"):e||t)})),n}),(function(t){return 500===zu.size&&zu.clear(),t})),zu=Nu.cache,Nu);function Pu(t){if("string"==typeof t||sa(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ju(t){if(null!=t){try{return Ot.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Lu(t){if(t instanceof $e)return t.clone();var n=new qe(t.__wrapped__,t.__chain__);return n.__actions__=ki(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Iu=Zr((function(t,n){return Zo(t)?lr(t,vr(n,1,Zo,!0)):[]})),Uu=Zr((function(t,n){var e=Vu(n);return Zo(e)&&(e=i),Zo(t)?lr(t,vr(n,1,Zo,!0),ou(e,2)):[]})),qu=Zr((function(t,n){var e=Vu(n);return Zo(e)&&(e=i),Zo(t)?lr(t,vr(n,1,Zo,!0),i,e):[]}));function $u(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ga(e);return i<0&&(i=_e(r+i,0)),Bn(t,ou(n,3),i)}function Hu(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var u=r-1;return e!==i&&(u=ga(e),u=e<0?_e(r+u,0):ye(u,r-1)),Bn(t,ou(n,3),u,!0)}function Yu(t){return null!=t&&t.length?vr(t,1):[]}function Wu(t){return t&&t.length?t[0]:i}var Gu=Zr((function(t){var n=En(t,gi);return n.length&&n[0]===t[0]?Mr(n):[]})),Zu=Zr((function(t){var n=Vu(t),e=En(t,gi);return n===Vu(e)?n=i:e.pop(),e.length&&e[0]===t[0]?Mr(e,ou(n,2)):[]})),Xu=Zr((function(t){var n=Vu(t),e=En(t,gi);return(n="function"==typeof n?n:i)&&e.pop(),e.length&&e[0]===t[0]?Mr(e,i,n):[]}));function Vu(t){var n=null==t?0:t.length;return n?t[n-1]:i}var Ku=Zr(Ju);function Ju(t,n){return t&&t.length&&n&&n.length?Hr(t,n):t}var Qu=tu((function(t,n){var e=null==t?0:t.length,r=ur(t,n);return Yr(t,En(n,(function(t){return vu(t,e)?+t:t})).sort(Ai)),r}));function to(t){return null==t?t:we.call(t)}var no=Zr((function(t){return ci(vr(t,1,Zo,!0))})),eo=Zr((function(t){var n=Vu(t);return Zo(n)&&(n=i),ci(vr(t,1,Zo,!0),ou(n,2))})),ro=Zr((function(t){var n=Vu(t);return n="function"==typeof n?n:i,ci(vr(t,1,Zo,!0),i,n)}));function io(t){if(!t||!t.length)return[];var n=0;return t=Dn(t,(function(t){if(Zo(t))return n=_e(t.length,n),!0})),qn(n,(function(n){return En(t,jn(n))}))}function uo(t,n){if(!t||!t.length)return[];var e=io(t);return null==n?e:En(e,(function(t){return yn(n,i,t)}))}var oo=Zr((function(t,n){return Zo(t)?lr(t,n):[]})),ao=Zr((function(t){return pi(Dn(t,Zo))})),co=Zr((function(t){var n=Vu(t);return Zo(n)&&(n=i),pi(Dn(t,Zo),ou(n,2))})),so=Zr((function(t){var n=Vu(t);return n="function"==typeof n?n:i,pi(Dn(t,Zo),i,n)})),lo=Zr(io),fo=Zr((function(t){var n=t.length,e=n>1?t[n-1]:i;return e="function"==typeof e?(t.pop(),e):i,uo(t,e)}));function ho(t){var n=Le(t);return n.__chain__=!0,n}function po(t,n){return n(t)}var go=tu((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,u=function(n){return ur(n,t)};return!(n>1||this.__actions__.length)&&r instanceof $e&&vu(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:po,args:[u],thisArg:i}),new qe(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(i),t}))):this.thru(u)})),vo=Fi((function(t,n,e){Bt.call(t,e)?++t[e]:ir(t,e,1)})),_o=Ri($u),yo=Ri(Hu);function mo(t,n){return(Yo(t)?bn:fr)(t,ou(n,3))}function bo(t,n){return(Yo(t)?xn:hr)(t,ou(n,3))}var xo=Fi((function(t,n,e){Bt.call(t,e)?t[e].push(n):ir(t,e,[n])})),wo=Zr((function(t,n,e){var i=-1,u="function"==typeof n,o=Go(t)?r(t.length):[];return fr(t,(function(t){o[++i]=u?yn(n,t,e):Fr(t,n,e)})),o})),Do=Fi((function(t,n,e){ir(t,e,n)}));function Ao(t,n){return(Yo(t)?En:Pr)(t,ou(n,3))}var Co=Fi((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]})),Eo=Zr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&_u(t,n[0],n[1])?n=[]:e>2&&_u(n[0],n[1],n[2])&&(n=[n[0]]),qr(t,vr(n,1),[])})),ko=Tn||function(){return on.Date.now()};function Mo(t,n,e){return n=e?i:n,n=t&&null==n?t.length:n,Xi(t,s,i,i,i,i,n)}function Fo(t,n){var e;if("function"!=typeof n)throw new kt(u);return t=ga(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=i),e}}var So=Zr((function(t,n,e){var r=1;if(e.length){var i=ee(e,uu(So));r|=c}return Xi(t,r,n,e,i)})),To=Zr((function(t,n,e){var r=3;if(e.length){var i=ee(e,uu(To));r|=c}return Xi(n,r,t,e,i)}));function Oo(t,n,e){var r,o,a,c,s,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new kt(u);function g(n){var e=r,u=o;return r=o=i,f=n,c=t.apply(u,e)}function v(t){return f=t,s=Fu(y,n),h?g(t):c}function _(t){var e=t-l;return l===i||e>=n||e<0||p&&t-f>=a}function y(){var t=ko();if(_(t))return m(t);s=Fu(y,function(t){var e=n-(t-l);return p?ye(e,a-(t-f)):e}(t))}function m(t){return s=i,d&&r?g(t):(r=o=i,c)}function b(){var t=ko(),e=_(t);if(r=arguments,o=this,l=t,e){if(s===i)return v(l);if(p)return bi(s),s=Fu(y,n),g(l)}return s===i&&(s=Fu(y,n)),c}return n=_a(n)||0,na(e)&&(h=!!e.leading,a=(p="maxWait"in e)?_e(_a(e.maxWait)||0,n):a,d="trailing"in e?!!e.trailing:d),b.cancel=function(){s!==i&&bi(s),f=0,r=l=o=s=i},b.flush=function(){return s===i?c:m(ko())},b}var Bo=Zr((function(t,n){return sr(t,1,n)})),No=Zr((function(t,n,e){return sr(t,_a(n)||0,e)}));function zo(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new kt(u);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],u=e.cache;if(u.has(i))return u.get(i);var o=t.apply(this,r);return e.cache=u.set(i,o)||u,o};return e.cache=new(zo.Cache||We),e}function Ro(t){if("function"!=typeof t)throw new kt(u);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}zo.Cache=We;var Po=yi((function(t,n){var e=(n=1==n.length&&Yo(n[0])?En(n[0],Hn(ou())):En(vr(n,1),Hn(ou()))).length;return Zr((function(r){for(var i=-1,u=ye(r.length,e);++i<u;)r[i]=n[i].call(this,r[i]);return yn(t,this,r)}))})),jo=Zr((function(t,n){var e=ee(n,uu(jo));return Xi(t,c,i,n,e)})),Lo=Zr((function(t,n){var e=ee(n,uu(Lo));return Xi(t,64,i,n,e)})),Io=tu((function(t,n){return Xi(t,256,i,i,i,n)}));function Uo(t,n){return t===n||t!=t&&n!=n}var qo=Hi(Cr),$o=Hi((function(t,n){return t>=n})),Ho=Sr(function(){return arguments}())?Sr:function(t){return ea(t)&&Bt.call(t,"callee")&&!tn.call(t,"callee")},Yo=r.isArray,Wo=hn?Hn(hn):function(t){return ea(t)&&Ar(t)==T};function Go(t){return null!=t&&ta(t.length)&&!Jo(t)}function Zo(t){return ea(t)&&Go(t)}var Xo=pe||_c,Vo=pn?Hn(pn):function(t){return ea(t)&&Ar(t)==y};function Ko(t){if(!ea(t))return!1;var n=Ar(t);return n==m||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!ua(t)}function Jo(t){if(!na(t))return!1;var n=Ar(t);return n==b||n==x||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qo(t){return"number"==typeof t&&t==ga(t)}function ta(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=f}function na(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function ea(t){return null!=t&&"object"==typeof t}var ra=dn?Hn(dn):function(t){return ea(t)&&hu(t)==w};function ia(t){return"number"==typeof t||ea(t)&&Ar(t)==D}function ua(t){if(!ea(t)||Ar(t)!=A)return!1;var n=Wt(t);if(null===n)return!0;var e=Bt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Ot.call(e)==Pt}var oa=gn?Hn(gn):function(t){return ea(t)&&Ar(t)==E},aa=vn?Hn(vn):function(t){return ea(t)&&hu(t)==k};function ca(t){return"string"==typeof t||!Yo(t)&&ea(t)&&Ar(t)==M}function sa(t){return"symbol"==typeof t||ea(t)&&Ar(t)==F}var la=_n?Hn(_n):function(t){return ea(t)&&ta(t.length)&&!!Jt[Ar(t)]},fa=Hi(Rr),ha=Hi((function(t,n){return t<=n}));function pa(t){if(!t)return[];if(Go(t))return ca(t)?oe(t):ki(t);if(an&&t[an])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[an]());var n=hu(t);return(n==w?te:n==k?re:Ua)(t)}function da(t){return t?(t=_a(t))===l||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ga(t){var n=da(t),e=n%1;return n==n?e?n-e:n:0}function va(t){return t?or(ga(t),0,p):0}function _a(t){if("number"==typeof t)return t;if(sa(t))return h;if(na(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=na(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=$n(t);var e=dt.test(t);return e||vt.test(t)?en(t.slice(2),e?2:8):pt.test(t)?h:+t}function ya(t){return Mi(t,Ba(t))}function ma(t){return null==t?"":ai(t)}var ba=Si((function(t,n){if(xu(n)||Go(n))Mi(n,Oa(n),t);else for(var e in n)Bt.call(n,e)&&tr(t,e,n[e])})),xa=Si((function(t,n){Mi(n,Ba(n),t)})),wa=Si((function(t,n,e,r){Mi(n,Ba(n),t,r)})),Da=Si((function(t,n,e,r){Mi(n,Oa(n),t,r)})),Aa=tu(ur),Ca=Zr((function(t,n){t=At(t);var e=-1,r=n.length,u=r>2?n[2]:i;for(u&&_u(n[0],n[1],u)&&(r=1);++e<r;)for(var o=n[e],a=Ba(o),c=-1,s=a.length;++c<s;){var l=a[c],f=t[l];(f===i||Uo(f,St[l])&&!Bt.call(t,l))&&(t[l]=o[l])}return t})),Ea=Zr((function(t){return t.push(i,Ki),yn(za,i,t)}));function ka(t,n,e){var r=null==t?i:wr(t,n);return r===i?e:r}function Ma(t,n){return null!=t&&pu(t,n,kr)}var Fa=Li((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Rt.call(n)),t[n]=e}),nc(ic)),Sa=Li((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Rt.call(n)),Bt.call(t,n)?t[n].push(e):t[n]=[e]}),ou),Ta=Zr(Fr);function Oa(t){return Go(t)?Xe(t):zr(t)}function Ba(t){return Go(t)?Xe(t,!0):function(t){if(!na(t))return function(t){var n=[];if(null!=t)for(var e in At(t))n.push(e);return n}(t);var n=xu(t),e=[];for(var r in t)("constructor"!=r||!n&&Bt.call(t,r))&&e.push(r);return e}(t)}var Na=Si((function(t,n,e){Ir(t,n,e)})),za=Si((function(t,n,e,r){Ir(t,n,e,r)})),Ra=tu((function(t,n){var e={};if(null==t)return e;var r=!1;n=En(n,(function(n){return n=_i(n,t),r||(r=n.length>1),n})),Mi(t,eu(t),e),r&&(e=ar(e,7,Ji));for(var i=n.length;i--;)si(e,n[i]);return e})),Pa=tu((function(t,n){return null==t?{}:function(t,n){return $r(t,n,(function(n,e){return Ma(t,e)}))}(t,n)}));function ja(t,n){if(null==t)return{};var e=En(eu(t),(function(t){return[t]}));return n=ou(n),$r(t,e,(function(t,e){return n(t,e[0])}))}var La=Zi(Oa),Ia=Zi(Ba);function Ua(t){return null==t?[]:Yn(t,Oa(t))}var qa=Ni((function(t,n,e){return n=n.toLowerCase(),t+(e?$a(n):n)}));function $a(t){return Ka(ma(t).toLowerCase())}function Ha(t){return(t=ma(t))&&t.replace(yt,Vn).replace(Yt,"")}var Ya=Ni((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Wa=Ni((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Ga=Bi("toLowerCase"),Za=Ni((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()})),Xa=Ni((function(t,n,e){return t+(e?" ":"")+Ka(n)})),Va=Ni((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Ka=Bi("toUpperCase");function Ja(t,n,e){return t=ma(t),(n=e?i:n)===i?function(t){return Xt.test(t)}(t)?function(t){return t.match(Gt)||[]}(t):function(t){return t.match(ct)||[]}(t):t.match(n)||[]}var Qa=Zr((function(t,n){try{return yn(t,i,n)}catch(t){return Ko(t)?t:new xt(t)}})),tc=tu((function(t,n){return bn(n,(function(n){n=Pu(n),ir(t,n,So(t[n],t))})),t}));function nc(t){return function(){return t}}var ec=Pi(),rc=Pi(!0);function ic(t){return t}function uc(t){return Nr("function"==typeof t?t:ar(t,1))}var oc=Zr((function(t,n){return function(e){return Fr(e,t,n)}})),ac=Zr((function(t,n){return function(e){return Fr(t,e,n)}}));function cc(t,n,e){var r=Oa(n),i=xr(n,r);null!=e||na(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=xr(n,Oa(n)));var u=!(na(e)&&"chain"in e&&!e.chain),o=Jo(t);return bn(i,(function(e){var r=n[e];t[e]=r,o&&(t.prototype[e]=function(){var n=this.__chain__;if(u||n){var e=t(this.__wrapped__),i=e.__actions__=ki(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,kn([this.value()],arguments))})})),t}function sc(){}var lc=Ui(En),fc=Ui(wn),hc=Ui(Sn);function pc(t){return yu(t)?jn(Pu(t)):function(t){return function(n){return wr(n,t)}}(t)}var dc=$i(),gc=$i(!0);function vc(){return[]}function _c(){return!1}var yc,mc=Ii((function(t,n){return t+n}),0),bc=Wi("ceil"),xc=Ii((function(t,n){return t/n}),1),wc=Wi("floor"),Dc=Ii((function(t,n){return t*n}),1),Ac=Wi("round"),Cc=Ii((function(t,n){return t-n}),0);return Le.after=function(t,n){if("function"!=typeof n)throw new kt(u);return t=ga(t),function(){if(--t<1)return n.apply(this,arguments)}},Le.ary=Mo,Le.assign=ba,Le.assignIn=xa,Le.assignInWith=wa,Le.assignWith=Da,Le.at=Aa,Le.before=Fo,Le.bind=So,Le.bindAll=tc,Le.bindKey=To,Le.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Yo(t)?t:[t]},Le.chain=ho,Le.chunk=function(t,n,e){n=(e?_u(t,n,e):n===i)?1:_e(ga(n),0);var u=null==t?0:t.length;if(!u||n<1)return[];for(var o=0,a=0,c=r(le(u/n));o<u;)c[a++]=ni(t,o,o+=n);return c},Le.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var u=t[n];u&&(i[r++]=u)}return i},Le.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return kn(Yo(e)?ki(e):[e],vr(n,1))},Le.cond=function(t){var n=null==t?0:t.length,e=ou();return t=n?En(t,(function(t){if("function"!=typeof t[1])throw new kt(u);return[e(t[0]),t[1]]})):[],Zr((function(e){for(var r=-1;++r<n;){var i=t[r];if(yn(i[0],this,e))return yn(i[1],this,e)}}))},Le.conforms=function(t){return function(t){var n=Oa(t);return function(e){return cr(e,t,n)}}(ar(t,1))},Le.constant=nc,Le.countBy=vo,Le.create=function(t,n){var e=Ie(t);return null==n?e:rr(e,n)},Le.curry=function t(n,e,r){var u=Xi(n,8,i,i,i,i,i,e=r?i:e);return u.placeholder=t.placeholder,u},Le.curryRight=function t(n,e,r){var u=Xi(n,16,i,i,i,i,i,e=r?i:e);return u.placeholder=t.placeholder,u},Le.debounce=Oo,Le.defaults=Ca,Le.defaultsDeep=Ea,Le.defer=Bo,Le.delay=No,Le.difference=Iu,Le.differenceBy=Uu,Le.differenceWith=qu,Le.drop=function(t,n,e){var r=null==t?0:t.length;return r?ni(t,(n=e||n===i?1:ga(n))<0?0:n,r):[]},Le.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?ni(t,0,(n=r-(n=e||n===i?1:ga(n)))<0?0:n):[]},Le.dropRightWhile=function(t,n){return t&&t.length?fi(t,ou(n,3),!0,!0):[]},Le.dropWhile=function(t,n){return t&&t.length?fi(t,ou(n,3),!0):[]},Le.fill=function(t,n,e,r){var u=null==t?0:t.length;return u?(e&&"number"!=typeof e&&_u(t,n,e)&&(e=0,r=u),function(t,n,e,r){var u=t.length;for((e=ga(e))<0&&(e=-e>u?0:u+e),(r=r===i||r>u?u:ga(r))<0&&(r+=u),r=e>r?0:va(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},Le.filter=function(t,n){return(Yo(t)?Dn:gr)(t,ou(n,3))},Le.flatMap=function(t,n){return vr(Ao(t,n),1)},Le.flatMapDeep=function(t,n){return vr(Ao(t,n),l)},Le.flatMapDepth=function(t,n,e){return e=e===i?1:ga(e),vr(Ao(t,n),e)},Le.flatten=Yu,Le.flattenDeep=function(t){return null!=t&&t.length?vr(t,l):[]},Le.flattenDepth=function(t,n){return null!=t&&t.length?vr(t,n=n===i?1:ga(n)):[]},Le.flip=function(t){return Xi(t,512)},Le.flow=ec,Le.flowRight=rc,Le.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},Le.functions=function(t){return null==t?[]:xr(t,Oa(t))},Le.functionsIn=function(t){return null==t?[]:xr(t,Ba(t))},Le.groupBy=xo,Le.initial=function(t){return null!=t&&t.length?ni(t,0,-1):[]},Le.intersection=Gu,Le.intersectionBy=Zu,Le.intersectionWith=Xu,Le.invert=Fa,Le.invertBy=Sa,Le.invokeMap=wo,Le.iteratee=uc,Le.keyBy=Do,Le.keys=Oa,Le.keysIn=Ba,Le.map=Ao,Le.mapKeys=function(t,n){var e={};return n=ou(n,3),mr(t,(function(t,r,i){ir(e,n(t,r,i),t)})),e},Le.mapValues=function(t,n){var e={};return n=ou(n,3),mr(t,(function(t,r,i){ir(e,r,n(t,r,i))})),e},Le.matches=function(t){return jr(ar(t,1))},Le.matchesProperty=function(t,n){return Lr(t,ar(n,1))},Le.memoize=zo,Le.merge=Na,Le.mergeWith=za,Le.method=oc,Le.methodOf=ac,Le.mixin=cc,Le.negate=Ro,Le.nthArg=function(t){return t=ga(t),Zr((function(n){return Ur(n,t)}))},Le.omit=Ra,Le.omitBy=function(t,n){return ja(t,Ro(ou(n)))},Le.once=function(t){return Fo(2,t)},Le.orderBy=function(t,n,e,r){return null==t?[]:(Yo(n)||(n=null==n?[]:[n]),Yo(e=r?i:e)||(e=null==e?[]:[e]),qr(t,n,e))},Le.over=lc,Le.overArgs=Po,Le.overEvery=fc,Le.overSome=hc,Le.partial=jo,Le.partialRight=Lo,Le.partition=Co,Le.pick=Pa,Le.pickBy=ja,Le.property=pc,Le.propertyOf=function(t){return function(n){return null==t?i:wr(t,n)}},Le.pull=Ku,Le.pullAll=Ju,Le.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Hr(t,n,ou(e,2)):t},Le.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Hr(t,n,i,e):t},Le.pullAt=Qu,Le.range=dc,Le.rangeRight=gc,Le.rearg=Io,Le.reject=function(t,n){return(Yo(t)?Dn:gr)(t,Ro(ou(n,3)))},Le.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],u=t.length;for(n=ou(n,3);++r<u;){var o=t[r];n(o,r,t)&&(e.push(o),i.push(r))}return Yr(t,i),e},Le.rest=function(t,n){if("function"!=typeof t)throw new kt(u);return Zr(t,n=n===i?n:ga(n))},Le.reverse=to,Le.sampleSize=function(t,n,e){return n=(e?_u(t,n,e):n===i)?1:ga(n),(Yo(t)?Ke:Vr)(t,n)},Le.set=function(t,n,e){return null==t?t:Kr(t,n,e)},Le.setWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:Kr(t,n,e,r)},Le.shuffle=function(t){return(Yo(t)?Je:ti)(t)},Le.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&_u(t,n,e)?(n=0,e=r):(n=null==n?0:ga(n),e=e===i?r:ga(e)),ni(t,n,e)):[]},Le.sortBy=Eo,Le.sortedUniq=function(t){return t&&t.length?ui(t):[]},Le.sortedUniqBy=function(t,n){return t&&t.length?ui(t,ou(n,2)):[]},Le.split=function(t,n,e){return e&&"number"!=typeof e&&_u(t,n,e)&&(n=e=i),(e=e===i?p:e>>>0)?(t=ma(t))&&("string"==typeof n||null!=n&&!oa(n))&&!(n=ai(n))&&Qn(t)?mi(oe(t),0,e):t.split(n,e):[]},Le.spread=function(t,n){if("function"!=typeof t)throw new kt(u);return n=null==n?0:_e(ga(n),0),Zr((function(e){var r=e[n],i=mi(e,0,n);return r&&kn(i,r),yn(t,this,i)}))},Le.tail=function(t){var n=null==t?0:t.length;return n?ni(t,1,n):[]},Le.take=function(t,n,e){return t&&t.length?ni(t,0,(n=e||n===i?1:ga(n))<0?0:n):[]},Le.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?ni(t,(n=r-(n=e||n===i?1:ga(n)))<0?0:n,r):[]},Le.takeRightWhile=function(t,n){return t&&t.length?fi(t,ou(n,3),!1,!0):[]},Le.takeWhile=function(t,n){return t&&t.length?fi(t,ou(n,3)):[]},Le.tap=function(t,n){return n(t),t},Le.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new kt(u);return na(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Oo(t,n,{leading:r,maxWait:n,trailing:i})},Le.thru=po,Le.toArray=pa,Le.toPairs=La,Le.toPairsIn=Ia,Le.toPath=function(t){return Yo(t)?En(t,Pu):sa(t)?[t]:ki(Ru(ma(t)))},Le.toPlainObject=ya,Le.transform=function(t,n,e){var r=Yo(t),i=r||Xo(t)||la(t);if(n=ou(n,4),null==e){var u=t&&t.constructor;e=i?r?new u:[]:na(t)&&Jo(u)?Ie(Wt(t)):{}}return(i?bn:mr)(t,(function(t,r,i){return n(e,t,r,i)})),e},Le.unary=function(t){return Mo(t,1)},Le.union=no,Le.unionBy=eo,Le.unionWith=ro,Le.uniq=function(t){return t&&t.length?ci(t):[]},Le.uniqBy=function(t,n){return t&&t.length?ci(t,ou(n,2)):[]},Le.uniqWith=function(t,n){return n="function"==typeof n?n:i,t&&t.length?ci(t,i,n):[]},Le.unset=function(t,n){return null==t||si(t,n)},Le.unzip=io,Le.unzipWith=uo,Le.update=function(t,n,e){return null==t?t:li(t,n,vi(e))},Le.updateWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:li(t,n,vi(e),r)},Le.values=Ua,Le.valuesIn=function(t){return null==t?[]:Yn(t,Ba(t))},Le.without=oo,Le.words=Ja,Le.wrap=function(t,n){return jo(vi(n),t)},Le.xor=ao,Le.xorBy=co,Le.xorWith=so,Le.zip=lo,Le.zipObject=function(t,n){return di(t||[],n||[],tr)},Le.zipObjectDeep=function(t,n){return di(t||[],n||[],Kr)},Le.zipWith=fo,Le.entries=La,Le.entriesIn=Ia,Le.extend=xa,Le.extendWith=wa,cc(Le,Le),Le.add=mc,Le.attempt=Qa,Le.camelCase=qa,Le.capitalize=$a,Le.ceil=bc,Le.clamp=function(t,n,e){return e===i&&(e=n,n=i),e!==i&&(e=(e=_a(e))==e?e:0),n!==i&&(n=(n=_a(n))==n?n:0),or(_a(t),n,e)},Le.clone=function(t){return ar(t,4)},Le.cloneDeep=function(t){return ar(t,5)},Le.cloneDeepWith=function(t,n){return ar(t,5,n="function"==typeof n?n:i)},Le.cloneWith=function(t,n){return ar(t,4,n="function"==typeof n?n:i)},Le.conformsTo=function(t,n){return null==n||cr(t,n,Oa(n))},Le.deburr=Ha,Le.defaultTo=function(t,n){return null==t||t!=t?n:t},Le.divide=xc,Le.endsWith=function(t,n,e){t=ma(t),n=ai(n);var r=t.length,u=e=e===i?r:or(ga(e),0,r);return(e-=n.length)>=0&&t.slice(e,u)==n},Le.eq=Uo,Le.escape=function(t){return(t=ma(t))&&Z.test(t)?t.replace(W,Kn):t},Le.escapeRegExp=function(t){return(t=ma(t))&&et.test(t)?t.replace(nt,"\\$&"):t},Le.every=function(t,n,e){var r=Yo(t)?wn:pr;return e&&_u(t,n,e)&&(n=i),r(t,ou(n,3))},Le.find=_o,Le.findIndex=$u,Le.findKey=function(t,n){return On(t,ou(n,3),mr)},Le.findLast=yo,Le.findLastIndex=Hu,Le.findLastKey=function(t,n){return On(t,ou(n,3),br)},Le.floor=wc,Le.forEach=mo,Le.forEachRight=bo,Le.forIn=function(t,n){return null==t?t:_r(t,ou(n,3),Ba)},Le.forInRight=function(t,n){return null==t?t:yr(t,ou(n,3),Ba)},Le.forOwn=function(t,n){return t&&mr(t,ou(n,3))},Le.forOwnRight=function(t,n){return t&&br(t,ou(n,3))},Le.get=ka,Le.gt=qo,Le.gte=$o,Le.has=function(t,n){return null!=t&&pu(t,n,Er)},Le.hasIn=Ma,Le.head=Wu,Le.identity=ic,Le.includes=function(t,n,e,r){t=Go(t)?t:Ua(t),e=e&&!r?ga(e):0;var i=t.length;return e<0&&(e=_e(i+e,0)),ca(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&Nn(t,n,e)>-1},Le.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ga(e);return i<0&&(i=_e(r+i,0)),Nn(t,n,i)},Le.inRange=function(t,n,e){return n=da(n),e===i?(e=n,n=0):e=da(e),function(t,n,e){return t>=ye(n,e)&&t<_e(n,e)}(t=_a(t),n,e)},Le.invoke=Ta,Le.isArguments=Ho,Le.isArray=Yo,Le.isArrayBuffer=Wo,Le.isArrayLike=Go,Le.isArrayLikeObject=Zo,Le.isBoolean=function(t){return!0===t||!1===t||ea(t)&&Ar(t)==_},Le.isBuffer=Xo,Le.isDate=Vo,Le.isElement=function(t){return ea(t)&&1===t.nodeType&&!ua(t)},Le.isEmpty=function(t){if(null==t)return!0;if(Go(t)&&(Yo(t)||"string"==typeof t||"function"==typeof t.splice||Xo(t)||la(t)||Ho(t)))return!t.length;var n=hu(t);if(n==w||n==k)return!t.size;if(xu(t))return!zr(t).length;for(var e in t)if(Bt.call(t,e))return!1;return!0},Le.isEqual=function(t,n){return Tr(t,n)},Le.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:i)?e(t,n):i;return r===i?Tr(t,n,i,e):!!r},Le.isError=Ko,Le.isFinite=function(t){return"number"==typeof t&&de(t)},Le.isFunction=Jo,Le.isInteger=Qo,Le.isLength=ta,Le.isMap=ra,Le.isMatch=function(t,n){return t===n||Or(t,n,cu(n))},Le.isMatchWith=function(t,n,e){return e="function"==typeof e?e:i,Or(t,n,cu(n),e)},Le.isNaN=function(t){return ia(t)&&t!=+t},Le.isNative=function(t){if(bu(t))throw new xt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Br(t)},Le.isNil=function(t){return null==t},Le.isNull=function(t){return null===t},Le.isNumber=ia,Le.isObject=na,Le.isObjectLike=ea,Le.isPlainObject=ua,Le.isRegExp=oa,Le.isSafeInteger=function(t){return Qo(t)&&t>=-9007199254740991&&t<=f},Le.isSet=aa,Le.isString=ca,Le.isSymbol=sa,Le.isTypedArray=la,Le.isUndefined=function(t){return t===i},Le.isWeakMap=function(t){return ea(t)&&hu(t)==S},Le.isWeakSet=function(t){return ea(t)&&"[object WeakSet]"==Ar(t)},Le.join=function(t,n){return null==t?"":ge.call(t,n)},Le.kebabCase=Ya,Le.last=Vu,Le.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var u=r;return e!==i&&(u=(u=ga(e))<0?_e(r+u,0):ye(u,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,u):Bn(t,Rn,u,!0)},Le.lowerCase=Wa,Le.lowerFirst=Ga,Le.lt=fa,Le.lte=ha,Le.max=function(t){return t&&t.length?dr(t,ic,Cr):i},Le.maxBy=function(t,n){return t&&t.length?dr(t,ou(n,2),Cr):i},Le.mean=function(t){return Pn(t,ic)},Le.meanBy=function(t,n){return Pn(t,ou(n,2))},Le.min=function(t){return t&&t.length?dr(t,ic,Rr):i},Le.minBy=function(t,n){return t&&t.length?dr(t,ou(n,2),Rr):i},Le.stubArray=vc,Le.stubFalse=_c,Le.stubObject=function(){return{}},Le.stubString=function(){return""},Le.stubTrue=function(){return!0},Le.multiply=Dc,Le.nth=function(t,n){return t&&t.length?Ur(t,ga(n)):i},Le.noConflict=function(){return on._===this&&(on._=jt),this},Le.noop=sc,Le.now=ko,Le.pad=function(t,n,e){t=ma(t);var r=(n=ga(n))?ue(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return qi(fe(i),e)+t+qi(le(i),e)},Le.padEnd=function(t,n,e){t=ma(t);var r=(n=ga(n))?ue(t):0;return n&&r<n?t+qi(n-r,e):t},Le.padStart=function(t,n,e){t=ma(t);var r=(n=ga(n))?ue(t):0;return n&&r<n?qi(n-r,e)+t:t},Le.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),be(ma(t).replace(rt,""),n||0)},Le.random=function(t,n,e){if(e&&"boolean"!=typeof e&&_u(t,n,e)&&(n=e=i),e===i&&("boolean"==typeof n?(e=n,n=i):"boolean"==typeof t&&(e=t,t=i)),t===i&&n===i?(t=0,n=1):(t=da(t),n===i?(n=t,t=0):n=da(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var u=xe();return ye(t+u*(n-t+nn("1e-"+((u+"").length-1))),n)}return Wr(t,n)},Le.reduce=function(t,n,e){var r=Yo(t)?Mn:In,i=arguments.length<3;return r(t,ou(n,4),e,i,fr)},Le.reduceRight=function(t,n,e){var r=Yo(t)?Fn:In,i=arguments.length<3;return r(t,ou(n,4),e,i,hr)},Le.repeat=function(t,n,e){return n=(e?_u(t,n,e):n===i)?1:ga(n),Gr(ma(t),n)},Le.replace=function(){var t=arguments,n=ma(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Le.result=function(t,n,e){var r=-1,u=(n=_i(n,t)).length;for(u||(u=1,t=i);++r<u;){var o=null==t?i:t[Pu(n[r])];o===i&&(r=u,o=e),t=Jo(o)?o.call(t):o}return t},Le.round=Ac,Le.runInContext=t,Le.sample=function(t){return(Yo(t)?Ve:Xr)(t)},Le.size=function(t){if(null==t)return 0;if(Go(t))return ca(t)?ue(t):t.length;var n=hu(t);return n==w||n==k?t.size:zr(t).length},Le.snakeCase=Za,Le.some=function(t,n,e){var r=Yo(t)?Sn:ei;return e&&_u(t,n,e)&&(n=i),r(t,ou(n,3))},Le.sortedIndex=function(t,n){return ri(t,n)},Le.sortedIndexBy=function(t,n,e){return ii(t,n,ou(e,2))},Le.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=ri(t,n);if(r<e&&Uo(t[r],n))return r}return-1},Le.sortedLastIndex=function(t,n){return ri(t,n,!0)},Le.sortedLastIndexBy=function(t,n,e){return ii(t,n,ou(e,2),!0)},Le.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=ri(t,n,!0)-1;if(Uo(t[e],n))return e}return-1},Le.startCase=Xa,Le.startsWith=function(t,n,e){return t=ma(t),e=null==e?0:or(ga(e),0,t.length),n=ai(n),t.slice(e,e+n.length)==n},Le.subtract=Cc,Le.sum=function(t){return t&&t.length?Un(t,ic):0},Le.sumBy=function(t,n){return t&&t.length?Un(t,ou(n,2)):0},Le.template=function(t,n,e){var r=Le.templateSettings;e&&_u(t,n,e)&&(n=i),t=ma(t),n=wa({},n,r,Vi);var u,o,a=wa({},n.imports,r.imports,Vi),c=Oa(a),s=Yn(a,c),l=0,f=n.interpolate||mt,h="__p += '",p=Ct((n.escape||mt).source+"|"+f.source+"|"+(f===K?ft:mt).source+"|"+(n.evaluate||mt).source+"|$","g"),d="//# sourceURL="+(Bt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Kt+"]")+"\n";t.replace(p,(function(n,e,r,i,a,c){return r||(r=i),h+=t.slice(l,c).replace(bt,Jn),e&&(u=!0,h+="' +\n__e("+e+") +\n'"),a&&(o=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+n.length,n})),h+="';\n";var g=Bt.call(n,"variable")&&n.variable;if(g){if(st.test(g))throw new xt("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(o?h.replace(q,""):h).replace($,"$1").replace(H,"$1;"),h="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(u?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var v=Qa((function(){return wt(c,d+"return "+h).apply(i,s)}));if(v.source=h,Ko(v))throw v;return v},Le.times=function(t,n){if((t=ga(t))<1||t>f)return[];var e=p,r=ye(t,p);n=ou(n),t-=p;for(var i=qn(r,n);++e<t;)n(e);return i},Le.toFinite=da,Le.toInteger=ga,Le.toLength=va,Le.toLower=function(t){return ma(t).toLowerCase()},Le.toNumber=_a,Le.toSafeInteger=function(t){return t?or(ga(t),-9007199254740991,f):0===t?t:0},Le.toString=ma,Le.toUpper=function(t){return ma(t).toUpperCase()},Le.trim=function(t,n,e){if((t=ma(t))&&(e||n===i))return $n(t);if(!t||!(n=ai(n)))return t;var r=oe(t),u=oe(n);return mi(r,Gn(r,u),Zn(r,u)+1).join("")},Le.trimEnd=function(t,n,e){if((t=ma(t))&&(e||n===i))return t.slice(0,ae(t)+1);if(!t||!(n=ai(n)))return t;var r=oe(t);return mi(r,0,Zn(r,oe(n))+1).join("")},Le.trimStart=function(t,n,e){if((t=ma(t))&&(e||n===i))return t.replace(rt,"");if(!t||!(n=ai(n)))return t;var r=oe(t);return mi(r,Gn(r,oe(n))).join("")},Le.truncate=function(t,n){var e=30,r="...";if(na(n)){var u="separator"in n?n.separator:u;e="length"in n?ga(n.length):e,r="omission"in n?ai(n.omission):r}var o=(t=ma(t)).length;if(Qn(t)){var a=oe(t);o=a.length}if(e>=o)return t;var c=e-ue(r);if(c<1)return r;var s=a?mi(a,0,c).join(""):t.slice(0,c);if(u===i)return s+r;if(a&&(c+=s.length-c),oa(u)){if(t.slice(c).search(u)){var l,f=s;for(u.global||(u=Ct(u.source,ma(ht.exec(u))+"g")),u.lastIndex=0;l=u.exec(f);)var h=l.index;s=s.slice(0,h===i?c:h)}}else if(t.indexOf(ai(u),c)!=c){var p=s.lastIndexOf(u);p>-1&&(s=s.slice(0,p))}return s+r},Le.unescape=function(t){return(t=ma(t))&&G.test(t)?t.replace(Y,ce):t},Le.uniqueId=function(t){var n=++Nt;return ma(t)+n},Le.upperCase=Va,Le.upperFirst=Ka,Le.each=mo,Le.eachRight=bo,Le.first=Wu,cc(Le,(yc={},mr(Le,(function(t,n){Bt.call(Le.prototype,n)||(yc[n]=t)})),yc),{chain:!1}),Le.VERSION="4.17.21",bn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Le[t].placeholder=Le})),bn(["drop","take"],(function(t,n){$e.prototype[t]=function(e){e=e===i?1:_e(ga(e),0);var r=this.__filtered__&&!n?new $e(this):this.clone();return r.__filtered__?r.__takeCount__=ye(e,r.__takeCount__):r.__views__.push({size:ye(e,p),type:t+(r.__dir__<0?"Right":"")}),r},$e.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),bn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;$e.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:ou(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),bn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");$e.prototype[t]=function(){return this[e](1).value()[0]}})),bn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");$e.prototype[t]=function(){return this.__filtered__?new $e(this):this[e](1)}})),$e.prototype.compact=function(){return this.filter(ic)},$e.prototype.find=function(t){return this.filter(t).head()},$e.prototype.findLast=function(t){return this.reverse().find(t)},$e.prototype.invokeMap=Zr((function(t,n){return"function"==typeof t?new $e(this):this.map((function(e){return Fr(e,t,n)}))})),$e.prototype.reject=function(t){return this.filter(Ro(ou(t)))},$e.prototype.slice=function(t,n){t=ga(t);var e=this;return e.__filtered__&&(t>0||n<0)?new $e(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==i&&(e=(n=ga(n))<0?e.dropRight(-n):e.take(n-t)),e)},$e.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},$e.prototype.toArray=function(){return this.take(p)},mr($e.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),u=Le[r?"take"+("last"==n?"Right":""):n],o=r||/^find/.test(n);u&&(Le.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,c=n instanceof $e,s=a[0],l=c||Yo(n),f=function(t){var n=u.apply(Le,kn([t],a));return r&&h?n[0]:n};l&&e&&"function"==typeof s&&1!=s.length&&(c=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=o&&!h,g=c&&!p;if(!o&&l){n=g?n:new $e(this);var v=t.apply(n,a);return v.__actions__.push({func:po,args:[f],thisArg:i}),new qe(v,h)}return d&&g?t.apply(this,a):(v=this.thru(f),d?r?v.value()[0]:v.value():v)})})),bn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=Mt[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Le.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Yo(i)?i:[],t)}return this[e]((function(e){return n.apply(Yo(e)?e:[],t)}))}})),mr($e.prototype,(function(t,n){var e=Le[n];if(e){var r=e.name+"";Bt.call(Se,r)||(Se[r]=[]),Se[r].push({name:n,func:e})}})),Se[ji(i,2).name]=[{name:"wrapper",func:i}],$e.prototype.clone=function(){var t=new $e(this.__wrapped__);return t.__actions__=ki(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ki(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ki(this.__views__),t},$e.prototype.reverse=function(){if(this.__filtered__){var t=new $e(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},$e.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Yo(t),r=n<0,i=e?t.length:0,u=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var u=e[r],o=u.size;switch(u.type){case"drop":t+=o;break;case"dropRight":n-=o;break;case"take":n=ye(n,t+o);break;case"takeRight":t=_e(t,n-o)}}return{start:t,end:n}}(0,i,this.__views__),o=u.start,a=u.end,c=a-o,s=r?a:o-1,l=this.__iteratees__,f=l.length,h=0,p=ye(c,this.__takeCount__);if(!e||!r&&i==c&&p==c)return hi(t,this.__actions__);var d=[];t:for(;c--&&h<p;){for(var g=-1,v=t[s+=n];++g<f;){var _=l[g],y=_.iteratee,m=_.type,b=y(v);if(2==m)v=b;else if(!b){if(1==m)continue t;break t}}d[h++]=v}return d},Le.prototype.at=go,Le.prototype.chain=function(){return ho(this)},Le.prototype.commit=function(){return new qe(this.value(),this.__chain__)},Le.prototype.next=function(){this.__values__===i&&(this.__values__=pa(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},Le.prototype.plant=function(t){for(var n,e=this;e instanceof Ue;){var r=Lu(e);r.__index__=0,r.__values__=i,n?u.__wrapped__=r:n=r;var u=r;e=e.__wrapped__}return u.__wrapped__=t,n},Le.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof $e){var n=t;return this.__actions__.length&&(n=new $e(this)),(n=n.reverse()).__actions__.push({func:po,args:[to],thisArg:i}),new qe(n,this.__chain__)}return this.thru(to)},Le.prototype.toJSON=Le.prototype.valueOf=Le.prototype.value=function(){return hi(this.__wrapped__,this.__actions__)},Le.prototype.first=Le.prototype.head,an&&(Le.prototype[an]=function(){return this}),Le}();on._=se,(r=function(){return se}.call(n,e,n,t))===i||(t.exports=r)}.call(this)},84:function(t){t.exports=function(){"use strict";function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function e(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(r=t[Symbol.iterator]()).next.bind(r)}var r=function(t){var n={exports:{}};return t(n,n.exports),n.exports}((function(t){function n(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}t.exports={defaults:{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1},getDefaults:n,changeDefaults:function(n){t.exports.defaults=n}}})),i=/[&<>"']/,u=/[&<>"']/g,o=/[<>"']|&(?!#?\w+;)/,a=/[<>"']|&(?!#?\w+;)/g,c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},s=function(t){return c[t]};var l=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function f(t){return t.replace(l,(function(t,n){return"colon"===(n=n.toLowerCase())?":":"#"===n.charAt(0)?"x"===n.charAt(1)?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1)):""}))}var h=/(^|[^\[])\^/g;var p=/[^\w:]/g,d=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;var g={},v=/^[^:]+:\/*[^/]*$/,_=/^([^:]+:)[\s\S]*$/,y=/^([^:]+:\/*[^/]*)[\s\S]*$/;function m(t,n){g[" "+t]||(v.test(t)?g[" "+t]=t+"/":g[" "+t]=b(t,"/",!0));var e=-1===(t=g[" "+t]).indexOf(":");return"//"===n.substring(0,2)?e?n:t.replace(_,"$1")+n:"/"===n.charAt(0)?e?n:t.replace(y,"$1")+n:t+n}function b(t,n,e){var r=t.length;if(0===r)return"";for(var i=0;i<r;){var u=t.charAt(r-i-1);if(u!==n||e){if(u===n||!e)break;i++}else i++}return t.substr(0,r-i)}var x=function(t,n){if(n){if(i.test(t))return t.replace(u,s)}else if(o.test(t))return t.replace(a,s);return t},w=f,D=function(t,n){t=t.source||t,n=n||"";var e={replace:function(n,r){return r=(r=r.source||r).replace(h,"$1"),t=t.replace(n,r),e},getRegex:function(){return new RegExp(t,n)}};return e},A=function(t,n,e){if(t){var r;try{r=decodeURIComponent(f(e)).replace(p,"").toLowerCase()}catch(t){return null}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return null}n&&!d.test(e)&&(e=m(n,e));try{e=encodeURI(e).replace(/%25/g,"%")}catch(t){return null}return e},C={exec:function(){}},E=function(t){for(var n,e,r=1;r<arguments.length;r++)for(e in n=arguments[r])Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t},k=function(t,n){var e=t.replace(/\|/g,(function(t,n,e){for(var r=!1,i=n;--i>=0&&"\\"===e[i];)r=!r;return r?"|":" |"})).split(/ \|/),r=0;if(e.length>n)e.splice(n);else for(;e.length<n;)e.push("");for(;r<e.length;r++)e[r]=e[r].trim().replace(/\\\|/g,"|");return e},M=b,F=function(t,n){if(-1===t.indexOf(n[1]))return-1;for(var e=t.length,r=0,i=0;i<e;i++)if("\\"===t[i])i++;else if(t[i]===n[0])r++;else if(t[i]===n[1]&&--r<0)return i;return-1},S=function(t){t&&t.sanitize&&!t.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")},T=function(t,n){if(n<1)return"";for(var e="";n>1;)1&n&&(e+=t),n>>=1,t+=t;return e+t},O=r.defaults,B=M,N=k,z=x,R=F;function P(t,n,e){var r=n.href,i=n.title?z(n.title):null,u=t[1].replace(/\\([\[\]])/g,"$1");return"!"!==t[0].charAt(0)?{type:"link",raw:e,href:r,title:i,text:u}:{type:"image",raw:e,href:r,title:i,text:z(u)}}var j=function(){function t(t){this.options=t||O}var n=t.prototype;return n.space=function(t){var n=this.rules.block.newline.exec(t);if(n)return n[0].length>1?{type:"space",raw:n[0]}:{raw:"\n"}},n.code=function(t){var n=this.rules.block.code.exec(t);if(n){var e=n[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:n[0],codeBlockStyle:"indented",text:this.options.pedantic?e:B(e,"\n")}}},n.fences=function(t){var n=this.rules.block.fences.exec(t);if(n){var e=n[0],r=function(t,n){var e=t.match(/^(\s+)(?:```)/);if(null===e)return n;var r=e[1];return n.split("\n").map((function(t){var n=t.match(/^\s+/);return null===n?t:n[0].length>=r.length?t.slice(r.length):t})).join("\n")}(e,n[3]||"");return{type:"code",raw:e,lang:n[2]?n[2].trim():n[2],text:r}}},n.heading=function(t){var n=this.rules.block.heading.exec(t);if(n){var e=n[2].trim();if(/#$/.test(e)){var r=B(e,"#");this.options.pedantic?e=r.trim():r&&!/ $/.test(r)||(e=r.trim())}return{type:"heading",raw:n[0],depth:n[1].length,text:e}}},n.nptable=function(t){var n=this.rules.block.nptable.exec(t);if(n){var e={type:"table",header:N(n[1].replace(/^ *| *\| *$/g,"")),align:n[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:n[3]?n[3].replace(/\n$/,"").split("\n"):[],raw:n[0]};if(e.header.length===e.align.length){var r,i=e.align.length;for(r=0;r<i;r++)/^ *-+: *$/.test(e.align[r])?e.align[r]="right":/^ *:-+: *$/.test(e.align[r])?e.align[r]="center":/^ *:-+ *$/.test(e.align[r])?e.align[r]="left":e.align[r]=null;for(i=e.cells.length,r=0;r<i;r++)e.cells[r]=N(e.cells[r],e.header.length);return e}}},n.hr=function(t){var n=this.rules.block.hr.exec(t);if(n)return{type:"hr",raw:n[0]}},n.blockquote=function(t){var n=this.rules.block.blockquote.exec(t);if(n){var e=n[0].replace(/^ *> ?/gm,"");return{type:"blockquote",raw:n[0],text:e}}},n.list=function(t){var n=this.rules.block.list.exec(t);if(n){var e,r,i,u,o,a,c,s,l,f=n[0],h=n[2],p=h.length>1,d={type:"list",raw:f,ordered:p,start:p?+h.slice(0,-1):"",loose:!1,items:[]},g=n[0].match(this.rules.block.item),v=!1,_=g.length;i=this.rules.block.listItemStart.exec(g[0]);for(var y=0;y<_;y++){if(f=e=g[y],this.options.pedantic||(l=e.match(new RegExp("\\n\\s*\\n {0,"+(i[0].length-1)+"}\\S")))&&(o=e.length-l.index+g.slice(y+1).join("\n").length,d.raw=d.raw.substring(0,d.raw.length-o),f=e=e.substring(0,l.index),_=y+1),y!==_-1){if(u=this.rules.block.listItemStart.exec(g[y+1]),this.options.pedantic?u[1].length>i[1].length:u[1].length>=i[0].length||u[1].length>3){g.splice(y,2,g[y]+(!this.options.pedantic&&u[1].length<i[0].length&&!g[y].match(/\n$/)?"":"\n")+g[y+1]),y--,_--;continue}(!this.options.pedantic||this.options.smartLists?u[2][u[2].length-1]!==h[h.length-1]:p===(1===u[2].length))&&(o=g.slice(y+1).join("\n").length,d.raw=d.raw.substring(0,d.raw.length-o),y=_-1),i=u}r=e.length,~(e=e.replace(/^ *([*+-]|\d+[.)]) ?/,"")).indexOf("\n ")&&(r-=e.length,e=this.options.pedantic?e.replace(/^ {1,4}/gm,""):e.replace(new RegExp("^ {1,"+r+"}","gm"),"")),e=B(e,"\n"),y!==_-1&&(f+="\n"),a=v||/\n\n(?!\s*$)/.test(f),y!==_-1&&(v="\n\n"===f.slice(-2),a||(a=v)),a&&(d.loose=!0),this.options.gfm&&(s=void 0,(c=/^\[[ xX]\] /.test(e))&&(s=" "!==e[1],e=e.replace(/^\[[ xX]\] +/,""))),d.items.push({type:"list_item",raw:f,task:c,checked:s,loose:a,text:e})}return d}},n.html=function(t){var n=this.rules.block.html.exec(t);if(n)return{type:this.options.sanitize?"paragraph":"html",raw:n[0],pre:!this.options.sanitizer&&("pre"===n[1]||"script"===n[1]||"style"===n[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):z(n[0]):n[0]}},n.def=function(t){var n=this.rules.block.def.exec(t);if(n)return n[3]&&(n[3]=n[3].substring(1,n[3].length-1)),{type:"def",tag:n[1].toLowerCase().replace(/\s+/g," "),raw:n[0],href:n[2],title:n[3]}},n.table=function(t){var n=this.rules.block.table.exec(t);if(n){var e={type:"table",header:N(n[1].replace(/^ *| *\| *$/g,"")),align:n[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:n[3]?n[3].replace(/\n$/,"").split("\n"):[]};if(e.header.length===e.align.length){e.raw=n[0];var r,i=e.align.length;for(r=0;r<i;r++)/^ *-+: *$/.test(e.align[r])?e.align[r]="right":/^ *:-+: *$/.test(e.align[r])?e.align[r]="center":/^ *:-+ *$/.test(e.align[r])?e.align[r]="left":e.align[r]=null;for(i=e.cells.length,r=0;r<i;r++)e.cells[r]=N(e.cells[r].replace(/^ *\| *| *\| *$/g,""),e.header.length);return e}}},n.lheading=function(t){var n=this.rules.block.lheading.exec(t);if(n)return{type:"heading",raw:n[0],depth:"="===n[2].charAt(0)?1:2,text:n[1]}},n.paragraph=function(t){var n=this.rules.block.paragraph.exec(t);if(n)return{type:"paragraph",raw:n[0],text:"\n"===n[1].charAt(n[1].length-1)?n[1].slice(0,-1):n[1]}},n.text=function(t){var n=this.rules.block.text.exec(t);if(n)return{type:"text",raw:n[0],text:n[0]}},n.escape=function(t){var n=this.rules.inline.escape.exec(t);if(n)return{type:"escape",raw:n[0],text:z(n[1])}},n.tag=function(t,n,e){var r=this.rules.inline.tag.exec(t);if(r)return!n&&/^<a /i.test(r[0])?n=!0:n&&/^<\/a>/i.test(r[0])&&(n=!1),!e&&/^<(pre|code|kbd|script)(\s|>)/i.test(r[0])?e=!0:e&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(r[0])&&(e=!1),{type:this.options.sanitize?"text":"html",raw:r[0],inLink:n,inRawBlock:e,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):z(r[0]):r[0]}},n.link=function(t){var n=this.rules.inline.link.exec(t);if(n){var e=n[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;var r=B(e.slice(0,-1),"\\");if((e.length-r.length)%2==0)return}else{var i=R(n[2],"()");if(i>-1){var u=(0===n[0].indexOf("!")?5:4)+n[1].length+i;n[2]=n[2].substring(0,i),n[0]=n[0].substring(0,u).trim(),n[3]=""}}var o=n[2],a="";if(this.options.pedantic){var c=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(o);c&&(o=c[1],a=c[3])}else a=n[3]?n[3].slice(1,-1):"";return o=o.trim(),/^</.test(o)&&(o=this.options.pedantic&&!/>$/.test(e)?o.slice(1):o.slice(1,-1)),P(n,{href:o?o.replace(this.rules.inline._escapes,"$1"):o,title:a?a.replace(this.rules.inline._escapes,"$1"):a},n[0])}},n.reflink=function(t,n){var e;if((e=this.rules.inline.reflink.exec(t))||(e=this.rules.inline.nolink.exec(t))){var r=(e[2]||e[1]).replace(/\s+/g," ");if(!(r=n[r.toLowerCase()])||!r.href){var i=e[0].charAt(0);return{type:"text",raw:i,text:i}}return P(e,r,e[0])}},n.emStrong=function(t,n,e){void 0===e&&(e="");var r=this.rules.inline.emStrong.lDelim.exec(t);if(r&&(!r[3]||!e.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/))){var i=r[1]||r[2]||"";if(!i||i&&(""===e||this.rules.inline.punctuation.exec(e))){var u,o,a=r[0].length-1,c=a,s=0,l="*"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(l.lastIndex=0,n=n.slice(-1*t.length+a);null!=(r=l.exec(n));)if(u=r[1]||r[2]||r[3]||r[4]||r[5]||r[6])if(o=u.length,r[3]||r[4])c+=o;else if(!((r[5]||r[6])&&a%3)||(a+o)%3){if(!((c-=o)>0)){if(c+s-o<=0&&!n.slice(l.lastIndex).match(l)&&(o=Math.min(o,o+c+s)),Math.min(a,o)%2)return{type:"em",raw:t.slice(0,a+r.index+o+1),text:t.slice(1,a+r.index+o)};if(Math.min(a,o)%2==0)return{type:"strong",raw:t.slice(0,a+r.index+o+1),text:t.slice(2,a+r.index+o-1)}}}else s+=o}}},n.codespan=function(t){var n=this.rules.inline.code.exec(t);if(n){var e=n[2].replace(/\n/g," "),r=/[^ ]/.test(e),i=/^ /.test(e)&&/ $/.test(e);return r&&i&&(e=e.substring(1,e.length-1)),e=z(e,!0),{type:"codespan",raw:n[0],text:e}}},n.br=function(t){var n=this.rules.inline.br.exec(t);if(n)return{type:"br",raw:n[0]}},n.del=function(t){var n=this.rules.inline.del.exec(t);if(n)return{type:"del",raw:n[0],text:n[2]}},n.autolink=function(t,n){var e,r,i=this.rules.inline.autolink.exec(t);if(i)return r="@"===i[2]?"mailto:"+(e=z(this.options.mangle?n(i[1]):i[1])):e=z(i[1]),{type:"link",raw:i[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}},n.url=function(t,n){var e;if(e=this.rules.inline.url.exec(t)){var r,i;if("@"===e[2])i="mailto:"+(r=z(this.options.mangle?n(e[0]):e[0]));else{var u;do{u=e[0],e[0]=this.rules.inline._backpedal.exec(e[0])[0]}while(u!==e[0]);r=z(e[0]),i="www."===e[1]?"http://"+r:r}return{type:"link",raw:e[0],text:r,href:i,tokens:[{type:"text",raw:r,text:r}]}}},n.inlineText=function(t,n,e){var r,i=this.rules.inline.text.exec(t);if(i)return r=n?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):z(i[0]):i[0]:z(this.options.smartypants?e(i[0]):i[0]),{type:"text",raw:i[0],text:r}},t}(),L=C,I=D,U=E,q={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?! {0,3}bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:L,table:L,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};q.def=I(q.def).replace("label",q._label).replace("title",q._title).getRegex(),q.bullet=/(?:[*+-]|\d{1,9}[.)])/,q.item=/^( *)(bull) ?[^\n]*(?:\n(?! *bull ?)[^\n]*)*/,q.item=I(q.item,"gm").replace(/bull/g,q.bullet).getRegex(),q.listItemStart=I(/^( *)(bull) */).replace("bull",q.bullet).getRegex(),q.list=I(q.list).replace(/bull/g,q.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+q.def.source+")").getRegex(),q._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",q._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,q.html=I(q.html,"i").replace("comment",q._comment).replace("tag",q._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),q.paragraph=I(q._paragraph).replace("hr",q.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",q._tag).getRegex(),q.blockquote=I(q.blockquote).replace("paragraph",q.paragraph).getRegex(),q.normal=U({},q),q.gfm=U({},q.normal,{nptable:"^ *([^|\\n ].*\\|.*)\\n {0,3}([-:]+ *\\|[-| :]*)(?:\\n((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)",table:"^ *\\|(.+)\\n {0,3}\\|?( *[-:]+[-| :]*)(?:\\n *((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"}),q.gfm.nptable=I(q.gfm.nptable).replace("hr",q.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",q._tag).getRegex(),q.gfm.table=I(q.gfm.table).replace("hr",q.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",q._tag).getRegex(),q.pedantic=U({},q.normal,{html:I("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",q._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:L,paragraph:I(q.normal._paragraph).replace("hr",q.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",q.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()});var $={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:L,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,rDelimAst:/\_\_[^_]*?\*[^_]*?\_\_|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,rDelimUnd:/\*\*[^*]*?\_[^*]*?\*\*|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:L,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^([\spunctuation])/,_punctuation:"!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~"};$.punctuation=I($.punctuation).replace(/punctuation/g,$._punctuation).getRegex(),$.blockSkip=/\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g,$.escapedEmSt=/\\\*|\\_/g,$._comment=I(q._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),$.emStrong.lDelim=I($.emStrong.lDelim).replace(/punct/g,$._punctuation).getRegex(),$.emStrong.rDelimAst=I($.emStrong.rDelimAst,"g").replace(/punct/g,$._punctuation).getRegex(),$.emStrong.rDelimUnd=I($.emStrong.rDelimUnd,"g").replace(/punct/g,$._punctuation).getRegex(),$._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,$._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,$._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,$.autolink=I($.autolink).replace("scheme",$._scheme).replace("email",$._email).getRegex(),$._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,$.tag=I($.tag).replace("comment",$._comment).replace("attribute",$._attribute).getRegex(),$._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,$._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,$._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,$.link=I($.link).replace("label",$._label).replace("href",$._href).replace("title",$._title).getRegex(),$.reflink=I($.reflink).replace("label",$._label).getRegex(),$.reflinkSearch=I($.reflinkSearch,"g").replace("reflink",$.reflink).replace("nolink",$.nolink).getRegex(),$.normal=U({},$),$.pedantic=U({},$.normal,{strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:I(/^!?\[(label)\]\((.*?)\)/).replace("label",$._label).getRegex(),reflink:I(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",$._label).getRegex()}),$.gfm=U({},$.normal,{escape:I($.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),$.gfm.url=I($.gfm.url,"i").replace("email",$.gfm._extended_email).getRegex(),$.breaks=U({},$.gfm,{br:I($.br).replace("{2,}","*").getRegex(),text:I($.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()});var H={block:q,inline:$},Y=r.defaults,W=H.block,G=H.inline,Z=T;function X(t){return t.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function V(t){var n,e,r="",i=t.length;for(n=0;n<i;n++)e=t.charCodeAt(n),Math.random()>.5&&(e="x"+e.toString(16)),r+="&#"+e+";";return r}var K=function(){function n(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||Y,this.options.tokenizer=this.options.tokenizer||new j,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options;var n={block:W.normal,inline:G.normal};this.options.pedantic?(n.block=W.pedantic,n.inline=G.pedantic):this.options.gfm&&(n.block=W.gfm,this.options.breaks?n.inline=G.breaks:n.inline=G.gfm),this.tokenizer.rules=n}n.lex=function(t,e){return new n(e).lex(t)},n.lexInline=function(t,e){return new n(e).inlineTokens(t)};var e,r,i,u=n.prototype;return u.lex=function(t){return t=t.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    "),this.blockTokens(t,this.tokens,!0),this.inline(this.tokens),this.tokens},u.blockTokens=function(t,n,e){var r,i,u,o;for(void 0===n&&(n=[]),void 0===e&&(e=!0),this.options.pedantic&&(t=t.replace(/^ +$/gm,""));t;)if(r=this.tokenizer.space(t))t=t.substring(r.raw.length),r.type&&n.push(r);else if(r=this.tokenizer.code(t))t=t.substring(r.raw.length),(o=n[n.length-1])&&"paragraph"===o.type?(o.raw+="\n"+r.raw,o.text+="\n"+r.text):n.push(r);else if(r=this.tokenizer.fences(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.heading(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.nptable(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.hr(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.blockquote(t))t=t.substring(r.raw.length),r.tokens=this.blockTokens(r.text,[],e),n.push(r);else if(r=this.tokenizer.list(t)){for(t=t.substring(r.raw.length),u=r.items.length,i=0;i<u;i++)r.items[i].tokens=this.blockTokens(r.items[i].text,[],!1);n.push(r)}else if(r=this.tokenizer.html(t))t=t.substring(r.raw.length),n.push(r);else if(e&&(r=this.tokenizer.def(t)))t=t.substring(r.raw.length),this.tokens.links[r.tag]||(this.tokens.links[r.tag]={href:r.href,title:r.title});else if(r=this.tokenizer.table(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.lheading(t))t=t.substring(r.raw.length),n.push(r);else if(e&&(r=this.tokenizer.paragraph(t)))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.text(t))t=t.substring(r.raw.length),(o=n[n.length-1])&&"text"===o.type?(o.raw+="\n"+r.raw,o.text+="\n"+r.text):n.push(r);else if(t){var a="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(a);break}throw new Error(a)}return n},u.inline=function(t){var n,e,r,i,u,o,a=t.length;for(n=0;n<a;n++)switch((o=t[n]).type){case"paragraph":case"text":case"heading":o.tokens=[],this.inlineTokens(o.text,o.tokens);break;case"table":for(o.tokens={header:[],cells:[]},i=o.header.length,e=0;e<i;e++)o.tokens.header[e]=[],this.inlineTokens(o.header[e],o.tokens.header[e]);for(i=o.cells.length,e=0;e<i;e++)for(u=o.cells[e],o.tokens.cells[e]=[],r=0;r<u.length;r++)o.tokens.cells[e][r]=[],this.inlineTokens(u[r],o.tokens.cells[e][r]);break;case"blockquote":this.inline(o.tokens);break;case"list":for(i=o.items.length,e=0;e<i;e++)this.inline(o.items[e].tokens)}return t},u.inlineTokens=function(t,n,e,r){var i,u;void 0===n&&(n=[]),void 0===e&&(e=!1),void 0===r&&(r=!1);var o,a,c,s=t;if(this.tokens.links){var l=Object.keys(this.tokens.links);if(l.length>0)for(;null!=(o=this.tokenizer.rules.inline.reflinkSearch.exec(s));)l.includes(o[0].slice(o[0].lastIndexOf("[")+1,-1))&&(s=s.slice(0,o.index)+"["+Z("a",o[0].length-2)+"]"+s.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(o=this.tokenizer.rules.inline.blockSkip.exec(s));)s=s.slice(0,o.index)+"["+Z("a",o[0].length-2)+"]"+s.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(o=this.tokenizer.rules.inline.escapedEmSt.exec(s));)s=s.slice(0,o.index)+"++"+s.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;t;)if(a||(c=""),a=!1,i=this.tokenizer.escape(t))t=t.substring(i.raw.length),n.push(i);else if(i=this.tokenizer.tag(t,e,r)){t=t.substring(i.raw.length),e=i.inLink,r=i.inRawBlock;var f=n[n.length-1];f&&"text"===i.type&&"text"===f.type?(f.raw+=i.raw,f.text+=i.text):n.push(i)}else if(i=this.tokenizer.link(t))t=t.substring(i.raw.length),"link"===i.type&&(i.tokens=this.inlineTokens(i.text,[],!0,r)),n.push(i);else if(i=this.tokenizer.reflink(t,this.tokens.links)){t=t.substring(i.raw.length);var h=n[n.length-1];"link"===i.type?(i.tokens=this.inlineTokens(i.text,[],!0,r),n.push(i)):h&&"text"===i.type&&"text"===h.type?(h.raw+=i.raw,h.text+=i.text):n.push(i)}else if(i=this.tokenizer.emStrong(t,s,c))t=t.substring(i.raw.length),i.tokens=this.inlineTokens(i.text,[],e,r),n.push(i);else if(i=this.tokenizer.codespan(t))t=t.substring(i.raw.length),n.push(i);else if(i=this.tokenizer.br(t))t=t.substring(i.raw.length),n.push(i);else if(i=this.tokenizer.del(t))t=t.substring(i.raw.length),i.tokens=this.inlineTokens(i.text,[],e,r),n.push(i);else if(i=this.tokenizer.autolink(t,V))t=t.substring(i.raw.length),n.push(i);else if(e||!(i=this.tokenizer.url(t,V))){if(i=this.tokenizer.inlineText(t,r,X))t=t.substring(i.raw.length),"_"!==i.raw.slice(-1)&&(c=i.raw.slice(-1)),a=!0,(u=n[n.length-1])&&"text"===u.type?(u.raw+=i.raw,u.text+=i.text):n.push(i);else if(t){var p="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(p);break}throw new Error(p)}}else t=t.substring(i.raw.length),n.push(i);return n},e=n,i=[{key:"rules",get:function(){return{block:W,inline:G}}}],(r=null)&&t(e.prototype,r),i&&t(e,i),n}(),J=r.defaults,Q=A,tt=x,nt=function(){function t(t){this.options=t||J}var n=t.prototype;return n.code=function(t,n,e){var r=(n||"").match(/\S*/)[0];if(this.options.highlight){var i=this.options.highlight(t,r);null!=i&&i!==t&&(e=!0,t=i)}return t=t.replace(/\n$/,"")+"\n",r?'<pre><code class="'+this.options.langPrefix+tt(r,!0)+'">'+(e?t:tt(t,!0))+"</code></pre>\n":"<pre><code>"+(e?t:tt(t,!0))+"</code></pre>\n"},n.blockquote=function(t){return"<blockquote>\n"+t+"</blockquote>\n"},n.html=function(t){return t},n.heading=function(t,n,e,r){return this.options.headerIds?"<h"+n+' id="'+this.options.headerPrefix+r.slug(e)+'">'+t+"</h"+n+">\n":"<h"+n+">"+t+"</h"+n+">\n"},n.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},n.list=function(t,n,e){var r=n?"ol":"ul";return"<"+r+(n&&1!==e?' start="'+e+'"':"")+">\n"+t+"</"+r+">\n"},n.listitem=function(t){return"<li>"+t+"</li>\n"},n.checkbox=function(t){return"<input "+(t?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},n.paragraph=function(t){return"<p>"+t+"</p>\n"},n.table=function(t,n){return n&&(n="<tbody>"+n+"</tbody>"),"<table>\n<thead>\n"+t+"</thead>\n"+n+"</table>\n"},n.tablerow=function(t){return"<tr>\n"+t+"</tr>\n"},n.tablecell=function(t,n){var e=n.header?"th":"td";return(n.align?"<"+e+' align="'+n.align+'">':"<"+e+">")+t+"</"+e+">\n"},n.strong=function(t){return"<strong>"+t+"</strong>"},n.em=function(t){return"<em>"+t+"</em>"},n.codespan=function(t){return"<code>"+t+"</code>"},n.br=function(){return this.options.xhtml?"<br/>":"<br>"},n.del=function(t){return"<del>"+t+"</del>"},n.link=function(t,n,e){if(null===(t=Q(this.options.sanitize,this.options.baseUrl,t)))return e;var r='<a href="'+tt(t)+'"';return n&&(r+=' title="'+n+'"'),r+">"+e+"</a>"},n.image=function(t,n,e){if(null===(t=Q(this.options.sanitize,this.options.baseUrl,t)))return e;var r='<img src="'+t+'" alt="'+e+'"';return n&&(r+=' title="'+n+'"'),r+(this.options.xhtml?"/>":">")},n.text=function(t){return t},t}(),et=function(){function t(){}var n=t.prototype;return n.strong=function(t){return t},n.em=function(t){return t},n.codespan=function(t){return t},n.del=function(t){return t},n.html=function(t){return t},n.text=function(t){return t},n.link=function(t,n,e){return""+e},n.image=function(t,n,e){return""+e},n.br=function(){return""},t}(),rt=function(){function t(){this.seen={}}var n=t.prototype;return n.serialize=function(t){return t.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")},n.getNextSafeSlug=function(t,n){var e=t,r=0;if(this.seen.hasOwnProperty(e)){r=this.seen[t];do{e=t+"-"+ ++r}while(this.seen.hasOwnProperty(e))}return n||(this.seen[t]=r,this.seen[e]=0),e},n.slug=function(t,n){void 0===n&&(n={});var e=this.serialize(t);return this.getNextSafeSlug(e,n.dryrun)},t}(),it=r.defaults,ut=w,ot=function(){function t(t){this.options=t||it,this.options.renderer=this.options.renderer||new nt,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new et,this.slugger=new rt}t.parse=function(n,e){return new t(e).parse(n)},t.parseInline=function(n,e){return new t(e).parseInline(n)};var n=t.prototype;return n.parse=function(t,n){void 0===n&&(n=!0);var e,r,i,u,o,a,c,s,l,f,h,p,d,g,v,_,y,m,b="",x=t.length;for(e=0;e<x;e++)switch((f=t[e]).type){case"space":continue;case"hr":b+=this.renderer.hr();continue;case"heading":b+=this.renderer.heading(this.parseInline(f.tokens),f.depth,ut(this.parseInline(f.tokens,this.textRenderer)),this.slugger);continue;case"code":b+=this.renderer.code(f.text,f.lang,f.escaped);continue;case"table":for(s="",c="",u=f.header.length,r=0;r<u;r++)c+=this.renderer.tablecell(this.parseInline(f.tokens.header[r]),{header:!0,align:f.align[r]});for(s+=this.renderer.tablerow(c),l="",u=f.cells.length,r=0;r<u;r++){for(c="",o=(a=f.tokens.cells[r]).length,i=0;i<o;i++)c+=this.renderer.tablecell(this.parseInline(a[i]),{header:!1,align:f.align[i]});l+=this.renderer.tablerow(c)}b+=this.renderer.table(s,l);continue;case"blockquote":l=this.parse(f.tokens),b+=this.renderer.blockquote(l);continue;case"list":for(h=f.ordered,p=f.start,d=f.loose,u=f.items.length,l="",r=0;r<u;r++)_=(v=f.items[r]).checked,y=v.task,g="",v.task&&(m=this.renderer.checkbox(_),d?v.tokens.length>0&&"text"===v.tokens[0].type?(v.tokens[0].text=m+" "+v.tokens[0].text,v.tokens[0].tokens&&v.tokens[0].tokens.length>0&&"text"===v.tokens[0].tokens[0].type&&(v.tokens[0].tokens[0].text=m+" "+v.tokens[0].tokens[0].text)):v.tokens.unshift({type:"text",text:m}):g+=m),g+=this.parse(v.tokens,d),l+=this.renderer.listitem(g,y,_);b+=this.renderer.list(l,h,p);continue;case"html":b+=this.renderer.html(f.text);continue;case"paragraph":b+=this.renderer.paragraph(this.parseInline(f.tokens));continue;case"text":for(l=f.tokens?this.parseInline(f.tokens):f.text;e+1<x&&"text"===t[e+1].type;)l+="\n"+((f=t[++e]).tokens?this.parseInline(f.tokens):f.text);b+=n?this.renderer.paragraph(l):l;continue;default:var w='Token with "'+f.type+'" type was not found.';if(this.options.silent)return void console.error(w);throw new Error(w)}return b},n.parseInline=function(t,n){n=n||this.renderer;var e,r,i="",u=t.length;for(e=0;e<u;e++)switch((r=t[e]).type){case"escape":i+=n.text(r.text);break;case"html":i+=n.html(r.text);break;case"link":i+=n.link(r.href,r.title,this.parseInline(r.tokens,n));break;case"image":i+=n.image(r.href,r.title,r.text);break;case"strong":i+=n.strong(this.parseInline(r.tokens,n));break;case"em":i+=n.em(this.parseInline(r.tokens,n));break;case"codespan":i+=n.codespan(r.text);break;case"br":i+=n.br();break;case"del":i+=n.del(this.parseInline(r.tokens,n));break;case"text":i+=n.text(r.text);break;default:var o='Token with "'+r.type+'" type was not found.';if(this.options.silent)return void console.error(o);throw new Error(o)}return i},t}(),at=E,ct=S,st=x,lt=r.getDefaults,ft=r.changeDefaults,ht=r.defaults;function pt(t,n,e){if(null==t)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof t)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected");if("function"==typeof n&&(e=n,n=null),n=at({},pt.defaults,n||{}),ct(n),e){var r,i=n.highlight;try{r=K.lex(t,n)}catch(t){return e(t)}var u=function(t){var u;if(!t)try{u=ot.parse(r,n)}catch(n){t=n}return n.highlight=i,t?e(t):e(null,u)};if(!i||i.length<3)return u();if(delete n.highlight,!r.length)return u();var o=0;return pt.walkTokens(r,(function(t){"code"===t.type&&(o++,setTimeout((function(){i(t.text,t.lang,(function(n,e){if(n)return u(n);null!=e&&e!==t.text&&(t.text=e,t.escaped=!0),0==--o&&u()}))}),0))})),void(0===o&&u())}try{var a=K.lex(t,n);return n.walkTokens&&pt.walkTokens(a,n.walkTokens),ot.parse(a,n)}catch(t){if(t.message+="\nPlease report this to https://github.com/markedjs/marked.",n.silent)return"<p>An error occurred:</p><pre>"+st(t.message+"",!0)+"</pre>";throw t}}return pt.options=pt.setOptions=function(t){return at(pt.defaults,t),ft(pt.defaults),pt},pt.getDefaults=lt,pt.defaults=ht,pt.use=function(t){var n=at({},t);if(t.renderer&&function(){var e=pt.defaults.renderer||new nt,r=function(n){var r=e[n];e[n]=function(){for(var i=arguments.length,u=new Array(i),o=0;o<i;o++)u[o]=arguments[o];var a=t.renderer[n].apply(e,u);return!1===a&&(a=r.apply(e,u)),a}};for(var i in t.renderer)r(i);n.renderer=e}(),t.tokenizer&&function(){var e=pt.defaults.tokenizer||new j,r=function(n){var r=e[n];e[n]=function(){for(var i=arguments.length,u=new Array(i),o=0;o<i;o++)u[o]=arguments[o];var a=t.tokenizer[n].apply(e,u);return!1===a&&(a=r.apply(e,u)),a}};for(var i in t.tokenizer)r(i);n.tokenizer=e}(),t.walkTokens){var e=pt.defaults.walkTokens;n.walkTokens=function(n){t.walkTokens(n),e&&e(n)}}pt.setOptions(n)},pt.walkTokens=function(t,n){for(var r,i=e(t);!(r=i()).done;){var u=r.value;switch(n(u),u.type){case"table":for(var o,a=e(u.tokens.header);!(o=a()).done;){var c=o.value;pt.walkTokens(c,n)}for(var s,l=e(u.tokens.cells);!(s=l()).done;)for(var f,h=e(s.value);!(f=h()).done;){var p=f.value;pt.walkTokens(p,n)}break;case"list":pt.walkTokens(u.items,n);break;default:u.tokens&&pt.walkTokens(u.tokens,n)}}},pt.parseInline=function(t,n){if(null==t)throw new Error("marked.parseInline(): input parameter is undefined or null");if("string"!=typeof t)throw new Error("marked.parseInline(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected");n=at({},pt.defaults,n||{}),ct(n);try{var e=K.lexInline(t,n);return n.walkTokens&&pt.walkTokens(e,n.walkTokens),ot.parseInline(e,n)}catch(t){if(t.message+="\nPlease report this to https://github.com/markedjs/marked.",n.silent)return"<p>An error occurred:</p><pre>"+st(t.message+"",!0)+"</pre>";throw t}},pt.Parser=ot,pt.parser=ot.parse,pt.Renderer=nt,pt.TextRenderer=et,pt.Lexer=K,pt.lexer=K.lex,pt.Tokenizer=j,pt.Slugger=rt,pt.parse=pt,pt}()},178:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Application=void 0;var r=e(481),i=function(){function t(){}return t.run=function(){r.json("https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/metadata.json",(function(n){t.metadata=n,t.dates=t.metadata.filter((function(t){return"joined"===t.type})).map((function(t){return t.date})).reverse(),t.pages=t.Pages.map((function(t){return new t})),t.pages.forEach((function(t){return t.init()})),t.links=t.Links.map((function(t){return new t})),t.links.forEach((function(t){return t.init()})),t.pages[0].update()}))},t.build={withBlank:function(){return t.build},withPages:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.Pages=n,t.build},withLinks:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.Links=n,t.build},class:t},t}();n.Application=i},995:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.DataRepo=void 0;var u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="data-repo",n.name="Data Repo",n.url="https://github.com/ControlNet/wt-data-project.data",n}return i(n,t),n}(e(259).Link);n.DataRepo=u},846:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.GithubLink=void 0;var u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="github",n.name="by ControlNet",n.url="https://github.com/ControlNet",n}return i(n,t),n}(e(259).Link);n.GithubLink=u},259:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.Link=void 0;var u=e(481),o=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.init=function(){u.select("#navbar").append("li").append("a").attr("id",this.id).attr("href",this.url).classed("link-tab",!0).html(this.name)},n}(e(160).NavTab);n.Link=o},944:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.VisRepo=void 0;var u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="vis-repo",n.name="Visualization Repo",n.url="https://github.com/ControlNet/wt-data-project.visualization",n}return i(n,t),n}(e(259).Link);n.VisRepo=u},415:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.WebRepo=void 0;var u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="web-repo",n.name="Web Repo",n.url="https://github.com/ControlNet/wt-data-project.web",n}return i(n,t),n}(e(259).Link);n.WebRepo=u},160:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.NavTab=void 0;n.NavTab=function(){}},759:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.BRHeatMapPage=void 0;var u=e(178),o=e(953),a=e(984),c=e(481),s=e(593),l=e(380),f=e(787),h=e(135),p=e(873),d=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="br-heatmap",n.name="BR HeatMap",n}return i(n,t),n.prototype.update=function(){var t=this;this.removeOld();var n=c.select("#sidebar"),e=n.append("label").text("Date: ").append("select").attr("id","date-selection").classed("br-heatmap-selection",!0);u.Application.dates.forEach((function(t){e.append("option").attr("value",t).html(t)})),n.append("label").text("Class: ").append("select").attr("id","class-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"Ground_vehicles",text:"Ground Vehicles"},{id:"Aviation",text:"Aviation"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"Ground_vehicles"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Mode: ").append("select").attr("id","mode-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"ab",text:"AB"},{id:"rb",text:"RB"},{id:"sb",text:"SB"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"rb"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Measurement: ").append("select").attr("id","measurement-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"win_rate",text:"Win Rate"},{id:"battles_sum",text:"Battles"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"win_rate"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("BR Range: ").append("select").attr("id","br-range-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"0"},{id:"1"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"1"===t.id?"selected":void 0})).html((function(t){return t.id})),this.plot=new o.BrHeatmap(800,600,{top:20,right:30,bottom:30,left:100});var r=new l.ColorBar(this.plot,800,60,{top:this.plot.margin.top,right:40,bottom:this.plot.margin.bottom,left:0}),i=new f.BRLineChart(this.plot,400,500,{top:10,right:20,bottom:this.plot.margin.bottom,left:50}),a=new h.Legend(this.plot,800,160,{top:this.plot.margin.top,right:5,bottom:this.plot.margin.bottom,left:5}),d=new p.Table(this.plot);this.plot.init(r,i,a,d),s.utils.setEvent.byClass("br-heatmap-selection").onchange((function(){return t.plot.update(!1)})),s.utils.setEvent.byIds("mode-selection","br-range-selection").onchange((function(){return t.plot.update(!0)}))},n}(a.Page);n.BRHeatMapPage=d},984:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.Page=void 0;var u=e(481),o=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.init=function(){var t=this;u.select("#navbar").append("li").append("a").attr("id",this.id).attr("href","#"+this.id).classed("page-tab",!0).html(this.name).on("click",(function(){return t.update.call(t)}))},n.prototype.removeOld=function(){u.select("#sidebar").html(""),u.select("#content").html("")},n}(e(160).NavTab);n.Page=o},42:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.StackedAreaPage=void 0;var u=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="stacked-area",n.name="Trends",n}return i(n,t),n.prototype.update=function(){this.removeOld()},n}(e(984).Page);n.StackedAreaPage=u},79:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.TodoPage=void 0;var u=e(984),o=e(481),a=e(84),c=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="todo-list",n.name="Todo List",n}return i(n,t),n.prototype.update=function(){this.removeOld(),o.text("https://raw.githubusercontent.com/ControlNet/wt-data-project.web/main/README.md",(function(t){o.select("#content").html(a(t)).html(o.select("div#todo-list-section").html())}))},n}(u.Page);n.TodoPage=c},535:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Getter=void 0;n.Getter=function(){}},516:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.JoinedRowGetter=void 0;var u=function(t){function n(n,e){var r=t.call(this)||this;return r.data=n,r.mode=e,r}return i(n,t),Object.defineProperty(n.prototype,"br",{get:function(){switch(this.mode){case"ab":return+this.data.ab_br;case"rb":return+this.data.rb_br;case"sb":return+this.data.sb_br}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"battles",{get:function(){switch(this.mode){case"ab":return+this.data.ab_battles;case"rb":return+this.data.rb_battles;case"sb":return+this.data.sb_battles}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"winRate",{get:function(){switch(this.mode){case"ab":return+this.data.ab_win_rate;case"rb":return+this.data.rb_win_rate;case"sb":return+this.data.sb_win_rate}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"airFragsPerBattle",{get:function(){switch(this.mode){case"ab":return+this.data.ab_air_frags_per_battle;case"rb":return+this.data.rb_air_frags_per_battle;case"sb":return+this.data.sb_air_frags_per_battle}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"airFragsPerDeath",{get:function(){switch(this.mode){case"ab":return+this.data.ab_air_frags_per_death;case"rb":return+this.data.rb_air_frags_per_death;case"sb":return+this.data.sb_air_frags_per_death}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"groundFragsPerBattle",{get:function(){switch(this.mode){case"ab":return+this.data.ab_ground_frags_per_battle;case"rb":return+this.data.rb_ground_frags_per_battle;case"sb":return+this.data.sb_ground_frags_per_battle}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"groundFragsPerDeath",{get:function(){switch(this.mode){case"ab":return+this.data.ab_ground_frags_per_death;case"rb":return+this.data.rb_ground_frags_per_death;case"sb":return+this.data.sb_ground_frags_per_death}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rpRate",{get:function(){switch(this.mode){case"ab":return+this.data.ab_rp_rate;case"rb":return+this.data.rb_rp_rate;case"sb":return+this.data.sb_rp_rate}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"slRate",{get:function(){switch(this.mode){case"ab":return+this.data.ab_sl_rate;case"rb":return+this.data.rb_sl_rate;case"sb":return+this.data.sb_sl_rate}},enumerable:!1,configurable:!0}),n}(e(535).Getter);n.JoinedRowGetter=u},465:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.TimeseriesRowGetter=void 0;var u=function(t){function n(n,e,r){var i=t.call(this)||this;return i.data=n,i.mode=e,i.measurement=r,i}return i(n,t),Object.defineProperty(n.prototype,"value",{get:function(){switch(this.mode){case"ab":var t=this.data;switch(this.measurement){case"win_rate":return+t.ab_win_rate;case"battles_sum":return+t.ab_battles_sum}break;case"rb":var n=this.data;switch(this.measurement){case"win_rate":return+n.rb_win_rate;case"battles_sum":return+n.rb_battles_sum}break;case"sb":var e=this.data;switch(this.measurement){case"win_rate":return+e.sb_win_rate;case"battles_sum":return+e.sb_battles_sum}}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"br",{get:function(){switch(this.mode){case"ab":return this.data.ab_br;case"rb":return this.data.rb_br;case"sb":return this.data.sb_br}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"lowerBr",{get:function(){switch(this.mode){case"ab":return+this.data.ab_lower_br;case"rb":return+this.data.rb_lower_br;case"sb":return+this.data.sb_lower_br}},enumerable:!1,configurable:!0}),n}(e(535).Getter);n.TimeseriesRowGetter=u},953:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,u){function o(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,a)}c((r=r.apply(t,n||[])).next())}))},o=this&&this.__generator||function(t,n){var e,r,i,u,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,r=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){o.label=u[1];break}if(6===u[0]&&o.label<i[1]){o.label=i[1],i=u;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(u);break}i[2]&&o.ops.pop(),o.trys.pop();continue}u=n.call(t,o)}catch(t){u=[6,t],r=0}finally{e=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.BrHeatmap=void 0;var a=e(481),c=e(830),s=e(465),l=e(593),f=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.selected=[],n.mouseoverEvent=function(){a.select(this).style("stroke","white")},n.mouseleaveEvent=function(){a.select(this).style("stroke","black")},n.colorPool={values:l.utils.deepCopy(l.categoricalColors),i:0,bindings:new Array,get:function(t){for(var n=0,e=this.bindings;n<e.length;n++){var r=e[n];if(r.br===t.br&&r.nation===t.nation)return r.color}var i=this.values[this.i];return this.i++,this.i===this.values.length&&(this.i=0),this.bindings.push({nation:t.nation,br:t.br,color:i}),i}},n}return i(n,t),n.prototype.updateSubPlots=function(){return u(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.table.update()];case 1:return t.sent(),[4,this.lineChart.update()];case 2:return t.sent(),[4,this.legend.update()];case 3:return t.sent(),[2]}}))}))},n.prototype.resetSubPlots=function(){return u(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.table.reset()];case 1:return t.sent(),[4,this.lineChart.reset()];case 2:return t.sent(),[4,this.legend.update()];case 3:return t.sent(),[2]}}))}))},n.prototype.getClickEvent=function(){var t=this;return function(){return u(this,void 0,void 0,(function(){var n,e;return o(this,(function(r){switch(r.label){case 0:return n=a.select(this),e=n.data()[0],l.utils.rgbToHex(n.style("fill")).toUpperCase()===l.COLORS.AZURE?(n.style("fill",t.value2color(e.value)),t.selected=t.selected.filter((function(t){return t.br!==e.br||t.nation!==e.nation}))):(n.style("fill",l.COLORS.AZURE),t.selected.push(e)),[4,t.updateSubPlots()];case 1:return r.sent(),[2]}}))}))}},n.prototype.init=function(t,n,e,r){var i=this;return this.colorBar=t,this.lineChart=n,this.legend=e,this.table=r,this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","main-svg"),this.g=this.svg.append("g").attr("id","main-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),a.csv(this.dataPath,(function(t){return u(i,void 0,void 0,(function(){var n,e,r,i,u,a,c,s=this;return o(this,(function(o){switch(o.label){case 0:return n=this.extractData(t),e=this.width/l.utils.nations.length,r=this.height/l.utils.brs[this.brRange].length,i=this.buildAxis(),u=i.x,a=i.y,this.colorBar.init(),this.lineChart.init(),this.legend.init(),this.table.init(),c=this,[4,this.getValue2color()];case 1:return c.value2color=o.sent(),this.g.selectAll().data(n).enter().append("rect").attr("x",(function(t){return u(t.nation)})).attr("y",(function(t){return a(t.br)})).attr("width",e).attr("height",r).style("fill",(function(t){return s.value2color(t.value)})).style("stroke-width",1).style("stroke","black").on("mouseover",this.mouseoverEvent).on("mouseleave",this.mouseleaveEvent).on("click",this.getClickEvent()),this.cache=t,[2]}}))}))})),this},n.prototype.update=function(t){return u(this,void 0,void 0,(function(){var n,e=this;return o(this,(function(r){switch(r.label){case 0:return n=a.selectAll("g#br-heatmap-x, g#br-heatmap-y"),t?(a.csv(this.dataPath,(function(t){e.updateSquares(t),e.cache=t})),[3,3]):[3,1];case 1:return[4,this.updateSquares(this.cache)];case 2:r.sent(),r.label=3;case 3:return this.buildAxis(),n.remove(),this.selected=[],[4,this.resetSubPlots()];case 4:return r.sent(),[4,new Promise((function(t){return t(e)}))];case 5:return[2,r.sent()]}}))}))},n.prototype.updateSquares=function(t){return u(this,void 0,void 0,(function(){var n,e,r,i=this;return o(this,(function(u){switch(u.label){case 0:return n=this.extractData(t),e=this,[4,this.getValue2color()];case 1:return e.value2color=u.sent(),(r=this.g.selectAll("rect").data(n)).enter().transition().style("fill",(function(t){return i.value2color(t.value)})),r.exit().transition().style("fill",l.COLORS.BLANK),r.transition().style("fill",(function(t){return i.value2color(t.value)})),[2]}}))}))},n.prototype.buildAxis=function(){var t=a.scaleBand().range([0,this.width]).domain(l.utils.nations);this.g.append("g").attr("id","br-heatmap-x").style("font-size",13).attr("transform","translate(0, "+(this.height+10)+")").call(a.axisBottom(t).tickSize(0)).select("#main-g g path.domain").remove();var n=a.scaleBand().range([this.height,0]).domain(l.utils.brs[this.brRange]);return this.g.append("g").attr("id","br-heatmap-y").style("font-size",15).attr("transform","translate(-5, 0)").call(a.axisLeft(n).tickSize(0)).select("#main-g g path.domain").remove(),{x:t,y:n}},n.prototype.extractData=function(t){var n=this;return t.filter((function(t){return t.date===n.date&&t.cls===n.clazz})).map((function(t){var e=new s.TimeseriesRowGetter(t,n.mode,n.measurement);return{nation:t.nation,br:e.br,lowerBr:e.lowerBr,value:e.value}}))},n.prototype.getValue2color=function(){return u(this,void 0,void 0,(function(){var t,n,e,r,i;return o(this,(function(u){switch(u.label){case 0:switch(this.measurement){case"win_rate":e=0,r=100,t=a.scaleLinear().domain([e,r]).range([0,1]),"Ground_vehicles"===this.clazz?n=a.scaleLinear().domain([0,.05,.4,.5,.6,.95,1]).range([l.CONT_COLORS.WHITE,l.CONT_COLORS.BLACK,l.CONT_COLORS.RED,l.CONT_COLORS.YELLOW,l.CONT_COLORS.GREEN,l.CONT_COLORS.BLACK,l.CONT_COLORS.BLACK]).interpolate(a.interpolateHcl):"Aviation"===this.clazz&&(n=a.scaleLinear().domain([0,.01,.5,.6,.7,.99,1]).range([l.CONT_COLORS.WHITE,l.CONT_COLORS.BLACK,l.CONT_COLORS.RED,l.CONT_COLORS.YELLOW,l.CONT_COLORS.GREEN,l.CONT_COLORS.BLACK,l.CONT_COLORS.BLACK]).interpolate(a.interpolateHcl));break;case"battles_sum":e=Math.pow(10,2.5),r=Math.pow(10,5.5),t=a.scaleLog().domain([e,r]).range([0,1]),n=a.scaleLinear().domain([0,.01,.4,.5,.6,.99,1]).range([l.CONT_COLORS.WHITE,l.CONT_COLORS.BLACK,l.CONT_COLORS.RED,l.CONT_COLORS.YELLOW,l.CONT_COLORS.GREEN,l.CONT_COLORS.BLACK]).interpolate(a.interpolateHcl)}return i=function(e){return n(t(e))},[4,this.colorBar.update(e,r,i)];case 1:return u.sent(),[2,function(e){return 0==e?l.COLORS.BLANK:n(t(e))}]}}))}))},Object.defineProperty(n.prototype,"dataPath",{get:function(){return"https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/"+this.mode.toLowerCase()+"_ranks_"+this.brRange+".csv"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"date",{get:function(){return l.utils.getSelectedValue("date-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"clazz",{get:function(){return l.utils.getSelectedValue("class-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"mode",{get:function(){return l.utils.getSelectedValue("mode-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"measurement",{get:function(){return l.utils.getSelectedValue("measurement-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"brRange",{get:function(){return l.utils.getSelectedValue("br-range-selection")},enumerable:!1,configurable:!0}),n}(c.Plot);n.BrHeatmap=f},380:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,u){function o(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,a)}c((r=r.apply(t,n||[])).next())}))},o=this&&this.__generator||function(t,n){var e,r,i,u,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,r=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){o.label=u[1];break}if(6===u[0]&&o.label<i[1]){o.label=i[1],i=u;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(u);break}i[2]&&o.ops.pop(),o.trys.pop();continue}u=n.call(t,o)}catch(t){u=[6,t],r=0}finally{e=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.ColorBar=void 0;var a=e(481),c=e(830),s=e(593),l=function(t){function n(n,e,r,i){var u=t.call(this,e,r,i)||this;return u.brHeatmap=n,u}return i(n,t),n.prototype.init=function(){return this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","color-bar-svg"),this.g=this.svg.append("g").attr("id","color-bar-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.update=function(t,n,e){return u(this,void 0,void 0,(function(){var r,i,u,c,l,f,h,p,d,g,v=this;return o(this,(function(o){switch(o.label){case 0:return this.valueMin=t,this.valueMax=n,this.value2color=e,r="battles_sum"===this.brHeatmap.measurement?"log":"linear",i="log"===r?s.utils.logspace(this.valueMin,this.valueMax,100):s.utils.linspace(this.valueMin,this.valueMax,100),u=i.map(this.value2color),this.g.selectAll("*").remove(),c=this.svg.attr("id")+"-gradient",l=this.g.append("defs").append("linearGradient").attr("id",c).attr("x1","0%").attr("y1","100%").attr("x2","0%").attr("y2","0%").attr("spreadMethod","pad"),f=s.utils.linspace(0,100,100).map((function(t){return Math.round(t)+"%"})),a.zip(f,u).forEach((function(t){var n=t[0],e=t[1];l.append("stop").attr("offset",n).attr("stop-color",e).attr("stop-opacity",1)})),h=this.height,p=this.width,this.g.append("rect").attr("x1",0).attr("y1",10).attr("width",p).attr("height",h).style("fill","url(#"+c+")"),d="log"===r?a.scaleLog().domain([this.valueMin,this.valueMax]).range([h,0]):a.scaleLinear().domain([this.valueMin,this.valueMax]).range([h,0]),g=a.axisRight(d),"log"===r&&(g=g.ticks(3)),g=g.tickFormat((function(t){return"log"===r?10+s.utils.formatPower(Math.round(Math.log10(t))):t+"%"})),this.g.append("g").style("font-size","log"===r?12:null).attr("class","legend-axis").attr("transform","translate("+p+", 0)").call(g),[4,new Promise((function(t){return t(v)}))];case 1:return[2,o.sent()]}}))}))},n}(c.Plot);n.ColorBar=l},135:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,u){function o(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,a)}c((r=r.apply(t,n||[])).next())}))},o=this&&this.__generator||function(t,n){var e,r,i,u,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,r=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){o.label=u[1];break}if(6===u[0]&&o.label<i[1]){o.label=i[1],i=u;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(u);break}i[2]&&o.ops.pop(),o.trys.pop();continue}u=n.call(t,o)}catch(t){u=[6,t],r=0}finally{e=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.Legend=void 0;var a=e(481),c=function(t){function n(n,e,r,i){var u=t.call(this,e,r,i)||this;return u.brHeatmap=n,u}return i(n,t),n.prototype.init=function(){return this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","legend-svg"),this.g=this.svg.append("g").attr("id","legend-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.update=function(){return u(this,void 0,void 0,(function(){var t,n,e,r,i=this;return o(this,(function(u){switch(u.label){case 0:return t=this.g.selectAll("g").data(this.brHeatmap.selected,(function(t){return t.nation+t.br})),n=this.height,e=this.brHeatmap,r=this.g,t.exit().each((function(t,n){a.selectAll(r.selectAll("g.legend-row").nodes().slice(n+1)).each((function(){var t=a.select(this),n=t.select("rect"),e=t.select("text");n.transition().duration(500).attr("y",+n.attr("y")+30),e.transition().duration(500).attr("y",+e.attr("y")+30)}))})).transition().duration(500).style("opacity",0).remove(),t.enter().append("g").classed("legend-row",!0).each((function(t,r){a.select(this).append("rect").classed("legend-rect",!0).attr("x",5).attr("y",n-30-30*r).attr("width",20).attr("height",20).style("fill",e.colorPool.bindings.filter((function(n){return n.br===t.br&&n.nation===t.nation}))[0].color),a.select(this).append("text").attr("x",35).attr("y",n-15-30*r).text(t.nation+" "+t.br).attr("text-anchor","start").style("font-size",12.5)})),[4,new Promise((function(t){return t(i)}))];case 1:return[2,u.sent()]}}))}))},n.prototype.reset=function(){return u(this,void 0,void 0,(function(){var t=this;return o(this,(function(n){switch(n.label){case 0:return this.g.html(null),[4,new Promise((function(n){return n(t)}))];case 1:return[2,n.sent()]}}))}))},n}(e(830).Plot);n.Legend=c},787:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,u){function o(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,a)}c((r=r.apply(t,n||[])).next())}))},o=this&&this.__generator||function(t,n){var e,r,i,u,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,r=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){o.label=u[1];break}if(6===u[0]&&o.label<i[1]){o.label=i[1],i=u;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(u);break}i[2]&&o.ops.pop(),o.trys.pop();continue}u=n.call(t,o)}catch(t){u=[6,t],r=0}finally{e=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.BRLineChart=n.LineChart=void 0;var a=e(481),c=e(486),s=e(830),l=e(465),f=e(593),h=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n}(s.Plot);n.LineChart=h;var p=function(t){function n(n,e,r,i){var u=t.call(this,e,r,i)||this;return u.dataCache=[],u.brHeatmap=n,u}return i(n,t),n.prototype.init=function(){return this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","line-chart-svg"),this.g=this.svg.append("g").attr("id","line-chart-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.searchInCache=function(){return u(this,void 0,void 0,(function(){var t=this;return o(this,(function(n){switch(n.label){case 0:return[4,new Promise((function(n){for(var e=0,r=t.dataCache;e<r.length;e++){var i=r[e];if(t.brHeatmap.clazz===i.clazz&&t.brHeatmap.brRange===i.brRange&&t.brHeatmap.mode===i.mode&&t.brHeatmap.measurement===i.measurement)return void n(i.data)}a.csv(t.brHeatmap.dataPath,(function(e){t.dataCache.push({brRange:t.brHeatmap.brRange,clazz:t.brHeatmap.clazz,measurement:t.brHeatmap.measurement,mode:t.brHeatmap.mode,data:e}),n(e)}))}))];case 1:return[2,n.sent()]}}))}))},n.prototype.update=function(){return u(this,void 0,void 0,(function(){var t,n,e=this;return o(this,(function(r){switch(r.label){case 0:return t=this.g.selectAll(".x-axis"),n=this.g.selectAll(".y-axis"),[4,new Promise((function(r){e.searchInCache().then((function(i){var u=e.groupBy(e.extractData(i)),o=a.scaleLinear().domain(a.extent(i,(function(t){return f.utils.parseDate(t.date)}))).range([0,e.width]);e.g.append("g").classed("x-axis",!0).attr("transform","translate(0, "+e.height+")").call(a.axisBottom(o).tickFormat(a.timeFormat("%Y/%m"))),e.g.append("text").classed("x-axis",!0).text("Date").attr("transform","translate("+e.width/2+", "+(e.height+30)+")").style("font-size",12).style("text-anchor","middle"),t.remove();var s=c.flatMap(u,(function(t){return t.values})).map((function(t){return+t.value})),l=Math.min(1.02*c.max(s),100),h=Math.max(.98*c.min(s),0),p=a.scaleLinear().domain([h,l]).range([e.height,0]);e.g.append("g").classed("y-axis",!0).call(a.axisLeft(p)),e.g.append("text").classed("y-axis",!0).text(e.brHeatmap.measurement).attr("transform","translate(-30, "+e.height/2+") rotate(270)").style("font-size",12).style("text-anchor","middle"),n.remove();var d,g=a.line().x((function(t){return o(t.date)})).y((function(t){return p(t.value)}));(d=e.g.selectAll("#line-chart-path-g").size()>0?e.g.select("#line-chart-path-g").selectAll("path").data(u,(function(t){return t.nation+t.br})):e.g.append("g").attr("id","line-chart-path-g").style("fill","None").selectAll("path").data(u,(function(t){return t.nation+t.br}))).exit().transition().duration(500).style("opacity",0).remove(),d.transition().duration(500).attr("d",(function(t){return g(t.values)})).attr("stroke",(function(t){return e.brHeatmap.colorPool.get(t)})),d.enter().append("path").style("opacity",0).style("stroke-width",3).transition().duration(500).style("opacity",1).attr("d",(function(t){return g(t.values)})).attr("stroke",(function(t){return e.brHeatmap.colorPool.get(t)})),r(e)}))}))];case 1:return[2,r.sent()]}}))}))},n.prototype.reset=function(){return u(this,void 0,void 0,(function(){var t=this;return o(this,(function(n){switch(n.label){case 0:return this.g.html(null),[4,new Promise((function(n){return n(t)}))];case 1:return[2,n.sent()]}}))}))},n.prototype.extractData=function(t){var n=this;return t.filter((function(t){var e=new l.TimeseriesRowGetter(t,n.brHeatmap.mode,n.brHeatmap.measurement);return n.brHeatmap.selected.some((function(r){return r.nation===t.nation&&r.br===e.br&&n.brHeatmap.clazz===t.cls}))})).map((function(t){var e=new l.TimeseriesRowGetter(t,n.brHeatmap.mode,n.brHeatmap.measurement);return{date:f.utils.parseDate(t.date),nation:t.nation,br:e.br,value:e.value}}))},n.prototype.groupBy=function(t){for(var n=[],e=function(t){if(n.filter((function(n){return n.br===t.br&&n.nation===t.nation})).length>0)for(var e=0,r=n;e<r.length;e++){var i=r[e];if(i.br===t.br&&i.nation===t.nation){i.values.push({date:t.date,value:t.value});break}}else n.push({br:t.br,nation:t.nation,values:[{date:t.date,value:t.value}]})},r=0,i=t;r<i.length;r++)e(i[r]);return n.map((function(t){return t.values=t.values.filter((function(t){return t.value>0})),t}))},n}(h);n.BRLineChart=p},830:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Margin=n.Plot=void 0;var e=function(){function t(t,n,e){this.svgHeight=t,this.svgWidth=n,this.margin=e}return Object.defineProperty(t.prototype,"width",{get:function(){return this.svgWidth-this.margin.left-this.margin.right},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.svgHeight-this.margin.top-this.margin.bottom},enumerable:!1,configurable:!0}),t}();n.Plot=e;n.Margin=function(){}},873:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,u){function o(t){try{c(r.next(t))}catch(t){u(t)}}function a(t){try{c(r.throw(t))}catch(t){u(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(o,a)}c((r=r.apply(t,n||[])).next())}))},o=this&&this.__generator||function(t,n){var e,r,i,u,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return u={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function a(u){return function(a){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;o;)try{if(e=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return o.label++,{value:u[1],done:!1};case 5:o.label++,r=u[1],u=[0];continue;case 7:u=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){o=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){o.label=u[1];break}if(6===u[0]&&o.label<i[1]){o.label=i[1],i=u;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(u);break}i[2]&&o.ops.pop(),o.trys.pop();continue}u=n.call(t,o)}catch(t){u=[6,t],r=0}finally{e=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.Table=void 0;var a=e(830),c=e(481),s=e(516),l=e(486),f=function(t){function n(n){var e=t.call(this,null,null,null)||this;return e.brHeatmap=n,e}return i(n,t),n.prototype.init=function(){return this.table=c.select("#content").append("div").attr("id","selected-table-div").append("table").attr("id","selected-table"),this},n.prototype.update=function(){return u(this,void 0,void 0,(function(){var t,n,e=this;return o(this,(function(r){switch(r.label){case 0:return[4,this.reset()];case 1:return r.sent(),t=this.brHeatmap.clazz,n=+this.brHeatmap.brRange,c.csv(this.dataPath,(function(r){var i=e.brHeatmap.selected.map((function(i){var u=i.lowerBr,o=i.nation;return r.filter((function(r){var i=new s.JoinedRowGetter(r,e.brHeatmap.mode).br;return i<=u+n&&i>=u&&r.nation===o&&r.cls===t}))})).flat(),u=e.selectColumns(l.uniqBy(i,(function(t){return t.name}))),o=l.keys(u[0]);e.table.append("tr").selectAll().data(o).enter().append("th").html((function(t){return t})),u.forEach((function(t){var n=e.table.append("tr");o.forEach((function(e){n.append("td").html(t[e])}))}))})),[4,new Promise((function(t){return t(e)}))];case 2:return[2,r.sent()]}}))}))},n.prototype.reset=function(){return u(this,void 0,void 0,(function(){var t=this;return o(this,(function(n){switch(n.label){case 0:return this.table.html(null),[4,new Promise((function(n){return n(t)}))];case 1:return[2,n.sent()]}}))}))},n.prototype.selectColumns=function(t){var n=this.brHeatmap.mode;return t.map((function(t){var e=new s.JoinedRowGetter(t,n);return{ts_name:t.name,wk_name:t.wk_name,nation:t.nation,class:t.cls,br:e.br,battles:e.battles,win_rate:e.winRate,air_frags_per_battle:e.airFragsPerBattle,air_frags_per_death:e.airFragsPerDeath,ground_frags_per_battle:e.groundFragsPerBattle,ground_frags_per_death:e.groundFragsPerDeath,is_premium:t.is_premium,rp_rate:e.rpRate,sl_rate:e.slRate}}))},Object.defineProperty(n.prototype,"dataPath",{get:function(){return"https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/joined/"+this.brHeatmap.date+".csv"},enumerable:!1,configurable:!0}),n}(a.Plot);n.Table=f},593:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.CONT_COLORS=n.categoricalColors=n.COLORS=n.utils=void 0;var r,i,u,o=e(481);(u=n.utils||(n.utils={})).getSelectedValue=function(t){return document.getElementById(t).value},u.setEvent={byIds:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.map((function(t){return document.getElementById(t)}));return{onchange:function(t){return e.forEach((function(n){return n.onchange=t}))}}},byClass:function(t){var n=Array.from(document.getElementsByClassName(t));return{onchange:function(t){return n.forEach((function(n){return n.onchange=t}))}}}},u.nations=["USA","Germany","USSR","Britain","Japan","France","Italy","China","Sweden"],u.brs={1:["1.0 ~ 2.0","1.3 ~ 2.3","1.7 ~ 2.7","2.0 ~ 3.0","2.3 ~ 3.3","2.7 ~ 3.7","3.0 ~ 4.0","3.3 ~ 4.3","3.7 ~ 4.7","4.0 ~ 5.0","4.3 ~ 5.3","4.7 ~ 5.7","5.0 ~ 6.0","5.3 ~ 6.3","5.7 ~ 6.7","6.0 ~ 7.0","6.3 ~ 7.3","6.7 ~ 7.7","7.0 ~ 8.0","7.3 ~ 8.3","7.7 ~ 8.7","8.0 ~ 9.0","8.3 ~ 9.3","8.7 ~ 9.7","9.0 ~ 10.0","9.3 ~ 10.3","9.7 ~ 10.7","10.0 ~ 11.0","10.3 ~ 11.3","10.7 ~ 11.7","11.0 ~ 12.0"],0:["1.0","1.3","1.7","2.0","2.3","2.7","3.0","3.3","3.7","4.0","4.3","4.7","5.0","5.3","5.7","6.0","6.3","6.7","7.0","7.3","7.7","8.0","8.3","8.7","9.0","9.3","9.7","10.0","10.3","10.7","11.0"]},u.isNotNull=function(t){return null!=t},u.linspace=function(t,n,e){for(var r=[],i=(n-t)/(e-1),u=0;u<e-1;)r.push(t+u*i),u++;return r.push(n),r},u.logspace=function(t,n,e){return t=Math.log10(t),n=Math.log10(n),this.linspace(t,n,e).map((function(t){return Math.pow(10,t)}))},u.formatPower=function(t){return(t<0?"⁻":"")+(t+"").split("").map((function(t){return"⁰¹²³⁴⁵⁶⁷⁸⁹"[+t]})).join("")},u.rgbToHex=function(t){for(var n=t.match(/\d+/g),e="#",r=0;r<3;r++)e+=("0"+Number(n[r]).toString(16)).slice(-2);return e},u.parseDate=o.timeParse("%Y-%m-%d"),u.deepCopy=function(t){var n=this;if(Array.isArray(t)){var e=[];return t.forEach((function(t){e.push(n.deepCopy(t))})),e}if("object"==typeof t){var r={};return Object.entries(t).forEach((function(t){var e=t[0],i=t[1];r[e]=n.deepCopy(i)})),r}return t},function(t){t.GREEN="#C3E88D",t.YELLOW="#FFCB6B",t.RED="#F07178",t.BLUE="#82AAFF",t.PURPLE="#C792EA",t.ORANGE="#F78C6C",t.AZURE="#467CDA",t.SKY="#89DDFF",t.BLACK="#2B2B2B",t.GRAY="#616161",t.WHITE="#EEFFFF",t.BLANK="#FFFFFF"}(r=n.COLORS||(n.COLORS={})),n.categoricalColors=[r.GREEN,r.YELLOW,r.RED,r.BLUE,r.PURPLE,r.ORANGE,r.AZURE,r.SKY,r.GRAY],(i=n.CONT_COLORS||(n.CONT_COLORS={})).RED="#d11141",i.YELLOW="#ffc425",i.GREEN="#00b159",i.BLACK="#2B2B2B",i.WHITE="#EEFFFF"}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var u=n[r]={id:r,loaded:!1,exports:{}};return t[r].call(u.exports,u,u.exports,e),u.loaded=!0,u.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=e(178),n=e(759),r=e(42),i=e(79),u=e(944),o=e(415),a=e(995),c=e(846);t.Application.build.withPages(n.BRHeatMapPage,r.StackedAreaPage,i.TodoPage).withLinks(o.WebRepo,a.DataRepo,u.VisRepo,c.GithubLink).class.run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,