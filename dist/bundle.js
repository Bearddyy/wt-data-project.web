/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={4481:(t,n,e)=>{"use strict";e.r(n),e.d(n,{active:()=>mo,arc:()=>e_,area:()=>c_,areaRadial:()=>y_,ascending:()=>i,axisBottom:()=>it,axisLeft:()=>ot,axisRight:()=>rt,axisTop:()=>et,bisect:()=>s,bisectLeft:()=>c,bisectRight:()=>a,bisector:()=>o,brush:()=>Go,brushSelection:()=>Wo,brushX:()=>qo,brushY:()=>Ho,chord:()=>tu,cluster:()=>Eh,color:()=>le,creator:()=>_t,cross:()=>h,csv:()=>ed,csvFormat:()=>Lu,csvFormatRows:()=>zu,csvParse:()=>Ru,csvParseRows:()=>ju,cubehelix:()=>$e,curveBasis:()=>Z_,curveBasisClosed:()=>Q_,curveBasisOpen:()=>nb,curveBundle:()=>rb,curveCardinal:()=>ub,curveCardinalClosed:()=>cb,curveCardinalOpen:()=>lb,curveCatmullRom:()=>pb,curveCatmullRomClosed:()=>gb,curveCatmullRomOpen:()=>yb,curveLinear:()=>i_,curveLinearClosed:()=>bb,curveMonotoneX:()=>Tb,curveMonotoneY:()=>Mb,curveNatural:()=>Ob,curveStep:()=>Pb,curveStepAfter:()=>Fb,curveStepBefore:()=>Bb,customEvent:()=>Pt,descending:()=>p,deviation:()=>v,dispatch:()=>ht,drag:()=>Yn,dragDisable:()=>jn,dragEnable:()=>Ln,dsvFormat:()=>Fu,easeBack:()=>fo,easeBackIn:()=>so,easeBackInOut:()=>fo,easeBackOut:()=>lo,easeBounce:()=>uo,easeBounceIn:()=>oo,easeBounceInOut:()=>ao,easeBounceOut:()=>uo,easeCircle:()=>ro,easeCircleIn:()=>no,easeCircleInOut:()=>ro,easeCircleOut:()=>eo,easeCubic:()=>qi,easeCubicIn:()=>Ui,easeCubicInOut:()=>qi,easeCubicOut:()=>Wi,easeElastic:()=>go,easeElasticIn:()=>po,easeElasticInOut:()=>vo,easeElasticOut:()=>go,easeExp:()=>to,easeExpIn:()=>Ji,easeExpInOut:()=>to,easeExpOut:()=>Qi,easeLinear:()=>Ri,easePoly:()=>Yi,easePolyIn:()=>Hi,easePolyInOut:()=>Yi,easePolyOut:()=>Gi,easeQuad:()=>zi,easeQuadIn:()=>ji,easeQuadInOut:()=>zi,easeQuadOut:()=>Li,easeSin:()=>Zi,easeSinIn:()=>Ki,easeSinInOut:()=>Zi,easeSinOut:()=>Xi,entries:()=>Ou,event:()=>Tt,extent:()=>y,forceCenter:()=>Yu,forceCollide:()=>oa,forceLink:()=>ca,forceManyBody:()=>da,forceRadial:()=>ga,forceSimulation:()=>pa,forceX:()=>va,forceY:()=>ya,format:()=>Ta,formatDefaultLocale:()=>Oa,formatLocale:()=>ka,formatPrefix:()=>Ma,formatSpecifier:()=>Aa,geoAlbers:()=>Yf,geoAlbersUsa:()=>$f,geoArea:()=>Cc,geoAzimuthalEqualArea:()=>Zf,geoAzimuthalEqualAreaRaw:()=>Xf,geoAzimuthalEquidistant:()=>Qf,geoAzimuthalEquidistantRaw:()=>Jf,geoBounds:()=>_s,geoCentroid:()=>ks,geoCircle:()=>Us,geoClipAntimeridian:()=>Js,geoClipCircle:()=>Qs,geoClipExtent:()=>rl,geoClipRectangle:()=>el,geoConicConformal:()=>oh,geoConicConformalRaw:()=>ih,geoConicEqualArea:()=>Gf,geoConicEqualAreaRaw:()=>Hf,geoConicEquidistant:()=>sh,geoConicEquidistantRaw:()=>ch,geoContains:()=>Dl,geoDistance:()=>gl,geoEquirectangular:()=>ah,geoEquirectangularRaw:()=>uh,geoGnomonic:()=>fh,geoGnomonicRaw:()=>lh,geoGraticule:()=>Tl,geoGraticule10:()=>Ml,geoIdentity:()=>ph,geoInterpolate:()=>Sl,geoLength:()=>hl,geoMercator:()=>nh,geoMercatorRaw:()=>th,geoNaturalEarth1:()=>gh,geoNaturalEarth1Raw:()=>dh,geoOrthographic:()=>yh,geoOrthographicRaw:()=>vh,geoPath:()=>Nf,geoProjection:()=>Uf,geoProjectionMutator:()=>Wf,geoRotation:()=>js,geoStereographic:()=>bh,geoStereographicRaw:()=>_h,geoStream:()=>pc,geoTransform:()=>Pf,geoTransverseMercator:()=>wh,geoTransverseMercatorRaw:()=>mh,hcl:()=>Ie,hierarchy:()=>Th,histogram:()=>O,hsl:()=>_e,html:()=>Xp,interpolate:()=>pr,interpolateArray:()=>ur,interpolateBasis:()=>Xe,interpolateBasisClosed:()=>Ze,interpolateCool:()=>Cy,interpolateCubehelix:()=>Ir,interpolateCubehelixDefault:()=>Dy,interpolateCubehelixLong:()=>Rr,interpolateDate:()=>ar,interpolateHcl:()=>Pr,interpolateHclLong:()=>Br,interpolateHsl:()=>Sr,interpolateHslLong:()=>kr,interpolateInferno:()=>Ny,interpolateLab:()=>Or,interpolateMagma:()=>Oy,interpolateNumber:()=>cr,interpolateObject:()=>sr,interpolatePlasma:()=>Py,interpolateRainbow:()=>My,interpolateRgb:()=>er,interpolateRgbBasis:()=>ir,interpolateRgbBasisClosed:()=>or,interpolateRound:()=>dr,interpolateString:()=>hr,interpolateTransformCss:()=>Ar,interpolateTransformSvg:()=>Dr,interpolateViridis:()=>ky,interpolateWarm:()=>Ey,interpolateZoom:()=>Tr,interrupt:()=>fi,interval:()=>ii,isoFormat:()=>fy,isoParse:()=>hy,json:()=>Zp,keys:()=>Su,lab:()=>Se,line:()=>a_,lineRadial:()=>v_,linkHorizontal:()=>C_,linkRadial:()=>M_,linkVertical:()=>T_,local:()=>mt,map:()=>bu,matcher:()=>Et,max:()=>F,mean:()=>I,median:()=>R,merge:()=>j,min:()=>L,mouse:()=>It,namespace:()=>gt,namespaces:()=>dt,nest:()=>mu,now:()=>Kr,pack:()=>Jh,packEnclose:()=>Ph,packSiblings:()=>Yh,pairs:()=>l,partition:()=>ip,path:()=>su,permute:()=>z,pie:()=>f_,pointRadial:()=>__,polygonArea:()=>Ep,polygonCentroid:()=>Cp,polygonContains:()=>Op,polygonHull:()=>kp,polygonLength:()=>Np,precisionFixed:()=>Na,precisionPrefix:()=>Pa,precisionRound:()=>Ba,quadtree:()=>Qu,quantile:()=>N,quantize:()=>jr,queue:()=>zp,radialArea:()=>y_,radialLine:()=>v_,randomBates:()=>Yp,randomExponential:()=>$p,randomIrwinHall:()=>Gp,randomLogNormal:()=>Hp,randomNormal:()=>qp,randomUniform:()=>Wp,range:()=>A,request:()=>Vp,rgb:()=>de,ribbon:()=>gu,scaleBand:()=>sd,scaleIdentity:()=>xd,scaleImplicit:()=>ad,scaleLinear:()=>wd,scaleLog:()=>kd,scaleOrdinal:()=>cd,scalePoint:()=>fd,scalePow:()=>Nd,scaleQuantile:()=>Bd,scaleQuantize:()=>Fd,scaleSequential:()=>By,scaleSqrt:()=>Pd,scaleThreshold:()=>Id,scaleTime:()=>yy,scaleUtc:()=>_y,scan:()=>U,schemeCategory10:()=>my,schemeCategory20:()=>Ay,schemeCategory20b:()=>wy,schemeCategory20c:()=>xy,select:()=>Nn,selectAll:()=>Pn,selection:()=>On,selector:()=>jt,selectorAll:()=>zt,set:()=>Mu,shuffle:()=>W,stack:()=>Lb,stackOffsetDiverging:()=>Ub,stackOffsetExpand:()=>zb,stackOffsetNone:()=>Ib,stackOffsetSilhouette:()=>Wb,stackOffsetWiggle:()=>qb,stackOrderAscending:()=>Hb,stackOrderDescending:()=>Yb,stackOrderInsideOut:()=>$b,stackOrderNone:()=>Rb,stackOrderReverse:()=>Vb,stratify:()=>sp,style:()=>en,sum:()=>q,symbol:()=>$_,symbolCircle:()=>S_,symbolCross:()=>k_,symbolDiamond:()=>P_,symbolSquare:()=>j_,symbolStar:()=>R_,symbolTriangle:()=>z_,symbolWye:()=>G_,symbols:()=>Y_,text:()=>Jp,thresholdFreedmanDiaconis:()=>P,thresholdScott:()=>B,thresholdSturges:()=>k,tickIncrement:()=>M,tickStep:()=>S,ticks:()=>T,timeDay:()=>ig,timeDays:()=>og,timeFormat:()=>cv,timeFormatDefaultLocale:()=>sy,timeFormatLocale:()=>uv,timeFriday:()=>hg,timeFridays:()=>bg,timeHour:()=>ng,timeHours:()=>eg,timeInterval:()=>Ld,timeMillisecond:()=>Ud,timeMilliseconds:()=>Wd,timeMinute:()=>Jd,timeMinutes:()=>Qd,timeMonday:()=>cg,timeMondays:()=>gg,timeMonth:()=>xg,timeMonths:()=>Ag,timeParse:()=>sv,timeSaturday:()=>pg,timeSaturdays:()=>mg,timeSecond:()=>Kd,timeSeconds:()=>Xd,timeSunday:()=>ag,timeSundays:()=>dg,timeThursday:()=>fg,timeThursdays:()=>_g,timeTuesday:()=>sg,timeTuesdays:()=>vg,timeWednesday:()=>lg,timeWednesdays:()=>yg,timeWeek:()=>ag,timeWeeks:()=>dg,timeYear:()=>Eg,timeYears:()=>Cg,timeout:()=>ri,timer:()=>Jr,timerFlush:()=>Qr,touch:()=>Bn,touches:()=>Fn,transition:()=>Bi,transpose:()=>H,tree:()=>vp,treemap:()=>wp,treemapBinary:()=>xp,treemapDice:()=>rp,treemapResquarify:()=>Dp,treemapSlice:()=>yp,treemapSliceDice:()=>Ap,treemapSquarify:()=>mp,tsv:()=>rd,tsvFormat:()=>Hu,tsvFormatRows:()=>Gu,tsvParse:()=>Wu,tsvParseRows:()=>qu,utcDay:()=>Bg,utcDays:()=>Fg,utcFormat:()=>lv,utcFriday:()=>Wg,utcFridays:()=>Kg,utcHour:()=>Og,utcHours:()=>Ng,utcMillisecond:()=>Ud,utcMilliseconds:()=>Wd,utcMinute:()=>Mg,utcMinutes:()=>Sg,utcMonday:()=>jg,utcMondays:()=>Gg,utcMonth:()=>Jg,utcMonths:()=>Qg,utcParse:()=>fv,utcSaturday:()=>qg,utcSaturdays:()=>Xg,utcSecond:()=>Kd,utcSeconds:()=>Xd,utcSunday:()=>Rg,utcSundays:()=>Hg,utcThursday:()=>Ug,utcThursdays:()=>Vg,utcTuesday:()=>Lg,utcTuesdays:()=>Yg,utcWednesday:()=>zg,utcWednesdays:()=>$g,utcWeek:()=>Rg,utcWeeks:()=>Hg,utcYear:()=>nv,utcYears:()=>ev,values:()=>ku,variance:()=>g,version:()=>r,voronoi:()=>Bm,window:()=>Jt,xml:()=>Qp,zip:()=>Y,zoom:()=>$m,zoomIdentity:()=>jm,zoomTransform:()=>Lm});var r="4.11.0";function i(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function o(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}var u=o(i),a=u.right,c=u.left;const s=a;function l(t,n){null==n&&(n=f);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o}function f(t,n){return[t,n]}function h(t,n,e){var r,i,o,u,a=t.length,c=n.length,s=new Array(a*c);for(null==e&&(e=f),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)s[o]=e(u,n[i]);return s}function p(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function d(t){return null===t?NaN:+t}function g(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)}function v(t,n){var e=g(t,n);return e?Math.sqrt(e):e}function y(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var _=Array.prototype,b=_.slice,m=_.map;function w(t){return function(){return t}}function x(t){return t}function A(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var D=Math.sqrt(50),E=Math.sqrt(10),C=Math.sqrt(2);function T(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=M(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o}function M(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=D?10:o>=E?5:o>=C?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=D?10:o>=E?5:o>=C?2:1)}function S(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=D?i*=10:o>=E?i*=5:o>=C&&(i*=2),n<t?-i:i}function k(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function O(){var t=x,n=y,e=k;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var c=n(a),l=c[0],f=c[1],h=e(a,l,f);Array.isArray(h)||(h=S(l,f,h),h=A(Math.ceil(l/h)*h,Math.floor(f/h)*h,h));for(var p=h.length;h[0]<=l;)h.shift(),--p;for(;h[p-1]>f;)h.pop(),--p;var d,g=new Array(p+1);for(i=0;i<=p;++i)(d=g[i]=[]).x0=i>0?h[i-1]:l,d.x1=i<p?h[i]:f;for(i=0;i<u;++i)l<=(o=a[i])&&o<=f&&g[s(h,o,0,p)].push(r[i]);return g}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:w(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:w([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?w(b.call(t)):w(t),r):e},r}function N(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}}function P(t,n,e){return t=m.call(t,d).sort(i),Math.ceil((e-n)/(2*(N(t,.75)-N(t,.25))*Math.pow(t.length,-1/3)))}function B(t,n,e){return Math.ceil((e-n)/(3.5*v(t)*Math.pow(t.length,-1/3)))}function F(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function I(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i}function R(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return N(u.sort(i),.5)}function j(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e}function L(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function z(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function U(t,n){if(e=t.length){var e,r,o=0,u=0,a=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],a)<0||0!==n(a,a))&&(a=r,u=o);return 0===n(a,a)?u:void 0}}function W(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t}function q(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o}function H(t){if(!(i=t.length))return[];for(var n=-1,e=L(t,G),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r}function G(t){return t.length}function Y(){return H(arguments)}var $=Array.prototype.slice;function V(t){return t}var K=1e-6;function X(t){return"translate("+(t+.5)+",0)"}function Z(t){return"translate(0,"+(t+.5)+")"}function J(t){return function(n){return+t(n)}}function Q(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function tt(){return!this.__axis}function nt(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",l=1===t||3===t?X:Z;function f(f){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):V:i,d=Math.max(o,0)+a,g=n.range(),v=+g[0]+.5,y=+g[g.length-1]+.5,_=(n.bandwidth?Q:J)(n.copy()),b=f.selection?f.selection():f,m=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(h,n).order(),x=w.exit(),A=w.enter().append("g").attr("class","tick"),D=w.select("line"),E=w.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),w=w.merge(A),D=D.merge(A.append("line").attr("stroke","#000").attr(s+"2",c*o)),E=E.merge(A.append("text").attr("fill","#000").attr(s,c*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==b&&(m=m.transition(f),w=w.transition(f),D=D.transition(f),E=E.transition(f),x=x.transition(f).attr("opacity",K).attr("transform",(function(t){return isFinite(t=_(t))?l(t):this.getAttribute("transform")})),A.attr("opacity",K).attr("transform",(function(t){var n=this.parentNode.__axis;return l(n&&isFinite(n=n(t))?n:_(t))}))),x.remove(),m.attr("d",4===t||2==t?"M"+c*u+","+v+"H0.5V"+y+"H"+c*u:"M"+v+","+c*u+"V0.5H"+y+"V"+c*u),w.attr("opacity",1).attr("transform",(function(t){return l(_(t))})),D.attr(s+"2",c*o),E.attr(s,c*d).text(p),b.filter(tt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),b.each((function(){this.__axis=_}))}return f.scale=function(t){return arguments.length?(n=t,f):n},f.ticks=function(){return e=$.call(arguments),f},f.tickArguments=function(t){return arguments.length?(e=null==t?[]:$.call(t),f):e.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:$.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(o=u=+t,f):o},f.tickSizeInner=function(t){return arguments.length?(o=+t,f):o},f.tickSizeOuter=function(t){return arguments.length?(u=+t,f):u},f.tickPadding=function(t){return arguments.length?(a=+t,f):a},f}function et(t){return nt(1,t)}function rt(t){return nt(2,t)}function it(t){return nt(3,t)}function ot(t){return nt(4,t)}var ut={value:function(){}};function at(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function st(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function lt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ft(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ut,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=at.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=st(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=ft(r[e],t.name,n);else if(null==n)for(e in r)r[e]=ft(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=lt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const ht=at;var pt="http://www.w3.org/1999/xhtml";const dt={svg:"http://www.w3.org/2000/svg",xhtml:pt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function gt(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),dt.hasOwnProperty(n)?{space:dt[n],local:t}:t}function vt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===pt&&n.documentElement.namespaceURI===pt?n.createElement(t):n.createElementNS(e,t)}}function yt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function _t(t){var n=gt(t);return(n.local?yt:vt)(n)}var bt=0;function mt(){return new wt}function wt(){this._="@"+(++bt).toString(36)}wt.prototype=mt.prototype={constructor:wt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var xt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var At=document.documentElement;if(!At.matches){var Dt=At.webkitMatchesSelector||At.msMatchesSelector||At.mozMatchesSelector||At.oMatchesSelector;xt=function(t){return function(){return Dt.call(this,t)}}}}const Et=xt;var Ct={},Tt=null;function Mt(t,n,e){return t=St(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function St(t,n,e){return function(r){var i=Tt;Tt=r;try{t.call(this,this.__data__,n,e)}finally{Tt=i}}}function kt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Ot(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Nt(t,n,e){var r=Ct.hasOwnProperty(t.type)?Mt:St;return function(i,o,u){var a,c=this.__on,s=r(n,o,u);if(c)for(var l=0,f=c.length;l<f;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function Pt(t,n,e,r){var i=Tt;t.sourceEvent=Tt,Tt=t;try{return n.apply(e,r)}finally{Tt=i}}function Bt(){for(var t,n=Tt;t=n.sourceEvent;)n=t;return n}function Ft(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function It(t){var n=Bt();return n.changedTouches&&(n=n.changedTouches[0]),Ft(t,n)}function Rt(){}function jt(t){return null==t?Rt:function(){return this.querySelector(t)}}function Lt(){return[]}function zt(t){return null==t?Lt:function(){return this.querySelectorAll(t)}}function Ut(t){return new Array(t.length)}function Wt(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function qt(t,n,e,r,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new Wt(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function Ht(t,n,e,r,i,o,u){var a,c,s,l={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(c=n[a])&&(p[a]=s="$"+u.call(c,c.__data__,a,n),s in l?i[a]=c:l[s]=c);for(a=0;a<h;++a)(c=l[s="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],l[s]=null):e[a]=new Wt(t,o[a]);for(a=0;a<f;++a)(c=n[a])&&l[p[a]]===c&&(i[a]=c)}function Gt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Yt(t){return function(){this.removeAttribute(t)}}function $t(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Vt(t,n){return function(){this.setAttribute(t,n)}}function Kt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Xt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Zt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Jt(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Qt(t){return function(){this.style.removeProperty(t)}}function tn(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nn(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function en(t,n){return t.style.getPropertyValue(n)||Jt(t).getComputedStyle(t,null).getPropertyValue(n)}function rn(t){return function(){delete this[t]}}function on(t,n){return function(){this[t]=n}}function un(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function an(t){return t.trim().split(/^|\s+/)}function cn(t){return t.classList||new sn(t)}function sn(t){this._node=t,this._names=an(t.getAttribute("class")||"")}function ln(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function fn(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function hn(t){return function(){ln(this,t)}}function pn(t){return function(){fn(this,t)}}function dn(t,n){return function(){(n.apply(this,arguments)?ln:fn)(this,t)}}function gn(){this.textContent=""}function vn(t){return function(){this.textContent=t}}function yn(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function _n(){this.innerHTML=""}function bn(t){return function(){this.innerHTML=t}}function mn(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function wn(){this.nextSibling&&this.parentNode.appendChild(this)}function xn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function An(){return null}function Dn(){var t=this.parentNode;t&&t.removeChild(this)}function En(t,n,e){var r=Jt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Cn(t,n){return function(){return En(this,t,n)}}function Tn(t,n){return function(){return En(this,t,n.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Ct={mouseenter:"mouseover",mouseleave:"mouseout"})),Wt.prototype={constructor:Wt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},sn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Mn=[null];function Sn(t,n){this._groups=t,this._parents=n}function kn(){return new Sn([[document.documentElement]],Mn)}Sn.prototype=kn.prototype={constructor:Sn,select:function(t){"function"!=typeof t&&(t=jt(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),s[l]=u);return new Sn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=zt(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new Sn(r,i)},filter:function(t){"function"!=typeof t&&(t=Et(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Sn(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each((function(t){d[++l]=t})),d;var e,r=n?Ht:qt,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),l=0;l<u;++l){var f=i[l],h=o[l],p=h.length,d=t.call(f,f&&f.__data__,l,i),g=d.length,v=c[l]=new Array(g),y=a[l]=new Array(g);r(f,h,v,y,s[l]=new Array(p),d,n);for(var _,b,m=0,w=0;m<g;++m)if(_=v[m]){for(m>=w&&(w=m+1);!(b=y[w])&&++w<g;);_._next=b||null}}return(a=new Sn(a,i))._enter=c,a._exit=s,a},enter:function(){return new Sn(this._enter||this._groups.map(Ut),this._parents)},exit:function(){return new Sn(this._exit||this._groups.map(Ut),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Sn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Gt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,s=i[o]=new Array(c),l=0;l<c;++l)(u=a[l])&&(s[l]=u);s.sort(n)}return new Sn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=gt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?$t:Yt:"function"==typeof n?e.local?Zt:Xt:e.local?Kt:Vt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Qt:"function"==typeof n?nn:tn)(t,n,null==e?"":e)):en(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rn:"function"==typeof n?un:on)(t,n)):this.node()[t]},classed:function(t,n){var e=an(t+"");if(arguments.length<2){for(var r=cn(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?dn:n?hn:pn)(e,n))},text:function(t){return arguments.length?this.each(null==t?gn:("function"==typeof t?yn:vn)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?_n:("function"==typeof t?mn:bn)(t)):this.node().innerHTML},raise:function(){return this.each(wn)},lower:function(){return this.each(xn)},append:function(t){var n="function"==typeof t?t:_t(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:_t(t),r=null==n?An:"function"==typeof n?n:jt(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Dn)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=kt(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Nt:Ot,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,l=a.length;s<l;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?Tn:Cn)(t,n))}};const On=kn;function Nn(t){return"string"==typeof t?new Sn([[document.querySelector(t)]],[document.documentElement]):new Sn([[t]],Mn)}function Pn(t){return"string"==typeof t?new Sn([document.querySelectorAll(t)],[document.documentElement]):new Sn([null==t?[]:t],Mn)}function Bn(t,n,e){arguments.length<3&&(e=n,n=Bt().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return Ft(t,r);return null}function Fn(t,n){null==n&&(n=Bt().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=Ft(t,n[e]);return i}function In(){Tt.stopImmediatePropagation()}function Rn(){Tt.preventDefault(),Tt.stopImmediatePropagation()}function jn(t){var n=t.document.documentElement,e=Nn(t).on("dragstart.drag",Rn,!0);"onselectstart"in n?e.on("selectstart.drag",Rn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function Ln(t,n){var e=t.document.documentElement,r=Nn(t).on("dragstart.drag",null);n&&(r.on("click.drag",Rn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function zn(t){return function(){return t}}function Un(t,n,e,r,i,o,u,a,c,s){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=s}function Wn(){return!Tt.button}function qn(){return this.parentNode}function Hn(t){return null==t?{x:Tt.x,y:Tt.y}:t}function Gn(){return"ontouchstart"in this}function Yn(){var t,n,e,r,i=Wn,o=qn,u=Hn,a=Gn,c={},s=ht("start","drag","end"),l=0,f=0;function h(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",v).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var u=b("mouse",o.apply(this,arguments),It,this,arguments);u&&(Nn(Tt.view).on("mousemove.drag",d,!0).on("mouseup.drag",g,!0),jn(Tt.view),In(),e=!1,t=Tt.clientX,n=Tt.clientY,u("start"))}}function d(){if(Rn(),!e){var r=Tt.clientX-t,i=Tt.clientY-n;e=r*r+i*i>f}c.mouse("drag")}function g(){Nn(Tt.view).on("mousemove.drag mouseup.drag",null),Ln(Tt.view,e),Rn(),c.mouse("end")}function v(){if(i.apply(this,arguments)){var t,n,e=Tt.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=b(e[t].identifier,r,Bn,this,arguments))&&(In(),n("start"))}}function y(){var t,n,e=Tt.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(Rn(),n("drag"))}function _(){var t,n,e=Tt.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(In(),n("end"))}function b(t,n,e,r,i){var o,a,f,p=e(n,t),d=s.copy();if(Pt(new Un(h,"beforestart",o,t,l,p[0],p[1],0,0,d),(function(){return null!=(Tt.subject=o=u.apply(r,i))&&(a=o.x-p[0]||0,f=o.y-p[1]||0,!0)})))return function u(s){var g,v=p;switch(s){case"start":c[t]=u,g=l++;break;case"end":delete c[t],--l;case"drag":p=e(n,t),g=l}Pt(new Un(h,s,o,t,g,p[0]+a,p[1]+f,p[0]-v[0],p[1]-v[1],d),d.apply,d,[s,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:zn(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:zn(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:zn(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:zn(!!t),h):a},h.on=function(){var t=s.on.apply(s,arguments);return t===s?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h}function $n(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Vn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Kn(){}Un.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Xn=.7,Zn=1/Xn,Jn="\\s*([+-]?\\d+)\\s*",Qn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ne=/^#([0-9a-f]{3})$/,ee=/^#([0-9a-f]{6})$/,re=new RegExp("^rgb\\("+[Jn,Jn,Jn]+"\\)$"),ie=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),oe=new RegExp("^rgba\\("+[Jn,Jn,Jn,Qn]+"\\)$"),ue=new RegExp("^rgba\\("+[te,te,te,Qn]+"\\)$"),ae=new RegExp("^hsl\\("+[Qn,te,te]+"\\)$"),ce=new RegExp("^hsla\\("+[Qn,te,te,Qn]+"\\)$"),se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function le(t){var n;return t=(t+"").trim().toLowerCase(),(n=ne.exec(t))?new ge((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=ee.exec(t))?fe(parseInt(n[1],16)):(n=re.exec(t))?new ge(n[1],n[2],n[3],1):(n=ie.exec(t))?new ge(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=oe.exec(t))?he(n[1],n[2],n[3],n[4]):(n=ue.exec(t))?he(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ae.exec(t))?ve(n[1],n[2]/100,n[3]/100,1):(n=ce.exec(t))?ve(n[1],n[2]/100,n[3]/100,n[4]):se.hasOwnProperty(t)?fe(se[t]):"transparent"===t?new ge(NaN,NaN,NaN,0):null}function fe(t){return new ge(t>>16&255,t>>8&255,255&t,1)}function he(t,n,e,r){return r<=0&&(t=n=e=NaN),new ge(t,n,e,r)}function pe(t){return t instanceof Kn||(t=le(t)),t?new ge((t=t.rgb()).r,t.g,t.b,t.opacity):new ge}function de(t,n,e,r){return 1===arguments.length?pe(t):new ge(t,n,e,null==r?1:r)}function ge(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function ve(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new be(t,n,e,r)}function ye(t){if(t instanceof be)return new be(t.h,t.s,t.l,t.opacity);if(t instanceof Kn||(t=le(t)),!t)return new be;if(t instanceof be)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new be(u,a,c,t.opacity)}function _e(t,n,e,r){return 1===arguments.length?ye(t):new be(t,n,e,null==r?1:r)}function be(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function me(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}$n(Kn,le,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),$n(ge,de,Vn(Kn,{brighter:function(t){return t=null==t?Zn:Math.pow(Zn,t),new ge(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?Xn:Math.pow(Xn,t),new ge(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),$n(be,_e,Vn(Kn,{brighter:function(t){return t=null==t?Zn:Math.pow(Zn,t),new be(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Xn:Math.pow(Xn,t),new be(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new ge(me(t>=240?t-240:t+120,i,r),me(t,i,r),me(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var we=Math.PI/180,xe=180/Math.PI,Ae=.95047,De=1.08883,Ee=4/29,Ce=6/29,Te=3*Ce*Ce;function Me(t){if(t instanceof ke)return new ke(t.l,t.a,t.b,t.opacity);if(t instanceof Re){var n=t.h*we;return new ke(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof ge||(t=pe(t));var e=Be(t.r),r=Be(t.g),i=Be(t.b),o=Oe((.4124564*e+.3575761*r+.1804375*i)/Ae),u=Oe((.2126729*e+.7151522*r+.072175*i)/1);return new ke(116*u-16,500*(o-u),200*(u-Oe((.0193339*e+.119192*r+.9503041*i)/De)),t.opacity)}function Se(t,n,e,r){return 1===arguments.length?Me(t):new ke(t,n,e,null==r?1:r)}function ke(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Oe(t){return t>.008856451679035631?Math.pow(t,1/3):t/Te+Ee}function Ne(t){return t>Ce?t*t*t:Te*(t-Ee)}function Pe(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Be(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Fe(t){if(t instanceof Re)return new Re(t.h,t.c,t.l,t.opacity);t instanceof ke||(t=Me(t));var n=Math.atan2(t.b,t.a)*xe;return new Re(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ie(t,n,e,r){return 1===arguments.length?Fe(t):new Re(t,n,e,null==r?1:r)}function Re(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}$n(ke,Se,Vn(Kn,{brighter:function(t){return new ke(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new ke(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=1*Ne(t),new ge(Pe(3.2404542*(n=Ae*Ne(n))-1.5371385*t-.4985314*(e=De*Ne(e))),Pe(-.969266*n+1.8760108*t+.041556*e),Pe(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),$n(Re,Ie,Vn(Kn,{brighter:function(t){return new Re(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Re(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Me(this).rgb()}}));var je=-.14861,Le=1.78277,ze=-.29227,Ue=-.90649,We=1.97294,qe=We*Ue,He=We*Le,Ge=Le*ze-Ue*je;function Ye(t){if(t instanceof Ve)return new Ve(t.h,t.s,t.l,t.opacity);t instanceof ge||(t=pe(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Ge*r+qe*n-He*e)/(Ge+qe-He),o=r-i,u=(We*(e-i)-ze*o)/Ue,a=Math.sqrt(u*u+o*o)/(We*i*(1-i)),c=a?Math.atan2(u,o)*xe-120:NaN;return new Ve(c<0?c+360:c,a,i,t.opacity)}function $e(t,n,e,r){return 1===arguments.length?Ye(t):new Ve(t,n,e,null==r?1:r)}function Ve(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Ke(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}function Xe(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return Ke((e-r/n)*n,u,i,o,a)}}function Ze(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return Ke((e-r/n)*n,i,o,u,a)}}function Je(t){return function(){return t}}function Qe(t,n){return function(e){return t+e*n}}function tr(t,n){var e=n-t;return e?Qe(t,e>180||e<-180?e-360*Math.round(e/360):e):Je(isNaN(t)?n:t)}function nr(t,n){var e=n-t;return e?Qe(t,e):Je(isNaN(t)?n:t)}$n(Ve,$e,Vn(Kn,{brighter:function(t){return t=null==t?Zn:Math.pow(Zn,t),new Ve(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Xn:Math.pow(Xn,t),new Ve(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*we,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new ge(255*(n+e*(je*r+Le*i)),255*(n+e*(ze*r+Ue*i)),255*(n+e*(We*r)),this.opacity)}}));const er=function t(n){var e=function(t){return 1==(t=+t)?nr:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Je(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=de(t)).r,(n=de(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=nr(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function rr(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=de(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var ir=rr(Xe),or=rr(Ze);function ur(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),u=new Array(r);for(e=0;e<i;++e)o[e]=pr(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}function ar(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}function cr(t,n){return n-=t=+t,function(e){return t+n*e}}function sr(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=pr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var lr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,fr=new RegExp(lr.source,"g");function hr(t,n){var e,r,i,o=lr.lastIndex=fr.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=lr.exec(t))&&(r=fr.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:cr(e,r)})),o=fr.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})}function pr(t,n){var e,r=typeof n;return null==n||"boolean"===r?Je(n):("number"===r?cr:"string"===r?(e=le(n))?(n=e,er):hr:n instanceof le?er:n instanceof Date?ar:Array.isArray(n)?ur:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?sr:cr)(t,n)}function dr(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var gr,vr,yr,_r,br=180/Math.PI,mr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function wr(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*br,skewX:Math.atan(c)*br,scaleX:u,scaleY:a}}function xr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:cr(t,i)},{i:c-2,x:cr(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:cr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:cr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:cr(t,e)},{i:a-2,x:cr(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var Ar=xr((function(t){return"none"===t?mr:(gr||(gr=document.createElement("DIV"),vr=document.documentElement,yr=document.defaultView),gr.style.transform=t,t=yr.getComputedStyle(vr.appendChild(gr),null).getPropertyValue("transform"),vr.removeChild(gr),wr(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Dr=xr((function(t){return null==t?mr:(_r||(_r=document.createElementNS("http://www.w3.org/2000/svg","g")),_r.setAttribute("transform",t),(t=_r.transform.baseVal.consolidate())?wr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):mr)}),", ",")",")"),Er=Math.SQRT2;function Cr(t){return((t=Math.exp(t))+1/t)/2}function Tr(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],s=n[2],l=a-i,f=c-o,h=l*l+f*f;if(h<1e-12)r=Math.log(s/u)/Er,e=function(t){return[i+t*l,o+t*f,u*Math.exp(Er*t*r)]};else{var p=Math.sqrt(h),d=(s*s-u*u+4*h)/(2*u*2*p),g=(s*s-u*u-4*h)/(2*s*2*p),v=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(g*g+1)-g);r=(y-v)/Er,e=function(t){var n,e=t*r,a=Cr(v),c=u/(2*p)*(a*(n=Er*e+v,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(v));return[i+c*l,o+c*f,u*a/Cr(Er*e+v)]}}return e.duration=1e3*r,e}function Mr(t){return function(n,e){var r=t((n=_e(n)).h,(e=_e(e)).h),i=nr(n.s,e.s),o=nr(n.l,e.l),u=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Sr=Mr(tr);var kr=Mr(nr);function Or(t,n){var e=nr((t=Se(t)).l,(n=Se(n)).l),r=nr(t.a,n.a),i=nr(t.b,n.b),o=nr(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function Nr(t){return function(n,e){var r=t((n=Ie(n)).h,(e=Ie(e)).h),i=nr(n.c,e.c),o=nr(n.l,e.l),u=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Pr=Nr(tr);var Br=Nr(nr);function Fr(t){return function n(e){function r(n,r){var i=t((n=$e(n)).h,(r=$e(r)).h),o=nr(n.s,r.s),u=nr(n.l,r.l),a=nr(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}const Ir=Fr(tr);var Rr=Fr(nr);function jr(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}var Lr,zr,Ur=0,Wr=0,qr=0,Hr=0,Gr=0,Yr=0,$r="object"==typeof performance&&performance.now?performance:Date,Vr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Kr(){return Gr||(Vr(Xr),Gr=$r.now()+Yr)}function Xr(){Gr=0}function Zr(){this._call=this._time=this._next=null}function Jr(t,n,e){var r=new Zr;return r.restart(t,n,e),r}function Qr(){Kr(),++Ur;for(var t,n=Lr;n;)(t=Gr-n._time)>=0&&n._call.call(null,t),n=n._next;--Ur}function ti(){Gr=(Hr=$r.now())+Yr,Ur=Wr=0;try{Qr()}finally{Ur=0,function(){for(var t,n,e=Lr,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Lr=n);zr=t,ei(r)}(),Gr=0}}function ni(){var t=$r.now(),n=t-Hr;n>1e3&&(Yr-=n,Hr=t)}function ei(t){Ur||(Wr&&(Wr=clearTimeout(Wr)),t-Gr>24?(t<1/0&&(Wr=setTimeout(ti,t-$r.now()-Yr)),qr&&(qr=clearInterval(qr))):(qr||(Hr=$r.now(),qr=setInterval(ni,1e3)),Ur=1,Vr(ti)))}function ri(t,n,e){var r=new Zr;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}function ii(t,n,e){var r=new Zr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Kr():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)}Zr.prototype=Jr.prototype={constructor:Zr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Kr():+e)+(null==n?0:+n),this._next||zr===this||(zr?zr._next=this:Lr=this,zr=this),this._call=t,this._time=e,ei()},stop:function(){this._call&&(this._call=null,this._time=1/0,ei())}};var oi=ht("start","end","interrupt"),ui=[];function ai(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,l,f,h;if(1!==e.state)return a();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return ri(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),delete i[s])}if(ri((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(null,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Jr((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:oi,tween:ui,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function ci(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>0)throw new Error("too late");return e}function si(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>2)throw new Error("too late");return e}function li(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function fi(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}function hi(t,n){var e,r;return function(){var i=si(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function pi(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=si(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}}function di(t,n,e){var r=t._id;return t.each((function(){var t=si(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return li(t,r).value[n]}}function gi(t,n){var e;return("number"==typeof n?cr:n instanceof le?er:(e=le(n))?(n=e,er):hr)(t,n)}function vi(t){return function(){this.removeAttribute(t)}}function yi(t){return function(){this.removeAttributeNS(t.space,t.local)}}function _i(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function bi(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function mi(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttribute(t))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttribute(t)}}function wi(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttributeNS(t.space,t.local))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttributeNS(t.space,t.local)}}function xi(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function Ai(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function Di(t,n){return function(){ci(this,t).delay=+n.apply(this,arguments)}}function Ei(t,n){return n=+n,function(){ci(this,t).delay=n}}function Ci(t,n){return function(){si(this,t).duration=+n.apply(this,arguments)}}function Ti(t,n){return n=+n,function(){si(this,t).duration=n}}function Mi(t,n){if("function"!=typeof n)throw new Error;return function(){si(this,t).ease=n}}function Si(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?ci:si;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var ki=On.prototype.constructor;function Oi(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}var Ni=0;function Pi(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Bi(t){return On().transition(t)}function Fi(){return++Ni}var Ii=On.prototype;function Ri(t){return+t}function ji(t){return t*t}function Li(t){return t*(2-t)}function zi(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function Ui(t){return t*t*t}function Wi(t){return--t*t*t+1}function qi(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Pi.prototype=Bi.prototype={constructor:Pi,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=jt(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=r[u],l=s.length,f=o[u]=new Array(l),h=0;h<l;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),f[h]=c,ai(f[h],n,e,h,f,li(a,e)));return new Pi(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=zt(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,s=r[a],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),d=li(c,e),g=0,v=p.length;g<v;++g)(h=p[g])&&ai(h,n,e,g,p,d);o.push(p),u.push(c)}return new Pi(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=Et(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Pi(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Pi(u,this._parents,this._name,this._id)},selection:function(){return new ki(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Fi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var l=li(u,n);ai(u,t,e,s,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Pi(r,this._parents,t,e)},call:Ii.call,nodes:Ii.nodes,node:Ii.node,size:Ii.size,empty:Ii.empty,each:Ii.each,on:function(t,n){var e=this._id;return arguments.length<2?li(this.node(),e).on.on(t):this.each(Si(e,t,n))},attr:function(t,n){var e=gt(t),r="transform"===e?Dr:gi;return this.attrTween(t,"function"==typeof n?(e.local?wi:mi)(e,r,di(this,"attr."+t,n)):null==n?(e.local?yi:vi)(e):(e.local?bi:_i)(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=gt(t);return this.tween(e,(r.local?xi:Ai)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ar:gi;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=en(this,t),u=(this.style.removeProperty(t),en(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var u=en(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=en(this,t)),u===a?null:u===r&&a===i?o:o=n(r=u,i=a)}}(t,r,di(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=en(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Oi(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(di(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=li(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?hi:pi)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Di:Ei)(n,t)):li(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ci:Ti)(n,t)):li(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Mi(n,t)):li(this.node(),n).ease}};var Hi=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Gi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Yi=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),$i=Math.PI,Vi=$i/2;function Ki(t){return 1-Math.cos(t*Vi)}function Xi(t){return Math.sin(t*Vi)}function Zi(t){return(1-Math.cos($i*t))/2}function Ji(t){return Math.pow(2,10*t-10)}function Qi(t){return 1-Math.pow(2,-10*t)}function to(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function no(t){return 1-Math.sqrt(1-t*t)}function eo(t){return Math.sqrt(1- --t*t)}function ro(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var io=7.5625;function oo(t){return 1-uo(1-t)}function uo(t){return(t=+t)<.36363636363636365?io*t*t:t<.7272727272727273?io*(t-=.5454545454545454)*t+.75:t<.9090909090909091?io*(t-=.8181818181818182)*t+.9375:io*(t-=.9545454545454546)*t+.984375}function ao(t){return((t*=2)<=1?1-uo(1-t):uo(t-1)+1)/2}var co=1.70158,so=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(co),lo=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(co),fo=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(co),ho=2*Math.PI,po=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),go=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),vo=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),yo={time:null,delay:0,duration:250,ease:qi};function _o(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return yo.time=Kr(),yo;return e}On.prototype.interrupt=function(t){return this.each((function(){fi(this,t)}))},On.prototype.transition=function(t){var n,e;t instanceof Pi?(n=t._id,t=t._name):(n=Fi(),(e=yo).time=Kr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)(u=a[s])&&ai(u,t,n,s,a,e||_o(u,n));return new Pi(r,this._parents,t,n)};var bo=[null];function mo(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Pi([[t]],bo,n,+r);return null}function wo(t){return function(){return t}}function xo(t,n,e){this.target=t,this.type=n,this.selection=e}function Ao(){Tt.stopImmediatePropagation()}function Do(){Tt.preventDefault(),Tt.stopImmediatePropagation()}var Eo={name:"drag"},Co={name:"space"},To={name:"handle"},Mo={name:"center"},So={name:"x",handles:["e","w"].map(Ro),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},ko={name:"y",handles:["n","s"].map(Ro),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Oo={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Ro),input:function(t){return t},output:function(t){return t}},No={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Po={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Bo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Fo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Io={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Ro(t){return{type:t}}function jo(){return!Tt.button}function Lo(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function zo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Uo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Wo(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function qo(){return Yo(So)}function Ho(){return Yo(ko)}function Go(){return Yo(Oo)}function Yo(t){var n,e=Lo,r=jo,i=ht(u,"start","brush","end"),o=6;function u(n){var e=n.property("__brush",f).selectAll(".overlay").data([Ro("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",No.overlay).merge(e).each((function(){var t=zo(this).extent;Nn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Ro("selection")]).enter().append("rect").attr("class","selection").attr("cursor",No.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return No[t.type]})),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function a(){var t=Nn(this),n=zo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new s(t,n)}function s(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function l(){if(Tt.touches){if(Tt.changedTouches.length<Tt.touches.length)return Do()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,u,s,l,f,h,p,d,g,v,y,_=this,b=Tt.target.__data__.type,m="selection"===(Tt.metaKey?b="overlay":b)?Eo:Tt.altKey?Mo:To,w=t===ko?null:Fo[b],x=t===So?null:Io[b],A=zo(_),D=A.extent,E=A.selection,C=D[0][0],T=D[0][1],M=D[1][0],S=D[1][1],k=w&&x&&Tt.shiftKey,O=It(_),N=O,P=c(_,arguments).beforestart();"overlay"===b?A.selection=E=[[e=t===ko?C:O[0],o=t===So?T:O[1]],[s=t===ko?M:e,f=t===So?S:o]]:(e=E[0][0],o=E[0][1],s=E[1][0],f=E[1][1]),i=e,u=o,l=s,h=f;var B=Nn(_).attr("pointer-events","none"),F=B.selectAll(".overlay").attr("cursor",No[b]);if(Tt.touches)B.on("touchmove.brush",R,!0).on("touchend.brush touchcancel.brush",L,!0);else{var I=Nn(Tt.view).on("keydown.brush",z,!0).on("keyup.brush",U,!0).on("mousemove.brush",R,!0).on("mouseup.brush",L,!0);jn(Tt.view)}Ao(),fi(_),a.call(_),P.start()}function R(){var t=It(_);!k||v||y||(Math.abs(t[0]-N[0])>Math.abs(t[1]-N[1])?y=!0:v=!0),N=t,g=!0,Do(),j()}function j(){var t;switch(p=N[0]-O[0],d=N[1]-O[1],m){case Co:case Eo:w&&(p=Math.max(C-e,Math.min(M-s,p)),i=e+p,l=s+p),x&&(d=Math.max(T-o,Math.min(S-f,d)),u=o+d,h=f+d);break;case To:w<0?(p=Math.max(C-e,Math.min(M-e,p)),i=e+p,l=s):w>0&&(p=Math.max(C-s,Math.min(M-s,p)),i=e,l=s+p),x<0?(d=Math.max(T-o,Math.min(S-o,d)),u=o+d,h=f):x>0&&(d=Math.max(T-f,Math.min(S-f,d)),u=o,h=f+d);break;case Mo:w&&(i=Math.max(C,Math.min(M,e-p*w)),l=Math.max(C,Math.min(M,s+p*w))),x&&(u=Math.max(T,Math.min(S,o-d*x)),h=Math.max(T,Math.min(S,f+d*x)))}l<i&&(w*=-1,t=e,e=s,s=t,t=i,i=l,l=t,b in Po&&F.attr("cursor",No[b=Po[b]])),h<u&&(x*=-1,t=o,o=f,f=t,t=u,u=h,h=t,b in Bo&&F.attr("cursor",No[b=Bo[b]])),A.selection&&(E=A.selection),v&&(i=E[0][0],l=E[1][0]),y&&(u=E[0][1],h=E[1][1]),E[0][0]===i&&E[0][1]===u&&E[1][0]===l&&E[1][1]===h||(A.selection=[[i,u],[l,h]],a.call(_),P.brush())}function L(){if(Ao(),Tt.touches){if(Tt.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),B.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Ln(Tt.view,g),I.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);B.attr("pointer-events","all"),F.attr("cursor",No.overlay),A.selection&&(E=A.selection),Uo(E)&&(A.selection=null,a.call(_)),P.end()}function z(){switch(Tt.keyCode){case 16:k=w&&x;break;case 18:m===To&&(w&&(s=l-p*w,e=i+p*w),x&&(f=h-d*x,o=u+d*x),m=Mo,j());break;case 32:m!==To&&m!==Mo||(w<0?s=l-p:w>0&&(e=i-p),x<0?f=h-d:x>0&&(o=u-d),m=Co,F.attr("cursor",No.selection),j());break;default:return}Do()}function U(){switch(Tt.keyCode){case 16:k&&(v=y=k=!1,j());break;case 18:m===Mo&&(w<0?s=l:w>0&&(e=i),x<0?f=h:x>0&&(o=u),m=To,j());break;case 32:m===Co&&(Tt.altKey?(w&&(s=l-p*w,e=i+p*w),x&&(f=h-d*x,o=u+d*x),m=Mo):(w<0?s=l:w>0&&(e=i),x<0?f=h:x>0&&(o=u),m=To),F.attr("cursor",No[b]),j());break;default:return}Do()}}function f(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),s=pr(o,u);function l(t){r.selection=1===t&&Uo(u)?null:s(t),a.call(n),i.brush()}return o&&u?l:l(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=c(n,r).beforestart();fi(n),i.selection=null==o||Uo(o)?null:o,a.call(n),u.start().brush().end()}))},s.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){Pt(new xo(u,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:wo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:wo(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.on=function(){var t=i.on.apply(i,arguments);return t===i?u:t},u}var $o=Math.cos,Vo=Math.sin,Ko=Math.PI,Xo=Ko/2,Zo=2*Ko,Jo=Math.max;function Qo(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function tu(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,s,l,f=i.length,h=[],p=A(f),d=[],g=[],v=g.groups=new Array(f),y=new Array(f*f);for(o=0,s=-1;++s<f;){for(u=0,l=-1;++l<f;)u+=i[s][l];h.push(u),d.push(A(f)),o+=u}for(n&&p.sort((function(t,e){return n(h[t],h[e])})),e&&d.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=Jo(0,Zo-t*f)/o)?t:Zo/f,u=0,s=-1;++s<f;){for(a=u,l=-1;++l<f;){var _=p[s],b=d[_][l],m=i[_][b],w=u,x=u+=m*o;y[b*f+_]={index:_,subindex:b,startAngle:w,endAngle:x,value:m}}v[_]={index:_,startAngle:a,endAngle:u,value:h[_]},u+=c}for(s=-1;++s<f;)for(l=s-1;++l<f;){var D=y[l*f+s],E=y[s*f+l];(D.value||E.value)&&g.push(D.value<E.value?{source:E,target:D}:{source:D,target:E})}return r?g.sort(r):g}return i.padAngle=function(n){return arguments.length?(t=Jo(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Qo(t))._=t,i):r&&r._},i}var nu=Array.prototype.slice;function eu(t){return function(){return t}}var ru=Math.PI,iu=2*ru,ou=1e-6,uu=iu-ou;function au(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function cu(){return new au}au.prototype=cu.prototype={constructor:au,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,s=o-t,l=u-n,f=s*s+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>ou)if(Math.abs(l*a-c*s)>ou&&i){var h=e-o,p=r-u,d=a*a+c*c,g=h*h+p*p,v=Math.sqrt(d),y=Math.sqrt(f),_=i*Math.tan((ru-Math.acos((d+f-g)/(2*v*y)))/2),b=_/y,m=_/v;Math.abs(b-1)>ou&&(this._+="L"+(t+b*s)+","+(n+b*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>s*p)+","+(this._x1=t+m*a)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,s=n+a,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>ou||Math.abs(this._y1-s)>ou)&&(this._+="L"+c+","+s),e&&(f<0&&(f=f%iu+iu),f>uu?this._+="A"+e+","+e+",0,1,"+l+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=c)+","+(this._y1=s):f>ou&&(this._+="A"+e+","+e+",0,"+ +(f>=ru)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const su=cu;function lu(t){return t.source}function fu(t){return t.target}function hu(t){return t.radius}function pu(t){return t.startAngle}function du(t){return t.endAngle}function gu(){var t=lu,n=fu,e=hu,r=pu,i=du,o=null;function u(){var u,a=nu.call(arguments),c=t.apply(this,a),s=n.apply(this,a),l=+e.apply(this,(a[0]=c,a)),f=r.apply(this,a)-Xo,h=i.apply(this,a)-Xo,p=l*$o(f),d=l*Vo(f),g=+e.apply(this,(a[0]=s,a)),v=r.apply(this,a)-Xo,y=i.apply(this,a)-Xo;if(o||(o=u=su()),o.moveTo(p,d),o.arc(0,0,l,f,h),f===v&&h===y||(o.quadraticCurveTo(0,0,g*$o(v),g*Vo(v)),o.arc(0,0,g,v,y)),o.quadraticCurveTo(0,0,p,d),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:eu(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:eu(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:eu(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}var vu="$";function yu(){}function _u(t,n){var e=new yu;if(t instanceof yu)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}yu.prototype=_u.prototype={constructor:yu,has:function(t){return vu+t in this},get:function(t){return this[vu+t]},set:function(t,n){return this[vu+t]=n,this},remove:function(t){var n=vu+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===vu&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===vu&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===vu&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===vu&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===vu&&++t;return t},empty:function(){for(var t in this)if(t[0]===vu)return!1;return!0},each:function(t){for(var n in this)n[0]===vu&&t(this[n],n.slice(1),this)}};const bu=_u;function mu(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,s,l,f=-1,h=e.length,p=r[i++],d=bu(),g=u();++f<h;)(l=d.get(c=p(s=e[f])+""))?l.push(s):d.set(c,[s]);return d.each((function(t,n){a(g,n,o(t,i,u,a))})),g}function u(t,e){if(++e>r.length)return t;var o,a=i[e-1];return null!=n&&e>=r.length?o=t.entries():(o=[],t.each((function(t,n){o.push({key:n,values:u(t,e)})}))),null!=a?o.sort((function(t,n){return a(t.key,n.key)})):o}return e={object:function(t){return o(t,0,wu,xu)},map:function(t){return o(t,0,Au,Du)},entries:function(t){return u(o(t,0,Au,Du),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function wu(){return{}}function xu(t,n,e){t[n]=e}function Au(){return bu()}function Du(t,n,e){t.set(n,e)}function Eu(){}var Cu=bu.prototype;function Tu(t,n){var e=new Eu;if(t instanceof Eu)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Eu.prototype=Tu.prototype={constructor:Eu,has:Cu.has,add:function(t){return this[vu+(t+="")]=t,this},remove:Cu.remove,clear:Cu.clear,values:Cu.keys,size:Cu.size,empty:Cu.empty,each:Cu.each};const Mu=Tu;function Su(t){var n=[];for(var e in t)n.push(e);return n}function ku(t){var n=[];for(var e in t)n.push(t[e]);return n}function Ou(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var Nu={},Pu={};function Bu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function Fu(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,s=!1;function l(){if(c)return Pu;if(s)return s=!1,Nu;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?c=!0:10===(r=t.charCodeAt(u++))?s=!0:13===r&&(s=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))s=!0;else if(13===r)s=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=l())!==Pu;){for(var f=[];r!==Nu&&r!==Pu;)f.push(r),r=l();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Bu(t);return function(r,i){return n(e(r),i,t)}}(t,n):Bu(t)}));return o.columns=i,o},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}(n)),[e.map(o).join(t)].concat(n.map((function(n){return e.map((function(t){return o(n[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}}var Iu=Fu(","),Ru=Iu.parse,ju=Iu.parseRows,Lu=Iu.format,zu=Iu.formatRows,Uu=Fu("\t"),Wu=Uu.parse,qu=Uu.parseRows,Hu=Uu.format,Gu=Uu.formatRows;function Yu(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}function $u(t){return function(){return t}}function Vu(){return 1e-6*(Math.random()-.5)}function Ku(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,s,l,f,h,p=t._root,d={data:r},g=t._x0,v=t._y0,y=t._x1,_=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((s=n>=(o=(g+y)/2))?g=o:y=o,(l=e>=(u=(v+_)/2))?v=u:_=u,i=p,!(p=p[f=l<<1|s]))return i[f]=d,t;if(a=+t._x.call(null,p.data),c=+t._y.call(null,p.data),n===a&&e===c)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(s=n>=(o=(g+y)/2))?g=o:y=o,(l=e>=(u=(v+_)/2))?v=u:_=u}while((f=l<<1|s)==(h=(c>=u)<<1|a>=o));return i[h]=p,i[f]=d,t}function Xu(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function Zu(t){return t[0]}function Ju(t){return t[1]}function Qu(t,n,e){var r=new ta(null==n?Zu:n,null==e?Ju:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ta(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function na(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var ea=Qu.prototype=ta.prototype;function ra(t){return t.x+t.vx}function ia(t){return t.y+t.vy}function oa(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,s,l,f,h=n.length,p=0;p<i;++p)for(o=Qu(n,ra,ia).visitAfter(u),t=0;t<h;++t)a=n[t],l=e[a.index],f=l*l,c=a.x+a.vx,s=a.y+a.vy,o.visit(d);function d(t,n,e,i,o){var u=t.data,h=t.r,p=l+h;if(!u)return n>c+p||i<c-p||e>s+p||o<s-p;if(u.index>a.index){var d=c-u.x-u.vx,g=s-u.y-u.vy,v=d*d+g*g;v<p*p&&(0===d&&(v+=(d=Vu())*d),0===g&&(v+=(g=Vu())*g),v=(p-(v=Math.sqrt(v)))/v*r,a.vx+=(d*=v)*(p=(h*=h)/(f+h)),a.vy+=(g*=v)*p,u.vx-=d*(p=1-p),u.vy-=g*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=$u(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),a(),o):t},o}function ua(t){return t.index}function aa(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function ca(t){var n,e,r,i,o,u=ua,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=$u(30),s=1;function l(r){for(var i=0,u=t.length;i<s;++i)for(var a,c,l,f,h,p,d,g=0;g<u;++g)c=(a=t[g]).source,f=(l=a.target).x+l.vx-c.x-c.vx||Vu(),h=l.y+l.vy-c.y-c.vy||Vu(),f*=p=((p=Math.sqrt(f*f+h*h))-e[g])/p*r*n[g],h*=p,l.vx-=f*(d=o[g]),l.vy-=h*d,c.vx+=f*(d=1-d),c.vy+=h*d}function f(){if(r){var a,c,s=r.length,l=t.length,f=bu(r,u);for(a=0,i=new Array(s);a<l;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=aa(f,c.source)),"object"!=typeof c.target&&(c.target=aa(f,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(l);a<l;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(l),h(),e=new Array(l),p()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(n){return arguments.length?(t=n,f(),l):t},l.id=function(t){return arguments.length?(u=t,l):u},l.iterations=function(t){return arguments.length?(s=+t,l):s},l.strength=function(t){return arguments.length?(a="function"==typeof t?t:$u(+t),h(),l):a},l.distance=function(t){return arguments.length?(c="function"==typeof t?t:$u(+t),p(),l):c},l}function sa(t){return t.x}function la(t){return t.y}ea.copy=function(){var t,n,e=new ta(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=na(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=na(n));return e},ea.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Ku(this.cover(n,e),n,e,t)},ea.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,s=1/0,l=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>l&&(l=r),i<s&&(s=i),i>f&&(f=i));for(l<c&&(c=this._x0,l=this._x1),f<s&&(s=this._y0,f=this._y1),this.cover(c,s).cover(l,f),e=0;e<o;++e)Ku(this,u[e],a[e],t[e]);return this},ea.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var u,a,c=i-e,s=this._root;switch(a=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{(u=new Array(4))[a]=s,s=u}while(o=r+(c*=2),t>(i=e+c)||n>o);break;case 1:do{(u=new Array(4))[a]=s,s=u}while(o=r+(c*=2),(e=i-c)>t||n>o);break;case 2:do{(u=new Array(4))[a]=s,s=u}while(r=o-(c*=2),t>(i=e+c)||r>n);break;case 3:do{(u=new Array(4))[a]=s,s=u}while(r=o-(c*=2),(e=i-c)>t||r>n)}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},ea.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},ea.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ea.find=function(t,n,e){var r,i,o,u,a,c,s,l=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new Xu(g,l,f,h,p)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,p=n+e,e*=e);c=d.pop();)if(!(!(g=c.node)||(i=c.x0)>h||(o=c.y0)>p||(u=c.x1)<l||(a=c.y1)<f))if(g.length){var v=(i+u)/2,y=(o+a)/2;d.push(new Xu(g[3],v,y,u,a),new Xu(g[2],i,y,v,a),new Xu(g[1],v,o,u,y),new Xu(g[0],i,o,v,y)),(s=(n>=y)<<1|t>=v)&&(c=d[d.length-1],d[d.length-1]=d[d.length-1-s],d[d.length-1-s]=c)}else{var _=t-+this._x.call(null,g.data),b=n-+this._y.call(null,g.data),m=_*_+b*b;if(m<e){var w=Math.sqrt(e=m);l=t-w,f=n-w,h=t+w,p=n+w,r=g.data}}return r},ea.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,s,l,f,h,p=this._root,d=this._x0,g=this._y0,v=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(a=(d+v)/2))?d=a:v=a,(l=u>=(c=(g+y)/2))?g=c:y=c,n=p,!(p=p[f=l<<1|s]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},ea.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},ea.root=function(){return this._root},ea.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},ea.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new Xu(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var s=(r+o)/2,l=(i+u)/2;(e=c[3])&&a.push(new Xu(e,s,l,o,u)),(e=c[2])&&a.push(new Xu(e,r,l,s,u)),(e=c[1])&&a.push(new Xu(e,s,i,o,l)),(e=c[0])&&a.push(new Xu(e,r,i,s,l))}return this},ea.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Xu(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,s=n.y1,l=(u+c)/2,f=(a+s)/2;(o=i[0])&&e.push(new Xu(o,u,a,l,f)),(o=i[1])&&e.push(new Xu(o,l,a,c,f)),(o=i[2])&&e.push(new Xu(o,u,f,l,s)),(o=i[3])&&e.push(new Xu(o,l,f,c,s))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},ea.x=function(t){return arguments.length?(this._x=t,this):this._x},ea.y=function(t){return arguments.length?(this._y=t,this):this._y};var fa,ha=Math.PI*(3-Math.sqrt(5));function pa(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=bu(),c=Jr(l),s=ht("tick","end");function l(){f(),s.call("tick",n),e<r&&(c.stop(),s.call("end",n))}function f(){var n,r,c=t.length;for(e+=(o-e)*i,a.each((function(t){t(e)})),n=0;n<c;++n)null==(r=t[n]).fx?r.x+=r.vx*=u:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=u:(r.y=r.fy,r.vy=0)}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*ha;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:f,restart:function(){return c.restart(l),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,s=0,l=t.length;for(null==r?r=1/0:r*=r,s=0;s<l;++s)(u=(i=n-(a=t[s]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(s.on(t,e),n):s.on(t)}}}function da(){var t,n,e,r,i=$u(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=Qu(t,sa,la).visitAfter(l);for(e=r,i=0;i<o;++i)n=t[i],u.visit(f)}function s(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function l(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function f(t,i,c,s){if(!t.value)return!0;var l=t.x-n.x,f=t.y-n.y,h=s-i,p=l*l+f*f;if(h*h/a<p)return p<u&&(0===l&&(p+=(l=Vu())*l),0===f&&(p+=(f=Vu())*f),p<o&&(p=Math.sqrt(o*p)),n.vx+=l*t.value*e/p,n.vy+=f*t.value*e/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===l&&(p+=(l=Vu())*l),0===f&&(p+=(f=Vu())*f),p<o&&(p=Math.sqrt(o*p)));do{t.data!==n&&(h=r[t.data.index]*e/p,n.vx+=l*h,n.vy+=f*h)}while(t=t.next)}}return c.initialize=function(n){t=n,s()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:$u(+t),s(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c}function ga(t,n,e){var r,i,o,u=$u(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],s=c.x-n||1e-6,l=c.y-e||1e-6,f=Math.sqrt(s*s+l*l),h=(o[u]-f)*i[u]*t/f;c.vx+=s*h,c.vy+=l*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=$u(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:$u(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a}function va(t){var n,e,r,i=$u(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=$u(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:$u(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),u(),o):t},o}function ya(t){var n,e,r,i=$u(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=$u(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:$u(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),u(),o):t},o}function _a(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function ba(t){return(t=_a(Math.abs(t)))?t[1]:NaN}function ma(t,n){var e=_a(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}const wa={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ma(100*t,n)},r:ma,s:function(t,n){var e=_a(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(fa=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+_a(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};var xa=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function Aa(t){return new Da(t)}function Da(t){if(!(n=xa.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",u=!!n[5],a=n[6]&&+n[6],c=!!n[7],s=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(c=!0,l="g"):wa[l]||(l=""),(u||"0"===e&&"="===r)&&(u=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=u,this.width=a,this.comma=c,this.precision=s,this.type=l}function Ea(t){return t}Aa.prototype=Da.prototype,Da.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Ca,Ta,Ma,Sa=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ka(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):Ea,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(t.numerals):Ea,a=t.percent||"%";function c(t){var n=(t=Aa(t)).fill,e=t.align,c=t.sign,s=t.symbol,l=t.zero,f=t.width,h=t.comma,p=t.precision,d=t.type,g="$"===s?i[0]:"#"===s&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",v="$"===s?i[1]:/[%p]/.test(d)?a:"",y=wa[d],_=!d||/[defgprs%]/.test(d);function b(t){var i,a,s,b=g,m=v;if("c"===d)m=y(t)+m,t="";else{var w=(t=+t)<0;if(t=y(Math.abs(t),p),w&&0==+t&&(w=!1),b=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+b,m=m+("s"===d?Sa[8+fa/3]:"")+(w&&"("===c?")":""),_)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){m=(46===s?o+t.slice(i+1):t.slice(i))+m,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var x=b.length+t.length+m.length,A=x<f?new Array(f-x+1).join(n):"";switch(h&&l&&(t=r(A+t,A.length?f-m.length:1/0),A=""),e){case"<":t=b+t+m+A;break;case"=":t=b+A+t+m;break;case"^":t=A.slice(0,x=A.length>>1)+b+t+m+A.slice(x);break;default:t=A+b+t+m}return u(t)}return p=null==p?d?6:12:/[gprs]/.test(d)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),b.toString=function(){return t+""},b}return{format:c,formatPrefix:function(t,n){var e=c(((t=Aa(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ba(n)/3))),i=Math.pow(10,-r),o=Sa[8+r/3];return function(t){return e(i*t)+o}}}}function Oa(t){return Ca=ka(t),Ta=Ca.format,Ma=Ca.formatPrefix,Ca}function Na(t){return Math.max(0,-ba(Math.abs(t)))}function Pa(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ba(n)/3)))-ba(Math.abs(t)))}function Ba(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ba(n)-ba(t))+1}function Fa(){return new Ia}function Ia(){this.reset()}Oa({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Ia.prototype={constructor:Ia,reset:function(){this.s=this.t=0},add:function(t){ja(Ra,t,this.t),ja(this,Ra.s,this.s),this.s?this.t+=Ra.t:this.s=Ra.t},valueOf:function(){return this.s}};var Ra=new Ia;function ja(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var La=1e-6,za=Math.PI,Ua=za/2,Wa=za/4,qa=2*za,Ha=180/za,Ga=za/180,Ya=Math.abs,$a=Math.atan,Va=Math.atan2,Ka=Math.cos,Xa=Math.ceil,Za=Math.exp,Ja=(Math.floor,Math.log),Qa=Math.pow,tc=Math.sin,nc=Math.sign||function(t){return t>0?1:t<0?-1:0},ec=Math.sqrt,rc=Math.tan;function ic(t){return t>1?0:t<-1?za:Math.acos(t)}function oc(t){return t>1?Ua:t<-1?-Ua:Math.asin(t)}function uc(t){return(t=tc(t/2))*t}function ac(){}function cc(t,n){t&&lc.hasOwnProperty(t.type)&&lc[t.type](t,n)}var sc={Feature:function(t,n){cc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)cc(e[r].geometry,n)}},lc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){fc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)fc(e[r],n,0)},Polygon:function(t,n){hc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)hc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)cc(e[r],n)}};function fc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function hc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)fc(t[e],n,1);n.polygonEnd()}function pc(t,n){t&&sc.hasOwnProperty(t.type)?sc[t.type](t,n):cc(t,n)}var dc,gc,vc,yc,_c,bc=Fa(),mc=Fa(),wc={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){bc.reset(),wc.lineStart=xc,wc.lineEnd=Ac},polygonEnd:function(){var t=+bc;mc.add(t<0?qa+t:t),this.lineStart=this.lineEnd=this.point=ac},sphere:function(){mc.add(qa)}};function xc(){wc.point=Dc}function Ac(){Ec(dc,gc)}function Dc(t,n){wc.point=Ec,dc=t,gc=n,vc=t*=Ga,yc=Ka(n=(n*=Ga)/2+Wa),_c=tc(n)}function Ec(t,n){var e=(t*=Ga)-vc,r=e>=0?1:-1,i=r*e,o=Ka(n=(n*=Ga)/2+Wa),u=tc(n),a=_c*u,c=yc*o+a*Ka(i),s=a*r*tc(i);bc.add(Va(s,c)),vc=t,yc=o,_c=u}function Cc(t){return mc.reset(),pc(t,wc),2*mc}function Tc(t){return[Va(t[1],t[0]),oc(t[2])]}function Mc(t){var n=t[0],e=t[1],r=Ka(e);return[r*Ka(n),r*tc(n),tc(e)]}function Sc(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function kc(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Oc(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Nc(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Pc(t){var n=ec(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Bc,Fc,Ic,Rc,jc,Lc,zc,Uc,Wc,qc,Hc,Gc,Yc,$c,Vc,Kc,Xc,Zc,Jc,Qc,ts,ns,es,rs,is,os,us=Fa(),as={point:cs,lineStart:ls,lineEnd:fs,polygonStart:function(){as.point=hs,as.lineStart=ps,as.lineEnd=ds,us.reset(),wc.polygonStart()},polygonEnd:function(){wc.polygonEnd(),as.point=cs,as.lineStart=ls,as.lineEnd=fs,bc<0?(Bc=-(Ic=180),Fc=-(Rc=90)):us>La?Rc=90:us<-1e-6&&(Fc=-90),qc[0]=Bc,qc[1]=Ic}};function cs(t,n){Wc.push(qc=[Bc=t,Ic=t]),n<Fc&&(Fc=n),n>Rc&&(Rc=n)}function ss(t,n){var e=Mc([t*Ga,n*Ga]);if(Uc){var r=kc(Uc,e),i=kc([r[1],-r[0],0],r);Pc(i),i=Tc(i);var o,u=t-jc,a=u>0?1:-1,c=i[0]*Ha*a,s=Ya(u)>180;s^(a*jc<c&&c<a*t)?(o=i[1]*Ha)>Rc&&(Rc=o):s^(a*jc<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*Ha)<Fc&&(Fc=o):(n<Fc&&(Fc=n),n>Rc&&(Rc=n)),s?t<jc?gs(Bc,t)>gs(Bc,Ic)&&(Ic=t):gs(t,Ic)>gs(Bc,Ic)&&(Bc=t):Ic>=Bc?(t<Bc&&(Bc=t),t>Ic&&(Ic=t)):t>jc?gs(Bc,t)>gs(Bc,Ic)&&(Ic=t):gs(t,Ic)>gs(Bc,Ic)&&(Bc=t)}else Wc.push(qc=[Bc=t,Ic=t]);n<Fc&&(Fc=n),n>Rc&&(Rc=n),Uc=e,jc=t}function ls(){as.point=ss}function fs(){qc[0]=Bc,qc[1]=Ic,as.point=cs,Uc=null}function hs(t,n){if(Uc){var e=t-jc;us.add(Ya(e)>180?e+(e>0?360:-360):e)}else Lc=t,zc=n;wc.point(t,n),ss(t,n)}function ps(){wc.lineStart()}function ds(){hs(Lc,zc),wc.lineEnd(),Ya(us)>La&&(Bc=-(Ic=180)),qc[0]=Bc,qc[1]=Ic,Uc=null}function gs(t,n){return(n-=t)<0?n+360:n}function vs(t,n){return t[0]-n[0]}function ys(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function _s(t){var n,e,r,i,o,u,a;if(Rc=Ic=-(Bc=Fc=1/0),Wc=[],pc(t,as),e=Wc.length){for(Wc.sort(vs),n=1,o=[r=Wc[0]];n<e;++n)ys(r,(i=Wc[n])[0])||ys(r,i[1])?(gs(r[0],i[1])>gs(r[0],r[1])&&(r[1]=i[1]),gs(i[0],r[1])>gs(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=gs(r[1],i[0]))>u&&(u=a,Bc=i[0],Ic=r[1])}return Wc=qc=null,Bc===1/0||Fc===1/0?[[NaN,NaN],[NaN,NaN]]:[[Bc,Fc],[Ic,Rc]]}var bs={sphere:ac,point:ms,lineStart:xs,lineEnd:Es,polygonStart:function(){bs.lineStart=Cs,bs.lineEnd=Ts},polygonEnd:function(){bs.lineStart=xs,bs.lineEnd=Es}};function ms(t,n){t*=Ga;var e=Ka(n*=Ga);ws(e*Ka(t),e*tc(t),tc(n))}function ws(t,n,e){++Hc,Yc+=(t-Yc)/Hc,$c+=(n-$c)/Hc,Vc+=(e-Vc)/Hc}function xs(){bs.point=As}function As(t,n){t*=Ga;var e=Ka(n*=Ga);rs=e*Ka(t),is=e*tc(t),os=tc(n),bs.point=Ds,ws(rs,is,os)}function Ds(t,n){t*=Ga;var e=Ka(n*=Ga),r=e*Ka(t),i=e*tc(t),o=tc(n),u=Va(ec((u=is*o-os*i)*u+(u=os*r-rs*o)*u+(u=rs*i-is*r)*u),rs*r+is*i+os*o);Gc+=u,Kc+=u*(rs+(rs=r)),Xc+=u*(is+(is=i)),Zc+=u*(os+(os=o)),ws(rs,is,os)}function Es(){bs.point=ms}function Cs(){bs.point=Ms}function Ts(){Ss(ns,es),bs.point=ms}function Ms(t,n){ns=t,es=n,t*=Ga,n*=Ga,bs.point=Ss;var e=Ka(n);rs=e*Ka(t),is=e*tc(t),os=tc(n),ws(rs,is,os)}function Ss(t,n){t*=Ga;var e=Ka(n*=Ga),r=e*Ka(t),i=e*tc(t),o=tc(n),u=is*o-os*i,a=os*r-rs*o,c=rs*i-is*r,s=ec(u*u+a*a+c*c),l=oc(s),f=s&&-l/s;Jc+=f*u,Qc+=f*a,ts+=f*c,Gc+=l,Kc+=l*(rs+(rs=r)),Xc+=l*(is+(is=i)),Zc+=l*(os+(os=o)),ws(rs,is,os)}function ks(t){Hc=Gc=Yc=$c=Vc=Kc=Xc=Zc=Jc=Qc=ts=0,pc(t,bs);var n=Jc,e=Qc,r=ts,i=n*n+e*e+r*r;return i<1e-12&&(n=Kc,e=Xc,r=Zc,Gc<La&&(n=Yc,e=$c,r=Vc),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Va(e,n)*Ha,oc(r/ec(i))*Ha]}function Os(t){return function(){return t}}function Ns(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Ps(t,n){return[t>za?t-qa:t<-za?t+qa:t,n]}function Bs(t,n,e){return(t%=qa)?n||e?Ns(Is(t),Rs(n,e)):Is(t):n||e?Rs(n,e):Ps}function Fs(t){return function(n,e){return[(n+=t)>za?n-qa:n<-za?n+qa:n,e]}}function Is(t){var n=Fs(t);return n.invert=Fs(-t),n}function Rs(t,n){var e=Ka(t),r=tc(t),i=Ka(n),o=tc(n);function u(t,n){var u=Ka(n),a=Ka(t)*u,c=tc(t)*u,s=tc(n),l=s*e+a*r;return[Va(c*i-l*o,a*e-s*r),oc(l*i+c*o)]}return u.invert=function(t,n){var u=Ka(n),a=Ka(t)*u,c=tc(t)*u,s=tc(n),l=s*i-c*o;return[Va(c*i+s*o,a*e+l*r),oc(l*e-a*r)]},u}function js(t){function n(n){return(n=t(n[0]*Ga,n[1]*Ga))[0]*=Ha,n[1]*=Ha,n}return t=Bs(t[0]*Ga,t[1]*Ga,t.length>2?t[2]*Ga:0),n.invert=function(n){return(n=t.invert(n[0]*Ga,n[1]*Ga))[0]*=Ha,n[1]*=Ha,n},n}function Ls(t,n,e,r,i,o){if(e){var u=Ka(n),a=tc(n),c=r*e;null==i?(i=n+r*qa,o=n-c/2):(i=zs(u,i),o=zs(u,o),(r>0?i<o:i>o)&&(i+=r*qa));for(var s,l=i;r>0?l>o:l<o;l-=c)s=Tc([u,-a*Ka(l),-a*tc(l)]),t.point(s[0],s[1])}}function zs(t,n){(n=Mc(n))[0]-=t,Pc(n);var e=ic(-n[1]);return((-n[2]<0?-e:e)+qa-La)%qa}function Us(){var t,n,e=Os([0,0]),r=Os(90),i=Os(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Ha,e[1]*=Ha}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*Ga,c=i.apply(this,arguments)*Ga;return t=[],n=Bs(-u[0]*Ga,-u[1]*Ga,0).invert,Ls(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:Os([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:Os(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:Os(+t),u):i},u}function Ws(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:ac,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function qs(t,n){return Ya(t[0]-n[0])<La&&Ya(t[1]-n[1])<La}function Hs(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Gs(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(qs(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Hs(r,t,null,!0)),c.push(e.o=new Hs(r,null,e,!1)),a.push(e=new Hs(u,t,null,!1)),c.push(e.o=new Hs(u,null,e,!0))}})),a.length){for(c.sort(n),Ys(a),Ys(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var s,l,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((l=s[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((l=s[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}}function Ys(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}Ps.invert=Ps;var $s=Fa();function Vs(t,n){var e=n[0],r=n[1],i=[tc(e),-Ka(e),0],o=0,u=0;$s.reset();for(var a=0,c=t.length;a<c;++a)if(l=(s=t[a]).length)for(var s,l,f=s[l-1],h=f[0],p=f[1]/2+Wa,d=tc(p),g=Ka(p),v=0;v<l;++v,h=_,d=m,g=w,f=y){var y=s[v],_=y[0],b=y[1]/2+Wa,m=tc(b),w=Ka(b),x=_-h,A=x>=0?1:-1,D=A*x,E=D>za,C=d*m;if($s.add(Va(C*A*tc(D),g*w+C*Ka(D))),o+=E?x+A*qa:x,E^h>=e^_>=e){var T=kc(Mc(f),Mc(y));Pc(T);var M=kc(i,T);Pc(M);var S=(E^x>=0?-1:1)*oc(M[2]);(r>S||r===S&&(T[0]||T[1]))&&(u+=E^x>=0?1:-1)}}return(o<-1e-6||o<La&&$s<-1e-6)^1&u}function Ks(t,n,e,r){return function(i){var o,u,a,c=n(i),s=Ws(),l=n(s),f=!1,h={point:p,lineStart:g,lineEnd:v,polygonStart:function(){h.point=y,h.lineStart=_,h.lineEnd=b,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=g,h.lineEnd=v,u=j(u);var t=Vs(o,r);u.length?(f||(i.polygonStart(),f=!0),Gs(u,Zs,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function d(t,n){c.point(t,n)}function g(){h.point=d,c.lineStart()}function v(){h.point=p,c.lineEnd()}function y(t,n){a.push([t,n]),l.point(t,n)}function _(){l.lineStart(),a=[]}function b(){y(a[0][0],a[0][1]),l.lineEnd();var t,n,e,r,c=l.clean(),h=s.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Xs))}return h}}function Xs(t){return t.length>1}function Zs(t,n){return((t=t.x)[0]<0?t[1]-Ua-La:Ua-t[1])-((n=n.x)[0]<0?n[1]-Ua-La:Ua-n[1])}const Js=Ks((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?za:-za,c=Ya(o-e);Ya(c-za)<La?(t.point(e,r=(r+u)/2>0?Ua:-Ua),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=za&&(Ya(e-i)<La&&(e-=i*La),Ya(o-a)<La&&(o-=a*La),r=function(t,n,e,r){var i,o,u=tc(t-e);return Ya(u)>La?$a((tc(n)*(o=Ka(r))*tc(e)-tc(r)*(i=Ka(n))*tc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*Ua,r.point(-za,i),r.point(0,i),r.point(za,i),r.point(za,0),r.point(za,-i),r.point(0,-i),r.point(-za,-i),r.point(-za,0),r.point(-za,i);else if(Ya(t[0]-n[0])>La){var o=t[0]<n[0]?za:-za;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-za,-Ua]);function Qs(t){var n=Ka(t),e=6*Ga,r=n>0,i=Ya(n)>La;function o(t,e){return Ka(t)*Ka(e)>n}function u(t,e,r){var i=[1,0,0],o=kc(Mc(t),Mc(e)),u=Sc(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var s=n*u/c,l=-n*a/c,f=kc(i,o),h=Nc(i,s);Oc(h,Nc(o,l));var p=f,d=Sc(h,p),g=Sc(p,p),v=d*d-g*(Sc(h,h)-1);if(!(v<0)){var y=ec(v),_=Nc(p,(-d-y)/g);if(Oc(_,h),_=Tc(_),!r)return _;var b,m=t[0],w=e[0],x=t[1],A=e[1];w<m&&(b=m,m=w,w=b);var D=w-m,E=Ya(D-za)<La;if(!E&&A<x&&(b=x,x=A,A=b),E||D<La?E?x+A>0^_[1]<(Ya(_[0]-m)<La?x:A):x<=_[1]&&_[1]<=A:D>za^(m<=_[0]&&_[0]<=w)){var C=Nc(p,(-d+y)/g);return Oc(C,h),[_,Tc(C)]}}}function a(n,e){var i=r?t:za-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Ks(o,(function(t){var n,e,c,s,l;return{lineStart:function(){s=c=!1,l=1},point:function(f,h){var p,d=[f,h],g=o(f,h),v=r?g?0:a(f,h):g?a(f+(f<0?za:-za),h):0;if(!n&&(s=c=g)&&t.lineStart(),g!==c&&(!(p=u(n,d))||qs(n,p)||qs(d,p))&&(d[0]+=La,d[1]+=La,g=o(d[0],d[1])),g!==c)l=0,g?(t.lineStart(),p=u(d,n),t.point(p[0],p[1])):(p=u(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(i&&n&&r^g){var y;v&e||!(y=u(d,n,!0))||(l=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!g||n&&qs(n,d)||t.point(d[0],d[1]),n=d,c=g,e=v},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return l|(s&&c)<<1}}}),(function(n,r,i,o){Ls(o,t,e,i,n,r)}),r?[0,-t]:[-za,t-za])}var tl=1e9,nl=-tl;function el(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,s){var l=0,f=0;if(null==i||(l=u(i,a))!==(f=u(o,a))||c(i,o)<0^a>0)do{s.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else s.point(o[0],o[1])}function u(r,i){return Ya(r[0]-t)<La?i>0?0:3:Ya(r[0]-e)<La?i>0?2:1:Ya(r[1]-n)<La?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,s,l,f,h,p,d,g,v,y,_,b=u,m=Ws(),w={point:x,lineStart:function(){w.point=A,s&&s.push(l=[]),y=!0,v=!1,d=g=NaN},lineEnd:function(){c&&(A(f,h),p&&v&&m.rejoin(),c.push(m.result())),w.point=x,v&&b.lineEnd()},polygonStart:function(){b=m,c=[],s=[],_=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var o,u,a=s[e],c=1,l=a.length,f=a[0],h=f[0],p=f[1];c<l;++c)o=h,u=p,h=(f=a[c])[0],p=f[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=_&&n,i=(c=j(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&Gs(c,a,n,o,u),u.polygonEnd()),b=u,c=s=l=null}};function x(t,n){i(t,n)&&b.point(t,n)}function A(o,u){var a=i(o,u);if(s&&l.push([o,u]),y)f=o,h=u,p=a,y=!1,a&&(b.lineStart(),b.point(o,u));else if(a&&v)b.point(o,u);else{var c=[d=Math.max(nl,Math.min(tl,d)),g=Math.max(nl,Math.min(tl,g))],m=[o=Math.max(nl,Math.min(tl,o)),u=Math.max(nl,Math.min(tl,u))];!function(t,n,e,r,i,o){var u,a=t[0],c=t[1],s=0,l=1,f=n[0]-a,h=n[1]-c;if(u=e-a,f||!(u>0)){if(u/=f,f<0){if(u<s)return;u<l&&(l=u)}else if(f>0){if(u>l)return;u>s&&(s=u)}if(u=i-a,f||!(u<0)){if(u/=f,f<0){if(u>l)return;u>s&&(s=u)}else if(f>0){if(u<s)return;u<l&&(l=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<l&&(l=u)}else if(h>0){if(u>l)return;u>s&&(s=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>l)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<l&&(l=u)}return s>0&&(t[0]=a+s*f,t[1]=c+s*h),l<1&&(n[0]=a+l*f,n[1]=c+l*h),!0}}}}}(c,m,t,n,e,r)?a&&(b.lineStart(),b.point(o,u),_=!1):(v||(b.lineStart(),b.point(c[0],c[1])),b.point(m[0],m[1]),a||b.lineEnd(),_=!1)}d=o,g=u,v=a}return w}}function rl(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=el(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}}var il,ol,ul,al=Fa(),cl={sphere:ac,point:ac,lineStart:function(){cl.point=ll,cl.lineEnd=sl},lineEnd:ac,polygonStart:ac,polygonEnd:ac};function sl(){cl.point=cl.lineEnd=ac}function ll(t,n){il=t*=Ga,ol=tc(n*=Ga),ul=Ka(n),cl.point=fl}function fl(t,n){t*=Ga;var e=tc(n*=Ga),r=Ka(n),i=Ya(t-il),o=Ka(i),u=r*tc(i),a=ul*e-ol*r*o,c=ol*e+ul*r*o;al.add(Va(ec(u*u+a*a),c)),il=t,ol=e,ul=r}function hl(t){return al.reset(),pc(t,cl),+al}var pl=[null,null],dl={type:"LineString",coordinates:pl};function gl(t,n){return pl[0]=t,pl[1]=n,hl(dl)}var vl={Feature:function(t,n){return _l(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(_l(e[r].geometry,n))return!0;return!1}},yl={Sphere:function(){return!0},Point:function(t,n){return bl(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(bl(e[r],n))return!0;return!1},LineString:function(t,n){return ml(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(ml(e[r],n))return!0;return!1},Polygon:function(t,n){return wl(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(wl(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(_l(e[r],n))return!0;return!1}};function _l(t,n){return!(!t||!yl.hasOwnProperty(t.type))&&yl[t.type](t,n)}function bl(t,n){return 0===gl(t,n)}function ml(t,n){var e=gl(t[0],t[1]);return gl(t[0],n)+gl(n,t[1])<=e+La}function wl(t,n){return!!Vs(t.map(xl),Al(n))}function xl(t){return(t=t.map(Al)).pop(),t}function Al(t){return[t[0]*Ga,t[1]*Ga]}function Dl(t,n){return(t&&vl.hasOwnProperty(t.type)?vl[t.type]:_l)(t,n)}function El(t,n,e){var r=A(t,n-La,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function Cl(t,n,e){var r=A(t,n-La,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function Tl(){var t,n,e,r,i,o,u,a,c,s,l,f,h=10,p=h,d=90,g=360,v=2.5;function y(){return{type:"MultiLineString",coordinates:_()}}function _(){return A(Xa(r/d)*d,e,d).map(l).concat(A(Xa(a/g)*g,u,g).map(f)).concat(A(Xa(n/h)*h,t,h).filter((function(t){return Ya(t%d)>La})).map(c)).concat(A(Xa(o/p)*p,i,p).filter((function(t){return Ya(t%g)>La})).map(s))}return y.lines=function(){return _().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(f(u).slice(1),l(e).reverse().slice(1),f(a).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),y.precision(v)):[[r,a],[e,u]]},y.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),y.precision(v)):[[n,o],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(d=+t[0],g=+t[1],y):[d,g]},y.stepMinor=function(t){return arguments.length?(h=+t[0],p=+t[1],y):[h,p]},y.precision=function(h){return arguments.length?(v=+h,c=El(o,i,90),s=Cl(n,t,v),l=El(a,u,90),f=Cl(r,e,v),y):v},y.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function Ml(){return Tl()()}function Sl(t,n){var e=t[0]*Ga,r=t[1]*Ga,i=n[0]*Ga,o=n[1]*Ga,u=Ka(r),a=tc(r),c=Ka(o),s=tc(o),l=u*Ka(e),f=u*tc(e),h=c*Ka(i),p=c*tc(i),d=2*oc(ec(uc(o-r)+u*c*uc(i-e))),g=tc(d),v=d?function(t){var n=tc(t*=d)/g,e=tc(d-t)/g,r=e*l+n*h,i=e*f+n*p,o=e*a+n*s;return[Va(i,r)*Ha,Va(o,ec(r*r+i*i))*Ha]}:function(){return[e*Ha,r*Ha]};return v.distance=d,v}function kl(t){return t}var Ol,Nl,Pl,Bl,Fl=Fa(),Il=Fa(),Rl={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){Rl.lineStart=jl,Rl.lineEnd=Ul},polygonEnd:function(){Rl.lineStart=Rl.lineEnd=Rl.point=ac,Fl.add(Ya(Il)),Il.reset()},result:function(){var t=Fl/2;return Fl.reset(),t}};function jl(){Rl.point=Ll}function Ll(t,n){Rl.point=zl,Ol=Pl=t,Nl=Bl=n}function zl(t,n){Il.add(Bl*t-Pl*n),Pl=t,Bl=n}function Ul(){zl(Ol,Nl)}const Wl=Rl;var ql=1/0,Hl=ql,Gl=-ql,Yl=Gl;const $l={point:function(t,n){t<ql&&(ql=t),t>Gl&&(Gl=t),n<Hl&&(Hl=n),n>Yl&&(Yl=n)},lineStart:ac,lineEnd:ac,polygonStart:ac,polygonEnd:ac,result:function(){var t=[[ql,Hl],[Gl,Yl]];return Gl=Yl=-(Hl=ql=1/0),t}};var Vl,Kl,Xl,Zl,Jl=0,Ql=0,tf=0,nf=0,ef=0,rf=0,of=0,uf=0,af=0,cf={point:sf,lineStart:lf,lineEnd:pf,polygonStart:function(){cf.lineStart=df,cf.lineEnd=gf},polygonEnd:function(){cf.point=sf,cf.lineStart=lf,cf.lineEnd=pf},result:function(){var t=af?[of/af,uf/af]:rf?[nf/rf,ef/rf]:tf?[Jl/tf,Ql/tf]:[NaN,NaN];return Jl=Ql=tf=nf=ef=rf=of=uf=af=0,t}};function sf(t,n){Jl+=t,Ql+=n,++tf}function lf(){cf.point=ff}function ff(t,n){cf.point=hf,sf(Xl=t,Zl=n)}function hf(t,n){var e=t-Xl,r=n-Zl,i=ec(e*e+r*r);nf+=i*(Xl+t)/2,ef+=i*(Zl+n)/2,rf+=i,sf(Xl=t,Zl=n)}function pf(){cf.point=sf}function df(){cf.point=vf}function gf(){yf(Vl,Kl)}function vf(t,n){cf.point=yf,sf(Vl=Xl=t,Kl=Zl=n)}function yf(t,n){var e=t-Xl,r=n-Zl,i=ec(e*e+r*r);nf+=i*(Xl+t)/2,ef+=i*(Zl+n)/2,rf+=i,of+=(i=Zl*t-Xl*n)*(Xl+t),uf+=i*(Zl+n),af+=3*i,sf(Xl=t,Zl=n)}const _f=cf;function bf(t){this._context=t}bf.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,qa)}},result:ac};var mf,wf,xf,Af,Df,Ef=Fa(),Cf={point:ac,lineStart:function(){Cf.point=Tf},lineEnd:function(){mf&&Mf(wf,xf),Cf.point=ac},polygonStart:function(){mf=!0},polygonEnd:function(){mf=null},result:function(){var t=+Ef;return Ef.reset(),t}};function Tf(t,n){Cf.point=Mf,wf=Af=t,xf=Df=n}function Mf(t,n){Af-=t,Df-=n,Ef.add(ec(Af*Af+Df*Df)),Af=t,Df=n}const Sf=Cf;function kf(){this._string=[]}function Of(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Nf(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),pc(t,e(r))),r.result()}return o.area=function(t){return pc(t,e(Wl)),Wl.result()},o.measure=function(t){return pc(t,e(Sf)),Sf.result()},o.bounds=function(t){return pc(t,e($l)),$l.result()},o.centroid=function(t){return pc(t,e(_f)),_f.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,kl):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new kf):new bf(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}function Pf(t){return{stream:Bf(t)}}function Bf(t){return function(n){var e=new Ff;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Ff(){}function If(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),pc(e,t.stream($l));var u=$l.result(),a=Math.min(r/(u[1][0]-u[0][0]),i/(u[1][1]-u[0][1])),c=+n[0][0]+(r-a*(u[1][0]+u[0][0]))/2,s=+n[0][1]+(i-a*(u[1][1]+u[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*a).translate([c,s])}function Rf(t,n,e){return If(t,[[0,0],n],e)}kf.prototype={_radius:4.5,_circle:Of(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Of(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},Ff.prototype={constructor:Ff,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var jf=Ka(30*Ga);function Lf(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,s,l,f,h,p,d,g,v){var y=s-r,_=l-i,b=y*y+_*_;if(b>4*n&&g--){var m=u+h,w=a+p,x=c+d,A=ec(m*m+w*w+x*x),D=oc(x/=A),E=Ya(Ya(x)-1)<La||Ya(o-f)<La?(o+f)/2:Va(w,m),C=t(E,D),T=C[0],M=C[1],S=T-r,k=M-i,O=_*S-y*k;(O*O/b>n||Ya((y*S+_*k)/b-.5)>.3||u*h+a*p+c*d<jf)&&(e(r,i,o,u,a,c,T,M,E,m/=A,w/=A,x,g,v),v.point(T,M),e(T,M,E,m,w,x,s,l,f,h,p,d,g,v))}}return function(n){var r,i,o,u,a,c,s,l,f,h,p,d,g={point:v,lineStart:y,lineEnd:b,polygonStart:function(){n.polygonStart(),g.lineStart=m},polygonEnd:function(){n.polygonEnd(),g.lineStart=y}};function v(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){l=NaN,g.point=_,n.lineStart()}function _(r,i){var o=Mc([r,i]),u=t(r,i);e(l,f,s,h,p,d,l=u[0],f=u[1],s=r,h=o[0],p=o[1],d=o[2],16,n),n.point(l,f)}function b(){g.point=v,n.lineEnd()}function m(){y(),g.point=w,g.lineEnd=x}function w(t,n){_(r=t,n),i=l,o=f,u=h,a=p,c=d,g.point=_}function x(){e(l,f,s,h,p,d,i,o,r,u,a,c,16,n),g.lineEnd=b,b()}return g}}(t,n):function(t){return Bf({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var zf=Bf({point:function(t,n){this.stream.point(t*Ga,n*Ga)}});function Uf(t){return Wf((function(){return t}))()}function Wf(t){var n,e,r,i,o,u,a,c,s,l,f=150,h=480,p=250,d=0,g=0,v=0,y=0,_=0,b=null,m=Js,w=null,x=kl,A=.5,D=Lf(T,A);function E(t){return[(t=o(t[0]*Ga,t[1]*Ga))[0]*f+e,r-t[1]*f]}function C(t){return(t=o.invert((t[0]-e)/f,(r-t[1])/f))&&[t[0]*Ha,t[1]*Ha]}function T(t,i){return[(t=n(t,i))[0]*f+e,r-t[1]*f]}function M(){o=Ns(i=Bs(v,y,_),n);var t=n(d,g);return e=h-t[0]*f,r=p+t[1]*f,S()}function S(){return s=l=null,E}return E.stream=function(t){return s&&l===t?s:s=zf(function(t){return Bf({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(i)(m(D(x(l=t)))))},E.preclip=function(t){return arguments.length?(m=t,b=void 0,S()):m},E.postclip=function(t){return arguments.length?(x=t,w=u=a=c=null,S()):x},E.clipAngle=function(t){return arguments.length?(m=+t?Qs(b=t*Ga):(b=null,Js),S()):b*Ha},E.clipExtent=function(t){return arguments.length?(x=null==t?(w=u=a=c=null,kl):el(w=+t[0][0],u=+t[0][1],a=+t[1][0],c=+t[1][1]),S()):null==w?null:[[w,u],[a,c]]},E.scale=function(t){return arguments.length?(f=+t,M()):f},E.translate=function(t){return arguments.length?(h=+t[0],p=+t[1],M()):[h,p]},E.center=function(t){return arguments.length?(d=t[0]%360*Ga,g=t[1]%360*Ga,M()):[d*Ha,g*Ha]},E.rotate=function(t){return arguments.length?(v=t[0]%360*Ga,y=t[1]%360*Ga,_=t.length>2?t[2]%360*Ga:0,M()):[v*Ha,y*Ha,_*Ha]},E.precision=function(t){return arguments.length?(D=Lf(T,A=t*t),S()):ec(A)},E.fitExtent=function(t,n){return If(E,t,n)},E.fitSize=function(t,n){return Rf(E,t,n)},function(){return n=t.apply(this,arguments),E.invert=n.invert&&C,M()}}function qf(t){var n=0,e=za/3,r=Wf(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Ga,e=t[1]*Ga):[n*Ha,e*Ha]},i}function Hf(t,n){var e=tc(t),r=(e+tc(n))/2;if(Ya(r)<La)return function(t){var n=Ka(t);function e(t,e){return[t*n,tc(e)/n]}return e.invert=function(t,e){return[t/n,oc(e*n)]},e}(t);var i=1+e*(2*r-e),o=ec(i)/r;function u(t,n){var e=ec(i-2*r*tc(n))/r;return[e*tc(t*=r),o-e*Ka(t)]}return u.invert=function(t,n){var e=o-n;return[Va(t,Ya(e))/r*nc(e),oc((i-(t*t+e*e)*r*r)/(2*r))]},u}function Gf(){return qf(Hf).scale(155.424).center([0,33.6442])}function Yf(){return Gf().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function $f(){var t,n,e,r,i,o,u=Yf(),a=Gf().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Gf().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){o=[t,n]}};function l(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function f(){return t=n=null,l}return l.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},l.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},l.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),f()):u.precision()},l.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),l.translate(u.translate())):u.scale()},l.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],l=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,l-.238*n],[o+.455*n,l+.238*n]]).stream(s),r=a.translate([o-.307*n,l+.201*n]).clipExtent([[o-.425*n+La,l+.12*n+La],[o-.214*n-La,l+.234*n-La]]).stream(s),i=c.translate([o-.205*n,l+.212*n]).clipExtent([[o-.214*n+La,l+.166*n+La],[o-.115*n-La,l+.234*n-La]]).stream(s),f()},l.fitExtent=function(t,n){return If(l,t,n)},l.fitSize=function(t,n){return Rf(l,t,n)},l.scale(1070)}function Vf(t){return function(n,e){var r=Ka(n),i=Ka(e),o=t(r*i);return[o*i*tc(n),o*tc(e)]}}function Kf(t){return function(n,e){var r=ec(n*n+e*e),i=t(r),o=tc(i),u=Ka(i);return[Va(n*o,r*u),oc(r&&e*o/r)]}}var Xf=Vf((function(t){return ec(2/(1+t))}));function Zf(){return Uf(Xf).scale(124.75).clipAngle(179.999)}Xf.invert=Kf((function(t){return 2*oc(t/2)}));var Jf=Vf((function(t){return(t=ic(t))&&t/tc(t)}));function Qf(){return Uf(Jf).scale(79.4188).clipAngle(179.999)}function th(t,n){return[t,Ja(rc((Ua+n)/2))]}function nh(){return eh(th).scale(961/qa)}function eh(t){var n,e,r,i=Uf(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,s=null;function l(){var o=za*u(),a=i(js(i.rotate()).invert([0,0]));return c(null==s?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===th?[[Math.max(a[0]-o,s),n],[Math.min(a[0]+o,e),r]]:[[s,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),l()):u()},i.translate=function(t){return arguments.length?(a(t),l()):a()},i.center=function(t){return arguments.length?(o(t),l()):o()},i.clipExtent=function(t){return arguments.length?(null==t?s=n=e=r=null:(s=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),l()):null==s?null:[[s,n],[e,r]]},l()}function rh(t){return rc((Ua+t)/2)}function ih(t,n){var e=Ka(t),r=t===n?tc(t):Ja(e/Ka(n))/Ja(rh(n)/rh(t)),i=e*Qa(rh(t),r)/r;if(!r)return th;function o(t,n){i>0?n<-Ua+La&&(n=-Ua+La):n>Ua-La&&(n=Ua-La);var e=i/Qa(rh(n),r);return[e*tc(r*t),i-e*Ka(r*t)]}return o.invert=function(t,n){var e=i-n,o=nc(r)*ec(t*t+e*e);return[Va(t,Ya(e))/r*nc(e),2*$a(Qa(i/o,1/r))-Ua]},o}function oh(){return qf(ih).scale(109.5).parallels([30,30])}function uh(t,n){return[t,n]}function ah(){return Uf(uh).scale(152.63)}function ch(t,n){var e=Ka(t),r=t===n?tc(t):(e-Ka(n))/(n-t),i=e/r+t;if(Ya(r)<La)return uh;function o(t,n){var e=i-n,o=r*t;return[e*tc(o),i-e*Ka(o)]}return o.invert=function(t,n){var e=i-n;return[Va(t,Ya(e))/r*nc(e),i-nc(r)*ec(t*t+e*e)]},o}function sh(){return qf(ch).scale(131.154).center([0,13.9389])}function lh(t,n){var e=Ka(n),r=Ka(t)*e;return[e*tc(t)/r,tc(n)/r]}function fh(){return Uf(lh).scale(144.049).clipAngle(60)}function hh(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?kl:Bf({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}function ph(){var t,n,e,r,i,o,u=1,a=0,c=0,s=1,l=1,f=kl,h=null,p=kl;function d(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=f(p(i=t))},postclip:function(r){return arguments.length?(p=r,h=t=n=e=null,d()):p},clipExtent:function(r){return arguments.length?(p=null==r?(h=t=n=e=null,kl):el(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),d()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(f=hh((u=+t)*s,u*l,a,c),d()):u},translate:function(t){return arguments.length?(f=hh(u*s,u*l,a=+t[0],c=+t[1]),d()):[a,c]},reflectX:function(t){return arguments.length?(f=hh(u*(s=t?-1:1),u*l,a,c),d()):s<0},reflectY:function(t){return arguments.length?(f=hh(u*s,u*(l=t?-1:1),a,c),d()):l<0},fitExtent:function(t,n){return If(o,t,n)},fitSize:function(t,n){return Rf(o,t,n)}}}function dh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function gh(){return Uf(dh).scale(175.295)}function vh(t,n){return[Ka(n)*tc(t),tc(n)]}function yh(){return Uf(vh).scale(249.5).clipAngle(90.000001)}function _h(t,n){var e=Ka(n),r=1+Ka(t)*e;return[e*tc(t)/r,tc(n)/r]}function bh(){return Uf(_h).scale(250).clipAngle(142)}function mh(t,n){return[Ja(rc((Ua+n)/2)),-t]}function wh(){var t=eh(mh),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function xh(t,n){return t.parent===n.parent?1:2}function Ah(t,n){return t+n.x}function Dh(t,n){return Math.max(t,n.y)}function Eh(){var t=xh,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Ah,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Dh,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),s=a.x-t(a,c)/2,l=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-s)/(l-s)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Ch(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Th(t,n){var e,r,i,o,u,a=new Oh(t),c=+t.value&&(a.value=t.value),s=[a];for(null==n&&(n=Mh);e=s.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)s.push(r=e.children[o]=new Oh(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(kh)}function Mh(t){return t.children}function Sh(t){t.data=t.data.data}function kh(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Oh(t){this.data=t,this.depth=this.height=0,this.parent=null}Jf.invert=Kf((function(t){return t})),th.invert=function(t,n){return[t,2*$a(Za(n))-Ua]},uh.invert=uh,lh.invert=Kf($a),dh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(Ya(e)>La&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},vh.invert=Kf(oc),_h.invert=Kf((function(t){return 2*$a(t)})),mh.invert=function(t,n){return[-n,2*$a(Za(t))-Ua]},Oh.prototype=Th.prototype={constructor:Oh,count:function(){return this.eachAfter(Ch)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return Th(this).eachBefore(Sh)}};var Nh=Array.prototype.slice;function Ph(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Nh.call(t))).length,o=[];r<i;)n=t[r],e&&Ih(e,n)?++r:(e=jh(o=Bh(o,n)),r=0);return e}function Bh(t,n){var e,r;if(Rh(n,t))return[n];for(e=0;e<t.length;++e)if(Fh(n,t[e])&&Rh(Lh(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Fh(Lh(t[e],t[r]),n)&&Fh(Lh(t[e],n),t[r])&&Fh(Lh(t[r],n),t[e])&&Rh(zh(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Fh(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Ih(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Rh(t,n){for(var e=0;e<n.length;++e)if(!Ih(t,n[e]))return!1;return!0}function jh(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Lh(t[0],t[1]);case 3:return zh(t[0],t[1],t[2])}}function Lh(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,s=u-r,l=a-i,f=Math.sqrt(c*c+s*s);return{x:(e+o+c/f*l)/2,y:(r+u+s/f*l)/2,r:(f+i+a)/2}}function zh(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,s=e.x,l=e.y,f=e.r,h=r-u,p=r-s,d=i-a,g=i-l,v=c-o,y=f-o,_=r*r+i*i-o*o,b=_-u*u-a*a+c*c,m=_-s*s-l*l+f*f,w=p*d-h*g,x=(d*m-g*b)/(2*w)-r,A=(g*v-d*y)/w,D=(p*b-h*m)/(2*w)-i,E=(h*y-p*v)/w,C=A*A+E*E-1,T=2*(o+x*A+D*E),M=x*x+D*D-o*o,S=-(C?(T+Math.sqrt(T*T-4*C*M))/(2*C):M/T);return{x:r+x+A*S,y:i+D+E*S,r:S}}function Uh(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,u=t.r+e.r,a=n.x-r,c=n.y-i,s=a*a+c*c;if(s){var l=.5+((u*=u)-(o*=o))/(2*s),f=Math.sqrt(Math.max(0,2*o*(u+s)-(u-=s)*u-o*o))/(2*s);e.x=r+l*a+f*c,e.y=i+l*c-f*a}else e.x=r+u,e.y=i}function Wh(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function qh(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Hh(t){this._=t,this.next=null,this.previous=null}function Gh(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,s,l,f;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Uh(e,n,r=t[2]),n=new Hh(n),e=new Hh(e),r=new Hh(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Uh(n._,e._,r=t[a]),r=new Hh(r),c=e.next,s=n.previous,l=e._.r,f=n._.r;do{if(l<=f){if(Wh(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}l+=c._.r,c=c.next}else{if(Wh(s._,r._)){(n=s).next=e,e.previous=n,--a;continue t}f+=s._.r,s=s.previous}}while(c!==s.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=qh(n);(r=r.next)!==e;)(u=qh(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=Ph(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}function Yh(t){return Gh(t),t}function $h(t){return null==t?null:Vh(t)}function Vh(t){if("function"!=typeof t)throw new Error;return t}function Kh(){return 0}function Xh(t){return function(){return t}}function Zh(t){return Math.sqrt(t.value)}function Jh(){var t=null,n=1,e=1,r=Kh;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Qh(t)).eachAfter(tp(r,.5)).eachBefore(np(1)):i.eachBefore(Qh(Zh)).eachAfter(tp(Kh,1)).eachAfter(tp(r,i.r/Math.min(n,e))).eachBefore(np(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=$h(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Xh(+t),i):r},i}function Qh(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function tp(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Gh(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function np(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function ep(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function rp(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*s}function ip(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&rp(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(ep),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var op={depth:-1},up={};function ap(t){return t.id}function cp(t){return t.parentId}function sp(){var t=ap,n=cp;function e(e){var r,i,o,u,a,c,s,l=e.length,f=new Array(l),h={};for(i=0;i<l;++i)r=e[i],a=f[i]=new Oh(r),null!=(c=t(r,i,e))&&(c+="")&&(h[s="$"+(a.id=c)]=s in h?up:a);for(i=0;i<l;++i)if(a=f[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h["$"+c]))throw new Error("missing: "+c);if(u===up)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=op,o.eachBefore((function(t){t.depth=t.parent.depth+1,--l})).eachBefore(kh),o.parent=null,l>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Vh(n),e):t},e.parentId=function(t){return arguments.length?(n=Vh(t),e):n},e}function lp(t,n){return t.parent===n.parent?1:2}function fp(t){var n=t.children;return n?n[0]:t.t}function hp(t){var n=t.children;return n?n[n.length-1]:t.t}function pp(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function dp(t,n,e){return t.a.parent===n.parent?t.a:e}function gp(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function vp(){var t=lp,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new gp(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new gp(r[i],i)),e.parent=n;return(u.parent=new gp(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var s=i,l=i,f=i;i.eachBefore((function(t){t.x<s.x&&(s=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)}));var h=s===l?1:t(s,l)/2,p=h-s.x,d=n/(l.x+h+p),g=e/(f.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*g}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],s=o.m,l=u.m,f=a.m,h=c.m;a=hp(a),o=fp(o),a&&o;)c=fp(c),(u=hp(u)).a=n,(i=a.z+f-o.z-s+t(a._,o._))>0&&(pp(dp(a,n,r),n,i),s+=i,l+=i),f+=a.m,s+=o.m,h+=c.m,l+=u.m;a&&!hp(u)&&(u.t=a,u.m+=f-l),o&&!fp(c)&&(c.t=o,c.m+=s-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function yp(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*s}gp.prototype=Object.create(Oh.prototype);var _p=(1+Math.sqrt(5))/2;function bp(t,n,e,r,i,o){for(var u,a,c,s,l,f,h,p,d,g,v,y=[],_=n.children,b=0,m=0,w=_.length,x=n.value;b<w;){c=i-e,s=o-r;do{l=_[m++].value}while(!l&&m<w);for(f=h=l,v=l*l*(g=Math.max(s/c,c/s)/(x*t)),d=Math.max(h/v,v/f);m<w;++m){if(l+=a=_[m].value,a<f&&(f=a),a>h&&(h=a),v=l*l*g,(p=Math.max(h/v,v/f))>d){l-=a;break}d=p}y.push(u={value:l,dice:c<s,children:_.slice(b,m)}),u.dice?rp(u,e,r,i,x?r+=s*l/x:o):yp(u,e,r,x?e+=c*l/x:i,o),x-=l,b=m}return y}const mp=function t(n){function e(t,e,r,i,o){bp(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(_p);function wp(){var t=mp,n=!1,e=1,r=1,i=[0],o=Kh,u=Kh,a=Kh,c=Kh,s=Kh;function l(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(f),i=[0],n&&t.eachBefore(ep),t}function f(n){var e=i[n.depth],r=n.x0+e,l=n.y0+e,f=n.x1-e,h=n.y1-e;f<r&&(r=f=(r+f)/2),h<l&&(l=h=(l+h)/2),n.x0=r,n.y0=l,n.x1=f,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=s(n)-e,l+=u(n)-e,(f-=a(n)-e)<r&&(r=f=(r+f)/2),(h-=c(n)-e)<l&&(l=h=(l+h)/2),t(n,r,l,f,h))}return l.round=function(t){return arguments.length?(n=!!t,l):n},l.size=function(t){return arguments.length?(e=+t[0],r=+t[1],l):[e,r]},l.tile=function(n){return arguments.length?(t=Vh(n),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Xh(+t),l):o},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Xh(+t),l):u},l.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Xh(+t),l):a},l.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Xh(+t),l):c},l.paddingLeft=function(t){return arguments.length?(s="function"==typeof t?t:Xh(+t),l):s},l}function xp(t,n,e,r,i){var o,u,a=t.children,c=a.length,s=new Array(c+1);for(s[0]=u=o=0;o<c;++o)s[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var l=a[n];return l.x0=i,l.y0=o,l.x1=u,void(l.y1=c)}for(var f=s[n],h=r/2+f,p=n+1,d=e-1;p<d;){var g=p+d>>>1;s[g]<h?p=g+1:d=g}h-s[p-1]<s[p]-h&&n+1<p&&--p;var v=s[p]-f,y=r-v;if(u-i>c-o){var _=(i*y+u*v)/r;t(n,p,v,i,o,_,c),t(p,e,y,_,o,u,c)}else{var b=(o*y+c*v)/r;t(n,p,v,i,o,u,b),t(p,e,y,i,b,u,c)}}(0,c,t.value,n,e,r,i)}function Ap(t,n,e,r,i){(1&t.depth?yp:rp)(t,n,e,r,i)}const Dp=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,s,l,f=-1,h=u.length,p=t.value;++f<h;){for(c=(a=u[f]).children,s=a.value=0,l=c.length;s<l;++s)a.value+=c[s].value;a.dice?rp(a,e,r,i,r+=(o-r)*a.value/p):yp(a,e,r,e+=(i-e)*a.value/p,o),p-=a.value}else t._squarify=u=bp(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(_p);function Ep(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function Cp(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]}function Tp(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Mp(t,n){return t[0]-n[0]||t[1]-n[1]}function Sp(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&Tp(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function kp(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Mp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Sp(r),u=Sp(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],s=[];for(n=o.length-1;n>=0;--n)s.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)s.push(t[r[u[n]][2]]);return s}function Op(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],s=o[1],l=!1,f=0;f<i;++f)e=(o=t[f])[0],(r=o[1])>a!=s>a&&u<(c-e)*(a-r)/(s-r)+e&&(l=!l),c=e,s=r;return l}function Np(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c}var Pp=[].slice,Bp={};function Fp(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function Ip(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Rp(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||Bp)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])jp(t,n);else if(!t._data)throw n}}function Rp(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?jp(t,e):(t._data[n]=r,t._waiting?Ip(t):Lp(t))))}}function jp(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Lp(t)}function Lp(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function zp(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new Fp(t)}function Up(){return Math.random()}Fp.prototype=zp.prototype={constructor:Fp,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Pp.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),Ip(this),this},abort:function(){return null==this._error&&jp(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},Lp(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Lp(this),this}};const Wp=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Up),qp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Up),Hp=function t(n){function e(){var t=qp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Up),Gp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Up),Yp=function t(n){function e(t){var e=Gp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Up),$p=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Up);function Vp(t,n){var e,r,i,o,u=ht("beforesend","progress","load","error"),a=bu(),c=new XMLHttpRequest,s=null,l=null,f=0;function h(t){var n,r=c.status;if(!r&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(c)||r>=200&&r<300||304===r){if(i)try{n=i.call(e,c)}catch(t){return void u.call("error",e,t)}else n=c;u.call("load",e,n)}else u.call("error",e,t)}if("undefined"!=typeof XDomainRequest&&!("withCredentials"in c)&&/^(http(s)?:)?\/\//.test(t)&&(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=h:c.onreadystatechange=function(t){c.readyState>3&&h(t)},c.onprogress=function(t){u.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?a.get(t):(null==n?a.remove(t):a.set(t,n+""),e)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",e):r},responseType:function(t){return arguments.length?(o=t,e):o},timeout:function(t){return arguments.length?(f=+t,e):f},user:function(t){return arguments.length<1?s:(s=null==t?null:t+"",e)},password:function(t){return arguments.length<1?l:(l=null==t?null:t+"",e)},response:function(t){return i=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,i,h){return c.open(n,t,!0,s,l),null==r||a.has("accept")||a.set("accept",r+",*/*"),c.setRequestHeader&&a.each((function(t,n){c.setRequestHeader(n,t)})),null!=r&&c.overrideMimeType&&c.overrideMimeType(r),null!=o&&(c.responseType=o),f>0&&(c.timeout=f),null==h&&"function"==typeof i&&(h=i,i=null),null!=h&&1===h.length&&(h=function(t){return function(n,e){t(null==n?e:null)}}(h)),null!=h&&e.on("error",h).on("load",(function(t){h(null,t)})),u.call("beforesend",e,c),c.send(null==i?null:i),e},abort:function(){return c.abort(),e},on:function(){var t=u.on.apply(u,arguments);return t===u?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e}function Kp(t,n){return function(e,r){var i=Vp(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}}const Xp=Kp("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),Zp=Kp("application/json",(function(t){return JSON.parse(t.responseText)})),Jp=Kp("text/plain",(function(t){return t.responseText})),Qp=Kp("application/xml",(function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}));function td(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var o=Vp(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(nd(n,r=t)):r},o.row(r),i?o.get(i):o}}function nd(t,n){return function(e){return t(e.responseText,n)}}const ed=td("text/csv",Ru),rd=td("text/tab-separated-values",Wu);var id=Array.prototype,od=id.map,ud=id.slice,ad={name:"implicit"};function cd(t){var n=bu(),e=[],r=ad;function i(i){var o=i+"",u=n.get(o);if(!u){if(r!==ad)return r;n.set(o,u=e.push(i))}return t[(u-1)%t.length]}return t=null==t?[]:ud.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=bu();for(var r,o,u=-1,a=t.length;++u<a;)n.has(o=(r=t[u])+"")||n.set(o,e.push(r));return i},i.range=function(n){return arguments.length?(t=ud.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return cd().domain(e).range(t).unknown(r)},i}function sd(){var t,n,e=cd().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,s=.5;function l(){var e=r().length,l=o[1]<o[0],f=o[l-0],h=o[1-l];t=(h-f)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),f+=(h-f-t*(e-a))*s,n=t*(1-a),u&&(f=Math.round(f),n=Math.round(n));var p=A(e).map((function(n){return f+t*n}));return i(l?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],l()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,l()):u},e.padding=function(t){return arguments.length?(a=c=Math.max(0,Math.min(1,t)),l()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),l()):a},e.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},e.copy=function(){return sd().domain(r()).range(o).round(u).paddingInner(a).paddingOuter(c).align(s)},l()}function ld(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return ld(n())},t}function fd(){return ld(sd().paddingInner(1))}function hd(t){return function(){return t}}function pd(t){return+t}var dd=[0,1];function gd(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:hd(n)}function vd(t,n,e,r){var i=t[0],o=t[1],u=n[0],a=n[1];return o<i?(i=e(o,i),u=r(a,u)):(i=e(i,o),u=r(u,a)),function(t){return u(i(t))}}function yd(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<i;)o[a]=e(t[a],t[a+1]),u[a]=r(n[a],n[a+1]);return function(n){var e=s(t,n,1,i)-1;return u[e](o[e](n))}}function _d(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function bd(t,n){var e,r,i,o=dd,u=dd,a=pr,c=!1;function s(){return e=Math.min(o.length,u.length)>2?yd:vd,r=i=null,l}function l(n){return(r||(r=e(o,u,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return l.invert=function(t){return(i||(i=e(u,o,gd,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},l.domain=function(t){return arguments.length?(o=od.call(t,pd),s()):o.slice()},l.range=function(t){return arguments.length?(u=ud.call(t),s()):u.slice()},l.rangeRound=function(t){return u=ud.call(t),a=dr,s()},l.clamp=function(t){return arguments.length?(c=!!t,s()):c},l.interpolate=function(t){return arguments.length?(a=t,s()):a},s()}function md(t){var n=t.domain;return t.ticks=function(t){var e=n();return T(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return function(t,n,e){var r,i=t[0],o=t[t.length-1],u=S(i,o,null==n?10:n);switch((e=Aa(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=Pa(u,a))||(e.precision=r),Ma(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=Ba(u,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Na(u))||(e.precision=r-2*("%"===e.type))}return Ta(e)}(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=M(a,c,e))>0?r=M(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=M(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function wd(){var t=bd(gd,cr);return t.copy=function(){return _d(t,wd())},md(t)}function xd(){var t=[0,1];function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=od.call(e,pd),n):t.slice()},n.copy=function(){return xd().domain(t)},md(n)}function Ad(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t}function Dd(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:hd(n)}function Ed(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Cd(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Td(t){return 10===t?Cd:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function Md(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Sd(t){return function(n){return-t(-n)}}function kd(){var t=bd(Dd,Ed).domain([1,10]),n=t.domain,e=10,r=Md(10),i=Td(10);function o(){return r=Md(e),i=Td(e),n()[0]<0&&(r=Sd(r),i=Sd(i)),t}return t.base=function(t){return arguments.length?(e=+t,o()):e},t.domain=function(t){return arguments.length?(n(t),o()):n()},t.ticks=function(t){var o,u=n(),a=u[0],c=u[u.length-1];(o=c<a)&&(h=a,a=c,c=h);var s,l,f,h=r(a),p=r(c),d=null==t?10:+t,g=[];if(!(e%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(l=1,s=i(h);l<e;++l)if(!((f=s*l)<a)){if(f>c)break;g.push(f)}}else for(;h<p;++h)for(l=e-1,s=i(h);l>=1;--l)if(!((f=s*l)<a)){if(f>c)break;g.push(f)}}else g=T(h,p,Math.min(p-h,d)).map(i);return o?g.reverse():g},t.tickFormat=function(n,o){if(null==o&&(o=10===e?".0e":","),"function"!=typeof o&&(o=Ta(o)),n===1/0)return o;null==n&&(n=10);var u=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/i(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=u?o(t):""}},t.nice=function(){return n(Ad(n(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return _d(t,kd().base(e))},t}function Od(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Nd(){var t=1,n=bd((function(n,e){return(e=Od(e,t)-(n=Od(n,t)))?function(r){return(Od(r,t)-n)/e}:hd(e)}),(function(n,e){return e=Od(e,t)-(n=Od(n,t)),function(r){return Od(n+e*r,1/t)}})),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return _d(n,Nd().exponent(t))},md(n)}function Pd(){return Nd().exponent(.5)}function Bd(){var t=[],n=[],e=[];function r(){var r=0,i=Math.max(1,n.length);for(e=new Array(i-1);++r<i;)e[r-1]=N(t,r/i);return o}function o(t){if(!isNaN(t=+t))return n[s(e,t)]}return o.invertExtent=function(r){var i=n.indexOf(r);return i<0?[NaN,NaN]:[i>0?e[i-1]:t[0],i<e.length?e[i]:t[t.length-1]]},o.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var e,o=0,u=n.length;o<u;++o)null==(e=n[o])||isNaN(e=+e)||t.push(e);return t.sort(i),r()},o.range=function(t){return arguments.length?(n=ud.call(t),r()):n.slice()},o.quantiles=function(){return e.slice()},o.copy=function(){return Bd().domain(t).range(n)},o}function Fd(){var t=0,n=1,e=1,r=[.5],i=[0,1];function o(t){if(t<=t)return i[s(r,t,0,e)]}function u(){var i=-1;for(r=new Array(e);++i<e;)r[i]=((i+1)*n-(i-e)*t)/(e+1);return o}return o.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],u()):[t,n]},o.range=function(t){return arguments.length?(e=(i=ud.call(t)).length-1,u()):i.slice()},o.invertExtent=function(o){var u=i.indexOf(o);return u<0?[NaN,NaN]:u<1?[t,r[0]]:u>=e?[r[e-1],n]:[r[u-1],r[u]]},o.copy=function(){return Fd().domain([t,n]).range(i)},md(o)}function Id(){var t=[.5],n=[0,1],e=1;function r(r){if(r<=r)return n[s(t,r,0,e)]}return r.domain=function(i){return arguments.length?(t=ud.call(i),e=Math.min(t.length,n.length-1),r):t.slice()},r.range=function(i){return arguments.length?(n=ud.call(i),e=Math.min(t.length,n.length-1),r):n.slice()},r.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},r.copy=function(){return Id().domain(t).range(n)},r}var Rd=new Date,jd=new Date;function Ld(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(new Date(+e))}while(n(e,o),t(e),e<r);return u},i.filter=function(e){return Ld((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Rd.setTime(+n),jd.setTime(+r),t(Rd),t(jd),Math.floor(e(Rd,jd))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var zd=Ld((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));zd.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ld((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):zd:null};const Ud=zd;var Wd=zd.range,qd=1e3,Hd=6e4,Gd=36e5,Yd=864e5,$d=6048e5,Vd=Ld((function(t){t.setTime(Math.floor(t/qd)*qd)}),(function(t,n){t.setTime(+t+n*qd)}),(function(t,n){return(n-t)/qd}),(function(t){return t.getUTCSeconds()}));const Kd=Vd;var Xd=Vd.range,Zd=Ld((function(t){t.setTime(Math.floor(t/Hd)*Hd)}),(function(t,n){t.setTime(+t+n*Hd)}),(function(t,n){return(n-t)/Hd}),(function(t){return t.getMinutes()}));const Jd=Zd;var Qd=Zd.range,tg=Ld((function(t){var n=t.getTimezoneOffset()*Hd%Gd;n<0&&(n+=Gd),t.setTime(Math.floor((+t-n)/Gd)*Gd+n)}),(function(t,n){t.setTime(+t+n*Gd)}),(function(t,n){return(n-t)/Gd}),(function(t){return t.getHours()}));const ng=tg;var eg=tg.range,rg=Ld((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Hd)/Yd}),(function(t){return t.getDate()-1}));const ig=rg;var og=rg.range;function ug(t){return Ld((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Hd)/$d}))}var ag=ug(0),cg=ug(1),sg=ug(2),lg=ug(3),fg=ug(4),hg=ug(5),pg=ug(6),dg=ag.range,gg=cg.range,vg=sg.range,yg=lg.range,_g=fg.range,bg=hg.range,mg=pg.range,wg=Ld((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const xg=wg;var Ag=wg.range,Dg=Ld((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Dg.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ld((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const Eg=Dg;var Cg=Dg.range,Tg=Ld((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*Hd)}),(function(t,n){return(n-t)/Hd}),(function(t){return t.getUTCMinutes()}));const Mg=Tg;var Sg=Tg.range,kg=Ld((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*Gd)}),(function(t,n){return(n-t)/Gd}),(function(t){return t.getUTCHours()}));const Og=kg;var Ng=kg.range,Pg=Ld((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/Yd}),(function(t){return t.getUTCDate()-1}));const Bg=Pg;var Fg=Pg.range;function Ig(t){return Ld((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/$d}))}var Rg=Ig(0),jg=Ig(1),Lg=Ig(2),zg=Ig(3),Ug=Ig(4),Wg=Ig(5),qg=Ig(6),Hg=Rg.range,Gg=jg.range,Yg=Lg.range,$g=zg.range,Vg=Ug.range,Kg=Wg.range,Xg=qg.range,Zg=Ld((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const Jg=Zg;var Qg=Zg.range,tv=Ld((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));tv.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ld((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const nv=tv;var ev=tv.range;function rv(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function iv(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ov(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function uv(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,s=_v(i),l=bv(i),f=_v(o),h=bv(o),p=_v(u),d=bv(u),g=_v(a),v=bv(a),y=_v(c),_=bv(c),b={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Bv,e:Bv,H:Fv,I:Iv,j:Rv,L:jv,m:Lv,M:zv,p:function(t){return i[+(t.getHours()>=12)]},S:Uv,U:Wv,w:qv,W:Hv,x:null,X:null,y:Gv,Y:Yv,Z:$v,"%":cy},m={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Vv,e:Vv,H:Kv,I:Xv,j:Zv,L:Jv,m:Qv,M:ty,p:function(t){return i[+(t.getUTCHours()>=12)]},S:ny,U:ey,w:ry,W:iy,x:null,X:null,y:oy,Y:uy,Z:ay,"%":cy},w={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return D(t,n,e,r)},d:Tv,e:Tv,H:Sv,I:Sv,j:Mv,L:Nv,m:Cv,M:kv,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},S:Ov,U:wv,w:mv,W:xv,x:function(t,n,r){return D(t,e,n,r)},X:function(t,n,e){return D(t,r,n,e)},y:Dv,Y:Av,Z:Ev,"%":Pv};function x(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=hv[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function A(t,n){return function(e){var r=ov(1900);if(D(r,t,e+="",0)!=e.length)return null;if("p"in r&&(r.H=r.H%12+12*r.p),"W"in r||"U"in r){"w"in r||(r.w="W"in r?1:0);var i="Z"in r?iv(ov(r.y)).getUTCDay():n(ov(r.y)).getDay();r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(i+5)%7:r.w+7*r.U-(i+6)%7}return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,iv(r)):n(r)}}function D(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=w[i in hv?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=x(e,b),b.X=x(r,b),b.c=x(n,b),m.x=x(e,m),m.X=x(r,m),m.c=x(n,m),{format:function(t){var n=x(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=A(t+="",rv);return n.toString=function(){return t},n},utcFormat:function(t){var n=x(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=A(t,iv);return n.toString=function(){return t},n}}}var av,cv,sv,lv,fv,hv={"-":"",_:" ",0:"0"},pv=/^\s*\d+/,dv=/^%/,gv=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;function vv(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function yv(t){return t.replace(gv,"\\$&")}function _v(t){return new RegExp("^(?:"+t.map(yv).join("|")+")","i")}function bv(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function mv(t,n,e){var r=pv.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function wv(t,n,e){var r=pv.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function xv(t,n,e){var r=pv.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function Av(t,n,e){var r=pv.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Dv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ev(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Cv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Tv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Mv(t,n,e){var r=pv.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Sv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function kv(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ov(t,n,e){var r=pv.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Nv(t,n,e){var r=pv.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Pv(t,n,e){var r=dv.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Bv(t,n){return vv(t.getDate(),n,2)}function Fv(t,n){return vv(t.getHours(),n,2)}function Iv(t,n){return vv(t.getHours()%12||12,n,2)}function Rv(t,n){return vv(1+ig.count(Eg(t),t),n,3)}function jv(t,n){return vv(t.getMilliseconds(),n,3)}function Lv(t,n){return vv(t.getMonth()+1,n,2)}function zv(t,n){return vv(t.getMinutes(),n,2)}function Uv(t,n){return vv(t.getSeconds(),n,2)}function Wv(t,n){return vv(ag.count(Eg(t),t),n,2)}function qv(t){return t.getDay()}function Hv(t,n){return vv(cg.count(Eg(t),t),n,2)}function Gv(t,n){return vv(t.getFullYear()%100,n,2)}function Yv(t,n){return vv(t.getFullYear()%1e4,n,4)}function $v(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+vv(n/60|0,"0",2)+vv(n%60,"0",2)}function Vv(t,n){return vv(t.getUTCDate(),n,2)}function Kv(t,n){return vv(t.getUTCHours(),n,2)}function Xv(t,n){return vv(t.getUTCHours()%12||12,n,2)}function Zv(t,n){return vv(1+Bg.count(nv(t),t),n,3)}function Jv(t,n){return vv(t.getUTCMilliseconds(),n,3)}function Qv(t,n){return vv(t.getUTCMonth()+1,n,2)}function ty(t,n){return vv(t.getUTCMinutes(),n,2)}function ny(t,n){return vv(t.getUTCSeconds(),n,2)}function ey(t,n){return vv(Rg.count(nv(t),t),n,2)}function ry(t){return t.getUTCDay()}function iy(t,n){return vv(jg.count(nv(t),t),n,2)}function oy(t,n){return vv(t.getUTCFullYear()%100,n,2)}function uy(t,n){return vv(t.getUTCFullYear()%1e4,n,4)}function ay(){return"+0000"}function cy(){return"%"}function sy(t){return av=uv(t),cv=av.format,sv=av.parse,lv=av.utcFormat,fv=av.utcParse,av}sy({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ly="%Y-%m-%dT%H:%M:%S.%LZ";const fy=Date.prototype.toISOString?function(t){return t.toISOString()}:lv(ly),hy=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:fv(ly);var py=31536e6;function dy(t){return new Date(t)}function gy(t){return t instanceof Date?+t:+new Date(+t)}function vy(t,n,e,r,i,u,a,c,s){var l=bd(gd,cr),f=l.invert,h=l.domain,p=s(".%L"),d=s(":%S"),g=s("%I:%M"),v=s("%I %p"),y=s("%a %d"),_=s("%b %d"),b=s("%B"),m=s("%Y"),w=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,py]];function x(o){return(a(o)<o?p:u(o)<o?d:i(o)<o?g:r(o)<o?v:n(o)<o?e(o)<o?y:_:t(o)<o?b:m)(o)}function A(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=o((function(t){return t[2]})).right(w,u);a===w.length?(i=S(e/py,r/py,n),n=t):a?(i=(a=w[u/w[a-1][2]<w[a][2]/u?a-1:a])[1],n=a[0]):(i=S(e,r,n),n=c)}return null==i?n:n.every(i)}return l.invert=function(t){return new Date(f(t))},l.domain=function(t){return arguments.length?h(od.call(t,gy)):h().map(dy)},l.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=A(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},l.tickFormat=function(t,n){return null==n?x:s(n)},l.nice=function(t,n){var e=h();return(t=A(t,e[0],e[e.length-1],n))?h(Ad(e,t)):l},l.copy=function(){return _d(l,vy(t,n,e,r,i,u,a,c,s))},l}function yy(){return vy(Eg,xg,ag,ig,ng,Jd,Kd,Ud,cv).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}function _y(){return vy(nv,Jg,Rg,Bg,Og,Mg,Kd,Ud,lv).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}function by(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))}const my=by("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),wy=by("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),xy=by("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),Ay=by("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Dy=Rr($e(300,.5,0),$e(-240,.5,1));var Ey=Rr($e(-100,.75,.35),$e(80,1.5,.8)),Cy=Rr($e(260,.75,.35),$e(80,1.5,.8)),Ty=$e();function My(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return Ty.h=360*t-100,Ty.s=1.5-1.5*n,Ty.l=.8-.9*n,Ty+""}function Sy(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const ky=Sy(by("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Oy=Sy(by("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ny=Sy(by("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Py=Sy(by("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function By(t){var n=0,e=1,r=!1;function i(i){var o=(i-n)/(e-n);return t(r?Math.max(0,Math.min(1,o)):o)}return i.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.clamp=function(t){return arguments.length?(r=!!t,i):r},i.interpolator=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return By(t).domain([n,e]).clamp(r)},md(i)}function Fy(t){return function(){return t}}var Iy=Math.abs,Ry=Math.atan2,jy=Math.cos,Ly=Math.max,zy=Math.min,Uy=Math.sin,Wy=Math.sqrt,qy=1e-12,Hy=Math.PI,Gy=Hy/2,Yy=2*Hy;function $y(t){return t>1?0:t<-1?Hy:Math.acos(t)}function Vy(t){return t>=1?Gy:t<=-1?-Gy:Math.asin(t)}function Ky(t){return t.innerRadius}function Xy(t){return t.outerRadius}function Zy(t){return t.startAngle}function Jy(t){return t.endAngle}function Qy(t){return t&&t.padAngle}function t_(t,n,e,r,i,o,u,a){var c=e-t,s=r-n,l=u-i,f=a-o,h=(l*(n-o)-f*(t-i))/(f*c-l*s);return[t+h*c,n+h*s]}function n_(t,n,e,r,i,o,u){var a=t-e,c=n-r,s=(u?o:-o)/Wy(a*a+c*c),l=s*c,f=-s*a,h=t+l,p=n+f,d=e+l,g=r+f,v=(h+d)/2,y=(p+g)/2,_=d-h,b=g-p,m=_*_+b*b,w=i-o,x=h*g-d*p,A=(b<0?-1:1)*Wy(Ly(0,w*w*m-x*x)),D=(x*b-_*A)/m,E=(-x*_-b*A)/m,C=(x*b+_*A)/m,T=(-x*_+b*A)/m,M=D-v,S=E-y,k=C-v,O=T-y;return M*M+S*S>k*k+O*O&&(D=C,E=T),{cx:D,cy:E,x01:-l,y01:-f,x11:D*(i/w-1),y11:E*(i/w-1)}}function e_(){var t=Ky,n=Xy,e=Fy(0),r=null,i=Zy,o=Jy,u=Qy,a=null;function c(){var c,s,l=+t.apply(this,arguments),f=+n.apply(this,arguments),h=i.apply(this,arguments)-Gy,p=o.apply(this,arguments)-Gy,d=Iy(p-h),g=p>h;if(a||(a=c=su()),f<l&&(s=f,f=l,l=s),f>qy)if(d>Yy-qy)a.moveTo(f*jy(h),f*Uy(h)),a.arc(0,0,f,h,p,!g),l>qy&&(a.moveTo(l*jy(p),l*Uy(p)),a.arc(0,0,l,p,h,g));else{var v,y,_=h,b=p,m=h,w=p,x=d,A=d,D=u.apply(this,arguments)/2,E=D>qy&&(r?+r.apply(this,arguments):Wy(l*l+f*f)),C=zy(Iy(f-l)/2,+e.apply(this,arguments)),T=C,M=C;if(E>qy){var S=Vy(E/l*Uy(D)),k=Vy(E/f*Uy(D));(x-=2*S)>qy?(m+=S*=g?1:-1,w-=S):(x=0,m=w=(h+p)/2),(A-=2*k)>qy?(_+=k*=g?1:-1,b-=k):(A=0,_=b=(h+p)/2)}var O=f*jy(_),N=f*Uy(_),P=l*jy(w),B=l*Uy(w);if(C>qy){var F=f*jy(b),I=f*Uy(b),R=l*jy(m),j=l*Uy(m);if(d<Hy){var L=x>qy?t_(O,N,R,j,F,I,P,B):[P,B],z=O-L[0],U=N-L[1],W=F-L[0],q=I-L[1],H=1/Uy($y((z*W+U*q)/(Wy(z*z+U*U)*Wy(W*W+q*q)))/2),G=Wy(L[0]*L[0]+L[1]*L[1]);T=zy(C,(l-G)/(H-1)),M=zy(C,(f-G)/(H+1))}}A>qy?M>qy?(v=n_(R,j,O,N,f,M,g),y=n_(F,I,P,B,f,M,g),a.moveTo(v.cx+v.x01,v.cy+v.y01),M<C?a.arc(v.cx,v.cy,M,Ry(v.y01,v.x01),Ry(y.y01,y.x01),!g):(a.arc(v.cx,v.cy,M,Ry(v.y01,v.x01),Ry(v.y11,v.x11),!g),a.arc(0,0,f,Ry(v.cy+v.y11,v.cx+v.x11),Ry(y.cy+y.y11,y.cx+y.x11),!g),a.arc(y.cx,y.cy,M,Ry(y.y11,y.x11),Ry(y.y01,y.x01),!g))):(a.moveTo(O,N),a.arc(0,0,f,_,b,!g)):a.moveTo(O,N),l>qy&&x>qy?T>qy?(v=n_(P,B,F,I,l,-T,g),y=n_(O,N,R,j,l,-T,g),a.lineTo(v.cx+v.x01,v.cy+v.y01),T<C?a.arc(v.cx,v.cy,T,Ry(v.y01,v.x01),Ry(y.y01,y.x01),!g):(a.arc(v.cx,v.cy,T,Ry(v.y01,v.x01),Ry(v.y11,v.x11),!g),a.arc(0,0,l,Ry(v.cy+v.y11,v.cx+v.x11),Ry(y.cy+y.y11,y.cx+y.x11),g),a.arc(y.cx,y.cy,T,Ry(y.y11,y.x11),Ry(y.y01,y.x01),!g))):a.arc(0,0,l,w,m,g):a.lineTo(P,B)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Hy/2;return[jy(r)*e,Uy(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Fy(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Fy(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Fy(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Fy(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Fy(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Fy(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:Fy(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c}function r_(t){this._context=t}function i_(t){return new r_(t)}function o_(t){return t[0]}function u_(t){return t[1]}function a_(){var t=o_,n=u_,e=Fy(!0),r=null,i=i_,o=null;function u(u){var a,c,s,l=u.length,f=!1;for(null==r&&(o=i(s=su())),a=0;a<=l;++a)!(a<l&&e(c=u[a],a,u))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(c,a,u),+n(c,a,u));if(s)return o=null,s+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:Fy(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:Fy(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:Fy(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u}function c_(){var t=o_,n=null,e=Fy(0),r=u_,i=Fy(!0),o=null,u=i_,a=null;function c(c){var s,l,f,h,p,d=c.length,g=!1,v=new Array(d),y=new Array(d);for(null==o&&(a=u(p=su())),s=0;s<=d;++s){if(!(s<d&&i(h=c[s],s,c))===g)if(g=!g)l=s,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),f=s-1;f>=l;--f)a.point(v[f],y[f]);a.lineEnd(),a.areaEnd()}g&&(v[s]=+t(h,s,c),y[s]=+e(h,s,c),a.point(n?+n(h,s,c):v[s],r?+r(h,s,c):y[s]))}if(p)return a=null,p+""||null}function s(){return a_().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:Fy(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:Fy(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:Fy(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:Fy(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:Fy(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Fy(+t),c):r},c.lineX0=c.lineY0=function(){return s().x(t).y(e)},c.lineY1=function(){return s().x(t).y(r)},c.lineX1=function(){return s().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:Fy(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c}function s_(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function l_(t){return t}function f_(){var t=l_,n=s_,e=null,r=Fy(0),i=Fy(Yy),o=Fy(0);function u(u){var a,c,s,l,f,h=u.length,p=0,d=new Array(h),g=new Array(h),v=+r.apply(this,arguments),y=Math.min(Yy,Math.max(-Yy,i.apply(this,arguments)-v)),_=Math.min(Math.abs(y)/h,o.apply(this,arguments)),b=_*(y<0?-1:1);for(a=0;a<h;++a)(f=g[d[a]=a]=+t(u[a],a,u))>0&&(p+=f);for(null!=n?d.sort((function(t,e){return n(g[t],g[e])})):null!=e&&d.sort((function(t,n){return e(u[t],u[n])})),a=0,s=p?(y-h*b)/p:0;a<h;++a,v=l)c=d[a],l=v+((f=g[c])>0?f*s:0)+b,g[c]={data:u[c],index:a,value:f,startAngle:v,endAngle:l,padAngle:_};return g}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:Fy(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Fy(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Fy(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Fy(+t),u):o},u}r_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var h_=d_(i_);function p_(t){this._curve=t}function d_(t){function n(n){return new p_(t(n))}return n._curve=t,n}function g_(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(d_(t)):n()._curve},t}function v_(){return g_(a_().curve(h_))}function y_(){var t=c_().curve(h_),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return g_(e())},delete t.lineX0,t.lineEndAngle=function(){return g_(r())},delete t.lineX1,t.lineInnerRadius=function(){return g_(i())},delete t.lineY0,t.lineOuterRadius=function(){return g_(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(d_(t)):n()._curve},t}function __(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}p_.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var b_=Array.prototype.slice;function m_(t){return t.source}function w_(t){return t.target}function x_(t){var n=m_,e=w_,r=o_,i=u_,o=null;function u(){var u,a=b_.call(arguments),c=n.apply(this,a),s=e.apply(this,a);if(o||(o=u=su()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=s,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:Fy(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:Fy(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function A_(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function D_(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function E_(t,n,e,r,i){var o=__(n,e),u=__(n,e=(e+i)/2),a=__(r,e),c=__(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function C_(){return x_(A_)}function T_(){return x_(D_)}function M_(){var t=x_(E_);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const S_={draw:function(t,n){var e=Math.sqrt(n/Hy);t.moveTo(e,0),t.arc(0,0,e,0,Yy)}},k_={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}};var O_=Math.sqrt(1/3),N_=2*O_;const P_={draw:function(t,n){var e=Math.sqrt(n/N_),r=e*O_;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}};var B_=Math.sin(Hy/10)/Math.sin(7*Hy/10),F_=Math.sin(Yy/10)*B_,I_=-Math.cos(Yy/10)*B_;const R_={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=F_*e,i=I_*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Yy*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},j_={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}};var L_=Math.sqrt(3);const z_={draw:function(t,n){var e=-Math.sqrt(n/(3*L_));t.moveTo(0,2*e),t.lineTo(-L_*e,-e),t.lineTo(L_*e,-e),t.closePath()}};var U_=-.5,W_=Math.sqrt(3)/2,q_=1/Math.sqrt(12),H_=3*(q_/2+1);const G_={draw:function(t,n){var e=Math.sqrt(n/H_),r=e/2,i=e*q_,o=r,u=e*q_+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(U_*r-W_*i,W_*r+U_*i),t.lineTo(U_*o-W_*u,W_*o+U_*u),t.lineTo(U_*a-W_*c,W_*a+U_*c),t.lineTo(U_*r+W_*i,U_*i-W_*r),t.lineTo(U_*o+W_*u,U_*u-W_*o),t.lineTo(U_*a+W_*c,U_*c-W_*a),t.closePath()}};var Y_=[S_,k_,P_,j_,R_,z_,G_];function $_(){var t=Fy(S_),n=Fy(64),e=null;function r(){var r;if(e||(e=r=su()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:Fy(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:Fy(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function V_(){}function K_(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function X_(t){this._context=t}function Z_(t){return new X_(t)}function J_(t){this._context=t}function Q_(t){return new J_(t)}function tb(t){this._context=t}function nb(t){return new tb(t)}function eb(t,n){this._basis=new X_(t),this._beta=n}X_.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:K_(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:K_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},J_.prototype={areaStart:V_,areaEnd:V_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:K_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},tb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:K_(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},eb.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const rb=function t(n){function e(t){return 1===n?new X_(t):new eb(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function ib(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function ob(t,n){this._context=t,this._k=(1-n)/6}ob.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:ib(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:ib(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const ub=function t(n){function e(t){return new ob(t,n)}return e.tension=function(n){return t(+n)},e}(0);function ab(t,n){this._context=t,this._k=(1-n)/6}ab.prototype={areaStart:V_,areaEnd:V_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:ib(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const cb=function t(n){function e(t){return new ab(t,n)}return e.tension=function(n){return t(+n)},e}(0);function sb(t,n){this._context=t,this._k=(1-n)/6}sb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:ib(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const lb=function t(n){function e(t){return new sb(t,n)}return e.tension=function(n){return t(+n)},e}(0);function fb(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>qy){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>qy){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-n*t._l12_2a)/l,u=(u*s+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function hb(t,n){this._context=t,this._alpha=n}hb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:fb(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const pb=function t(n){function e(t){return n?new hb(t,n):new ob(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function db(t,n){this._context=t,this._alpha=n}db.prototype={areaStart:V_,areaEnd:V_,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:fb(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const gb=function t(n){function e(t){return n?new db(t,n):new ab(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function vb(t,n){this._context=t,this._alpha=n}vb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:fb(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const yb=function t(n){function e(t){return n?new vb(t,n):new sb(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function _b(t){this._context=t}function bb(t){return new _b(t)}function mb(t){return t<0?-1:1}function wb(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(mb(o)+mb(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function xb(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Ab(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Db(t){this._context=t}function Eb(t){this._context=new Cb(t)}function Cb(t){this._context=t}function Tb(t){return new Db(t)}function Mb(t){return new Eb(t)}function Sb(t){this._context=t}function kb(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function Ob(t){return new Sb(t)}function Nb(t,n){this._context=t,this._t=n}function Pb(t){return new Nb(t,.5)}function Bb(t){return new Nb(t,0)}function Fb(t){return new Nb(t,1)}function Ib(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Rb(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function jb(t,n){return t[n]}function Lb(){var t=Fy([]),n=Rb,e=Ib,r=jb;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,s=a.length,l=new Array(s);for(o=0;o<s;++o){for(var f,h=a[o],p=l[o]=new Array(c),d=0;d<c;++d)p[d]=f=[0,+r(i[d],h,d,i)],f.data=i[d];p.key=h}for(o=0,u=n(l);o<s;++o)l[u[o]].index=o;return e(l,u),l}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:Fy(b_.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:Fy(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Rb:"function"==typeof t?t:Fy(b_.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Ib:t,i):e},i}function zb(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Ib(t,n)}}function Ub(t,n){if((a=t.length)>1)for(var e,r,i,o,u,a,c=0,s=t[n[0]].length;c<s;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o}function Wb(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Ib(t,n)}}function qb(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,s=0;a<i;++a){for(var l=t[n[a]],f=l[u][1]||0,h=(f-(l[u-1][1]||0))/2,p=0;p<a;++p){var d=t[n[p]];h+=(d[u][1]||0)-(d[u-1][1]||0)}c+=f,s+=h*f}e[u-1][1]+=e[u-1][0]=o,c&&(o-=s/c)}e[u-1][1]+=e[u-1][0]=o,Ib(t,n)}}function Hb(t){var n=t.map(Gb);return Rb(t).sort((function(t,e){return n[t]-n[e]}))}function Gb(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Yb(t){return Hb(t).reverse()}function $b(t){var n,e,r=t.length,i=t.map(Gb),o=Rb(t).sort((function(t,n){return i[n]-i[t]})),u=0,a=0,c=[],s=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],s.push(e));return s.reverse().concat(c)}function Vb(t){return Rb(t).reverse()}function Kb(t){return function(){return t}}function Xb(t){return t[0]}function Zb(t){return t[1]}function Jb(){this._=null}function Qb(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function tm(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function nm(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function em(t){for(;t.L;)t=t.L;return t}_b.prototype={areaStart:V_,areaEnd:V_,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Db.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ab(this,this._t0,xb(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ab(this,xb(this,e=wb(this,t,n)),e);break;default:Ab(this,this._t0,e=wb(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Eb.prototype=Object.create(Db.prototype)).point=function(t,n){Db.prototype.point.call(this,n,t)},Cb.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Sb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=kb(t),i=kb(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Nb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}},Jb.prototype={constructor:Jb,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=em(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(tm(this,e),e=(t=e).U),e.C=!1,r.C=!0,nm(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(nm(this,e),e=(t=e).U),e.C=!1,r.C=!0,tm(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?em(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,tm(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,nm(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,tm(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,nm(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,tm(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,nm(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};const rm=Jb;function im(t,n,e,r){var i=[null,null],o=Mm.push(i)-1;return i.left=t,i.right=n,e&&um(i,t,n,e),r&&um(i,n,t,r),Cm[t.index].halfedges.push(o),Cm[n.index].halfedges.push(o),i}function om(t,n,e){var r=[n,e];return r.left=t,r}function um(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function am(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],s=u[1],l=0,f=1,h=a[0]-c,p=a[1]-s;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>l&&(l=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<f&&(f=o)}if(o=e-s,p||!(o>0)){if(o/=p,p<0){if(o<l)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>l&&(l=o)}if(o=i-s,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>l&&(l=o)}else if(p>0){if(o<l)return;o<f&&(f=o)}return!(l>0||f<1)||(l>0&&(t[0]=[c+l*h,s+l*p]),f<1&&(t[1]=[c+f*h,s+f*p]),!0)}}}}}function cm(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],s=t.left,l=t.right,f=s[0],h=s[1],p=l[0],d=l[1],g=(f+p)/2,v=(h+d)/2;if(d===h){if(g<n||g>=r)return;if(f>p){if(c){if(c[1]>=i)return}else c=[g,e];o=[g,i]}else{if(c){if(c[1]<e)return}else c=[g,i];o=[g,e]}}else if(a=v-(u=(f-p)/(d-h))*g,u<-1||u>1)if(f>p){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<d){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function sm(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function lm(t,n){return n[+(n.left!==t.site)]}function fm(t,n){return n[+(n.left===t.site)]}var hm,pm=[];function dm(){Qb(this),this.x=this.y=this.arc=this.site=this.cy=null}function gm(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,s=r[1]-a,l=o[0]-u,f=o[1]-a,h=2*(c*f-s*l);if(!(h>=-km)){var p=c*c+s*s,d=l*l+f*f,g=(f*p-s*d)/h,v=(c*d-l*p)/h,y=pm.pop()||new dm;y.arc=t,y.site=i,y.x=g+u,y.y=(y.cy=v+a)+Math.sqrt(g*g+v*v),t.circle=y;for(var _=null,b=Tm._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){_=b.P;break}b=b.L}else{if(!b.R){_=b;break}b=b.R}Tm.insert(_,y),_||(hm=y)}}}}function vm(t){var n=t.circle;n&&(n.P||(hm=n.N),Tm.remove(n),pm.push(n),Qb(n),t.circle=null)}var ym=[];function _m(){Qb(this),this.edge=this.site=this.circle=null}function bm(t){var n=ym.pop()||new _m;return n.site=t,n}function mm(t){vm(t),Em.remove(t),ym.push(t),Qb(t)}function wm(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];mm(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Sm&&Math.abs(r-c.circle.cy)<Sm;)o=c.P,a.unshift(c),mm(c),c=o;a.unshift(c),vm(c);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<Sm&&Math.abs(r-s.circle.cy)<Sm;)u=s.N,a.push(s),mm(s),s=u;a.push(s),vm(s);var l,f=a.length;for(l=1;l<f;++l)s=a[l],c=a[l-1],um(s.edge,c.site,s.site,i);c=a[0],(s=a[f-1]).edge=im(c.site,s.site,null,i),gm(c),gm(s)}function xm(t){for(var n,e,r,i,o=t[0],u=t[1],a=Em._;a;)if((r=Am(a,u)-o)>Sm)a=a.L;else{if(!((i=o-Dm(a,u))>Sm)){r>-Sm?(n=a.P,e=a):i>-Sm?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Cm[t.index]={site:t,halfedges:[]}}(t);var c=bm(t);if(Em.insert(n,c),n||e){if(n===e)return vm(n),e=bm(n.site),Em.insert(c,e),c.edge=e.edge=im(n.site,c.site),gm(n),void gm(e);if(e){vm(n),vm(e);var s=n.site,l=s[0],f=s[1],h=t[0]-l,p=t[1]-f,d=e.site,g=d[0]-l,v=d[1]-f,y=2*(h*v-p*g),_=h*h+p*p,b=g*g+v*v,m=[(v*_-p*b)/y+l,(h*b-g*_)/y+f];um(e.edge,s,d,m),c.edge=im(s,t,null,m),e.edge=im(t,d,null,m),gm(n),gm(e)}else c.edge=im(n.site,c.site)}}function Am(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],s=c-n;if(!s)return a;var l=a-r,f=1/o-1/s,h=l/s;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*s)-c+s/2+i-o/2)))/f+r:(r+a)/2}function Dm(t,n){var e=t.N;if(e)return Am(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Em,Cm,Tm,Mm,Sm=1e-6,km=1e-12;function Om(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Nm(t,n){return n[1]-t[1]||n[0]-t[0]}function Pm(t,n){var e,r,i,o=t.sort(Nm).pop();for(Mm=[],Cm=new Array(t.length),Em=new rm,Tm=new rm;;)if(i=hm,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(xm(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;wm(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Cm.length;i<o;++i)if((t=Cm[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=sm(t,Mm[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],s=+n[1][1];!function(t,n,e,r){for(var i,o=Mm.length;o--;)cm(i=Mm[o],t,n,e,r)&&am(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Sm||Math.abs(i[0][1]-i[1][1])>Sm)||delete Mm[o]}(u,a,c,s),function(t,n,e,r){var i,o,u,a,c,s,l,f,h,p,d,g,v=Cm.length,y=!0;for(i=0;i<v;++i)if(o=Cm[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)Mm[c[a]]||c.splice(a,1);for(a=0,s=c.length;a<s;)d=(p=fm(o,Mm[c[a]]))[0],g=p[1],f=(l=lm(o,Mm[c[++a%s]]))[0],h=l[1],(Math.abs(d-f)>Sm||Math.abs(g-h)>Sm)&&(c.splice(a,0,Mm.push(om(u,p,Math.abs(d-t)<Sm&&r-g>Sm?[t,Math.abs(f-t)<Sm?h:r]:Math.abs(g-r)<Sm&&e-d>Sm?[Math.abs(h-r)<Sm?f:e,r]:Math.abs(d-e)<Sm&&g-n>Sm?[e,Math.abs(f-e)<Sm?h:n]:Math.abs(g-n)<Sm&&d-t>Sm?[Math.abs(h-n)<Sm?f:t,n]:null))-1),++s);s&&(y=!1)}if(y){var _,b,m,w=1/0;for(i=0,y=null;i<v;++i)(o=Cm[i])&&(m=(_=(u=o.site)[0]-t)*_+(b=u[1]-n)*b)<w&&(w=m,y=o);if(y){var x=[t,n],A=[t,r],D=[e,r],E=[e,n];y.halfedges.push(Mm.push(om(u=y.site,x,A))-1,Mm.push(om(u,A,D))-1,Mm.push(om(u,D,E))-1,Mm.push(om(u,E,x))-1)}}for(i=0;i<v;++i)(o=Cm[i])&&(o.halfedges.length||delete Cm[i])}(u,a,c,s)}this.edges=Mm,this.cells=Cm,Em=Tm=Mm=Cm=null}function Bm(){var t=Xb,n=Zb,e=null;function r(r){return new Pm(r.map((function(e,i){var o=[Math.round(t(e,i,r)/Sm)*Sm,Math.round(n(e,i,r)/Sm)*Sm];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:Kb(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:Kb(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r}function Fm(t){return function(){return t}}function Im(t,n,e){this.target=t,this.type=n,this.transform=e}function Rm(t,n,e){this.k=t,this.x=n,this.y=e}Pm.prototype={constructor:Pm,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return lm(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a=e.site,c=-1,s=n[i[o-1]],l=s.left===a?s.right:s.left;++c<o;)u=l,l=(s=n[i[c]]).left===a?s.right:s.left,u&&l&&r<u.index&&r<l.index&&Om(a,u,l)<0&&t.push([a.data,u.data,l.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],s=n-i.site[1],l=c*c+s*s;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],s=n-a[1],f=c*c+s*s;f<l&&(l=f,u=a.index)}}))}while(null!==u);return o._found=r,null==e||l<=e*e?i.site:null}},Rm.prototype={constructor:Rm,scale:function(t){return 1===t?this:new Rm(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Rm(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var jm=new Rm(1,0,0);function Lm(t){return t.__zoom||jm}function zm(){Tt.stopImmediatePropagation()}function Um(){Tt.preventDefault(),Tt.stopImmediatePropagation()}function Wm(){return!Tt.button}function qm(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Hm(){return this.__zoom||jm}function Gm(){return-Tt.deltaY*(Tt.deltaMode?120:1)/500}function Ym(){return"ontouchstart"in this}function $m(){var t,n,e=Wm,r=qm,i=Gm,o=Ym,u=0,a=1/0,c=-a,s=a,l=c,f=s,h=250,p=Tr,d=[],g=ht("start","zoom","end"),v=500,y=0;function _(t){t.property("__zoom",Hm).on("wheel.zoom",C).on("mousedown.zoom",T).on("dblclick.zoom",M).filter(o).on("touchstart.zoom",S).on("touchmove.zoom",k).on("touchend.zoom touchcancel.zoom",O).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function b(t,n){return(n=Math.max(u,Math.min(a,n)))===t.k?t:new Rm(n,t.x,t.y)}function m(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Rm(t.k,r,i)}function w(t,n){var e=t.invertX(n[0][0])-c,r=t.invertX(n[1][0])-s,i=t.invertY(n[0][1])-l,o=t.invertY(n[1][1])-f;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function x(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function A(t,n,e){t.on("start.zoom",(function(){D(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){D(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=D(t,i),u=r.apply(t,i),a=e||x(u),c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=t.__zoom,l="function"==typeof n?n.apply(t,i):n,f=p(s.invert(a).concat(c/s.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=f(t),e=c/n[2];t=new Rm(e,a[0]-n[0]*e,a[1]-n[1]*e)}o.zoom(null,t)}}))}function D(t,n){for(var e,r=0,i=d.length;r<i;++r)if((e=d[r]).that===t)return e;return new E(t,n)}function E(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=r.apply(t,n)}function C(){if(e.apply(this,arguments)){var t=D(this,arguments),n=this.__zoom,r=Math.max(u,Math.min(a,n.k*Math.pow(2,i.apply(this,arguments)))),o=It(this);if(t.wheel)t.mouse[0][0]===o[0]&&t.mouse[0][1]===o[1]||(t.mouse[1]=n.invert(t.mouse[0]=o)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[o,n.invert(o)],fi(this),t.start()}Um(),t.wheel=setTimeout(c,150),t.zoom("mouse",w(m(b(n,r),t.mouse[0],t.mouse[1]),t.extent))}function c(){t.wheel=null,t.end()}}function T(){if(!n&&e.apply(this,arguments)){var t=D(this,arguments),r=Nn(Tt.view).on("mousemove.zoom",a,!0).on("mouseup.zoom",c,!0),i=It(this),o=Tt.clientX,u=Tt.clientY;jn(Tt.view),zm(),t.mouse=[i,this.__zoom.invert(i)],fi(this),t.start()}function a(){if(Um(),!t.moved){var n=Tt.clientX-o,e=Tt.clientY-u;t.moved=n*n+e*e>y}t.zoom("mouse",w(m(t.that.__zoom,t.mouse[0]=It(t.that),t.mouse[1]),t.extent))}function c(){r.on("mousemove.zoom mouseup.zoom",null),Ln(Tt.view,t.moved),Um(),t.end()}}function M(){if(e.apply(this,arguments)){var t=this.__zoom,n=It(this),i=t.invert(n),o=t.k*(Tt.shiftKey?.5:2),u=w(m(b(t,o),n,i),r.apply(this,arguments));Um(),h>0?Nn(this).transition().duration(h).call(A,u,n):Nn(this).call(_.transform,u)}}function S(){if(e.apply(this,arguments)){var n,r,i,o,u=D(this,arguments),a=Tt.changedTouches,c=a.length;for(zm(),r=0;r<c;++r)o=[o=Bn(this,a,(i=a[r]).identifier),this.__zoom.invert(o),i.identifier],u.touch0?u.touch1||(u.touch1=o):(u.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!u.touch1))return u.end(),void((o=Nn(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout((function(){t=null}),v),fi(this),u.start())}}function k(){var n,e,r,i,o=D(this,arguments),u=Tt.changedTouches,a=u.length;for(Um(),t&&(t=clearTimeout(t)),n=0;n<a;++n)r=Bn(this,u,(e=u[n]).identifier),o.touch0&&o.touch0[2]===e.identifier?o.touch0[0]=r:o.touch1&&o.touch1[2]===e.identifier&&(o.touch1[0]=r);if(e=o.that.__zoom,o.touch1){var c=o.touch0[0],s=o.touch0[1],l=o.touch1[0],f=o.touch1[1],h=(h=l[0]-c[0])*h+(h=l[1]-c[1])*h,p=(p=f[0]-s[0])*p+(p=f[1]-s[1])*p;e=b(e,Math.sqrt(h/p)),r=[(c[0]+l[0])/2,(c[1]+l[1])/2],i=[(s[0]+f[0])/2,(s[1]+f[1])/2]}else{if(!o.touch0)return;r=o.touch0[0],i=o.touch0[1]}o.zoom("touch",w(m(e,r,i),o.extent))}function O(){var t,e,r=D(this,arguments),i=Tt.changedTouches,o=i.length;for(zm(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),v),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return _.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Hm),t!==e?A(t,n):e.interrupt().each((function(){D(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},_.scaleBy=function(t,n){_.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}))},_.scaleTo=function(t,n){_.transform(t,(function(){var t=r.apply(this,arguments),e=this.__zoom,i=x(t),o=e.invert(i),u="function"==typeof n?n.apply(this,arguments):n;return w(m(b(e,u),i,o),t)}))},_.translateBy=function(t,n,e){_.transform(t,(function(){return w(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments))}))},_.translateTo=function(t,n,e){_.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,o=x(t);return w(jm.translate(o[0],o[1]).scale(i.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t)}))},E.prototype={start:function(){return 1==++this.active&&(this.index=d.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(d.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Pt(new Im(_,t,this.that.__zoom),g.apply,g,[t,this.that,this.args])}},_.wheelDelta=function(t){return arguments.length?(i="function"==typeof t?t:Fm(+t),_):i},_.filter=function(t){return arguments.length?(e="function"==typeof t?t:Fm(!!t),_):e},_.touchable=function(t){return arguments.length?(o="function"==typeof t?t:Fm(!!t),_):o},_.extent=function(t){return arguments.length?(r="function"==typeof t?t:Fm([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),_):r},_.scaleExtent=function(t){return arguments.length?(u=+t[0],a=+t[1],_):[u,a]},_.translateExtent=function(t){return arguments.length?(c=+t[0][0],s=+t[1][0],l=+t[0][1],f=+t[1][1],_):[[c,l],[s,f]]},_.duration=function(t){return arguments.length?(h=+t,_):h},_.interpolate=function(t){return arguments.length?(p=t,_):p},_.on=function(){var t=g.on.apply(g,arguments);return t===g?_:t},_.clickDistance=function(t){return arguments.length?(y=(t=+t)*t,_):Math.sqrt(y)},_}Lm.prototype=Rm.prototype},5915:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.METADATA_KEY={provide:"inversify-binding-decorators:provide"}},5620:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(3063),i=e(2721),o=e(8064),u=e(3351),a=e(3813);n.default=function(t){var n=function(n,e){return n(t).to(e)},e=new a.default((function(t,e){return n(t,e)._binding}));return new r.default(new u.default((function(t,e){return n(t,e)}),e),new i.default(n,e),new o.default(n,e))}},651:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(6700),i=e(5915);n.default=function(t,n){return function(e){var o=Reflect.hasOwnMetadata(r.METADATA_KEY.PARAM_TYPES,e),u=!0===n;if(!0===u&&!1===o)r.decorate(r.injectable(),e);else if(!0===u&&!0===o);else try{r.decorate(r.injectable(),e)}catch(t){throw new Error("Cannot apply @provide decorator multiple times but is has been used multiple times in "+e.name+" Please use @provide(ID, true) if you are trying to declare multiple bindings!")}var a={constraint:function(n,e){return n(t).to(e)},implementationType:e},c=Reflect.getMetadata(i.METADATA_KEY.provide,Reflect)||[],s=[a].concat(c);return Reflect.defineMetadata(i.METADATA_KEY.provide,s,Reflect),e}}},2677:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(5915),i=e(6700);n.default=function(){return new i.ContainerModule((function(t,n){(Reflect.getMetadata(r.METADATA_KEY.provide,Reflect)||[]).map((function(n){return function(t,n){return t.constraint(n,t.implementationType)}(n,t)}))}))}},4904:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(788);n.autoProvide=r.default;var i=e(651);n.provide=i.default;var o=e(5620);n.fluentProvide=o.default;var u=e(2677);n.buildProviderModule=u.default},3813:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(6700),i=e(6700),o=e(5915),u=function(){function t(t){this._binding=t}return t.prototype.done=function(t){var n=this;return function(e){var u=Reflect.hasOwnMetadata(i.METADATA_KEY.PARAM_TYPES,e),a=!0===t;if(!0===a&&!1===u)r.decorate(r.injectable(),e);else if(!0===a&&!0===u);else try{r.decorate(r.injectable(),e)}catch(t){throw new Error("Cannot apply @provideFluent decorator multiple times but is has been used multiple times in "+e.name+" Please use done(true) if you are trying to declare multiple bindings!")}var c={constraint:n._binding,implementationType:e},s=Reflect.getMetadata(o.METADATA_KEY.provide,Reflect)||[],l=[c].concat(s);return Reflect.defineMetadata(o.METADATA_KEY.provide,l,Reflect),e}},t}();n.default=u},3351:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(3993),i=e(2721),o=e(8064),u=e(3813),a=function(){function t(t,n){this._bindingInSyntax=t,this._provideDoneSyntax=n}return t.prototype.inSingletonScope=function(){var t=this,n=function(n,e){return t._bindingInSyntax(n,e).inSingletonScope()},e=new u.default(n),a=new i.default(n,e),c=new o.default(n,e);return new r.default(a,c)},t.prototype.inTransientScope=function(){var t=this,n=function(n,e){return t._bindingInSyntax(n,e).inTransientScope()},e=new u.default(n),a=new i.default(n,e),c=new o.default(n,e);return new r.default(a,c)},t.prototype.done=function(t){return this._provideDoneSyntax.done(t)},t}();n.default=a},3063:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=function(){function t(t,n,e){this._provideInSyntax=t,this._provideWhenSyntax=n,this._provideOnSyntax=e}return t.prototype.when=function(t){return this._provideWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._provideWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetTagged=function(t,n){return this._provideWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._provideWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._provideWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._provideWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._provideWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._provideWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._provideWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._provideWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._provideWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._provideWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._provideWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._provideWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._provideOnSyntax.onActivation(t)},t.prototype.inSingletonScope=function(){return this._provideInSyntax.inSingletonScope()},t.prototype.inTransientScope=function(){return this._provideInSyntax.inTransientScope()},t.prototype.done=function(t){return this._provideInSyntax.done(t)},t}();n.default=e},8064:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(2721),i=e(3813),o=function(){function t(t,n){this._bindingOnSyntax=t,this._provideDoneSyntax=n}return t.prototype.onActivation=function(t){var n=this,e=function(e,r){return n._bindingOnSyntax(e,r).onActivation(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.done=function(t){return this._provideDoneSyntax.done(t)},t}();n.default=o},3993:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=function(){function t(t,n){this._provideWhenSyntax=t,this._provideOnSyntax=n}return t.prototype.when=function(t){return this._provideWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._provideWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetTagged=function(t,n){return this._provideWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._provideWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._provideWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._provideWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._provideWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._provideWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._provideWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._provideWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._provideWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._provideWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._provideWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._provideWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._provideOnSyntax.onActivation(t)},t.prototype.done=function(t){return this._provideWhenSyntax.done(t)},t}();n.default=e},2721:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(8064),i=e(3813),o=function(){function t(t,n){this._bindingWhenSyntax=t,this._provideDoneSyntax=n}return t.prototype.when=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).when(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenTargetNamed=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenTargetNamed(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenTargetTagged=function(t,n){var e=this,o=function(r,i){return e._bindingWhenSyntax(r,i).whenTargetTagged(t,n)},u=new i.default(o);return new r.default(o,u)},t.prototype.whenInjectedInto=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenInjectedInto(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenParentNamed=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenParentNamed(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenParentTagged=function(t,n){var e=this,o=function(r,i){return e._bindingWhenSyntax(r,i).whenParentTagged(t,n)},u=new i.default(o);return new r.default(o,u)},t.prototype.whenAnyAncestorIs=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenAnyAncestorIs(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenNoAncestorIs=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenNoAncestorIs(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenAnyAncestorNamed=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenAnyAncestorNamed(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenAnyAncestorTagged=function(t,n){var e=this,o=function(r,i){return e._bindingWhenSyntax(r,i).whenAnyAncestorTagged(t,n)},u=new i.default(o);return new r.default(o,u)},t.prototype.whenNoAncestorNamed=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenNoAncestorNamed(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenNoAncestorTagged=function(t,n){var e=this,o=function(r,i){return e._bindingWhenSyntax(r,i).whenNoAncestorTagged(t,n)},u=new i.default(o);return new r.default(o,u)},t.prototype.whenAnyAncestorMatches=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenAnyAncestorMatches(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.whenNoAncestorMatches=function(t){var n=this,e=function(e,r){return n._bindingWhenSyntax(e,r).whenNoAncestorMatches(t)},o=new i.default(e);return new r.default(e,o)},t.prototype.done=function(t){return this._provideDoneSyntax.done(t)},t}();n.default=o},788:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(6700),i=e(651);n.default=function(t){for(var n=[],e=1;e<arguments.length;e++)n[e-1]=arguments[e];n.forEach((function(t){Object.keys(t).forEach((function(n){var e=t[n],o=i.default(e);r.decorate(o,e)}))}))}},9934:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.tagProperty=n.tagParameter=n.decorate=void 0;var r=e(6674),i=e(6867);function o(t,n,e,i,o){var u={},a="number"==typeof o,c=void 0!==o&&a?o.toString():e;if(a&&void 0!==e)throw new Error(r.INVALID_DECORATOR_OPERATION);Reflect.hasOwnMetadata(t,n)&&(u=Reflect.getMetadata(t,n));var s=u[c];if(Array.isArray(s))for(var l=0,f=s;l<f.length;l++){var h=f[l];if(h.key===i.key)throw new Error(r.DUPLICATED_METADATA+" "+h.key.toString())}else s=[];s.push(i),u[c]=s,Reflect.defineMetadata(t,u,n)}function u(t,n){Reflect.decorate(t,n)}function a(t,n){return function(e,r){n(e,r,t)}}n.tagParameter=function(t,n,e,r){o(i.TAGGED,t,n,r,e)},n.tagProperty=function(t,n,e){o(i.TAGGED_PROP,t.constructor,n,e)},n.decorate=function(t,n,e){"number"==typeof e?u([a(e,t)],n):"string"==typeof e?Reflect.decorate([t],n,e):u([t],n)}},5744:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.inject=n.LazyServiceIdentifer=void 0;var r=e(6674),i=e(6867),o=e(7738),u=e(9934),a=function(){function t(t){this._cb=t}return t.prototype.unwrap=function(){return this._cb()},t}();n.LazyServiceIdentifer=a,n.inject=function(t){return function(n,e,a){if(void 0===t)throw new Error(r.UNDEFINED_INJECT_ANNOTATION(n.name));var c=new o.Metadata(i.INJECT_TAG,t);"number"==typeof a?u.tagParameter(n,e,a,c):u.tagProperty(n,e,c)}}},4315:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.injectable=void 0;var r=e(6674),i=e(6867);n.injectable=function(){return function(t){if(Reflect.hasOwnMetadata(i.PARAM_TYPES,t))throw new Error(r.DUPLICATED_INJECTABLE_DECORATOR);var n=Reflect.getMetadata(i.DESIGN_PARAM_TYPES,t)||[];return Reflect.defineMetadata(i.PARAM_TYPES,n,t),t}}},1693:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.multiInject=void 0;var r=e(6867),i=e(7738),o=e(9934);n.multiInject=function(t){return function(n,e,u){var a=new i.Metadata(r.MULTI_INJECT_TAG,t);"number"==typeof u?o.tagParameter(n,e,u,a):o.tagProperty(n,e,a)}}},8085:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.named=void 0;var r=e(6867),i=e(7738),o=e(9934);n.named=function(t){return function(n,e,u){var a=new i.Metadata(r.NAMED_TAG,t);"number"==typeof u?o.tagParameter(n,e,u,a):o.tagProperty(n,e,a)}}},6515:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.optional=void 0;var r=e(6867),i=e(7738),o=e(9934);n.optional=function(){return function(t,n,e){var u=new i.Metadata(r.OPTIONAL_TAG,!0);"number"==typeof e?o.tagParameter(t,n,e,u):o.tagProperty(t,n,u)}}},7014:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.postConstruct=void 0;var r=e(6674),i=e(6867),o=e(7738);n.postConstruct=function(){return function(t,n,e){var u=new o.Metadata(i.POST_CONSTRUCT,n);if(Reflect.hasOwnMetadata(i.POST_CONSTRUCT,t.constructor))throw new Error(r.MULTIPLE_POST_CONSTRUCT_METHODS);Reflect.defineMetadata(i.POST_CONSTRUCT,u,t.constructor)}}},2052:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.tagged=void 0;var r=e(7738),i=e(9934);n.tagged=function(t,n){return function(e,o,u){var a=new r.Metadata(t,n);"number"==typeof u?i.tagParameter(e,o,u,a):i.tagProperty(e,o,a)}}},5638:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.targetName=void 0;var r=e(6867),i=e(7738),o=e(9934);n.targetName=function(t){return function(n,e,u){var a=new i.Metadata(r.NAME_TAG,t);o.tagParameter(n,e,u,a)}}},6757:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.unmanaged=void 0;var r=e(6867),i=e(7738),o=e(9934);n.unmanaged=function(){return function(t,n,e){var u=new i.Metadata(r.UNMANAGED_TAG,!0);o.tagParameter(t,n,e,u)}}},4290:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Binding=void 0;var r=e(8421),i=e(7791),o=function(){function t(t,n){this.id=i.id(),this.activated=!1,this.serviceIdentifier=t,this.scope=n,this.type=r.BindingTypeEnum.Invalid,this.constraint=function(t){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.dynamicValue=null}return t.prototype.clone=function(){var n=new t(this.serviceIdentifier,this.scope);return n.activated=n.scope===r.BindingScopeEnum.Singleton&&this.activated,n.implementationType=this.implementationType,n.dynamicValue=this.dynamicValue,n.scope=this.scope,n.type=this.type,n.factory=this.factory,n.provider=this.provider,n.constraint=this.constraint,n.onActivation=this.onActivation,n.cache=this.cache,n},t}();n.Binding=o},3184:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BindingCount=void 0,n.BindingCount={MultipleBindingsAvailable:2,NoBindingsAvailable:0,OnlyOneBindingAvailable:1}},6674:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.STACK_OVERFLOW=n.CIRCULAR_DEPENDENCY_IN_FACTORY=n.POST_CONSTRUCT_ERROR=n.MULTIPLE_POST_CONSTRUCT_METHODS=n.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK=n.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE=n.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE=n.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT=n.ARGUMENTS_LENGTH_MISMATCH=n.INVALID_DECORATOR_OPERATION=n.INVALID_TO_SELF_VALUE=n.INVALID_FUNCTION_BINDING=n.INVALID_MIDDLEWARE_RETURN=n.NO_MORE_SNAPSHOTS_AVAILABLE=n.INVALID_BINDING_TYPE=n.NOT_IMPLEMENTED=n.CIRCULAR_DEPENDENCY=n.UNDEFINED_INJECT_ANNOTATION=n.MISSING_INJECT_ANNOTATION=n.MISSING_INJECTABLE_ANNOTATION=n.NOT_REGISTERED=n.CANNOT_UNBIND=n.AMBIGUOUS_MATCH=n.KEY_NOT_FOUND=n.NULL_ARGUMENT=n.DUPLICATED_METADATA=n.DUPLICATED_INJECTABLE_DECORATOR=void 0,n.DUPLICATED_INJECTABLE_DECORATOR="Cannot apply @injectable decorator multiple times.",n.DUPLICATED_METADATA="Metadata key was used more than once in a parameter:",n.NULL_ARGUMENT="NULL argument",n.KEY_NOT_FOUND="Key Not Found",n.AMBIGUOUS_MATCH="Ambiguous match found for serviceIdentifier:",n.CANNOT_UNBIND="Could not unbind serviceIdentifier:",n.NOT_REGISTERED="No matching bindings found for serviceIdentifier:",n.MISSING_INJECTABLE_ANNOTATION="Missing required @injectable annotation in:",n.MISSING_INJECT_ANNOTATION="Missing required @inject or @multiInject annotation in:",n.UNDEFINED_INJECT_ANNOTATION=function(t){return"@inject called with undefined this could mean that the class "+t+" has a circular dependency problem. You can use a LazyServiceIdentifer to  overcome this limitation."},n.CIRCULAR_DEPENDENCY="Circular dependency found:",n.NOT_IMPLEMENTED="Sorry, this feature is not fully implemented yet.",n.INVALID_BINDING_TYPE="Invalid binding type:",n.NO_MORE_SNAPSHOTS_AVAILABLE="No snapshot available to restore.",n.INVALID_MIDDLEWARE_RETURN="Invalid return type in middleware. Middleware must return!",n.INVALID_FUNCTION_BINDING="Value provided to function binding must be a function!",n.INVALID_TO_SELF_VALUE="The toSelf function can only be applied when a constructor is used as service identifier",n.INVALID_DECORATOR_OPERATION="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.",n.ARGUMENTS_LENGTH_MISMATCH=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return"The number of constructor arguments in the derived class "+t[0]+" must be >= than the number of constructor arguments of its base class."},n.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT="Invalid Container constructor argument. Container options must be an object.",n.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE="Invalid Container option. Default scope must be a string ('singleton' or 'transient').",n.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE="Invalid Container option. Auto bind injectable must be a boolean",n.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK="Invalid Container option. Skip base check must be a boolean",n.MULTIPLE_POST_CONSTRUCT_METHODS="Cannot apply @postConstruct decorator multiple times in the same class",n.POST_CONSTRUCT_ERROR=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return"@postConstruct error in class "+t[0]+": "+t[1]},n.CIRCULAR_DEPENDENCY_IN_FACTORY=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return"It looks like there is a circular dependency in one of the '"+t[0]+"' bindings. Please investigate bindings withservice identifier '"+t[1]+"'."},n.STACK_OVERFLOW="Maximum call stack size exceeded"},8421:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.TargetTypeEnum=n.BindingTypeEnum=n.BindingScopeEnum=void 0,n.BindingScopeEnum={Request:"Request",Singleton:"Singleton",Transient:"Transient"},n.BindingTypeEnum={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},n.TargetTypeEnum={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"}},6867:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.NON_CUSTOM_TAG_KEYS=n.POST_CONSTRUCT=n.DESIGN_PARAM_TYPES=n.PARAM_TYPES=n.TAGGED_PROP=n.TAGGED=n.MULTI_INJECT_TAG=n.INJECT_TAG=n.OPTIONAL_TAG=n.UNMANAGED_TAG=n.NAME_TAG=n.NAMED_TAG=void 0,n.NAMED_TAG="named",n.NAME_TAG="name",n.UNMANAGED_TAG="unmanaged",n.OPTIONAL_TAG="optional",n.INJECT_TAG="inject",n.MULTI_INJECT_TAG="multi_inject",n.TAGGED="inversify:tagged",n.TAGGED_PROP="inversify:tagged_props",n.PARAM_TYPES="inversify:paramtypes",n.DESIGN_PARAM_TYPES="design:paramtypes",n.POST_CONSTRUCT="post_construct",n.NON_CUSTOM_TAG_KEYS=[n.INJECT_TAG,n.MULTI_INJECT_TAG,n.NAME_TAG,n.UNMANAGED_TAG,n.NAMED_TAG,n.OPTIONAL_TAG]},1389:function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},i=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},o=this&&this.__spreadArray||function(t,n){for(var e=0,r=n.length,i=t.length;e<r;e++,i++)t[i]=n[e];return t};Object.defineProperty(n,"__esModule",{value:!0}),n.Container=void 0;var u=e(4290),a=e(6674),c=e(8421),s=e(6867),l=e(1377),f=e(6311),h=e(1927),p=e(1860),d=e(7791),g=e(5800),v=e(5700),y=e(175),_=function(){function t(t){this._appliedMiddleware=[];var n=t||{};if("object"!=typeof n)throw new Error(""+a.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);if(void 0===n.defaultScope)n.defaultScope=c.BindingScopeEnum.Transient;else if(n.defaultScope!==c.BindingScopeEnum.Singleton&&n.defaultScope!==c.BindingScopeEnum.Transient&&n.defaultScope!==c.BindingScopeEnum.Request)throw new Error(""+a.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);if(void 0===n.autoBindInjectable)n.autoBindInjectable=!1;else if("boolean"!=typeof n.autoBindInjectable)throw new Error(""+a.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);if(void 0===n.skipBaseClassChecks)n.skipBaseClassChecks=!1;else if("boolean"!=typeof n.skipBaseClassChecks)throw new Error(""+a.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);this.options={autoBindInjectable:n.autoBindInjectable,defaultScope:n.defaultScope,skipBaseClassChecks:n.skipBaseClassChecks},this.id=d.id(),this._bindingDictionary=new y.Lookup,this._snapshots=[],this._middleware=null,this.parent=null,this._metadataReader=new l.MetadataReader}return t.merge=function(n,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var u=new t,a=o([n,e],r).map((function(t){return f.getBindingDictionary(t)})),c=f.getBindingDictionary(u);function s(t,n){t.traverse((function(t,e){e.forEach((function(t){n.add(t.serviceIdentifier,t.clone())}))}))}return a.forEach((function(t){s(t,c)})),u},t.prototype.load=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var e=this._getContainerModuleHelpersFactory(),r=0,i=t;r<i.length;r++){var o=i[r],u=e(o.id);o.registry(u.bindFunction,u.unbindFunction,u.isboundFunction,u.rebindFunction)}},t.prototype.loadAsync=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return r(this,void 0,void 0,(function(){var n,e,r,o,u;return i(this,(function(i){switch(i.label){case 0:n=this._getContainerModuleHelpersFactory(),e=0,r=t,i.label=1;case 1:return e<r.length?(o=r[e],u=n(o.id),[4,o.registry(u.bindFunction,u.unbindFunction,u.isboundFunction,u.rebindFunction)]):[3,4];case 2:i.sent(),i.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.prototype.unload=function(){for(var t=this,n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var r=function(t){return function(n){return n.moduleId===t}};n.forEach((function(n){var e=r(n.id);t._bindingDictionary.removeByCondition(e)}))},t.prototype.bind=function(t){var n=this.options.defaultScope||c.BindingScopeEnum.Transient,e=new u.Binding(t,n);return this._bindingDictionary.add(t,e),new p.BindingToSyntax(e)},t.prototype.rebind=function(t){return this.unbind(t),this.bind(t)},t.prototype.unbind=function(t){try{this._bindingDictionary.remove(t)}catch(n){throw new Error(a.CANNOT_UNBIND+" "+g.getServiceIdentifierAsString(t))}},t.prototype.unbindAll=function(){this._bindingDictionary=new y.Lookup},t.prototype.isBound=function(t){var n=this._bindingDictionary.hasKey(t);return!n&&this.parent&&(n=this.parent.isBound(t)),n},t.prototype.isBoundNamed=function(t,n){return this.isBoundTagged(t,s.NAMED_TAG,n)},t.prototype.isBoundTagged=function(t,n,e){var r=!1;if(this._bindingDictionary.hasKey(t)){var i=this._bindingDictionary.get(t),o=f.createMockRequest(this,t,n,e);r=i.some((function(t){return t.constraint(o)}))}return!r&&this.parent&&(r=this.parent.isBoundTagged(t,n,e)),r},t.prototype.snapshot=function(){this._snapshots.push(v.ContainerSnapshot.of(this._bindingDictionary.clone(),this._middleware))},t.prototype.restore=function(){var t=this._snapshots.pop();if(void 0===t)throw new Error(a.NO_MORE_SNAPSHOTS_AVAILABLE);this._bindingDictionary=t.bindings,this._middleware=t.middleware},t.prototype.createChild=function(n){var e=new t(n||this.options);return e.parent=this,e},t.prototype.applyMiddleware=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this._appliedMiddleware=this._appliedMiddleware.concat(t);var e=this._middleware?this._middleware:this._planAndResolve();this._middleware=t.reduce((function(t,n){return n(t)}),e)},t.prototype.applyCustomMetadataReader=function(t){this._metadataReader=t},t.prototype.get=function(t){return this._get(!1,!1,c.TargetTypeEnum.Variable,t)},t.prototype.getTagged=function(t,n,e){return this._get(!1,!1,c.TargetTypeEnum.Variable,t,n,e)},t.prototype.getNamed=function(t,n){return this.getTagged(t,s.NAMED_TAG,n)},t.prototype.getAll=function(t){return this._get(!0,!0,c.TargetTypeEnum.Variable,t)},t.prototype.getAllTagged=function(t,n,e){return this._get(!1,!0,c.TargetTypeEnum.Variable,t,n,e)},t.prototype.getAllNamed=function(t,n){return this.getAllTagged(t,s.NAMED_TAG,n)},t.prototype.resolve=function(t){var n=this.createChild();return n.bind(t).toSelf(),this._appliedMiddleware.forEach((function(t){n.applyMiddleware(t)})),n.get(t)},t.prototype._getContainerModuleHelpersFactory=function(){var t=this,n=function(t,n){t._binding.moduleId=n},e=function(e){return function(r){var i=t.rebind.bind(t)(r);return n(i,e),i}};return function(r){return{bindFunction:(i=r,function(e){var r=t.bind.bind(t)(e);return n(r,i),r}),isboundFunction:function(n){return t.isBound.bind(t)(n)},rebindFunction:e(r),unbindFunction:function(n){t.unbind.bind(t)(n)}};var i}},t.prototype._get=function(t,n,e,r,i,o){var u=null,c={avoidConstraints:t,contextInterceptor:function(t){return t},isMultiInject:n,key:i,serviceIdentifier:r,targetType:e,value:o};if(this._middleware){if(null==(u=this._middleware(c)))throw new Error(a.INVALID_MIDDLEWARE_RETURN)}else u=this._planAndResolve()(c);return u},t.prototype._planAndResolve=function(){var t=this;return function(n){var e=f.plan(t._metadataReader,t,n.isMultiInject,n.targetType,n.serviceIdentifier,n.key,n.value,n.avoidConstraints);return e=n.contextInterceptor(e),h.resolve(e)}},t}();n.Container=_},3244:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AsyncContainerModule=n.ContainerModule=void 0;var r=e(7791);n.ContainerModule=function(t){this.id=r.id(),this.registry=t};n.AsyncContainerModule=function(t){this.id=r.id(),this.registry=t}},5700:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ContainerSnapshot=void 0;var e=function(){function t(){}return t.of=function(n,e){var r=new t;return r.bindings=n,r.middleware=e,r},t}();n.ContainerSnapshot=e},175:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Lookup=void 0;var r=e(6674),i=function(){function t(){this._map=new Map}return t.prototype.getMap=function(){return this._map},t.prototype.add=function(t,n){if(null==t)throw new Error(r.NULL_ARGUMENT);if(null==n)throw new Error(r.NULL_ARGUMENT);var e=this._map.get(t);void 0!==e?(e.push(n),this._map.set(t,e)):this._map.set(t,[n])},t.prototype.get=function(t){if(null==t)throw new Error(r.NULL_ARGUMENT);var n=this._map.get(t);if(void 0!==n)return n;throw new Error(r.KEY_NOT_FOUND)},t.prototype.remove=function(t){if(null==t)throw new Error(r.NULL_ARGUMENT);if(!this._map.delete(t))throw new Error(r.KEY_NOT_FOUND)},t.prototype.removeByCondition=function(t){var n=this;this._map.forEach((function(e,r){var i=e.filter((function(n){return!t(n)}));i.length>0?n._map.set(r,i):n._map.delete(r)}))},t.prototype.hasKey=function(t){if(null==t)throw new Error(r.NULL_ARGUMENT);return this._map.has(t)},t.prototype.clone=function(){var n=new t;return this._map.forEach((function(t,e){t.forEach((function(t){return n.add(e,t.clone())}))})),n},t.prototype.traverse=function(t){this._map.forEach((function(n,e){t(e,n)}))},t}();n.Lookup=i},6700:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.multiBindToService=n.getServiceIdentifierAsString=n.typeConstraint=n.namedConstraint=n.taggedConstraint=n.traverseAncerstors=n.decorate=n.id=n.MetadataReader=n.postConstruct=n.targetName=n.multiInject=n.unmanaged=n.optional=n.LazyServiceIdentifer=n.inject=n.named=n.tagged=n.injectable=n.ContainerModule=n.AsyncContainerModule=n.TargetTypeEnum=n.BindingTypeEnum=n.BindingScopeEnum=n.Container=n.METADATA_KEY=void 0;var r=e(6867);n.METADATA_KEY=r;var i=e(1389);Object.defineProperty(n,"Container",{enumerable:!0,get:function(){return i.Container}});var o=e(8421);Object.defineProperty(n,"BindingScopeEnum",{enumerable:!0,get:function(){return o.BindingScopeEnum}}),Object.defineProperty(n,"BindingTypeEnum",{enumerable:!0,get:function(){return o.BindingTypeEnum}}),Object.defineProperty(n,"TargetTypeEnum",{enumerable:!0,get:function(){return o.TargetTypeEnum}});var u=e(3244);Object.defineProperty(n,"AsyncContainerModule",{enumerable:!0,get:function(){return u.AsyncContainerModule}}),Object.defineProperty(n,"ContainerModule",{enumerable:!0,get:function(){return u.ContainerModule}});var a=e(4315);Object.defineProperty(n,"injectable",{enumerable:!0,get:function(){return a.injectable}});var c=e(2052);Object.defineProperty(n,"tagged",{enumerable:!0,get:function(){return c.tagged}});var s=e(8085);Object.defineProperty(n,"named",{enumerable:!0,get:function(){return s.named}});var l=e(5744);Object.defineProperty(n,"inject",{enumerable:!0,get:function(){return l.inject}}),Object.defineProperty(n,"LazyServiceIdentifer",{enumerable:!0,get:function(){return l.LazyServiceIdentifer}});var f=e(6515);Object.defineProperty(n,"optional",{enumerable:!0,get:function(){return f.optional}});var h=e(6757);Object.defineProperty(n,"unmanaged",{enumerable:!0,get:function(){return h.unmanaged}});var p=e(1693);Object.defineProperty(n,"multiInject",{enumerable:!0,get:function(){return p.multiInject}});var d=e(5638);Object.defineProperty(n,"targetName",{enumerable:!0,get:function(){return d.targetName}});var g=e(7014);Object.defineProperty(n,"postConstruct",{enumerable:!0,get:function(){return g.postConstruct}});var v=e(1377);Object.defineProperty(n,"MetadataReader",{enumerable:!0,get:function(){return v.MetadataReader}});var y=e(7791);Object.defineProperty(n,"id",{enumerable:!0,get:function(){return y.id}});var _=e(9934);Object.defineProperty(n,"decorate",{enumerable:!0,get:function(){return _.decorate}});var b=e(758);Object.defineProperty(n,"traverseAncerstors",{enumerable:!0,get:function(){return b.traverseAncerstors}}),Object.defineProperty(n,"taggedConstraint",{enumerable:!0,get:function(){return b.taggedConstraint}}),Object.defineProperty(n,"namedConstraint",{enumerable:!0,get:function(){return b.namedConstraint}}),Object.defineProperty(n,"typeConstraint",{enumerable:!0,get:function(){return b.typeConstraint}});var m=e(5800);Object.defineProperty(n,"getServiceIdentifierAsString",{enumerable:!0,get:function(){return m.getServiceIdentifierAsString}});var w=e(600);Object.defineProperty(n,"multiBindToService",{enumerable:!0,get:function(){return w.multiBindToService}})},5228:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Context=void 0;var r=e(7791),i=function(){function t(t){this.id=r.id(),this.container=t}return t.prototype.addPlan=function(t){this.plan=t},t.prototype.setCurrentRequest=function(t){this.currentRequest=t},t}();n.Context=i},7738:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Metadata=void 0;var r=e(6867),i=function(){function t(t,n){this.key=t,this.value=n}return t.prototype.toString=function(){return this.key===r.NAMED_TAG?"named: "+this.value.toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+this.value+" }"},t}();n.Metadata=i},1377:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.MetadataReader=void 0;var r=e(6867),i=function(){function t(){}return t.prototype.getConstructorMetadata=function(t){return{compilerGeneratedMetadata:Reflect.getMetadata(r.PARAM_TYPES,t),userGeneratedMetadata:Reflect.getMetadata(r.TAGGED,t)||{}}},t.prototype.getPropertiesMetadata=function(t){return Reflect.getMetadata(r.TAGGED_PROP,t)||[]},t}();n.MetadataReader=i},5314:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Plan=void 0;n.Plan=function(t,n){this.parentContext=t,this.rootRequest=n}},6311:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getBindingDictionary=n.createMockRequest=n.plan=void 0;var r=e(3184),i=e(6674),o=e(8421),u=e(6867),a=e(5265),c=e(5800),s=e(5228),l=e(7738),f=e(5314),h=e(6e3),p=e(6748),d=e(8924);function g(t){return t._bindingDictionary}function v(t,n,e,o,u){var a,s=_(e.container,u.serviceIdentifier);return s.length===r.BindingCount.NoBindingsAvailable&&e.container.options.autoBindInjectable&&"function"==typeof u.serviceIdentifier&&t.getConstructorMetadata(u.serviceIdentifier).compilerGeneratedMetadata&&(e.container.bind(u.serviceIdentifier).toSelf(),s=_(e.container,u.serviceIdentifier)),a=n?s:s.filter((function(t){var n=new p.Request(t.serviceIdentifier,e,o,t,u);return t.constraint(n)})),function(t,n,e,o){switch(n.length){case r.BindingCount.NoBindingsAvailable:if(e.isOptional())return n;var u=c.getServiceIdentifierAsString(t),a=i.NOT_REGISTERED;throw a+=c.listMetadataForTarget(u,e),a+=c.listRegisteredBindingsForServiceIdentifier(o,u,_),new Error(a);case r.BindingCount.OnlyOneBindingAvailable:if(!e.isArray())return n;case r.BindingCount.MultipleBindingsAvailable:default:if(e.isArray())return n;throw u=c.getServiceIdentifierAsString(t),a=i.AMBIGUOUS_MATCH+" "+u,a+=c.listRegisteredBindingsForServiceIdentifier(o,u,_),new Error(a)}}(u.serviceIdentifier,a,u,e.container),a}function y(t,n,e,r,u,a){var c,s;if(null===u){c=v(t,n,r,null,a),s=new p.Request(e,r,null,c,a);var l=new f.Plan(r,s);r.addPlan(l)}else c=v(t,n,r,u,a),s=u.addChildRequest(a.serviceIdentifier,c,a);c.forEach((function(n){var e=null;if(a.isArray())e=s.addChildRequest(n.serviceIdentifier,n,a);else{if(n.cache)return;e=s}if(n.type===o.BindingTypeEnum.Instance&&null!==n.implementationType){var u=h.getDependencies(t,n.implementationType);if(!r.container.options.skipBaseClassChecks){var c=h.getBaseClassDependencyCount(t,n.implementationType);if(u.length<c){var l=i.ARGUMENTS_LENGTH_MISMATCH(h.getFunctionName(n.implementationType));throw new Error(l)}}u.forEach((function(n){y(t,!1,n.serviceIdentifier,r,e,n)}))}}))}function _(t,n){var e=[],r=g(t);return r.hasKey(n)?e=r.get(n):null!==t.parent&&(e=_(t.parent,n)),e}n.getBindingDictionary=g,n.plan=function(t,n,e,r,i,o,f,h){void 0===h&&(h=!1);var p=new s.Context(n),g=function(t,n,e,r,i,o){var a=t?u.MULTI_INJECT_TAG:u.INJECT_TAG,c=new l.Metadata(a,e),s=new d.Target(n,"",e,c);if(void 0!==i){var f=new l.Metadata(i,o);s.metadata.push(f)}return s}(e,r,i,0,o,f);try{return y(t,h,i,p,null,g),p}catch(t){throw a.isStackOverflowExeption(t)&&p.plan&&c.circularDependencyToException(p.plan.rootRequest),t}},n.createMockRequest=function(t,n,e,r){var i=new d.Target(o.TargetTypeEnum.Variable,"",n,new l.Metadata(e,r)),u=new s.Context(t);return new p.Request(n,u,null,[],i)}},8460:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.QueryableString=void 0;var e=function(){function t(t){this.str=t}return t.prototype.startsWith=function(t){return 0===this.str.indexOf(t)},t.prototype.endsWith=function(t){var n,e=t.split("").reverse().join("");return n=this.str.split("").reverse().join(""),this.startsWith.call({str:n},e)},t.prototype.contains=function(t){return-1!==this.str.indexOf(t)},t.prototype.equals=function(t){return this.str===t},t.prototype.value=function(){return this.str},t}();n.QueryableString=e},6e3:function(t,n,e){"use strict";var r=this&&this.__spreadArray||function(t,n){for(var e=0,r=n.length,i=t.length;e<r;e++,i++)t[i]=n[e];return t};Object.defineProperty(n,"__esModule",{value:!0}),n.getFunctionName=n.getBaseClassDependencyCount=n.getDependencies=void 0;var i=e(5744),o=e(6674),u=e(8421),a=e(6867),c=e(5800);Object.defineProperty(n,"getFunctionName",{enumerable:!0,get:function(){return c.getFunctionName}});var s=e(8924);function l(t,n,e,i){var u=t.getConstructorMetadata(e),a=u.compilerGeneratedMetadata;if(void 0===a){var c=o.MISSING_INJECTABLE_ANNOTATION+" "+n+".";throw new Error(c)}var s=u.userGeneratedMetadata,l=Object.keys(s),p=0===e.length&&l.length>0,d=l.length>e.length,g=function(t,n,e,r,i){for(var o=[],u=0;u<i;u++){var a=f(u,t,n,e,r);null!==a&&o.push(a)}return o}(i,n,a,s,p||d?l.length:e.length),v=h(t,e);return r(r([],g),v)}function f(t,n,e,r,a){var c=a[t.toString()]||[],l=p(c),f=!0!==l.unmanaged,h=r[t];if((h=l.inject||l.multiInject||h)instanceof i.LazyServiceIdentifer&&(h=h.unwrap()),f){if(!n&&(h===Object||h===Function||void 0===h)){var d=o.MISSING_INJECT_ANNOTATION+" argument "+t+" in class "+e+".";throw new Error(d)}var g=new s.Target(u.TargetTypeEnum.ConstructorArgument,l.targetName,h);return g.metadata=c,g}return null}function h(t,n){for(var e=t.getPropertiesMetadata(n),i=[],o=0,a=Object.keys(e);o<a.length;o++){var c=a[o],l=e[c],f=p(e[c]),d=f.targetName||c,g=f.inject||f.multiInject,v=new s.Target(u.TargetTypeEnum.ClassProperty,d,g);v.metadata=l,i.push(v)}var y=Object.getPrototypeOf(n.prototype).constructor;if(y!==Object){var _=h(t,y);i=r(r([],i),_)}return i}function p(t){var n={};return t.forEach((function(t){n[t.key.toString()]=t.value})),{inject:n[a.INJECT_TAG],multiInject:n[a.MULTI_INJECT_TAG],targetName:n[a.NAME_TAG],unmanaged:n[a.UNMANAGED_TAG]}}n.getDependencies=function(t,n){return l(t,c.getFunctionName(n),n,!1)},n.getBaseClassDependencyCount=function t(n,e){var r=Object.getPrototypeOf(e.prototype).constructor;if(r!==Object){var i=l(n,c.getFunctionName(r),r,!0),o=i.map((function(t){return t.metadata.filter((function(t){return t.key===a.UNMANAGED_TAG}))})),u=[].concat.apply([],o).length,s=i.length-u;return s>0?s:t(n,r)}return 0}},6748:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Request=void 0;var r=e(7791),i=function(){function t(t,n,e,i,o){this.id=r.id(),this.serviceIdentifier=t,this.parentContext=n,this.parentRequest=e,this.target=o,this.childRequests=[],this.bindings=Array.isArray(i)?i:[i],this.requestScope=null===e?new Map:null}return t.prototype.addChildRequest=function(n,e,r){var i=new t(n,this.parentContext,this,e,r);return this.childRequests.push(i),i},t}();n.Request=i},8924:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Target=void 0;var r=e(6867),i=e(7791),o=e(7738),u=e(8460),a=function(){function t(t,n,e,a){this.id=i.id(),this.type=t,this.serviceIdentifier=e,this.name=new u.QueryableString(n||""),this.metadata=new Array;var c=null;"string"==typeof a?c=new o.Metadata(r.NAMED_TAG,a):a instanceof o.Metadata&&(c=a),null!==c&&this.metadata.push(c)}return t.prototype.hasTag=function(t){for(var n=0,e=this.metadata;n<e.length;n++)if(e[n].key===t)return!0;return!1},t.prototype.isArray=function(){return this.hasTag(r.MULTI_INJECT_TAG)},t.prototype.matchesArray=function(t){return this.matchesTag(r.MULTI_INJECT_TAG)(t)},t.prototype.isNamed=function(){return this.hasTag(r.NAMED_TAG)},t.prototype.isTagged=function(){return this.metadata.some((function(t){return r.NON_CUSTOM_TAG_KEYS.every((function(n){return t.key!==n}))}))},t.prototype.isOptional=function(){return this.matchesTag(r.OPTIONAL_TAG)(!0)},t.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(t){return t.key===r.NAMED_TAG}))[0]:null},t.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(t){return r.NON_CUSTOM_TAG_KEYS.every((function(n){return t.key!==n}))})):null},t.prototype.matchesNamedTag=function(t){return this.matchesTag(r.NAMED_TAG)(t)},t.prototype.matchesTag=function(t){var n=this;return function(e){for(var r=0,i=n.metadata;r<i.length;r++){var o=i[r];if(o.key===t&&o.value===e)return!0}return!1}},t}();n.Target=a},2279:function(t,n,e){"use strict";var r=this&&this.__spreadArray||function(t,n){for(var e=0,r=n.length,i=t.length;e<r;e++,i++)t[i]=n[e];return t};Object.defineProperty(n,"__esModule",{value:!0}),n.resolveInstance=void 0;var i=e(6674),o=e(8421),u=e(6867);n.resolveInstance=function(t,n,e){var a,c,s=null;n.length>0?(c=n.filter((function(t){return null!==t.target&&t.target.type===o.TargetTypeEnum.ConstructorArgument})).map(e),s=function(t,n,e){var r=n.filter((function(t){return null!==t.target&&t.target.type===o.TargetTypeEnum.ClassProperty})),i=r.map(e);return r.forEach((function(n,e){var r;r=n.target.name.value();var o=i[e];t[r]=o})),t}(s=new((a=t).bind.apply(a,r([void 0],c))),n,e)):s=new t;return function(t,n){if(Reflect.hasMetadata(u.POST_CONSTRUCT,t)){var e=Reflect.getMetadata(u.POST_CONSTRUCT,t);try{n[e.value]()}catch(n){throw new Error(i.POST_CONSTRUCT_ERROR(t.name,n.message))}}}(t,s),s}},1927:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.resolve=void 0;var r=e(6674),i=e(8421),o=e(5265),u=e(5800),a=e(2279),c=function(t,n,e){try{return e()}catch(e){throw o.isStackOverflowExeption(e)?new Error(r.CIRCULAR_DEPENDENCY_IN_FACTORY(t,n.toString())):e}},s=function(t){return function(n){n.parentContext.setCurrentRequest(n);var e=n.bindings,o=n.childRequests,l=n.target&&n.target.isArray(),f=!(n.parentRequest&&n.parentRequest.target&&n.target&&n.parentRequest.target.matchesArray(n.target.serviceIdentifier));if(l&&f)return o.map((function(n){return s(t)(n)}));var h=null;if(!n.target.isOptional()||0!==e.length){var p=e[0],d=p.scope===i.BindingScopeEnum.Singleton,g=p.scope===i.BindingScopeEnum.Request;if(d&&p.activated)return p.cache;if(g&&null!==t&&t.has(p.id))return t.get(p.id);if(p.type===i.BindingTypeEnum.ConstantValue)h=p.cache,p.activated=!0;else if(p.type===i.BindingTypeEnum.Function)h=p.cache,p.activated=!0;else if(p.type===i.BindingTypeEnum.Constructor)h=p.implementationType;else if(p.type===i.BindingTypeEnum.DynamicValue&&null!==p.dynamicValue)h=c("toDynamicValue",p.serviceIdentifier,(function(){return p.dynamicValue(n.parentContext)}));else if(p.type===i.BindingTypeEnum.Factory&&null!==p.factory)h=c("toFactory",p.serviceIdentifier,(function(){return p.factory(n.parentContext)}));else if(p.type===i.BindingTypeEnum.Provider&&null!==p.provider)h=c("toProvider",p.serviceIdentifier,(function(){return p.provider(n.parentContext)}));else{if(p.type!==i.BindingTypeEnum.Instance||null===p.implementationType){var v=u.getServiceIdentifierAsString(n.serviceIdentifier);throw new Error(r.INVALID_BINDING_TYPE+" "+v)}h=a.resolveInstance(p.implementationType,o,s(t))}return"function"==typeof p.onActivation&&(h=p.onActivation(n.parentContext,h)),d&&(p.cache=h,p.activated=!0),g&&null!==t&&!t.has(p.id)&&t.set(p.id,h),h}}};n.resolve=function(t){return s(t.plan.rootRequest.requestScope)(t.plan.rootRequest)}},3366:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BindingInSyntax=void 0;var r=e(8421),i=e(1325),o=function(){function t(t){this._binding=t}return t.prototype.inRequestScope=function(){return this._binding.scope=r.BindingScopeEnum.Request,new i.BindingWhenOnSyntax(this._binding)},t.prototype.inSingletonScope=function(){return this._binding.scope=r.BindingScopeEnum.Singleton,new i.BindingWhenOnSyntax(this._binding)},t.prototype.inTransientScope=function(){return this._binding.scope=r.BindingScopeEnum.Transient,new i.BindingWhenOnSyntax(this._binding)},t}();n.BindingInSyntax=o},9812:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BindingInWhenOnSyntax=void 0;var r=e(3366),i=e(1811),o=e(8370),u=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new o.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new i.BindingOnSyntax(this._binding),this._bindingInSyntax=new r.BindingInSyntax(t)}return t.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},t.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},t.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t}();n.BindingInWhenOnSyntax=u},1811:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BindingOnSyntax=void 0;var r=e(8370),i=function(){function t(t){this._binding=t}return t.prototype.onActivation=function(t){return this._binding.onActivation=t,new r.BindingWhenSyntax(this._binding)},t}();n.BindingOnSyntax=i},1860:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BindingToSyntax=void 0;var r=e(6674),i=e(8421),o=e(9812),u=e(1325),a=function(){function t(t){this._binding=t}return t.prototype.to=function(t){return this._binding.type=i.BindingTypeEnum.Instance,this._binding.implementationType=t,new o.BindingInWhenOnSyntax(this._binding)},t.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error(""+r.INVALID_TO_SELF_VALUE);var t=this._binding.serviceIdentifier;return this.to(t)},t.prototype.toConstantValue=function(t){return this._binding.type=i.BindingTypeEnum.ConstantValue,this._binding.cache=t,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=i.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},t.prototype.toDynamicValue=function(t){return this._binding.type=i.BindingTypeEnum.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=t,this._binding.implementationType=null,new o.BindingInWhenOnSyntax(this._binding)},t.prototype.toConstructor=function(t){return this._binding.type=i.BindingTypeEnum.Constructor,this._binding.implementationType=t,this._binding.scope=i.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},t.prototype.toFactory=function(t){return this._binding.type=i.BindingTypeEnum.Factory,this._binding.factory=t,this._binding.scope=i.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},t.prototype.toFunction=function(t){if("function"!=typeof t)throw new Error(r.INVALID_FUNCTION_BINDING);var n=this.toConstantValue(t);return this._binding.type=i.BindingTypeEnum.Function,this._binding.scope=i.BindingScopeEnum.Singleton,n},t.prototype.toAutoFactory=function(t){return this._binding.type=i.BindingTypeEnum.Factory,this._binding.factory=function(n){return function(){return n.container.get(t)}},this._binding.scope=i.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},t.prototype.toProvider=function(t){return this._binding.type=i.BindingTypeEnum.Provider,this._binding.provider=t,this._binding.scope=i.BindingScopeEnum.Singleton,new u.BindingWhenOnSyntax(this._binding)},t.prototype.toService=function(t){this.toDynamicValue((function(n){return n.container.get(t)}))},t}();n.BindingToSyntax=a},1325:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BindingWhenOnSyntax=void 0;var r=e(1811),i=e(8370),o=function(){function t(t){this._binding=t,this._bindingWhenSyntax=new i.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new r.BindingOnSyntax(this._binding)}return t.prototype.when=function(t){return this._bindingWhenSyntax.when(t)},t.prototype.whenTargetNamed=function(t){return this._bindingWhenSyntax.whenTargetNamed(t)},t.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},t.prototype.whenTargetTagged=function(t,n){return this._bindingWhenSyntax.whenTargetTagged(t,n)},t.prototype.whenInjectedInto=function(t){return this._bindingWhenSyntax.whenInjectedInto(t)},t.prototype.whenParentNamed=function(t){return this._bindingWhenSyntax.whenParentNamed(t)},t.prototype.whenParentTagged=function(t,n){return this._bindingWhenSyntax.whenParentTagged(t,n)},t.prototype.whenAnyAncestorIs=function(t){return this._bindingWhenSyntax.whenAnyAncestorIs(t)},t.prototype.whenNoAncestorIs=function(t){return this._bindingWhenSyntax.whenNoAncestorIs(t)},t.prototype.whenAnyAncestorNamed=function(t){return this._bindingWhenSyntax.whenAnyAncestorNamed(t)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenAnyAncestorTagged(t,n)},t.prototype.whenNoAncestorNamed=function(t){return this._bindingWhenSyntax.whenNoAncestorNamed(t)},t.prototype.whenNoAncestorTagged=function(t,n){return this._bindingWhenSyntax.whenNoAncestorTagged(t,n)},t.prototype.whenAnyAncestorMatches=function(t){return this._bindingWhenSyntax.whenAnyAncestorMatches(t)},t.prototype.whenNoAncestorMatches=function(t){return this._bindingWhenSyntax.whenNoAncestorMatches(t)},t.prototype.onActivation=function(t){return this._bindingOnSyntax.onActivation(t)},t}();n.BindingWhenOnSyntax=o},8370:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BindingWhenSyntax=void 0;var r=e(1811),i=e(758),o=function(){function t(t){this._binding=t}return t.prototype.when=function(t){return this._binding.constraint=t,new r.BindingOnSyntax(this._binding)},t.prototype.whenTargetNamed=function(t){return this._binding.constraint=i.namedConstraint(t),new r.BindingOnSyntax(this._binding)},t.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(t){return null!==t.target&&!t.target.isNamed()&&!t.target.isTagged()},new r.BindingOnSyntax(this._binding)},t.prototype.whenTargetTagged=function(t,n){return this._binding.constraint=i.taggedConstraint(t)(n),new r.BindingOnSyntax(this._binding)},t.prototype.whenInjectedInto=function(t){return this._binding.constraint=function(n){return i.typeConstraint(t)(n.parentRequest)},new r.BindingOnSyntax(this._binding)},t.prototype.whenParentNamed=function(t){return this._binding.constraint=function(n){return i.namedConstraint(t)(n.parentRequest)},new r.BindingOnSyntax(this._binding)},t.prototype.whenParentTagged=function(t,n){return this._binding.constraint=function(e){return i.taggedConstraint(t)(n)(e.parentRequest)},new r.BindingOnSyntax(this._binding)},t.prototype.whenAnyAncestorIs=function(t){return this._binding.constraint=function(n){return i.traverseAncerstors(n,i.typeConstraint(t))},new r.BindingOnSyntax(this._binding)},t.prototype.whenNoAncestorIs=function(t){return this._binding.constraint=function(n){return!i.traverseAncerstors(n,i.typeConstraint(t))},new r.BindingOnSyntax(this._binding)},t.prototype.whenAnyAncestorNamed=function(t){return this._binding.constraint=function(n){return i.traverseAncerstors(n,i.namedConstraint(t))},new r.BindingOnSyntax(this._binding)},t.prototype.whenNoAncestorNamed=function(t){return this._binding.constraint=function(n){return!i.traverseAncerstors(n,i.namedConstraint(t))},new r.BindingOnSyntax(this._binding)},t.prototype.whenAnyAncestorTagged=function(t,n){return this._binding.constraint=function(e){return i.traverseAncerstors(e,i.taggedConstraint(t)(n))},new r.BindingOnSyntax(this._binding)},t.prototype.whenNoAncestorTagged=function(t,n){return this._binding.constraint=function(e){return!i.traverseAncerstors(e,i.taggedConstraint(t)(n))},new r.BindingOnSyntax(this._binding)},t.prototype.whenAnyAncestorMatches=function(t){return this._binding.constraint=function(n){return i.traverseAncerstors(n,t)},new r.BindingOnSyntax(this._binding)},t.prototype.whenNoAncestorMatches=function(t){return this._binding.constraint=function(n){return!i.traverseAncerstors(n,t)},new r.BindingOnSyntax(this._binding)},t}();n.BindingWhenSyntax=o},758:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.typeConstraint=n.namedConstraint=n.taggedConstraint=n.traverseAncerstors=void 0;var r=e(6867),i=e(7738),o=function(t,n){var e=t.parentRequest;return null!==e&&(!!n(e)||o(e,n))};n.traverseAncerstors=o;var u=function(t){return function(n){var e=function(e){return null!==e&&null!==e.target&&e.target.matchesTag(t)(n)};return e.metaData=new i.Metadata(t,n),e}};n.taggedConstraint=u;var a=u(r.NAMED_TAG);n.namedConstraint=a,n.typeConstraint=function(t){return function(n){var e=null;if(null!==n){if(e=n.bindings[0],"string"==typeof t)return e.serviceIdentifier===t;var r=n.bindings[0].implementationType;return t===r}return!1}}},600:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.multiBindToService=void 0,n.multiBindToService=function(t){return function(n){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.forEach((function(e){return t.bind(e).toService(n)}))}}}},5265:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.isStackOverflowExeption=void 0;var r=e(6674);n.isStackOverflowExeption=function(t){return t instanceof RangeError||t.message===r.STACK_OVERFLOW}},7791:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.id=void 0;var e=0;n.id=function(){return e++}},5800:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.circularDependencyToException=n.listMetadataForTarget=n.listRegisteredBindingsForServiceIdentifier=n.getServiceIdentifierAsString=n.getFunctionName=void 0;var r=e(6674);function i(t){return"function"==typeof t?t.name:"symbol"==typeof t?t.toString():t}function o(t,n){return null!==t.parentRequest&&(t.parentRequest.serviceIdentifier===n||o(t.parentRequest,n))}function u(t){if(t.name)return t.name;var n=t.toString(),e=n.match(/^function\s*([^\s(]+)/);return e?e[1]:"Anonymous function: "+n}n.getServiceIdentifierAsString=i,n.listRegisteredBindingsForServiceIdentifier=function(t,n,e){var r="",i=e(t,n);return 0!==i.length&&(r="\nRegistered bindings:",i.forEach((function(t){var n="Object";null!==t.implementationType&&(n=u(t.implementationType)),r=r+"\n "+n,t.constraint.metaData&&(r=r+" - "+t.constraint.metaData)}))),r},n.circularDependencyToException=function t(n){n.childRequests.forEach((function(n){if(o(n,n.serviceIdentifier)){var e=function(t){return function t(n,e){void 0===e&&(e=[]);var r=i(n.serviceIdentifier);return e.push(r),null!==n.parentRequest?t(n.parentRequest,e):e}(t).reverse().join(" --\x3e ")}(n);throw new Error(r.CIRCULAR_DEPENDENCY+" "+e)}t(n)}))},n.listMetadataForTarget=function(t,n){if(n.isTagged()||n.isNamed()){var e="",r=n.getNamedTag(),i=n.getCustomTags();return null!==r&&(e+=r.toString()+"\n"),null!==i&&i.forEach((function(t){e+=t.toString()+"\n"}))," "+t+"\n "+t+" - "+e}return" "+t},n.getFunctionName=u},6486:function(t,n,e){var r;t=e.nmd(t),function(){var i,o="Expected a function",u="__lodash_hash_undefined__",a="__lodash_placeholder__",c=32,s=128,l=1/0,f=9007199254740991,h=NaN,p=4294967295,d=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],g="[object Arguments]",v="[object Array]",y="[object Boolean]",_="[object Date]",b="[object Error]",m="[object Function]",w="[object GeneratorFunction]",x="[object Map]",A="[object Number]",D="[object Object]",E="[object Promise]",C="[object RegExp]",T="[object Set]",M="[object String]",S="[object Symbol]",k="[object WeakMap]",O="[object ArrayBuffer]",N="[object DataView]",P="[object Float32Array]",B="[object Float64Array]",F="[object Int8Array]",I="[object Int16Array]",R="[object Int32Array]",j="[object Uint8Array]",L="[object Uint8ClampedArray]",z="[object Uint16Array]",U="[object Uint32Array]",W=/\b__p \+= '';/g,q=/\b(__p \+=) '' \+/g,H=/(__e\(.*?\)|\b__t\)) \+\n'';/g,G=/&(?:amp|lt|gt|quot|#39);/g,Y=/[&<>"']/g,$=RegExp(G.source),V=RegExp(Y.source),K=/<%-([\s\S]+?)%>/g,X=/<%([\s\S]+?)%>/g,Z=/<%=([\s\S]+?)%>/g,J=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,nt=/[\\^$.*+?()[\]{}|]/g,et=RegExp(nt.source),rt=/^\s+/,it=/\s/,ot=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ut=/\{\n\/\* \[wrapped with (.+)\] \*/,at=/,? & /,ct=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,st=/[()=,{}\[\]\/\s]/,lt=/\\(\\)?/g,ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,gt=/^\[object .+?Constructor\]$/,vt=/^0o[0-7]+$/i,yt=/^(?:0|[1-9]\d*)$/,_t=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,bt=/($^)/,mt=/['\n\r\u2028\u2029\\]/g,wt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",xt="a-z\\xdf-\\xf6\\xf8-\\xff",At="A-Z\\xc0-\\xd6\\xd8-\\xde",Dt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Et="["+Dt+"]",Ct="["+wt+"]",Tt="\\d+",Mt="["+xt+"]",St="[^\\ud800-\\udfff"+Dt+Tt+"\\u2700-\\u27bf"+xt+At+"]",kt="\\ud83c[\\udffb-\\udfff]",Ot="[^\\ud800-\\udfff]",Nt="(?:\\ud83c[\\udde6-\\uddff]){2}",Pt="[\\ud800-\\udbff][\\udc00-\\udfff]",Bt="["+At+"]",Ft="(?:"+Mt+"|"+St+")",It="(?:"+Bt+"|"+St+")",Rt="(?:['’](?:d|ll|m|re|s|t|ve))?",jt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Lt="(?:"+Ct+"|"+kt+")?",zt="[\\ufe0e\\ufe0f]?",Ut=zt+Lt+"(?:\\u200d(?:"+[Ot,Nt,Pt].join("|")+")"+zt+Lt+")*",Wt="(?:"+["[\\u2700-\\u27bf]",Nt,Pt].join("|")+")"+Ut,qt="(?:"+[Ot+Ct+"?",Ct,Nt,Pt,"[\\ud800-\\udfff]"].join("|")+")",Ht=RegExp("['’]","g"),Gt=RegExp(Ct,"g"),Yt=RegExp(kt+"(?="+kt+")|"+qt+Ut,"g"),$t=RegExp([Bt+"?"+Mt+"+"+Rt+"(?="+[Et,Bt,"$"].join("|")+")",It+"+"+jt+"(?="+[Et,Bt+Ft,"$"].join("|")+")",Bt+"?"+Ft+"+"+Rt,Bt+"+"+jt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Tt,Wt].join("|"),"g"),Vt=RegExp("[\\u200d\\ud800-\\udfff"+wt+"\\ufe0e\\ufe0f]"),Kt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Xt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Zt=-1,Jt={};Jt[P]=Jt[B]=Jt[F]=Jt[I]=Jt[R]=Jt[j]=Jt[L]=Jt[z]=Jt[U]=!0,Jt[g]=Jt[v]=Jt[O]=Jt[y]=Jt[N]=Jt[_]=Jt[b]=Jt[m]=Jt[x]=Jt[A]=Jt[D]=Jt[C]=Jt[T]=Jt[M]=Jt[k]=!1;var Qt={};Qt[g]=Qt[v]=Qt[O]=Qt[N]=Qt[y]=Qt[_]=Qt[P]=Qt[B]=Qt[F]=Qt[I]=Qt[R]=Qt[x]=Qt[A]=Qt[D]=Qt[C]=Qt[T]=Qt[M]=Qt[S]=Qt[j]=Qt[L]=Qt[z]=Qt[U]=!0,Qt[b]=Qt[m]=Qt[k]=!1;var tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},nn=parseFloat,en=parseInt,rn="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,on="object"==typeof self&&self&&self.Object===Object&&self,un=rn||on||Function("return this")(),an=n&&!n.nodeType&&n,cn=an&&t&&!t.nodeType&&t,sn=cn&&cn.exports===an,ln=sn&&rn.process,fn=function(){try{return cn&&cn.require&&cn.require("util").types||ln&&ln.binding&&ln.binding("util")}catch(t){}}(),hn=fn&&fn.isArrayBuffer,pn=fn&&fn.isDate,dn=fn&&fn.isMap,gn=fn&&fn.isRegExp,vn=fn&&fn.isSet,yn=fn&&fn.isTypedArray;function _n(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function bn(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function mn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function wn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function xn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function An(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function Dn(t,n){return!(null==t||!t.length)&&Bn(t,n,0)>-1}function En(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function Cn(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function Tn(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function Mn(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function Sn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function kn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var On=jn("length");function Nn(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function Pn(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function Bn(t,n,e){return n==n?function(t,n,e){for(var r=e-1,i=t.length;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):Pn(t,In,e)}function Fn(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function In(t){return t!=t}function Rn(t,n){var e=null==t?0:t.length;return e?Un(t,n)/e:h}function jn(t){return function(n){return null==n?i:n[t]}}function Ln(t){return function(n){return null==t?i:t[n]}}function zn(t,n,e,r,i){return i(t,(function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)})),e}function Un(t,n){for(var e,r=-1,o=t.length;++r<o;){var u=n(t[r]);u!==i&&(e=e===i?u:e+u)}return e}function Wn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function qn(t){return t?t.slice(0,ae(t)+1).replace(rt,""):t}function Hn(t){return function(n){return t(n)}}function Gn(t,n){return Cn(n,(function(n){return t[n]}))}function Yn(t,n){return t.has(n)}function $n(t,n){for(var e=-1,r=t.length;++e<r&&Bn(n,t[e],0)>-1;);return e}function Vn(t,n){for(var e=t.length;e--&&Bn(n,t[e],0)>-1;);return e}function Kn(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var Xn=Ln({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Zn=Ln({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Jn(t){return"\\"+tn[t]}function Qn(t){return Vt.test(t)}function te(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function ne(t,n){return function(e){return t(n(e))}}function ee(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e];u!==n&&u!==a||(t[e]=a,o[i++]=e)}return o}function re(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function ie(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function oe(t){return Qn(t)?function(t){for(var n=Yt.lastIndex=0;Yt.test(t);)++n;return n}(t):On(t)}function ue(t){return Qn(t)?function(t){return t.match(Yt)||[]}(t):function(t){return t.split("")}(t)}function ae(t){for(var n=t.length;n--&&it.test(t.charAt(n)););return n}var ce=Ln({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),se=function t(n){var e,r=(n=null==n?un:se.defaults(un.Object(),n,se.pick(un,Xt))).Array,it=n.Date,wt=n.Error,xt=n.Function,At=n.Math,Dt=n.Object,Et=n.RegExp,Ct=n.String,Tt=n.TypeError,Mt=r.prototype,St=xt.prototype,kt=Dt.prototype,Ot=n["__core-js_shared__"],Nt=St.toString,Pt=kt.hasOwnProperty,Bt=0,Ft=(e=/[^.]+$/.exec(Ot&&Ot.keys&&Ot.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",It=kt.toString,Rt=Nt.call(Dt),jt=un._,Lt=Et("^"+Nt.call(Pt).replace(nt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),zt=sn?n.Buffer:i,Ut=n.Symbol,Wt=n.Uint8Array,qt=zt?zt.allocUnsafe:i,Yt=ne(Dt.getPrototypeOf,Dt),Vt=Dt.create,tn=kt.propertyIsEnumerable,rn=Mt.splice,on=Ut?Ut.isConcatSpreadable:i,an=Ut?Ut.iterator:i,cn=Ut?Ut.toStringTag:i,ln=function(){try{var t=so(Dt,"defineProperty");return t({},"",{}),t}catch(t){}}(),fn=n.clearTimeout!==un.clearTimeout&&n.clearTimeout,On=it&&it.now!==un.Date.now&&it.now,Ln=n.setTimeout!==un.setTimeout&&n.setTimeout,le=At.ceil,fe=At.floor,he=Dt.getOwnPropertySymbols,pe=zt?zt.isBuffer:i,de=n.isFinite,ge=Mt.join,ve=ne(Dt.keys,Dt),ye=At.max,_e=At.min,be=it.now,me=n.parseInt,we=At.random,xe=Mt.reverse,Ae=so(n,"DataView"),De=so(n,"Map"),Ee=so(n,"Promise"),Ce=so(n,"Set"),Te=so(n,"WeakMap"),Me=so(Dt,"create"),Se=Te&&new Te,ke={},Oe=Lo(Ae),Ne=Lo(De),Pe=Lo(Ee),Be=Lo(Ce),Fe=Lo(Te),Ie=Ut?Ut.prototype:i,Re=Ie?Ie.valueOf:i,je=Ie?Ie.toString:i;function Le(t){if(ea(t)&&!Gu(t)&&!(t instanceof qe)){if(t instanceof We)return t;if(Pt.call(t,"__wrapped__"))return zo(t)}return new We(t)}var ze=function(){function t(){}return function(n){if(!na(n))return{};if(Vt)return Vt(n);t.prototype=n;var e=new t;return t.prototype=i,e}}();function Ue(){}function We(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function qe(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function He(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ge(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function $e(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new Ye;++n<e;)this.add(t[n])}function Ve(t){var n=this.__data__=new Ge(t);this.size=n.size}function Ke(t,n){var e=Gu(t),r=!e&&Hu(t),i=!e&&!r&&Ku(t),o=!e&&!r&&!i&&la(t),u=e||r||i||o,a=u?Wn(t.length,Ct):[],c=a.length;for(var s in t)!n&&!Pt.call(t,s)||u&&("length"==s||i&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||yo(s,c))||a.push(s);return a}function Xe(t){var n=t.length;return n?t[Yr(0,n-1)]:i}function Ze(t,n){return Bo(Ti(t),ur(n,0,t.length))}function Je(t){return Bo(Ti(t))}function Qe(t,n,e){(e!==i&&!Uu(t[n],e)||e===i&&!(n in t))&&ir(t,n,e)}function tr(t,n,e){var r=t[n];Pt.call(t,n)&&Uu(r,e)&&(e!==i||n in t)||ir(t,n,e)}function nr(t,n){for(var e=t.length;e--;)if(Uu(t[e][0],n))return e;return-1}function er(t,n,e,r){return fr(t,(function(t,i,o){n(r,t,e(t),o)})),r}function rr(t,n){return t&&Mi(n,Na(n),t)}function ir(t,n,e){"__proto__"==n&&ln?ln(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function or(t,n){for(var e=-1,o=n.length,u=r(o),a=null==t;++e<o;)u[e]=a?i:Ta(t,n[e]);return u}function ur(t,n,e){return t==t&&(e!==i&&(t=t<=e?t:e),n!==i&&(t=t>=n?t:n)),t}function ar(t,n,e,r,o,u){var a,c=1&n,s=2&n,l=4&n;if(e&&(a=o?e(t,r,o,u):e(t)),a!==i)return a;if(!na(t))return t;var f=Gu(t);if(f){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&Pt.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return Ti(t,a)}else{var h=ho(t),p=h==m||h==w;if(Ku(t))return wi(t,c);if(h==D||h==g||p&&!o){if(a=s||p?{}:go(t),!c)return s?function(t,n){return Mi(t,fo(t),n)}(t,function(t,n){return t&&Mi(n,Pa(n),t)}(a,t)):function(t,n){return Mi(t,lo(t),n)}(t,rr(a,t))}else{if(!Qt[h])return o?t:{};a=function(t,n,e){var r,i=t.constructor;switch(n){case O:return xi(t);case y:case _:return new i(+t);case N:return function(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case P:case B:case F:case I:case R:case j:case L:case z:case U:return Ai(t,e);case x:return new i;case A:case M:return new i(t);case C:return function(t){var n=new t.constructor(t.source,ht.exec(t));return n.lastIndex=t.lastIndex,n}(t);case T:return new i;case S:return r=t,Re?Dt(Re.call(r)):{}}}(t,h,c)}}u||(u=new Ve);var d=u.get(t);if(d)return d;u.set(t,a),aa(t)?t.forEach((function(r){a.add(ar(r,n,e,r,t,u))})):ra(t)&&t.forEach((function(r,i){a.set(i,ar(r,n,e,i,t,u))}));var v=f?i:(l?s?eo:no:s?Pa:Na)(t);return mn(v||t,(function(r,i){v&&(r=t[i=r]),tr(a,i,ar(r,n,e,i,t,u))})),a}function cr(t,n,e){var r=e.length;if(null==t)return!r;for(t=Dt(t);r--;){var o=e[r],u=n[o],a=t[o];if(a===i&&!(o in t)||!u(a))return!1}return!0}function sr(t,n,e){if("function"!=typeof t)throw new Tt(o);return ko((function(){t.apply(i,e)}),n)}function lr(t,n,e,r){var i=-1,o=Dn,u=!0,a=t.length,c=[],s=n.length;if(!a)return c;e&&(n=Cn(n,Hn(e))),r?(o=En,u=!1):n.length>=200&&(o=Yn,u=!1,n=new $e(n));t:for(;++i<a;){var l=t[i],f=null==e?l:e(l);if(l=r||0!==l?l:0,u&&f==f){for(var h=s;h--;)if(n[h]===f)continue t;c.push(l)}else o(n,f,r)||c.push(l)}return c}Le.templateSettings={escape:K,evaluate:X,interpolate:Z,variable:"",imports:{_:Le}},Le.prototype=Ue.prototype,Le.prototype.constructor=Le,We.prototype=ze(Ue.prototype),We.prototype.constructor=We,qe.prototype=ze(Ue.prototype),qe.prototype.constructor=qe,He.prototype.clear=function(){this.__data__=Me?Me(null):{},this.size=0},He.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},He.prototype.get=function(t){var n=this.__data__;if(Me){var e=n[t];return e===u?i:e}return Pt.call(n,t)?n[t]:i},He.prototype.has=function(t){var n=this.__data__;return Me?n[t]!==i:Pt.call(n,t)},He.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Me&&n===i?u:n,this},Ge.prototype.clear=function(){this.__data__=[],this.size=0},Ge.prototype.delete=function(t){var n=this.__data__,e=nr(n,t);return!(e<0||(e==n.length-1?n.pop():rn.call(n,e,1),--this.size,0))},Ge.prototype.get=function(t){var n=this.__data__,e=nr(n,t);return e<0?i:n[e][1]},Ge.prototype.has=function(t){return nr(this.__data__,t)>-1},Ge.prototype.set=function(t,n){var e=this.__data__,r=nr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},Ye.prototype.clear=function(){this.size=0,this.__data__={hash:new He,map:new(De||Ge),string:new He}},Ye.prototype.delete=function(t){var n=ao(this,t).delete(t);return this.size-=n?1:0,n},Ye.prototype.get=function(t){return ao(this,t).get(t)},Ye.prototype.has=function(t){return ao(this,t).has(t)},Ye.prototype.set=function(t,n){var e=ao(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},$e.prototype.add=$e.prototype.push=function(t){return this.__data__.set(t,u),this},$e.prototype.has=function(t){return this.__data__.has(t)},Ve.prototype.clear=function(){this.__data__=new Ge,this.size=0},Ve.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},Ve.prototype.get=function(t){return this.__data__.get(t)},Ve.prototype.has=function(t){return this.__data__.has(t)},Ve.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ge){var r=e.__data__;if(!De||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new Ye(r)}return e.set(t,n),this.size=e.size,this};var fr=Oi(br),hr=Oi(mr,!0);function pr(t,n){var e=!0;return fr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function dr(t,n,e){for(var r=-1,o=t.length;++r<o;){var u=t[r],a=n(u);if(null!=a&&(c===i?a==a&&!sa(a):e(a,c)))var c=a,s=u}return s}function gr(t,n){var e=[];return fr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function vr(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=vo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?vr(a,n-1,e,r,i):Tn(i,a):r||(i[i.length]=a)}return i}var yr=Ni(),_r=Ni(!0);function br(t,n){return t&&yr(t,n,Na)}function mr(t,n){return t&&_r(t,n,Na)}function wr(t,n){return An(n,(function(n){return Ju(t[n])}))}function xr(t,n){for(var e=0,r=(n=yi(n,t)).length;null!=t&&e<r;)t=t[jo(n[e++])];return e&&e==r?t:i}function Ar(t,n,e){var r=n(t);return Gu(t)?r:Tn(r,e(t))}function Dr(t){return null==t?t===i?"[object Undefined]":"[object Null]":cn&&cn in Dt(t)?function(t){var n=Pt.call(t,cn),e=t[cn];try{t[cn]=i;var r=!0}catch(t){}var o=It.call(t);return r&&(n?t[cn]=e:delete t[cn]),o}(t):function(t){return It.call(t)}(t)}function Er(t,n){return t>n}function Cr(t,n){return null!=t&&Pt.call(t,n)}function Tr(t,n){return null!=t&&n in Dt(t)}function Mr(t,n,e){for(var o=e?En:Dn,u=t[0].length,a=t.length,c=a,s=r(a),l=1/0,f=[];c--;){var h=t[c];c&&n&&(h=Cn(h,Hn(n))),l=_e(h.length,l),s[c]=!e&&(n||u>=120&&h.length>=120)?new $e(c&&h):i}h=t[0];var p=-1,d=s[0];t:for(;++p<u&&f.length<l;){var g=h[p],v=n?n(g):g;if(g=e||0!==g?g:0,!(d?Yn(d,v):o(f,v,e))){for(c=a;--c;){var y=s[c];if(!(y?Yn(y,v):o(t[c],v,e)))continue t}d&&d.push(v),f.push(g)}}return f}function Sr(t,n,e){var r=null==(t=Co(t,n=yi(n,t)))?t:t[jo(Zo(n))];return null==r?i:_n(r,t,e)}function kr(t){return ea(t)&&Dr(t)==g}function Or(t,n,e,r,o){return t===n||(null==t||null==n||!ea(t)&&!ea(n)?t!=t&&n!=n:function(t,n,e,r,o,u){var a=Gu(t),c=Gu(n),s=a?v:ho(t),l=c?v:ho(n),f=(s=s==g?D:s)==D,h=(l=l==g?D:l)==D,p=s==l;if(p&&Ku(t)){if(!Ku(n))return!1;a=!0,f=!1}if(p&&!f)return u||(u=new Ve),a||la(t)?Qi(t,n,e,r,o,u):function(t,n,e,r,i,o,u){switch(e){case N:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case O:return!(t.byteLength!=n.byteLength||!o(new Wt(t),new Wt(n)));case y:case _:case A:return Uu(+t,+n);case b:return t.name==n.name&&t.message==n.message;case C:case M:return t==n+"";case x:var a=te;case T:var c=1&r;if(a||(a=re),t.size!=n.size&&!c)return!1;var s=u.get(t);if(s)return s==n;r|=2,u.set(t,n);var l=Qi(a(t),a(n),r,i,o,u);return u.delete(t),l;case S:if(Re)return Re.call(t)==Re.call(n)}return!1}(t,n,s,e,r,o,u);if(!(1&e)){var d=f&&Pt.call(t,"__wrapped__"),m=h&&Pt.call(n,"__wrapped__");if(d||m){var w=d?t.value():t,E=m?n.value():n;return u||(u=new Ve),o(w,E,e,r,u)}}return!!p&&(u||(u=new Ve),function(t,n,e,r,o,u){var a=1&e,c=no(t),s=c.length;if(s!=no(n).length&&!a)return!1;for(var l=s;l--;){var f=c[l];if(!(a?f in n:Pt.call(n,f)))return!1}var h=u.get(t),p=u.get(n);if(h&&p)return h==n&&p==t;var d=!0;u.set(t,n),u.set(n,t);for(var g=a;++l<s;){var v=t[f=c[l]],y=n[f];if(r)var _=a?r(y,v,f,n,t,u):r(v,y,f,t,n,u);if(!(_===i?v===y||o(v,y,e,r,u):_)){d=!1;break}g||(g="constructor"==f)}if(d&&!g){var b=t.constructor,m=n.constructor;b==m||!("constructor"in t)||!("constructor"in n)||"function"==typeof b&&b instanceof b&&"function"==typeof m&&m instanceof m||(d=!1)}return u.delete(t),u.delete(n),d}(t,n,e,r,o,u))}(t,n,e,r,Or,o))}function Nr(t,n,e,r){var o=e.length,u=o,a=!r;if(null==t)return!u;for(t=Dt(t);o--;){var c=e[o];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++o<u;){var s=(c=e[o])[0],l=t[s],f=c[1];if(a&&c[2]){if(l===i&&!(s in t))return!1}else{var h=new Ve;if(r)var p=r(l,f,s,t,n,h);if(!(p===i?Or(f,l,3,r,h):p))return!1}}return!0}function Pr(t){return!(!na(t)||(n=t,Ft&&Ft in n))&&(Ju(t)?Lt:gt).test(Lo(t));var n}function Br(t){return"function"==typeof t?t:null==t?ic:"object"==typeof t?Gu(t)?Lr(t[0],t[1]):jr(t):pc(t)}function Fr(t){if(!xo(t))return ve(t);var n=[];for(var e in Dt(t))Pt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function Ir(t,n){return t<n}function Rr(t,n){var e=-1,i=$u(t)?r(t.length):[];return fr(t,(function(t,r,o){i[++e]=n(t,r,o)})),i}function jr(t){var n=co(t);return 1==n.length&&n[0][2]?Do(n[0][0],n[0][1]):function(e){return e===t||Nr(e,t,n)}}function Lr(t,n){return bo(t)&&Ao(n)?Do(jo(t),n):function(e){var r=Ta(e,t);return r===i&&r===n?Ma(e,t):Or(n,r,3)}}function zr(t,n,e,r,o){t!==n&&yr(n,(function(u,a){if(o||(o=new Ve),na(u))!function(t,n,e,r,o,u,a){var c=Mo(t,e),s=Mo(n,e),l=a.get(s);if(l)Qe(t,e,l);else{var f=u?u(c,s,e+"",t,n,a):i,h=f===i;if(h){var p=Gu(s),d=!p&&Ku(s),g=!p&&!d&&la(s);f=s,p||d||g?Gu(c)?f=c:Vu(c)?f=Ti(c):d?(h=!1,f=wi(s,!0)):g?(h=!1,f=Ai(s,!0)):f=[]:oa(s)||Hu(s)?(f=c,Hu(c)?f=_a(c):na(c)&&!Ju(c)||(f=go(s))):h=!1}h&&(a.set(s,f),o(f,s,r,u,a),a.delete(s)),Qe(t,e,f)}}(t,n,a,e,zr,r,o);else{var c=r?r(Mo(t,a),u,a+"",t,n,o):i;c===i&&(c=u),Qe(t,a,c)}}),Pa)}function Ur(t,n){var e=t.length;if(e)return yo(n+=n<0?e:0,e)?t[n]:i}function Wr(t,n,e){n=n.length?Cn(n,(function(t){return Gu(t)?function(n){return xr(n,1===t.length?t[0]:t)}:t})):[ic];var r=-1;return n=Cn(n,Hn(uo())),function(t,n){var r=t.length;for(t.sort((function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;++r<u;){var c=Di(i[r],o[r]);if(c)return r>=a?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}));r--;)t[r]=t[r].value;return t}(Rr(t,(function(t,e,i){return{criteria:Cn(n,(function(n){return n(t)})),index:++r,value:t}})))}function qr(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=xr(t,u);e(a,u)&&Zr(o,yi(u,t),a)}return o}function Hr(t,n,e,r){var i=r?Fn:Bn,o=-1,u=n.length,a=t;for(t===n&&(n=Ti(n)),e&&(a=Cn(t,Hn(e)));++o<u;)for(var c=0,s=n[o],l=e?e(s):s;(c=i(a,l,c,r))>-1;)a!==t&&rn.call(a,c,1),rn.call(t,c,1);return t}function Gr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;yo(i)?rn.call(t,i,1):si(t,i)}}return t}function Yr(t,n){return t+fe(we()*(n-t+1))}function $r(t,n){var e="";if(!t||n<1||n>f)return e;do{n%2&&(e+=t),(n=fe(n/2))&&(t+=t)}while(n);return e}function Vr(t,n){return Oo(Eo(t,n,ic),t+"")}function Kr(t){return Xe(Ua(t))}function Xr(t,n){var e=Ua(t);return Bo(e,ur(n,0,e.length))}function Zr(t,n,e,r){if(!na(t))return t;for(var o=-1,u=(n=yi(n,t)).length,a=u-1,c=t;null!=c&&++o<u;){var s=jo(n[o]),l=e;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(o!=a){var f=c[s];(l=r?r(f,s,c):i)===i&&(l=na(f)?f:yo(n[o+1])?[]:{})}tr(c,s,l),c=c[s]}return t}var Jr=Se?function(t,n){return Se.set(t,n),t}:ic,Qr=ln?function(t,n){return ln(t,"toString",{configurable:!0,enumerable:!1,value:nc(n),writable:!0})}:ic;function ti(t){return Bo(Ua(t))}function ni(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+n];return u}function ei(t,n){var e;return fr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function ri(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!sa(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return ii(t,n,ic,e)}function ii(t,n,e,r){var o=0,u=null==t?0:t.length;if(0===u)return 0;for(var a=(n=e(n))!=n,c=null===n,s=sa(n),l=n===i;o<u;){var f=fe((o+u)/2),h=e(t[f]),p=h!==i,d=null===h,g=h==h,v=sa(h);if(a)var y=r||g;else y=l?g&&(r||p):c?g&&p&&(r||!d):s?g&&p&&!d&&(r||!v):!d&&!v&&(r?h<=n:h<n);y?o=f+1:u=f}return _e(u,4294967294)}function oi(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!Uu(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function ui(t){return"number"==typeof t?t:sa(t)?h:+t}function ai(t){if("string"==typeof t)return t;if(Gu(t))return Cn(t,ai)+"";if(sa(t))return je?je.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ci(t,n,e){var r=-1,i=Dn,o=t.length,u=!0,a=[],c=a;if(e)u=!1,i=En;else if(o>=200){var s=n?null:$i(t);if(s)return re(s);u=!1,i=Yn,c=new $e}else c=n?[]:a;t:for(;++r<o;){var l=t[r],f=n?n(l):l;if(l=e||0!==l?l:0,u&&f==f){for(var h=c.length;h--;)if(c[h]===f)continue t;n&&c.push(f),a.push(l)}else i(c,f,e)||(c!==a&&c.push(f),a.push(l))}return a}function si(t,n){return null==(t=Co(t,n=yi(n,t)))||delete t[jo(Zo(n))]}function li(t,n,e,r){return Zr(t,n,e(xr(t,n)),r)}function fi(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?ni(t,r?0:o,r?o+1:i):ni(t,r?o+1:0,r?i:o)}function hi(t,n){var e=t;return e instanceof qe&&(e=e.value()),Mn(n,(function(t,n){return n.func.apply(n.thisArg,Tn([t],n.args))}),e)}function pi(t,n,e){var i=t.length;if(i<2)return i?ci(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=lr(u[o]||a,t[c],n,e));return ci(vr(u,1),n,e)}function di(t,n,e){for(var r=-1,o=t.length,u=n.length,a={};++r<o;){var c=r<u?n[r]:i;e(a,t[r],c)}return a}function gi(t){return Vu(t)?t:[]}function vi(t){return"function"==typeof t?t:ic}function yi(t,n){return Gu(t)?t:bo(t,n)?[t]:Ro(ba(t))}var _i=Vr;function bi(t,n,e){var r=t.length;return e=e===i?r:e,!n&&e>=r?t:ni(t,n,e)}var mi=fn||function(t){return un.clearTimeout(t)};function wi(t,n){if(n)return t.slice();var e=t.length,r=qt?qt(e):new t.constructor(e);return t.copy(r),r}function xi(t){var n=new t.constructor(t.byteLength);return new Wt(n).set(new Wt(t)),n}function Ai(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Di(t,n){if(t!==n){var e=t!==i,r=null===t,o=t==t,u=sa(t),a=n!==i,c=null===n,s=n==n,l=sa(n);if(!c&&!l&&!u&&t>n||u&&a&&s&&!c&&!l||r&&a&&s||!e&&s||!o)return 1;if(!r&&!u&&!l&&t<n||l&&e&&o&&!r&&!u||c&&e&&o||!a&&o||!s)return-1}return 0}function Ei(t,n,e,i){for(var o=-1,u=t.length,a=e.length,c=-1,s=n.length,l=ye(u-a,0),f=r(s+l),h=!i;++c<s;)f[c]=n[c];for(;++o<a;)(h||o<u)&&(f[e[o]]=t[o]);for(;l--;)f[c++]=t[o++];return f}function Ci(t,n,e,i){for(var o=-1,u=t.length,a=-1,c=e.length,s=-1,l=n.length,f=ye(u-c,0),h=r(f+l),p=!i;++o<f;)h[o]=t[o];for(var d=o;++s<l;)h[d+s]=n[s];for(;++a<c;)(p||o<u)&&(h[d+e[a]]=t[o++]);return h}function Ti(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function Mi(t,n,e,r){var o=!e;e||(e={});for(var u=-1,a=n.length;++u<a;){var c=n[u],s=r?r(e[c],t[c],c,e,t):i;s===i&&(s=t[c]),o?ir(e,c,s):tr(e,c,s)}return e}function Si(t,n){return function(e,r){var i=Gu(e)?bn:er,o=n?n():{};return i(e,t,uo(r,2),o)}}function ki(t){return Vr((function(n,e){var r=-1,o=e.length,u=o>1?e[o-1]:i,a=o>2?e[2]:i;for(u=t.length>3&&"function"==typeof u?(o--,u):i,a&&_o(e[0],e[1],a)&&(u=o<3?i:u,o=1),n=Dt(n);++r<o;){var c=e[r];c&&t(n,c,r,u)}return n}))}function Oi(t,n){return function(e,r){if(null==e)return e;if(!$u(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=Dt(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function Ni(t){return function(n,e,r){for(var i=-1,o=Dt(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function Pi(t){return function(n){var e=Qn(n=ba(n))?ue(n):i,r=e?e[0]:n.charAt(0),o=e?bi(e,1).join(""):n.slice(1);return r[t]()+o}}function Bi(t){return function(n){return Mn(Ja(Ha(n).replace(Ht,"")),t,"")}}function Fi(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=ze(t.prototype),r=t.apply(e,n);return na(r)?r:e}}function Ii(t){return function(n,e,r){var o=Dt(n);if(!$u(n)){var u=uo(e,3);n=Na(n),e=function(t){return u(o[t],t,o)}}var a=t(n,e,r);return a>-1?o[u?n[a]:a]:i}}function Ri(t){return to((function(n){var e=n.length,r=e,u=We.prototype.thru;for(t&&n.reverse();r--;){var a=n[r];if("function"!=typeof a)throw new Tt(o);if(u&&!c&&"wrapper"==io(a))var c=new We([],!0)}for(r=c?r:e;++r<e;){var s=io(a=n[r]),l="wrapper"==s?ro(a):i;c=l&&mo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?c[io(l[0])].apply(c,l[3]):1==a.length&&mo(a)?c[s]():c.thru(a)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Gu(r))return c.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}}))}function ji(t,n,e,o,u,a,c,l,f,h){var p=n&s,d=1&n,g=2&n,v=24&n,y=512&n,_=g?i:Fi(t);return function i(){for(var s=arguments.length,b=r(s),m=s;m--;)b[m]=arguments[m];if(v)var w=oo(i),x=Kn(b,w);if(o&&(b=Ei(b,o,u,v)),a&&(b=Ci(b,a,c,v)),s-=x,v&&s<h){var A=ee(b,w);return Gi(t,n,ji,i.placeholder,e,b,A,l,f,h-s)}var D=d?e:this,E=g?D[t]:t;return s=b.length,l?b=To(b,l):y&&s>1&&b.reverse(),p&&f<s&&(b.length=f),this&&this!==un&&this instanceof i&&(E=_||Fi(E)),E.apply(D,b)}}function Li(t,n){return function(e,r){return function(t,n,e,r){return br(t,(function(t,i,o){n(r,e(t),i,o)})),r}(e,t,n(r),{})}}function zi(t,n){return function(e,r){var o;if(e===i&&r===i)return n;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=ai(e),r=ai(r)):(e=ui(e),r=ui(r)),o=t(e,r)}return o}}function Ui(t){return to((function(n){return n=Cn(n,Hn(uo())),Vr((function(e){var r=this;return t(n,(function(t){return _n(t,r,e)}))}))}))}function Wi(t,n){var e=(n=n===i?" ":ai(n)).length;if(e<2)return e?$r(n,t):n;var r=$r(n,le(t/oe(n)));return Qn(n)?bi(ue(r),0,t).join(""):r.slice(0,t)}function qi(t){return function(n,e,o){return o&&"number"!=typeof o&&_o(n,e,o)&&(e=o=i),n=da(n),e===i?(e=n,n=0):e=da(e),function(t,n,e,i){for(var o=-1,u=ye(le((n-t)/(e||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=e;return a}(n,e,o=o===i?n<e?1:-1:da(o),t)}}function Hi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=ya(n),e=ya(e)),t(n,e)}}function Gi(t,n,e,r,o,u,a,s,l,f){var h=8&n;n|=h?c:64,4&(n&=~(h?64:c))||(n&=-4);var p=[t,n,o,h?u:i,h?a:i,h?i:u,h?i:a,s,l,f],d=e.apply(i,p);return mo(t)&&So(d,p),d.placeholder=r,No(d,t,n)}function Yi(t){var n=At[t];return function(t,e){if(t=ya(t),(e=null==e?0:_e(ga(e),292))&&de(t)){var r=(ba(t)+"e").split("e");return+((r=(ba(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var $i=Ce&&1/re(new Ce([,-0]))[1]==l?function(t){return new Ce(t)}:sc;function Vi(t){return function(n){var e=ho(n);return e==x?te(n):e==T?ie(n):function(t,n){return Cn(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Ki(t,n,e,u,l,f,h,p){var d=2&n;if(!d&&"function"!=typeof t)throw new Tt(o);var g=u?u.length:0;if(g||(n&=-97,u=l=i),h=h===i?h:ye(ga(h),0),p=p===i?p:ga(p),g-=l?l.length:0,64&n){var v=u,y=l;u=l=i}var _=d?i:ro(t),b=[t,n,e,u,l,v,y,f,h,p];if(_&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<131,u=r==s&&8==e||r==s&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!o&&!u)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var l=t[3];t[3]=l?Ei(l,c,n[4]):c,t[4]=l?ee(t[3],a):n[4]}(c=n[5])&&(l=t[5],t[5]=l?Ci(l,c,n[6]):c,t[6]=l?ee(t[5],a):n[6]),(c=n[7])&&(t[7]=c),r&s&&(t[8]=null==t[8]?n[8]:_e(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(b,_),t=b[0],n=b[1],e=b[2],u=b[3],l=b[4],!(p=b[9]=b[9]===i?d?0:t.length:ye(b[9]-g,0))&&24&n&&(n&=-25),n&&1!=n)m=8==n||16==n?function(t,n,e){var o=Fi(t);return function u(){for(var a=arguments.length,c=r(a),s=a,l=oo(u);s--;)c[s]=arguments[s];var f=a<3&&c[0]!==l&&c[a-1]!==l?[]:ee(c,l);return(a-=f.length)<e?Gi(t,n,ji,u.placeholder,i,c,f,i,i,e-a):_n(this&&this!==un&&this instanceof u?o:t,this,c)}}(t,n,p):n!=c&&33!=n||l.length?ji.apply(i,b):function(t,n,e,i){var o=1&n,u=Fi(t);return function n(){for(var a=-1,c=arguments.length,s=-1,l=i.length,f=r(l+c),h=this&&this!==un&&this instanceof n?u:t;++s<l;)f[s]=i[s];for(;c--;)f[s++]=arguments[++a];return _n(h,o?e:this,f)}}(t,n,e,u);else var m=function(t,n,e){var r=1&n,i=Fi(t);return function n(){return(this&&this!==un&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return No((_?Jr:So)(m,b),t,n)}function Xi(t,n,e,r){return t===i||Uu(t,kt[e])&&!Pt.call(r,e)?n:t}function Zi(t,n,e,r,o,u){return na(t)&&na(n)&&(u.set(n,t),zr(t,n,i,Zi,u),u.delete(n)),t}function Ji(t){return oa(t)?i:t}function Qi(t,n,e,r,o,u){var a=1&e,c=t.length,s=n.length;if(c!=s&&!(a&&s>c))return!1;var l=u.get(t),f=u.get(n);if(l&&f)return l==n&&f==t;var h=-1,p=!0,d=2&e?new $e:i;for(u.set(t,n),u.set(n,t);++h<c;){var g=t[h],v=n[h];if(r)var y=a?r(v,g,h,n,t,u):r(g,v,h,t,n,u);if(y!==i){if(y)continue;p=!1;break}if(d){if(!kn(n,(function(t,n){if(!Yn(d,n)&&(g===t||o(g,t,e,r,u)))return d.push(n)}))){p=!1;break}}else if(g!==v&&!o(g,v,e,r,u)){p=!1;break}}return u.delete(t),u.delete(n),p}function to(t){return Oo(Eo(t,i,Yo),t+"")}function no(t){return Ar(t,Na,lo)}function eo(t){return Ar(t,Pa,fo)}var ro=Se?function(t){return Se.get(t)}:sc;function io(t){for(var n=t.name+"",e=ke[n],r=Pt.call(ke,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function oo(t){return(Pt.call(Le,"placeholder")?Le:t).placeholder}function uo(){var t=Le.iteratee||oc;return t=t===oc?Br:t,arguments.length?t(arguments[0],arguments[1]):t}function ao(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function co(t){for(var n=Na(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,Ao(i)]}return n}function so(t,n){var e=function(t,n){return null==t?i:t[n]}(t,n);return Pr(e)?e:i}var lo=he?function(t){return null==t?[]:(t=Dt(t),An(he(t),(function(n){return tn.call(t,n)})))}:vc,fo=he?function(t){for(var n=[];t;)Tn(n,lo(t)),t=Yt(t);return n}:vc,ho=Dr;function po(t,n,e){for(var r=-1,i=(n=yi(n,t)).length,o=!1;++r<i;){var u=jo(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&ta(i)&&yo(u,i)&&(Gu(t)||Hu(t))}function go(t){return"function"!=typeof t.constructor||xo(t)?{}:ze(Yt(t))}function vo(t){return Gu(t)||Hu(t)||!!(on&&t&&t[on])}function yo(t,n){var e=typeof t;return!!(n=null==n?f:n)&&("number"==e||"symbol"!=e&&yt.test(t))&&t>-1&&t%1==0&&t<n}function _o(t,n,e){if(!na(e))return!1;var r=typeof n;return!!("number"==r?$u(e)&&yo(n,e.length):"string"==r&&n in e)&&Uu(e[n],t)}function bo(t,n){if(Gu(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!sa(t))||Q.test(t)||!J.test(t)||null!=n&&t in Dt(n)}function mo(t){var n=io(t),e=Le[n];if("function"!=typeof e||!(n in qe.prototype))return!1;if(t===e)return!0;var r=ro(e);return!!r&&t===r[0]}(Ae&&ho(new Ae(new ArrayBuffer(1)))!=N||De&&ho(new De)!=x||Ee&&ho(Ee.resolve())!=E||Ce&&ho(new Ce)!=T||Te&&ho(new Te)!=k)&&(ho=function(t){var n=Dr(t),e=n==D?t.constructor:i,r=e?Lo(e):"";if(r)switch(r){case Oe:return N;case Ne:return x;case Pe:return E;case Be:return T;case Fe:return k}return n});var wo=Ot?Ju:yc;function xo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||kt)}function Ao(t){return t==t&&!na(t)}function Do(t,n){return function(e){return null!=e&&e[t]===n&&(n!==i||t in Dt(e))}}function Eo(t,n,e){return n=ye(n===i?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ye(i.length-n,0),a=r(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(a),_n(t,this,c)}}function Co(t,n){return n.length<2?t:xr(t,ni(n,0,-1))}function To(t,n){for(var e=t.length,r=_e(n.length,e),o=Ti(t);r--;){var u=n[r];t[r]=yo(u,e)?o[u]:i}return t}function Mo(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var So=Po(Jr),ko=Ln||function(t,n){return un.setTimeout(t,n)},Oo=Po(Qr);function No(t,n,e){var r=n+"";return Oo(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(ot,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return mn(d,(function(e){var r="_."+e[0];n&e[1]&&!Dn(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(ut);return n?n[1].split(at):[]}(r),e)))}function Po(t){var n=0,e=0;return function(){var r=be(),o=16-(r-e);if(e=r,o>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(i,arguments)}}function Bo(t,n){var e=-1,r=t.length,o=r-1;for(n=n===i?r:n;++e<n;){var u=Yr(e,o),a=t[u];t[u]=t[e],t[e]=a}return t.length=n,t}var Fo,Io,Ro=(Fo=Fu((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(tt,(function(t,e,r,i){n.push(r?i.replace(lt,"$1"):e||t)})),n}),(function(t){return 500===Io.size&&Io.clear(),t})),Io=Fo.cache,Fo);function jo(t){if("string"==typeof t||sa(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Lo(t){if(null!=t){try{return Nt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function zo(t){if(t instanceof qe)return t.clone();var n=new We(t.__wrapped__,t.__chain__);return n.__actions__=Ti(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Uo=Vr((function(t,n){return Vu(t)?lr(t,vr(n,1,Vu,!0)):[]})),Wo=Vr((function(t,n){var e=Zo(n);return Vu(e)&&(e=i),Vu(t)?lr(t,vr(n,1,Vu,!0),uo(e,2)):[]})),qo=Vr((function(t,n){var e=Zo(n);return Vu(e)&&(e=i),Vu(t)?lr(t,vr(n,1,Vu,!0),i,e):[]}));function Ho(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ga(e);return i<0&&(i=ye(r+i,0)),Pn(t,uo(n,3),i)}function Go(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return e!==i&&(o=ga(e),o=e<0?ye(r+o,0):_e(o,r-1)),Pn(t,uo(n,3),o,!0)}function Yo(t){return null!=t&&t.length?vr(t,1):[]}function $o(t){return t&&t.length?t[0]:i}var Vo=Vr((function(t){var n=Cn(t,gi);return n.length&&n[0]===t[0]?Mr(n):[]})),Ko=Vr((function(t){var n=Zo(t),e=Cn(t,gi);return n===Zo(e)?n=i:e.pop(),e.length&&e[0]===t[0]?Mr(e,uo(n,2)):[]})),Xo=Vr((function(t){var n=Zo(t),e=Cn(t,gi);return(n="function"==typeof n?n:i)&&e.pop(),e.length&&e[0]===t[0]?Mr(e,i,n):[]}));function Zo(t){var n=null==t?0:t.length;return n?t[n-1]:i}var Jo=Vr(Qo);function Qo(t,n){return t&&t.length&&n&&n.length?Hr(t,n):t}var tu=to((function(t,n){var e=null==t?0:t.length,r=or(t,n);return Gr(t,Cn(n,(function(t){return yo(t,e)?+t:t})).sort(Di)),r}));function nu(t){return null==t?t:xe.call(t)}var eu=Vr((function(t){return ci(vr(t,1,Vu,!0))})),ru=Vr((function(t){var n=Zo(t);return Vu(n)&&(n=i),ci(vr(t,1,Vu,!0),uo(n,2))})),iu=Vr((function(t){var n=Zo(t);return n="function"==typeof n?n:i,ci(vr(t,1,Vu,!0),i,n)}));function ou(t){if(!t||!t.length)return[];var n=0;return t=An(t,(function(t){if(Vu(t))return n=ye(t.length,n),!0})),Wn(n,(function(n){return Cn(t,jn(n))}))}function uu(t,n){if(!t||!t.length)return[];var e=ou(t);return null==n?e:Cn(e,(function(t){return _n(n,i,t)}))}var au=Vr((function(t,n){return Vu(t)?lr(t,n):[]})),cu=Vr((function(t){return pi(An(t,Vu))})),su=Vr((function(t){var n=Zo(t);return Vu(n)&&(n=i),pi(An(t,Vu),uo(n,2))})),lu=Vr((function(t){var n=Zo(t);return n="function"==typeof n?n:i,pi(An(t,Vu),i,n)})),fu=Vr(ou),hu=Vr((function(t){var n=t.length,e=n>1?t[n-1]:i;return e="function"==typeof e?(t.pop(),e):i,uu(t,e)}));function pu(t){var n=Le(t);return n.__chain__=!0,n}function du(t,n){return n(t)}var gu=to((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,o=function(n){return or(n,t)};return!(n>1||this.__actions__.length)&&r instanceof qe&&yo(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:du,args:[o],thisArg:i}),new We(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(i),t}))):this.thru(o)})),vu=Si((function(t,n,e){Pt.call(t,e)?++t[e]:ir(t,e,1)})),yu=Ii(Ho),_u=Ii(Go);function bu(t,n){return(Gu(t)?mn:fr)(t,uo(n,3))}function mu(t,n){return(Gu(t)?wn:hr)(t,uo(n,3))}var wu=Si((function(t,n,e){Pt.call(t,e)?t[e].push(n):ir(t,e,[n])})),xu=Vr((function(t,n,e){var i=-1,o="function"==typeof n,u=$u(t)?r(t.length):[];return fr(t,(function(t){u[++i]=o?_n(n,t,e):Sr(t,n,e)})),u})),Au=Si((function(t,n,e){ir(t,e,n)}));function Du(t,n){return(Gu(t)?Cn:Rr)(t,uo(n,3))}var Eu=Si((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]})),Cu=Vr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&_o(t,n[0],n[1])?n=[]:e>2&&_o(n[0],n[1],n[2])&&(n=[n[0]]),Wr(t,vr(n,1),[])})),Tu=On||function(){return un.Date.now()};function Mu(t,n,e){return n=e?i:n,n=t&&null==n?t.length:n,Ki(t,s,i,i,i,i,n)}function Su(t,n){var e;if("function"!=typeof n)throw new Tt(o);return t=ga(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=i),e}}var ku=Vr((function(t,n,e){var r=1;if(e.length){var i=ee(e,oo(ku));r|=c}return Ki(t,r,n,e,i)})),Ou=Vr((function(t,n,e){var r=3;if(e.length){var i=ee(e,oo(Ou));r|=c}return Ki(n,r,t,e,i)}));function Nu(t,n,e){var r,u,a,c,s,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new Tt(o);function g(n){var e=r,o=u;return r=u=i,f=n,c=t.apply(o,e)}function v(t){return f=t,s=ko(_,n),h?g(t):c}function y(t){var e=t-l;return l===i||e>=n||e<0||p&&t-f>=a}function _(){var t=Tu();if(y(t))return b(t);s=ko(_,function(t){var e=n-(t-l);return p?_e(e,a-(t-f)):e}(t))}function b(t){return s=i,d&&r?g(t):(r=u=i,c)}function m(){var t=Tu(),e=y(t);if(r=arguments,u=this,l=t,e){if(s===i)return v(l);if(p)return mi(s),s=ko(_,n),g(l)}return s===i&&(s=ko(_,n)),c}return n=ya(n)||0,na(e)&&(h=!!e.leading,a=(p="maxWait"in e)?ye(ya(e.maxWait)||0,n):a,d="trailing"in e?!!e.trailing:d),m.cancel=function(){s!==i&&mi(s),f=0,r=l=u=s=i},m.flush=function(){return s===i?c:b(Tu())},m}var Pu=Vr((function(t,n){return sr(t,1,n)})),Bu=Vr((function(t,n,e){return sr(t,ya(n)||0,e)}));function Fu(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new Tt(o);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(Fu.Cache||Ye),e}function Iu(t){if("function"!=typeof t)throw new Tt(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Fu.Cache=Ye;var Ru=_i((function(t,n){var e=(n=1==n.length&&Gu(n[0])?Cn(n[0],Hn(uo())):Cn(vr(n,1),Hn(uo()))).length;return Vr((function(r){for(var i=-1,o=_e(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return _n(t,this,r)}))})),ju=Vr((function(t,n){var e=ee(n,oo(ju));return Ki(t,c,i,n,e)})),Lu=Vr((function(t,n){var e=ee(n,oo(Lu));return Ki(t,64,i,n,e)})),zu=to((function(t,n){return Ki(t,256,i,i,i,n)}));function Uu(t,n){return t===n||t!=t&&n!=n}var Wu=Hi(Er),qu=Hi((function(t,n){return t>=n})),Hu=kr(function(){return arguments}())?kr:function(t){return ea(t)&&Pt.call(t,"callee")&&!tn.call(t,"callee")},Gu=r.isArray,Yu=hn?Hn(hn):function(t){return ea(t)&&Dr(t)==O};function $u(t){return null!=t&&ta(t.length)&&!Ju(t)}function Vu(t){return ea(t)&&$u(t)}var Ku=pe||yc,Xu=pn?Hn(pn):function(t){return ea(t)&&Dr(t)==_};function Zu(t){if(!ea(t))return!1;var n=Dr(t);return n==b||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!oa(t)}function Ju(t){if(!na(t))return!1;var n=Dr(t);return n==m||n==w||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Qu(t){return"number"==typeof t&&t==ga(t)}function ta(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=f}function na(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function ea(t){return null!=t&&"object"==typeof t}var ra=dn?Hn(dn):function(t){return ea(t)&&ho(t)==x};function ia(t){return"number"==typeof t||ea(t)&&Dr(t)==A}function oa(t){if(!ea(t)||Dr(t)!=D)return!1;var n=Yt(t);if(null===n)return!0;var e=Pt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Nt.call(e)==Rt}var ua=gn?Hn(gn):function(t){return ea(t)&&Dr(t)==C},aa=vn?Hn(vn):function(t){return ea(t)&&ho(t)==T};function ca(t){return"string"==typeof t||!Gu(t)&&ea(t)&&Dr(t)==M}function sa(t){return"symbol"==typeof t||ea(t)&&Dr(t)==S}var la=yn?Hn(yn):function(t){return ea(t)&&ta(t.length)&&!!Jt[Dr(t)]},fa=Hi(Ir),ha=Hi((function(t,n){return t<=n}));function pa(t){if(!t)return[];if($u(t))return ca(t)?ue(t):Ti(t);if(an&&t[an])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[an]());var n=ho(t);return(n==x?te:n==T?re:Ua)(t)}function da(t){return t?(t=ya(t))===l||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ga(t){var n=da(t),e=n%1;return n==n?e?n-e:n:0}function va(t){return t?ur(ga(t),0,p):0}function ya(t){if("number"==typeof t)return t;if(sa(t))return h;if(na(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=na(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=qn(t);var e=dt.test(t);return e||vt.test(t)?en(t.slice(2),e?2:8):pt.test(t)?h:+t}function _a(t){return Mi(t,Pa(t))}function ba(t){return null==t?"":ai(t)}var ma=ki((function(t,n){if(xo(n)||$u(n))Mi(n,Na(n),t);else for(var e in n)Pt.call(n,e)&&tr(t,e,n[e])})),wa=ki((function(t,n){Mi(n,Pa(n),t)})),xa=ki((function(t,n,e,r){Mi(n,Pa(n),t,r)})),Aa=ki((function(t,n,e,r){Mi(n,Na(n),t,r)})),Da=to(or),Ea=Vr((function(t,n){t=Dt(t);var e=-1,r=n.length,o=r>2?n[2]:i;for(o&&_o(n[0],n[1],o)&&(r=1);++e<r;)for(var u=n[e],a=Pa(u),c=-1,s=a.length;++c<s;){var l=a[c],f=t[l];(f===i||Uu(f,kt[l])&&!Pt.call(t,l))&&(t[l]=u[l])}return t})),Ca=Vr((function(t){return t.push(i,Zi),_n(Fa,i,t)}));function Ta(t,n,e){var r=null==t?i:xr(t,n);return r===i?e:r}function Ma(t,n){return null!=t&&po(t,n,Tr)}var Sa=Li((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=It.call(n)),t[n]=e}),nc(ic)),ka=Li((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=It.call(n)),Pt.call(t,n)?t[n].push(e):t[n]=[e]}),uo),Oa=Vr(Sr);function Na(t){return $u(t)?Ke(t):Fr(t)}function Pa(t){return $u(t)?Ke(t,!0):function(t){if(!na(t))return function(t){var n=[];if(null!=t)for(var e in Dt(t))n.push(e);return n}(t);var n=xo(t),e=[];for(var r in t)("constructor"!=r||!n&&Pt.call(t,r))&&e.push(r);return e}(t)}var Ba=ki((function(t,n,e){zr(t,n,e)})),Fa=ki((function(t,n,e,r){zr(t,n,e,r)})),Ia=to((function(t,n){var e={};if(null==t)return e;var r=!1;n=Cn(n,(function(n){return n=yi(n,t),r||(r=n.length>1),n})),Mi(t,eo(t),e),r&&(e=ar(e,7,Ji));for(var i=n.length;i--;)si(e,n[i]);return e})),Ra=to((function(t,n){return null==t?{}:function(t,n){return qr(t,n,(function(n,e){return Ma(t,e)}))}(t,n)}));function ja(t,n){if(null==t)return{};var e=Cn(eo(t),(function(t){return[t]}));return n=uo(n),qr(t,e,(function(t,e){return n(t,e[0])}))}var La=Vi(Na),za=Vi(Pa);function Ua(t){return null==t?[]:Gn(t,Na(t))}var Wa=Bi((function(t,n,e){return n=n.toLowerCase(),t+(e?qa(n):n)}));function qa(t){return Za(ba(t).toLowerCase())}function Ha(t){return(t=ba(t))&&t.replace(_t,Xn).replace(Gt,"")}var Ga=Bi((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Ya=Bi((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),$a=Pi("toLowerCase"),Va=Bi((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()})),Ka=Bi((function(t,n,e){return t+(e?" ":"")+Za(n)})),Xa=Bi((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Za=Pi("toUpperCase");function Ja(t,n,e){return t=ba(t),(n=e?i:n)===i?function(t){return Kt.test(t)}(t)?function(t){return t.match($t)||[]}(t):function(t){return t.match(ct)||[]}(t):t.match(n)||[]}var Qa=Vr((function(t,n){try{return _n(t,i,n)}catch(t){return Zu(t)?t:new wt(t)}})),tc=to((function(t,n){return mn(n,(function(n){n=jo(n),ir(t,n,ku(t[n],t))})),t}));function nc(t){return function(){return t}}var ec=Ri(),rc=Ri(!0);function ic(t){return t}function oc(t){return Br("function"==typeof t?t:ar(t,1))}var uc=Vr((function(t,n){return function(e){return Sr(e,t,n)}})),ac=Vr((function(t,n){return function(e){return Sr(t,e,n)}}));function cc(t,n,e){var r=Na(n),i=wr(n,r);null!=e||na(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=wr(n,Na(n)));var o=!(na(e)&&"chain"in e&&!e.chain),u=Ju(t);return mn(i,(function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__),i=e.__actions__=Ti(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,Tn([this.value()],arguments))})})),t}function sc(){}var lc=Ui(Cn),fc=Ui(xn),hc=Ui(kn);function pc(t){return bo(t)?jn(jo(t)):function(t){return function(n){return xr(n,t)}}(t)}var dc=qi(),gc=qi(!0);function vc(){return[]}function yc(){return!1}var _c,bc=zi((function(t,n){return t+n}),0),mc=Yi("ceil"),wc=zi((function(t,n){return t/n}),1),xc=Yi("floor"),Ac=zi((function(t,n){return t*n}),1),Dc=Yi("round"),Ec=zi((function(t,n){return t-n}),0);return Le.after=function(t,n){if("function"!=typeof n)throw new Tt(o);return t=ga(t),function(){if(--t<1)return n.apply(this,arguments)}},Le.ary=Mu,Le.assign=ma,Le.assignIn=wa,Le.assignInWith=xa,Le.assignWith=Aa,Le.at=Da,Le.before=Su,Le.bind=ku,Le.bindAll=tc,Le.bindKey=Ou,Le.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Gu(t)?t:[t]},Le.chain=pu,Le.chunk=function(t,n,e){n=(e?_o(t,n,e):n===i)?1:ye(ga(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var u=0,a=0,c=r(le(o/n));u<o;)c[a++]=ni(t,u,u+=n);return c},Le.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},Le.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return Tn(Gu(e)?Ti(e):[e],vr(n,1))},Le.cond=function(t){var n=null==t?0:t.length,e=uo();return t=n?Cn(t,(function(t){if("function"!=typeof t[1])throw new Tt(o);return[e(t[0]),t[1]]})):[],Vr((function(e){for(var r=-1;++r<n;){var i=t[r];if(_n(i[0],this,e))return _n(i[1],this,e)}}))},Le.conforms=function(t){return function(t){var n=Na(t);return function(e){return cr(e,t,n)}}(ar(t,1))},Le.constant=nc,Le.countBy=vu,Le.create=function(t,n){var e=ze(t);return null==n?e:rr(e,n)},Le.curry=function t(n,e,r){var o=Ki(n,8,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},Le.curryRight=function t(n,e,r){var o=Ki(n,16,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},Le.debounce=Nu,Le.defaults=Ea,Le.defaultsDeep=Ca,Le.defer=Pu,Le.delay=Bu,Le.difference=Uo,Le.differenceBy=Wo,Le.differenceWith=qo,Le.drop=function(t,n,e){var r=null==t?0:t.length;return r?ni(t,(n=e||n===i?1:ga(n))<0?0:n,r):[]},Le.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?ni(t,0,(n=r-(n=e||n===i?1:ga(n)))<0?0:n):[]},Le.dropRightWhile=function(t,n){return t&&t.length?fi(t,uo(n,3),!0,!0):[]},Le.dropWhile=function(t,n){return t&&t.length?fi(t,uo(n,3),!0):[]},Le.fill=function(t,n,e,r){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&_o(t,n,e)&&(e=0,r=o),function(t,n,e,r){var o=t.length;for((e=ga(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:ga(r))<0&&(r+=o),r=e>r?0:va(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},Le.filter=function(t,n){return(Gu(t)?An:gr)(t,uo(n,3))},Le.flatMap=function(t,n){return vr(Du(t,n),1)},Le.flatMapDeep=function(t,n){return vr(Du(t,n),l)},Le.flatMapDepth=function(t,n,e){return e=e===i?1:ga(e),vr(Du(t,n),e)},Le.flatten=Yo,Le.flattenDeep=function(t){return null!=t&&t.length?vr(t,l):[]},Le.flattenDepth=function(t,n){return null!=t&&t.length?vr(t,n=n===i?1:ga(n)):[]},Le.flip=function(t){return Ki(t,512)},Le.flow=ec,Le.flowRight=rc,Le.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},Le.functions=function(t){return null==t?[]:wr(t,Na(t))},Le.functionsIn=function(t){return null==t?[]:wr(t,Pa(t))},Le.groupBy=wu,Le.initial=function(t){return null!=t&&t.length?ni(t,0,-1):[]},Le.intersection=Vo,Le.intersectionBy=Ko,Le.intersectionWith=Xo,Le.invert=Sa,Le.invertBy=ka,Le.invokeMap=xu,Le.iteratee=oc,Le.keyBy=Au,Le.keys=Na,Le.keysIn=Pa,Le.map=Du,Le.mapKeys=function(t,n){var e={};return n=uo(n,3),br(t,(function(t,r,i){ir(e,n(t,r,i),t)})),e},Le.mapValues=function(t,n){var e={};return n=uo(n,3),br(t,(function(t,r,i){ir(e,r,n(t,r,i))})),e},Le.matches=function(t){return jr(ar(t,1))},Le.matchesProperty=function(t,n){return Lr(t,ar(n,1))},Le.memoize=Fu,Le.merge=Ba,Le.mergeWith=Fa,Le.method=uc,Le.methodOf=ac,Le.mixin=cc,Le.negate=Iu,Le.nthArg=function(t){return t=ga(t),Vr((function(n){return Ur(n,t)}))},Le.omit=Ia,Le.omitBy=function(t,n){return ja(t,Iu(uo(n)))},Le.once=function(t){return Su(2,t)},Le.orderBy=function(t,n,e,r){return null==t?[]:(Gu(n)||(n=null==n?[]:[n]),Gu(e=r?i:e)||(e=null==e?[]:[e]),Wr(t,n,e))},Le.over=lc,Le.overArgs=Ru,Le.overEvery=fc,Le.overSome=hc,Le.partial=ju,Le.partialRight=Lu,Le.partition=Eu,Le.pick=Ra,Le.pickBy=ja,Le.property=pc,Le.propertyOf=function(t){return function(n){return null==t?i:xr(t,n)}},Le.pull=Jo,Le.pullAll=Qo,Le.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Hr(t,n,uo(e,2)):t},Le.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Hr(t,n,i,e):t},Le.pullAt=tu,Le.range=dc,Le.rangeRight=gc,Le.rearg=zu,Le.reject=function(t,n){return(Gu(t)?An:gr)(t,Iu(uo(n,3)))},Le.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=uo(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return Gr(t,i),e},Le.rest=function(t,n){if("function"!=typeof t)throw new Tt(o);return Vr(t,n=n===i?n:ga(n))},Le.reverse=nu,Le.sampleSize=function(t,n,e){return n=(e?_o(t,n,e):n===i)?1:ga(n),(Gu(t)?Ze:Xr)(t,n)},Le.set=function(t,n,e){return null==t?t:Zr(t,n,e)},Le.setWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:Zr(t,n,e,r)},Le.shuffle=function(t){return(Gu(t)?Je:ti)(t)},Le.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&_o(t,n,e)?(n=0,e=r):(n=null==n?0:ga(n),e=e===i?r:ga(e)),ni(t,n,e)):[]},Le.sortBy=Cu,Le.sortedUniq=function(t){return t&&t.length?oi(t):[]},Le.sortedUniqBy=function(t,n){return t&&t.length?oi(t,uo(n,2)):[]},Le.split=function(t,n,e){return e&&"number"!=typeof e&&_o(t,n,e)&&(n=e=i),(e=e===i?p:e>>>0)?(t=ba(t))&&("string"==typeof n||null!=n&&!ua(n))&&!(n=ai(n))&&Qn(t)?bi(ue(t),0,e):t.split(n,e):[]},Le.spread=function(t,n){if("function"!=typeof t)throw new Tt(o);return n=null==n?0:ye(ga(n),0),Vr((function(e){var r=e[n],i=bi(e,0,n);return r&&Tn(i,r),_n(t,this,i)}))},Le.tail=function(t){var n=null==t?0:t.length;return n?ni(t,1,n):[]},Le.take=function(t,n,e){return t&&t.length?ni(t,0,(n=e||n===i?1:ga(n))<0?0:n):[]},Le.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?ni(t,(n=r-(n=e||n===i?1:ga(n)))<0?0:n,r):[]},Le.takeRightWhile=function(t,n){return t&&t.length?fi(t,uo(n,3),!1,!0):[]},Le.takeWhile=function(t,n){return t&&t.length?fi(t,uo(n,3)):[]},Le.tap=function(t,n){return n(t),t},Le.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new Tt(o);return na(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Nu(t,n,{leading:r,maxWait:n,trailing:i})},Le.thru=du,Le.toArray=pa,Le.toPairs=La,Le.toPairsIn=za,Le.toPath=function(t){return Gu(t)?Cn(t,jo):sa(t)?[t]:Ti(Ro(ba(t)))},Le.toPlainObject=_a,Le.transform=function(t,n,e){var r=Gu(t),i=r||Ku(t)||la(t);if(n=uo(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:na(t)&&Ju(o)?ze(Yt(t)):{}}return(i?mn:br)(t,(function(t,r,i){return n(e,t,r,i)})),e},Le.unary=function(t){return Mu(t,1)},Le.union=eu,Le.unionBy=ru,Le.unionWith=iu,Le.uniq=function(t){return t&&t.length?ci(t):[]},Le.uniqBy=function(t,n){return t&&t.length?ci(t,uo(n,2)):[]},Le.uniqWith=function(t,n){return n="function"==typeof n?n:i,t&&t.length?ci(t,i,n):[]},Le.unset=function(t,n){return null==t||si(t,n)},Le.unzip=ou,Le.unzipWith=uu,Le.update=function(t,n,e){return null==t?t:li(t,n,vi(e))},Le.updateWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:li(t,n,vi(e),r)},Le.values=Ua,Le.valuesIn=function(t){return null==t?[]:Gn(t,Pa(t))},Le.without=au,Le.words=Ja,Le.wrap=function(t,n){return ju(vi(n),t)},Le.xor=cu,Le.xorBy=su,Le.xorWith=lu,Le.zip=fu,Le.zipObject=function(t,n){return di(t||[],n||[],tr)},Le.zipObjectDeep=function(t,n){return di(t||[],n||[],Zr)},Le.zipWith=hu,Le.entries=La,Le.entriesIn=za,Le.extend=wa,Le.extendWith=xa,cc(Le,Le),Le.add=bc,Le.attempt=Qa,Le.camelCase=Wa,Le.capitalize=qa,Le.ceil=mc,Le.clamp=function(t,n,e){return e===i&&(e=n,n=i),e!==i&&(e=(e=ya(e))==e?e:0),n!==i&&(n=(n=ya(n))==n?n:0),ur(ya(t),n,e)},Le.clone=function(t){return ar(t,4)},Le.cloneDeep=function(t){return ar(t,5)},Le.cloneDeepWith=function(t,n){return ar(t,5,n="function"==typeof n?n:i)},Le.cloneWith=function(t,n){return ar(t,4,n="function"==typeof n?n:i)},Le.conformsTo=function(t,n){return null==n||cr(t,n,Na(n))},Le.deburr=Ha,Le.defaultTo=function(t,n){return null==t||t!=t?n:t},Le.divide=wc,Le.endsWith=function(t,n,e){t=ba(t),n=ai(n);var r=t.length,o=e=e===i?r:ur(ga(e),0,r);return(e-=n.length)>=0&&t.slice(e,o)==n},Le.eq=Uu,Le.escape=function(t){return(t=ba(t))&&V.test(t)?t.replace(Y,Zn):t},Le.escapeRegExp=function(t){return(t=ba(t))&&et.test(t)?t.replace(nt,"\\$&"):t},Le.every=function(t,n,e){var r=Gu(t)?xn:pr;return e&&_o(t,n,e)&&(n=i),r(t,uo(n,3))},Le.find=yu,Le.findIndex=Ho,Le.findKey=function(t,n){return Nn(t,uo(n,3),br)},Le.findLast=_u,Le.findLastIndex=Go,Le.findLastKey=function(t,n){return Nn(t,uo(n,3),mr)},Le.floor=xc,Le.forEach=bu,Le.forEachRight=mu,Le.forIn=function(t,n){return null==t?t:yr(t,uo(n,3),Pa)},Le.forInRight=function(t,n){return null==t?t:_r(t,uo(n,3),Pa)},Le.forOwn=function(t,n){return t&&br(t,uo(n,3))},Le.forOwnRight=function(t,n){return t&&mr(t,uo(n,3))},Le.get=Ta,Le.gt=Wu,Le.gte=qu,Le.has=function(t,n){return null!=t&&po(t,n,Cr)},Le.hasIn=Ma,Le.head=$o,Le.identity=ic,Le.includes=function(t,n,e,r){t=$u(t)?t:Ua(t),e=e&&!r?ga(e):0;var i=t.length;return e<0&&(e=ye(i+e,0)),ca(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&Bn(t,n,e)>-1},Le.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:ga(e);return i<0&&(i=ye(r+i,0)),Bn(t,n,i)},Le.inRange=function(t,n,e){return n=da(n),e===i?(e=n,n=0):e=da(e),function(t,n,e){return t>=_e(n,e)&&t<ye(n,e)}(t=ya(t),n,e)},Le.invoke=Oa,Le.isArguments=Hu,Le.isArray=Gu,Le.isArrayBuffer=Yu,Le.isArrayLike=$u,Le.isArrayLikeObject=Vu,Le.isBoolean=function(t){return!0===t||!1===t||ea(t)&&Dr(t)==y},Le.isBuffer=Ku,Le.isDate=Xu,Le.isElement=function(t){return ea(t)&&1===t.nodeType&&!oa(t)},Le.isEmpty=function(t){if(null==t)return!0;if($u(t)&&(Gu(t)||"string"==typeof t||"function"==typeof t.splice||Ku(t)||la(t)||Hu(t)))return!t.length;var n=ho(t);if(n==x||n==T)return!t.size;if(xo(t))return!Fr(t).length;for(var e in t)if(Pt.call(t,e))return!1;return!0},Le.isEqual=function(t,n){return Or(t,n)},Le.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:i)?e(t,n):i;return r===i?Or(t,n,i,e):!!r},Le.isError=Zu,Le.isFinite=function(t){return"number"==typeof t&&de(t)},Le.isFunction=Ju,Le.isInteger=Qu,Le.isLength=ta,Le.isMap=ra,Le.isMatch=function(t,n){return t===n||Nr(t,n,co(n))},Le.isMatchWith=function(t,n,e){return e="function"==typeof e?e:i,Nr(t,n,co(n),e)},Le.isNaN=function(t){return ia(t)&&t!=+t},Le.isNative=function(t){if(wo(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Pr(t)},Le.isNil=function(t){return null==t},Le.isNull=function(t){return null===t},Le.isNumber=ia,Le.isObject=na,Le.isObjectLike=ea,Le.isPlainObject=oa,Le.isRegExp=ua,Le.isSafeInteger=function(t){return Qu(t)&&t>=-9007199254740991&&t<=f},Le.isSet=aa,Le.isString=ca,Le.isSymbol=sa,Le.isTypedArray=la,Le.isUndefined=function(t){return t===i},Le.isWeakMap=function(t){return ea(t)&&ho(t)==k},Le.isWeakSet=function(t){return ea(t)&&"[object WeakSet]"==Dr(t)},Le.join=function(t,n){return null==t?"":ge.call(t,n)},Le.kebabCase=Ga,Le.last=Zo,Le.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=ga(e))<0?ye(r+o,0):_e(o,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,o):Pn(t,In,o,!0)},Le.lowerCase=Ya,Le.lowerFirst=$a,Le.lt=fa,Le.lte=ha,Le.max=function(t){return t&&t.length?dr(t,ic,Er):i},Le.maxBy=function(t,n){return t&&t.length?dr(t,uo(n,2),Er):i},Le.mean=function(t){return Rn(t,ic)},Le.meanBy=function(t,n){return Rn(t,uo(n,2))},Le.min=function(t){return t&&t.length?dr(t,ic,Ir):i},Le.minBy=function(t,n){return t&&t.length?dr(t,uo(n,2),Ir):i},Le.stubArray=vc,Le.stubFalse=yc,Le.stubObject=function(){return{}},Le.stubString=function(){return""},Le.stubTrue=function(){return!0},Le.multiply=Ac,Le.nth=function(t,n){return t&&t.length?Ur(t,ga(n)):i},Le.noConflict=function(){return un._===this&&(un._=jt),this},Le.noop=sc,Le.now=Tu,Le.pad=function(t,n,e){t=ba(t);var r=(n=ga(n))?oe(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return Wi(fe(i),e)+t+Wi(le(i),e)},Le.padEnd=function(t,n,e){t=ba(t);var r=(n=ga(n))?oe(t):0;return n&&r<n?t+Wi(n-r,e):t},Le.padStart=function(t,n,e){t=ba(t);var r=(n=ga(n))?oe(t):0;return n&&r<n?Wi(n-r,e)+t:t},Le.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),me(ba(t).replace(rt,""),n||0)},Le.random=function(t,n,e){if(e&&"boolean"!=typeof e&&_o(t,n,e)&&(n=e=i),e===i&&("boolean"==typeof n?(e=n,n=i):"boolean"==typeof t&&(e=t,t=i)),t===i&&n===i?(t=0,n=1):(t=da(t),n===i?(n=t,t=0):n=da(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var o=we();return _e(t+o*(n-t+nn("1e-"+((o+"").length-1))),n)}return Yr(t,n)},Le.reduce=function(t,n,e){var r=Gu(t)?Mn:zn,i=arguments.length<3;return r(t,uo(n,4),e,i,fr)},Le.reduceRight=function(t,n,e){var r=Gu(t)?Sn:zn,i=arguments.length<3;return r(t,uo(n,4),e,i,hr)},Le.repeat=function(t,n,e){return n=(e?_o(t,n,e):n===i)?1:ga(n),$r(ba(t),n)},Le.replace=function(){var t=arguments,n=ba(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Le.result=function(t,n,e){var r=-1,o=(n=yi(n,t)).length;for(o||(o=1,t=i);++r<o;){var u=null==t?i:t[jo(n[r])];u===i&&(r=o,u=e),t=Ju(u)?u.call(t):u}return t},Le.round=Dc,Le.runInContext=t,Le.sample=function(t){return(Gu(t)?Xe:Kr)(t)},Le.size=function(t){if(null==t)return 0;if($u(t))return ca(t)?oe(t):t.length;var n=ho(t);return n==x||n==T?t.size:Fr(t).length},Le.snakeCase=Va,Le.some=function(t,n,e){var r=Gu(t)?kn:ei;return e&&_o(t,n,e)&&(n=i),r(t,uo(n,3))},Le.sortedIndex=function(t,n){return ri(t,n)},Le.sortedIndexBy=function(t,n,e){return ii(t,n,uo(e,2))},Le.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=ri(t,n);if(r<e&&Uu(t[r],n))return r}return-1},Le.sortedLastIndex=function(t,n){return ri(t,n,!0)},Le.sortedLastIndexBy=function(t,n,e){return ii(t,n,uo(e,2),!0)},Le.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=ri(t,n,!0)-1;if(Uu(t[e],n))return e}return-1},Le.startCase=Ka,Le.startsWith=function(t,n,e){return t=ba(t),e=null==e?0:ur(ga(e),0,t.length),n=ai(n),t.slice(e,e+n.length)==n},Le.subtract=Ec,Le.sum=function(t){return t&&t.length?Un(t,ic):0},Le.sumBy=function(t,n){return t&&t.length?Un(t,uo(n,2)):0},Le.template=function(t,n,e){var r=Le.templateSettings;e&&_o(t,n,e)&&(n=i),t=ba(t),n=xa({},n,r,Xi);var o,u,a=xa({},n.imports,r.imports,Xi),c=Na(a),s=Gn(a,c),l=0,f=n.interpolate||bt,h="__p += '",p=Et((n.escape||bt).source+"|"+f.source+"|"+(f===Z?ft:bt).source+"|"+(n.evaluate||bt).source+"|$","g"),d="//# sourceURL="+(Pt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Zt+"]")+"\n";t.replace(p,(function(n,e,r,i,a,c){return r||(r=i),h+=t.slice(l,c).replace(mt,Jn),e&&(o=!0,h+="' +\n__e("+e+") +\n'"),a&&(u=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+n.length,n})),h+="';\n";var g=Pt.call(n,"variable")&&n.variable;if(g){if(st.test(g))throw new wt("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(u?h.replace(W,""):h).replace(q,"$1").replace(H,"$1;"),h="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var v=Qa((function(){return xt(c,d+"return "+h).apply(i,s)}));if(v.source=h,Zu(v))throw v;return v},Le.times=function(t,n){if((t=ga(t))<1||t>f)return[];var e=p,r=_e(t,p);n=uo(n),t-=p;for(var i=Wn(r,n);++e<t;)n(e);return i},Le.toFinite=da,Le.toInteger=ga,Le.toLength=va,Le.toLower=function(t){return ba(t).toLowerCase()},Le.toNumber=ya,Le.toSafeInteger=function(t){return t?ur(ga(t),-9007199254740991,f):0===t?t:0},Le.toString=ba,Le.toUpper=function(t){return ba(t).toUpperCase()},Le.trim=function(t,n,e){if((t=ba(t))&&(e||n===i))return qn(t);if(!t||!(n=ai(n)))return t;var r=ue(t),o=ue(n);return bi(r,$n(r,o),Vn(r,o)+1).join("")},Le.trimEnd=function(t,n,e){if((t=ba(t))&&(e||n===i))return t.slice(0,ae(t)+1);if(!t||!(n=ai(n)))return t;var r=ue(t);return bi(r,0,Vn(r,ue(n))+1).join("")},Le.trimStart=function(t,n,e){if((t=ba(t))&&(e||n===i))return t.replace(rt,"");if(!t||!(n=ai(n)))return t;var r=ue(t);return bi(r,$n(r,ue(n))).join("")},Le.truncate=function(t,n){var e=30,r="...";if(na(n)){var o="separator"in n?n.separator:o;e="length"in n?ga(n.length):e,r="omission"in n?ai(n.omission):r}var u=(t=ba(t)).length;if(Qn(t)){var a=ue(t);u=a.length}if(e>=u)return t;var c=e-oe(r);if(c<1)return r;var s=a?bi(a,0,c).join(""):t.slice(0,c);if(o===i)return s+r;if(a&&(c+=s.length-c),ua(o)){if(t.slice(c).search(o)){var l,f=s;for(o.global||(o=Et(o.source,ba(ht.exec(o))+"g")),o.lastIndex=0;l=o.exec(f);)var h=l.index;s=s.slice(0,h===i?c:h)}}else if(t.indexOf(ai(o),c)!=c){var p=s.lastIndexOf(o);p>-1&&(s=s.slice(0,p))}return s+r},Le.unescape=function(t){return(t=ba(t))&&$.test(t)?t.replace(G,ce):t},Le.uniqueId=function(t){var n=++Bt;return ba(t)+n},Le.upperCase=Xa,Le.upperFirst=Za,Le.each=bu,Le.eachRight=mu,Le.first=$o,cc(Le,(_c={},br(Le,(function(t,n){Pt.call(Le.prototype,n)||(_c[n]=t)})),_c),{chain:!1}),Le.VERSION="4.17.21",mn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Le[t].placeholder=Le})),mn(["drop","take"],(function(t,n){qe.prototype[t]=function(e){e=e===i?1:ye(ga(e),0);var r=this.__filtered__&&!n?new qe(this):this.clone();return r.__filtered__?r.__takeCount__=_e(e,r.__takeCount__):r.__views__.push({size:_e(e,p),type:t+(r.__dir__<0?"Right":"")}),r},qe.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),mn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;qe.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:uo(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),mn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");qe.prototype[t]=function(){return this[e](1).value()[0]}})),mn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");qe.prototype[t]=function(){return this.__filtered__?new qe(this):this[e](1)}})),qe.prototype.compact=function(){return this.filter(ic)},qe.prototype.find=function(t){return this.filter(t).head()},qe.prototype.findLast=function(t){return this.reverse().find(t)},qe.prototype.invokeMap=Vr((function(t,n){return"function"==typeof t?new qe(this):this.map((function(e){return Sr(e,t,n)}))})),qe.prototype.reject=function(t){return this.filter(Iu(uo(t)))},qe.prototype.slice=function(t,n){t=ga(t);var e=this;return e.__filtered__&&(t>0||n<0)?new qe(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==i&&(e=(n=ga(n))<0?e.dropRight(-n):e.take(n-t)),e)},qe.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},qe.prototype.toArray=function(){return this.take(p)},br(qe.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),o=Le[r?"take"+("last"==n?"Right":""):n],u=r||/^find/.test(n);o&&(Le.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,c=n instanceof qe,s=a[0],l=c||Gu(n),f=function(t){var n=o.apply(Le,Tn([t],a));return r&&h?n[0]:n};l&&e&&"function"==typeof s&&1!=s.length&&(c=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=u&&!h,g=c&&!p;if(!u&&l){n=g?n:new qe(this);var v=t.apply(n,a);return v.__actions__.push({func:du,args:[f],thisArg:i}),new We(v,h)}return d&&g?t.apply(this,a):(v=this.thru(f),d?r?v.value()[0]:v.value():v)})})),mn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=Mt[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Le.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Gu(i)?i:[],t)}return this[e]((function(e){return n.apply(Gu(e)?e:[],t)}))}})),br(qe.prototype,(function(t,n){var e=Le[n];if(e){var r=e.name+"";Pt.call(ke,r)||(ke[r]=[]),ke[r].push({name:n,func:e})}})),ke[ji(i,2).name]=[{name:"wrapper",func:i}],qe.prototype.clone=function(){var t=new qe(this.__wrapped__);return t.__actions__=Ti(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ti(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ti(this.__views__),t},qe.prototype.reverse=function(){if(this.__filtered__){var t=new qe(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},qe.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Gu(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=_e(n,t+u);break;case"takeRight":t=ye(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,s=r?a:u-1,l=this.__iteratees__,f=l.length,h=0,p=_e(c,this.__takeCount__);if(!e||!r&&i==c&&p==c)return hi(t,this.__actions__);var d=[];t:for(;c--&&h<p;){for(var g=-1,v=t[s+=n];++g<f;){var y=l[g],_=y.iteratee,b=y.type,m=_(v);if(2==b)v=m;else if(!m){if(1==b)continue t;break t}}d[h++]=v}return d},Le.prototype.at=gu,Le.prototype.chain=function(){return pu(this)},Le.prototype.commit=function(){return new We(this.value(),this.__chain__)},Le.prototype.next=function(){this.__values__===i&&(this.__values__=pa(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},Le.prototype.plant=function(t){for(var n,e=this;e instanceof Ue;){var r=zo(e);r.__index__=0,r.__values__=i,n?o.__wrapped__=r:n=r;var o=r;e=e.__wrapped__}return o.__wrapped__=t,n},Le.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof qe){var n=t;return this.__actions__.length&&(n=new qe(this)),(n=n.reverse()).__actions__.push({func:du,args:[nu],thisArg:i}),new We(n,this.__chain__)}return this.thru(nu)},Le.prototype.toJSON=Le.prototype.valueOf=Le.prototype.value=function(){return hi(this.__wrapped__,this.__actions__)},Le.prototype.first=Le.prototype.head,an&&(Le.prototype[an]=function(){return this}),Le}();un._=se,(r=function(){return se}.call(n,e,n,t))===i||(t.exports=r)}.call(this)},7084:function(t){t.exports=function(){"use strict";function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function n(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function e(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(r=t[Symbol.iterator]()).next.bind(r)}var r=function(t){var n={exports:{}};return t(n,n.exports),n.exports}((function(t){function n(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}t.exports={defaults:{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1},getDefaults:n,changeDefaults:function(n){t.exports.defaults=n}}})),i=/[&<>"']/,o=/[&<>"']/g,u=/[<>"']|&(?!#?\w+;)/,a=/[<>"']|&(?!#?\w+;)/g,c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},s=function(t){return c[t]};var l=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function f(t){return t.replace(l,(function(t,n){return"colon"===(n=n.toLowerCase())?":":"#"===n.charAt(0)?"x"===n.charAt(1)?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1)):""}))}var h=/(^|[^\[])\^/g;var p=/[^\w:]/g,d=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;var g={},v=/^[^:]+:\/*[^/]*$/,y=/^([^:]+:)[\s\S]*$/,_=/^([^:]+:\/*[^/]*)[\s\S]*$/;function b(t,n){g[" "+t]||(v.test(t)?g[" "+t]=t+"/":g[" "+t]=m(t,"/",!0));var e=-1===(t=g[" "+t]).indexOf(":");return"//"===n.substring(0,2)?e?n:t.replace(y,"$1")+n:"/"===n.charAt(0)?e?n:t.replace(_,"$1")+n:t+n}function m(t,n,e){var r=t.length;if(0===r)return"";for(var i=0;i<r;){var o=t.charAt(r-i-1);if(o!==n||e){if(o===n||!e)break;i++}else i++}return t.substr(0,r-i)}var w=function(t,n){if(n){if(i.test(t))return t.replace(o,s)}else if(u.test(t))return t.replace(a,s);return t},x=f,A=function(t,n){t=t.source||t,n=n||"";var e={replace:function(n,r){return r=(r=r.source||r).replace(h,"$1"),t=t.replace(n,r),e},getRegex:function(){return new RegExp(t,n)}};return e},D=function(t,n,e){if(t){var r;try{r=decodeURIComponent(f(e)).replace(p,"").toLowerCase()}catch(t){return null}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:")||0===r.indexOf("data:"))return null}n&&!d.test(e)&&(e=b(n,e));try{e=encodeURI(e).replace(/%25/g,"%")}catch(t){return null}return e},E={exec:function(){}},C=function(t){for(var n,e,r=1;r<arguments.length;r++)for(e in n=arguments[r])Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t},T=function(t,n){var e=t.replace(/\|/g,(function(t,n,e){for(var r=!1,i=n;--i>=0&&"\\"===e[i];)r=!r;return r?"|":" |"})).split(/ \|/),r=0;if(e.length>n)e.splice(n);else for(;e.length<n;)e.push("");for(;r<e.length;r++)e[r]=e[r].trim().replace(/\\\|/g,"|");return e},M=m,S=function(t,n){if(-1===t.indexOf(n[1]))return-1;for(var e=t.length,r=0,i=0;i<e;i++)if("\\"===t[i])i++;else if(t[i]===n[0])r++;else if(t[i]===n[1]&&--r<0)return i;return-1},k=function(t){t&&t.sanitize&&!t.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")},O=function(t,n){if(n<1)return"";for(var e="";n>1;)1&n&&(e+=t),n>>=1,t+=t;return e+t},N=r.defaults,P=M,B=T,F=w,I=S;function R(t,n,e){var r=n.href,i=n.title?F(n.title):null,o=t[1].replace(/\\([\[\]])/g,"$1");return"!"!==t[0].charAt(0)?{type:"link",raw:e,href:r,title:i,text:o}:{type:"image",raw:e,href:r,title:i,text:F(o)}}var j=function(){function t(t){this.options=t||N}var n=t.prototype;return n.space=function(t){var n=this.rules.block.newline.exec(t);if(n)return n[0].length>1?{type:"space",raw:n[0]}:{raw:"\n"}},n.code=function(t){var n=this.rules.block.code.exec(t);if(n){var e=n[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:n[0],codeBlockStyle:"indented",text:this.options.pedantic?e:P(e,"\n")}}},n.fences=function(t){var n=this.rules.block.fences.exec(t);if(n){var e=n[0],r=function(t,n){var e=t.match(/^(\s+)(?:```)/);if(null===e)return n;var r=e[1];return n.split("\n").map((function(t){var n=t.match(/^\s+/);return null===n?t:n[0].length>=r.length?t.slice(r.length):t})).join("\n")}(e,n[3]||"");return{type:"code",raw:e,lang:n[2]?n[2].trim():n[2],text:r}}},n.heading=function(t){var n=this.rules.block.heading.exec(t);if(n){var e=n[2].trim();if(/#$/.test(e)){var r=P(e,"#");this.options.pedantic?e=r.trim():r&&!/ $/.test(r)||(e=r.trim())}return{type:"heading",raw:n[0],depth:n[1].length,text:e}}},n.nptable=function(t){var n=this.rules.block.nptable.exec(t);if(n){var e={type:"table",header:B(n[1].replace(/^ *| *\| *$/g,"")),align:n[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:n[3]?n[3].replace(/\n$/,"").split("\n"):[],raw:n[0]};if(e.header.length===e.align.length){var r,i=e.align.length;for(r=0;r<i;r++)/^ *-+: *$/.test(e.align[r])?e.align[r]="right":/^ *:-+: *$/.test(e.align[r])?e.align[r]="center":/^ *:-+ *$/.test(e.align[r])?e.align[r]="left":e.align[r]=null;for(i=e.cells.length,r=0;r<i;r++)e.cells[r]=B(e.cells[r],e.header.length);return e}}},n.hr=function(t){var n=this.rules.block.hr.exec(t);if(n)return{type:"hr",raw:n[0]}},n.blockquote=function(t){var n=this.rules.block.blockquote.exec(t);if(n){var e=n[0].replace(/^ *> ?/gm,"");return{type:"blockquote",raw:n[0],text:e}}},n.list=function(t){var n=this.rules.block.list.exec(t);if(n){var e,r,i,o,u,a,c,s,l,f=n[0],h=n[2],p=h.length>1,d={type:"list",raw:f,ordered:p,start:p?+h.slice(0,-1):"",loose:!1,items:[]},g=n[0].match(this.rules.block.item),v=!1,y=g.length;i=this.rules.block.listItemStart.exec(g[0]);for(var _=0;_<y;_++){if(f=e=g[_],this.options.pedantic||(l=e.match(new RegExp("\\n\\s*\\n {0,"+(i[0].length-1)+"}\\S")))&&(u=e.length-l.index+g.slice(_+1).join("\n").length,d.raw=d.raw.substring(0,d.raw.length-u),f=e=e.substring(0,l.index),y=_+1),_!==y-1){if(o=this.rules.block.listItemStart.exec(g[_+1]),this.options.pedantic?o[1].length>i[1].length:o[1].length>=i[0].length||o[1].length>3){g.splice(_,2,g[_]+(!this.options.pedantic&&o[1].length<i[0].length&&!g[_].match(/\n$/)?"":"\n")+g[_+1]),_--,y--;continue}(!this.options.pedantic||this.options.smartLists?o[2][o[2].length-1]!==h[h.length-1]:p===(1===o[2].length))&&(u=g.slice(_+1).join("\n").length,d.raw=d.raw.substring(0,d.raw.length-u),_=y-1),i=o}r=e.length,~(e=e.replace(/^ *([*+-]|\d+[.)]) ?/,"")).indexOf("\n ")&&(r-=e.length,e=this.options.pedantic?e.replace(/^ {1,4}/gm,""):e.replace(new RegExp("^ {1,"+r+"}","gm"),"")),e=P(e,"\n"),_!==y-1&&(f+="\n"),a=v||/\n\n(?!\s*$)/.test(f),_!==y-1&&(v="\n\n"===f.slice(-2),a||(a=v)),a&&(d.loose=!0),this.options.gfm&&(s=void 0,(c=/^\[[ xX]\] /.test(e))&&(s=" "!==e[1],e=e.replace(/^\[[ xX]\] +/,""))),d.items.push({type:"list_item",raw:f,task:c,checked:s,loose:a,text:e})}return d}},n.html=function(t){var n=this.rules.block.html.exec(t);if(n)return{type:this.options.sanitize?"paragraph":"html",raw:n[0],pre:!this.options.sanitizer&&("pre"===n[1]||"script"===n[1]||"style"===n[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):F(n[0]):n[0]}},n.def=function(t){var n=this.rules.block.def.exec(t);if(n)return n[3]&&(n[3]=n[3].substring(1,n[3].length-1)),{type:"def",tag:n[1].toLowerCase().replace(/\s+/g," "),raw:n[0],href:n[2],title:n[3]}},n.table=function(t){var n=this.rules.block.table.exec(t);if(n){var e={type:"table",header:B(n[1].replace(/^ *| *\| *$/g,"")),align:n[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:n[3]?n[3].replace(/\n$/,"").split("\n"):[]};if(e.header.length===e.align.length){e.raw=n[0];var r,i=e.align.length;for(r=0;r<i;r++)/^ *-+: *$/.test(e.align[r])?e.align[r]="right":/^ *:-+: *$/.test(e.align[r])?e.align[r]="center":/^ *:-+ *$/.test(e.align[r])?e.align[r]="left":e.align[r]=null;for(i=e.cells.length,r=0;r<i;r++)e.cells[r]=B(e.cells[r].replace(/^ *\| *| *\| *$/g,""),e.header.length);return e}}},n.lheading=function(t){var n=this.rules.block.lheading.exec(t);if(n)return{type:"heading",raw:n[0],depth:"="===n[2].charAt(0)?1:2,text:n[1]}},n.paragraph=function(t){var n=this.rules.block.paragraph.exec(t);if(n)return{type:"paragraph",raw:n[0],text:"\n"===n[1].charAt(n[1].length-1)?n[1].slice(0,-1):n[1]}},n.text=function(t){var n=this.rules.block.text.exec(t);if(n)return{type:"text",raw:n[0],text:n[0]}},n.escape=function(t){var n=this.rules.inline.escape.exec(t);if(n)return{type:"escape",raw:n[0],text:F(n[1])}},n.tag=function(t,n,e){var r=this.rules.inline.tag.exec(t);if(r)return!n&&/^<a /i.test(r[0])?n=!0:n&&/^<\/a>/i.test(r[0])&&(n=!1),!e&&/^<(pre|code|kbd|script)(\s|>)/i.test(r[0])?e=!0:e&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(r[0])&&(e=!1),{type:this.options.sanitize?"text":"html",raw:r[0],inLink:n,inRawBlock:e,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):F(r[0]):r[0]}},n.link=function(t){var n=this.rules.inline.link.exec(t);if(n){var e=n[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;var r=P(e.slice(0,-1),"\\");if((e.length-r.length)%2==0)return}else{var i=I(n[2],"()");if(i>-1){var o=(0===n[0].indexOf("!")?5:4)+n[1].length+i;n[2]=n[2].substring(0,i),n[0]=n[0].substring(0,o).trim(),n[3]=""}}var u=n[2],a="";if(this.options.pedantic){var c=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(u);c&&(u=c[1],a=c[3])}else a=n[3]?n[3].slice(1,-1):"";return u=u.trim(),/^</.test(u)&&(u=this.options.pedantic&&!/>$/.test(e)?u.slice(1):u.slice(1,-1)),R(n,{href:u?u.replace(this.rules.inline._escapes,"$1"):u,title:a?a.replace(this.rules.inline._escapes,"$1"):a},n[0])}},n.reflink=function(t,n){var e;if((e=this.rules.inline.reflink.exec(t))||(e=this.rules.inline.nolink.exec(t))){var r=(e[2]||e[1]).replace(/\s+/g," ");if(!(r=n[r.toLowerCase()])||!r.href){var i=e[0].charAt(0);return{type:"text",raw:i,text:i}}return R(e,r,e[0])}},n.emStrong=function(t,n,e){void 0===e&&(e="");var r=this.rules.inline.emStrong.lDelim.exec(t);if(r&&(!r[3]||!e.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/))){var i=r[1]||r[2]||"";if(!i||i&&(""===e||this.rules.inline.punctuation.exec(e))){var o,u,a=r[0].length-1,c=a,s=0,l="*"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(l.lastIndex=0,n=n.slice(-1*t.length+a);null!=(r=l.exec(n));)if(o=r[1]||r[2]||r[3]||r[4]||r[5]||r[6])if(u=o.length,r[3]||r[4])c+=u;else if(!((r[5]||r[6])&&a%3)||(a+u)%3){if(!((c-=u)>0)){if(c+s-u<=0&&!n.slice(l.lastIndex).match(l)&&(u=Math.min(u,u+c+s)),Math.min(a,u)%2)return{type:"em",raw:t.slice(0,a+r.index+u+1),text:t.slice(1,a+r.index+u)};if(Math.min(a,u)%2==0)return{type:"strong",raw:t.slice(0,a+r.index+u+1),text:t.slice(2,a+r.index+u-1)}}}else s+=u}}},n.codespan=function(t){var n=this.rules.inline.code.exec(t);if(n){var e=n[2].replace(/\n/g," "),r=/[^ ]/.test(e),i=/^ /.test(e)&&/ $/.test(e);return r&&i&&(e=e.substring(1,e.length-1)),e=F(e,!0),{type:"codespan",raw:n[0],text:e}}},n.br=function(t){var n=this.rules.inline.br.exec(t);if(n)return{type:"br",raw:n[0]}},n.del=function(t){var n=this.rules.inline.del.exec(t);if(n)return{type:"del",raw:n[0],text:n[2]}},n.autolink=function(t,n){var e,r,i=this.rules.inline.autolink.exec(t);if(i)return r="@"===i[2]?"mailto:"+(e=F(this.options.mangle?n(i[1]):i[1])):e=F(i[1]),{type:"link",raw:i[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}},n.url=function(t,n){var e;if(e=this.rules.inline.url.exec(t)){var r,i;if("@"===e[2])i="mailto:"+(r=F(this.options.mangle?n(e[0]):e[0]));else{var o;do{o=e[0],e[0]=this.rules.inline._backpedal.exec(e[0])[0]}while(o!==e[0]);r=F(e[0]),i="www."===e[1]?"http://"+r:r}return{type:"link",raw:e[0],text:r,href:i,tokens:[{type:"text",raw:r,text:r}]}}},n.inlineText=function(t,n,e){var r,i=this.rules.inline.text.exec(t);if(i)return r=n?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):F(i[0]):i[0]:F(this.options.smartypants?e(i[0]):i[0]),{type:"text",raw:i[0],text:r}},t}(),L=E,z=A,U=C,W={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?! {0,3}bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:L,table:L,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};W.def=z(W.def).replace("label",W._label).replace("title",W._title).getRegex(),W.bullet=/(?:[*+-]|\d{1,9}[.)])/,W.item=/^( *)(bull) ?[^\n]*(?:\n(?! *bull ?)[^\n]*)*/,W.item=z(W.item,"gm").replace(/bull/g,W.bullet).getRegex(),W.listItemStart=z(/^( *)(bull) */).replace("bull",W.bullet).getRegex(),W.list=z(W.list).replace(/bull/g,W.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+W.def.source+")").getRegex(),W._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",W._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,W.html=z(W.html,"i").replace("comment",W._comment).replace("tag",W._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),W.paragraph=z(W._paragraph).replace("hr",W.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",W._tag).getRegex(),W.blockquote=z(W.blockquote).replace("paragraph",W.paragraph).getRegex(),W.normal=U({},W),W.gfm=U({},W.normal,{nptable:"^ *([^|\\n ].*\\|.*)\\n {0,3}([-:]+ *\\|[-| :]*)(?:\\n((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)",table:"^ *\\|(.+)\\n {0,3}\\|?( *[-:]+[-| :]*)(?:\\n *((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"}),W.gfm.nptable=z(W.gfm.nptable).replace("hr",W.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",W._tag).getRegex(),W.gfm.table=z(W.gfm.table).replace("hr",W.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",W._tag).getRegex(),W.pedantic=U({},W.normal,{html:z("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",W._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:L,paragraph:z(W.normal._paragraph).replace("hr",W.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",W.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()});var q={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:L,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,rDelimAst:/\_\_[^_]*?\*[^_]*?\_\_|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,rDelimUnd:/\*\*[^*]*?\_[^*]*?\*\*|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:L,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^([\spunctuation])/,_punctuation:"!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~"};q.punctuation=z(q.punctuation).replace(/punctuation/g,q._punctuation).getRegex(),q.blockSkip=/\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g,q.escapedEmSt=/\\\*|\\_/g,q._comment=z(W._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),q.emStrong.lDelim=z(q.emStrong.lDelim).replace(/punct/g,q._punctuation).getRegex(),q.emStrong.rDelimAst=z(q.emStrong.rDelimAst,"g").replace(/punct/g,q._punctuation).getRegex(),q.emStrong.rDelimUnd=z(q.emStrong.rDelimUnd,"g").replace(/punct/g,q._punctuation).getRegex(),q._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,q._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,q._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,q.autolink=z(q.autolink).replace("scheme",q._scheme).replace("email",q._email).getRegex(),q._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,q.tag=z(q.tag).replace("comment",q._comment).replace("attribute",q._attribute).getRegex(),q._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,q._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,q._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,q.link=z(q.link).replace("label",q._label).replace("href",q._href).replace("title",q._title).getRegex(),q.reflink=z(q.reflink).replace("label",q._label).getRegex(),q.reflinkSearch=z(q.reflinkSearch,"g").replace("reflink",q.reflink).replace("nolink",q.nolink).getRegex(),q.normal=U({},q),q.pedantic=U({},q.normal,{strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:z(/^!?\[(label)\]\((.*?)\)/).replace("label",q._label).getRegex(),reflink:z(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",q._label).getRegex()}),q.gfm=U({},q.normal,{escape:z(q.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),q.gfm.url=z(q.gfm.url,"i").replace("email",q.gfm._extended_email).getRegex(),q.breaks=U({},q.gfm,{br:z(q.br).replace("{2,}","*").getRegex(),text:z(q.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()});var H={block:W,inline:q},G=r.defaults,Y=H.block,$=H.inline,V=O;function K(t){return t.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function X(t){var n,e,r="",i=t.length;for(n=0;n<i;n++)e=t.charCodeAt(n),Math.random()>.5&&(e="x"+e.toString(16)),r+="&#"+e+";";return r}var Z=function(){function n(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||G,this.options.tokenizer=this.options.tokenizer||new j,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options;var n={block:Y.normal,inline:$.normal};this.options.pedantic?(n.block=Y.pedantic,n.inline=$.pedantic):this.options.gfm&&(n.block=Y.gfm,this.options.breaks?n.inline=$.breaks:n.inline=$.gfm),this.tokenizer.rules=n}n.lex=function(t,e){return new n(e).lex(t)},n.lexInline=function(t,e){return new n(e).inlineTokens(t)};var e,r,i,o=n.prototype;return o.lex=function(t){return t=t.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    "),this.blockTokens(t,this.tokens,!0),this.inline(this.tokens),this.tokens},o.blockTokens=function(t,n,e){var r,i,o,u;for(void 0===n&&(n=[]),void 0===e&&(e=!0),this.options.pedantic&&(t=t.replace(/^ +$/gm,""));t;)if(r=this.tokenizer.space(t))t=t.substring(r.raw.length),r.type&&n.push(r);else if(r=this.tokenizer.code(t))t=t.substring(r.raw.length),(u=n[n.length-1])&&"paragraph"===u.type?(u.raw+="\n"+r.raw,u.text+="\n"+r.text):n.push(r);else if(r=this.tokenizer.fences(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.heading(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.nptable(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.hr(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.blockquote(t))t=t.substring(r.raw.length),r.tokens=this.blockTokens(r.text,[],e),n.push(r);else if(r=this.tokenizer.list(t)){for(t=t.substring(r.raw.length),o=r.items.length,i=0;i<o;i++)r.items[i].tokens=this.blockTokens(r.items[i].text,[],!1);n.push(r)}else if(r=this.tokenizer.html(t))t=t.substring(r.raw.length),n.push(r);else if(e&&(r=this.tokenizer.def(t)))t=t.substring(r.raw.length),this.tokens.links[r.tag]||(this.tokens.links[r.tag]={href:r.href,title:r.title});else if(r=this.tokenizer.table(t))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.lheading(t))t=t.substring(r.raw.length),n.push(r);else if(e&&(r=this.tokenizer.paragraph(t)))t=t.substring(r.raw.length),n.push(r);else if(r=this.tokenizer.text(t))t=t.substring(r.raw.length),(u=n[n.length-1])&&"text"===u.type?(u.raw+="\n"+r.raw,u.text+="\n"+r.text):n.push(r);else if(t){var a="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(a);break}throw new Error(a)}return n},o.inline=function(t){var n,e,r,i,o,u,a=t.length;for(n=0;n<a;n++)switch((u=t[n]).type){case"paragraph":case"text":case"heading":u.tokens=[],this.inlineTokens(u.text,u.tokens);break;case"table":for(u.tokens={header:[],cells:[]},i=u.header.length,e=0;e<i;e++)u.tokens.header[e]=[],this.inlineTokens(u.header[e],u.tokens.header[e]);for(i=u.cells.length,e=0;e<i;e++)for(o=u.cells[e],u.tokens.cells[e]=[],r=0;r<o.length;r++)u.tokens.cells[e][r]=[],this.inlineTokens(o[r],u.tokens.cells[e][r]);break;case"blockquote":this.inline(u.tokens);break;case"list":for(i=u.items.length,e=0;e<i;e++)this.inline(u.items[e].tokens)}return t},o.inlineTokens=function(t,n,e,r){var i,o;void 0===n&&(n=[]),void 0===e&&(e=!1),void 0===r&&(r=!1);var u,a,c,s=t;if(this.tokens.links){var l=Object.keys(this.tokens.links);if(l.length>0)for(;null!=(u=this.tokenizer.rules.inline.reflinkSearch.exec(s));)l.includes(u[0].slice(u[0].lastIndexOf("[")+1,-1))&&(s=s.slice(0,u.index)+"["+V("a",u[0].length-2)+"]"+s.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(u=this.tokenizer.rules.inline.blockSkip.exec(s));)s=s.slice(0,u.index)+"["+V("a",u[0].length-2)+"]"+s.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(u=this.tokenizer.rules.inline.escapedEmSt.exec(s));)s=s.slice(0,u.index)+"++"+s.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;t;)if(a||(c=""),a=!1,i=this.tokenizer.escape(t))t=t.substring(i.raw.length),n.push(i);else if(i=this.tokenizer.tag(t,e,r)){t=t.substring(i.raw.length),e=i.inLink,r=i.inRawBlock;var f=n[n.length-1];f&&"text"===i.type&&"text"===f.type?(f.raw+=i.raw,f.text+=i.text):n.push(i)}else if(i=this.tokenizer.link(t))t=t.substring(i.raw.length),"link"===i.type&&(i.tokens=this.inlineTokens(i.text,[],!0,r)),n.push(i);else if(i=this.tokenizer.reflink(t,this.tokens.links)){t=t.substring(i.raw.length);var h=n[n.length-1];"link"===i.type?(i.tokens=this.inlineTokens(i.text,[],!0,r),n.push(i)):h&&"text"===i.type&&"text"===h.type?(h.raw+=i.raw,h.text+=i.text):n.push(i)}else if(i=this.tokenizer.emStrong(t,s,c))t=t.substring(i.raw.length),i.tokens=this.inlineTokens(i.text,[],e,r),n.push(i);else if(i=this.tokenizer.codespan(t))t=t.substring(i.raw.length),n.push(i);else if(i=this.tokenizer.br(t))t=t.substring(i.raw.length),n.push(i);else if(i=this.tokenizer.del(t))t=t.substring(i.raw.length),i.tokens=this.inlineTokens(i.text,[],e,r),n.push(i);else if(i=this.tokenizer.autolink(t,X))t=t.substring(i.raw.length),n.push(i);else if(e||!(i=this.tokenizer.url(t,X))){if(i=this.tokenizer.inlineText(t,r,K))t=t.substring(i.raw.length),"_"!==i.raw.slice(-1)&&(c=i.raw.slice(-1)),a=!0,(o=n[n.length-1])&&"text"===o.type?(o.raw+=i.raw,o.text+=i.text):n.push(i);else if(t){var p="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(p);break}throw new Error(p)}}else t=t.substring(i.raw.length),n.push(i);return n},e=n,i=[{key:"rules",get:function(){return{block:Y,inline:$}}}],(r=null)&&t(e.prototype,r),i&&t(e,i),n}(),J=r.defaults,Q=D,tt=w,nt=function(){function t(t){this.options=t||J}var n=t.prototype;return n.code=function(t,n,e){var r=(n||"").match(/\S*/)[0];if(this.options.highlight){var i=this.options.highlight(t,r);null!=i&&i!==t&&(e=!0,t=i)}return t=t.replace(/\n$/,"")+"\n",r?'<pre><code class="'+this.options.langPrefix+tt(r,!0)+'">'+(e?t:tt(t,!0))+"</code></pre>\n":"<pre><code>"+(e?t:tt(t,!0))+"</code></pre>\n"},n.blockquote=function(t){return"<blockquote>\n"+t+"</blockquote>\n"},n.html=function(t){return t},n.heading=function(t,n,e,r){return this.options.headerIds?"<h"+n+' id="'+this.options.headerPrefix+r.slug(e)+'">'+t+"</h"+n+">\n":"<h"+n+">"+t+"</h"+n+">\n"},n.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},n.list=function(t,n,e){var r=n?"ol":"ul";return"<"+r+(n&&1!==e?' start="'+e+'"':"")+">\n"+t+"</"+r+">\n"},n.listitem=function(t){return"<li>"+t+"</li>\n"},n.checkbox=function(t){return"<input "+(t?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "},n.paragraph=function(t){return"<p>"+t+"</p>\n"},n.table=function(t,n){return n&&(n="<tbody>"+n+"</tbody>"),"<table>\n<thead>\n"+t+"</thead>\n"+n+"</table>\n"},n.tablerow=function(t){return"<tr>\n"+t+"</tr>\n"},n.tablecell=function(t,n){var e=n.header?"th":"td";return(n.align?"<"+e+' align="'+n.align+'">':"<"+e+">")+t+"</"+e+">\n"},n.strong=function(t){return"<strong>"+t+"</strong>"},n.em=function(t){return"<em>"+t+"</em>"},n.codespan=function(t){return"<code>"+t+"</code>"},n.br=function(){return this.options.xhtml?"<br/>":"<br>"},n.del=function(t){return"<del>"+t+"</del>"},n.link=function(t,n,e){if(null===(t=Q(this.options.sanitize,this.options.baseUrl,t)))return e;var r='<a href="'+tt(t)+'"';return n&&(r+=' title="'+n+'"'),r+">"+e+"</a>"},n.image=function(t,n,e){if(null===(t=Q(this.options.sanitize,this.options.baseUrl,t)))return e;var r='<img src="'+t+'" alt="'+e+'"';return n&&(r+=' title="'+n+'"'),r+(this.options.xhtml?"/>":">")},n.text=function(t){return t},t}(),et=function(){function t(){}var n=t.prototype;return n.strong=function(t){return t},n.em=function(t){return t},n.codespan=function(t){return t},n.del=function(t){return t},n.html=function(t){return t},n.text=function(t){return t},n.link=function(t,n,e){return""+e},n.image=function(t,n,e){return""+e},n.br=function(){return""},t}(),rt=function(){function t(){this.seen={}}var n=t.prototype;return n.serialize=function(t){return t.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")},n.getNextSafeSlug=function(t,n){var e=t,r=0;if(this.seen.hasOwnProperty(e)){r=this.seen[t];do{e=t+"-"+ ++r}while(this.seen.hasOwnProperty(e))}return n||(this.seen[t]=r,this.seen[e]=0),e},n.slug=function(t,n){void 0===n&&(n={});var e=this.serialize(t);return this.getNextSafeSlug(e,n.dryrun)},t}(),it=r.defaults,ot=x,ut=function(){function t(t){this.options=t||it,this.options.renderer=this.options.renderer||new nt,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new et,this.slugger=new rt}t.parse=function(n,e){return new t(e).parse(n)},t.parseInline=function(n,e){return new t(e).parseInline(n)};var n=t.prototype;return n.parse=function(t,n){void 0===n&&(n=!0);var e,r,i,o,u,a,c,s,l,f,h,p,d,g,v,y,_,b,m="",w=t.length;for(e=0;e<w;e++)switch((f=t[e]).type){case"space":continue;case"hr":m+=this.renderer.hr();continue;case"heading":m+=this.renderer.heading(this.parseInline(f.tokens),f.depth,ot(this.parseInline(f.tokens,this.textRenderer)),this.slugger);continue;case"code":m+=this.renderer.code(f.text,f.lang,f.escaped);continue;case"table":for(s="",c="",o=f.header.length,r=0;r<o;r++)c+=this.renderer.tablecell(this.parseInline(f.tokens.header[r]),{header:!0,align:f.align[r]});for(s+=this.renderer.tablerow(c),l="",o=f.cells.length,r=0;r<o;r++){for(c="",u=(a=f.tokens.cells[r]).length,i=0;i<u;i++)c+=this.renderer.tablecell(this.parseInline(a[i]),{header:!1,align:f.align[i]});l+=this.renderer.tablerow(c)}m+=this.renderer.table(s,l);continue;case"blockquote":l=this.parse(f.tokens),m+=this.renderer.blockquote(l);continue;case"list":for(h=f.ordered,p=f.start,d=f.loose,o=f.items.length,l="",r=0;r<o;r++)y=(v=f.items[r]).checked,_=v.task,g="",v.task&&(b=this.renderer.checkbox(y),d?v.tokens.length>0&&"text"===v.tokens[0].type?(v.tokens[0].text=b+" "+v.tokens[0].text,v.tokens[0].tokens&&v.tokens[0].tokens.length>0&&"text"===v.tokens[0].tokens[0].type&&(v.tokens[0].tokens[0].text=b+" "+v.tokens[0].tokens[0].text)):v.tokens.unshift({type:"text",text:b}):g+=b),g+=this.parse(v.tokens,d),l+=this.renderer.listitem(g,_,y);m+=this.renderer.list(l,h,p);continue;case"html":m+=this.renderer.html(f.text);continue;case"paragraph":m+=this.renderer.paragraph(this.parseInline(f.tokens));continue;case"text":for(l=f.tokens?this.parseInline(f.tokens):f.text;e+1<w&&"text"===t[e+1].type;)l+="\n"+((f=t[++e]).tokens?this.parseInline(f.tokens):f.text);m+=n?this.renderer.paragraph(l):l;continue;default:var x='Token with "'+f.type+'" type was not found.';if(this.options.silent)return void console.error(x);throw new Error(x)}return m},n.parseInline=function(t,n){n=n||this.renderer;var e,r,i="",o=t.length;for(e=0;e<o;e++)switch((r=t[e]).type){case"escape":i+=n.text(r.text);break;case"html":i+=n.html(r.text);break;case"link":i+=n.link(r.href,r.title,this.parseInline(r.tokens,n));break;case"image":i+=n.image(r.href,r.title,r.text);break;case"strong":i+=n.strong(this.parseInline(r.tokens,n));break;case"em":i+=n.em(this.parseInline(r.tokens,n));break;case"codespan":i+=n.codespan(r.text);break;case"br":i+=n.br();break;case"del":i+=n.del(this.parseInline(r.tokens,n));break;case"text":i+=n.text(r.text);break;default:var u='Token with "'+r.type+'" type was not found.';if(this.options.silent)return void console.error(u);throw new Error(u)}return i},t}(),at=C,ct=k,st=w,lt=r.getDefaults,ft=r.changeDefaults,ht=r.defaults;function pt(t,n,e){if(null==t)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof t)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected");if("function"==typeof n&&(e=n,n=null),n=at({},pt.defaults,n||{}),ct(n),e){var r,i=n.highlight;try{r=Z.lex(t,n)}catch(t){return e(t)}var o=function(t){var o;if(!t)try{o=ut.parse(r,n)}catch(n){t=n}return n.highlight=i,t?e(t):e(null,o)};if(!i||i.length<3)return o();if(delete n.highlight,!r.length)return o();var u=0;return pt.walkTokens(r,(function(t){"code"===t.type&&(u++,setTimeout((function(){i(t.text,t.lang,(function(n,e){if(n)return o(n);null!=e&&e!==t.text&&(t.text=e,t.escaped=!0),0==--u&&o()}))}),0))})),void(0===u&&o())}try{var a=Z.lex(t,n);return n.walkTokens&&pt.walkTokens(a,n.walkTokens),ut.parse(a,n)}catch(t){if(t.message+="\nPlease report this to https://github.com/markedjs/marked.",n.silent)return"<p>An error occurred:</p><pre>"+st(t.message+"",!0)+"</pre>";throw t}}return pt.options=pt.setOptions=function(t){return at(pt.defaults,t),ft(pt.defaults),pt},pt.getDefaults=lt,pt.defaults=ht,pt.use=function(t){var n=at({},t);if(t.renderer&&function(){var e=pt.defaults.renderer||new nt,r=function(n){var r=e[n];e[n]=function(){for(var i=arguments.length,o=new Array(i),u=0;u<i;u++)o[u]=arguments[u];var a=t.renderer[n].apply(e,o);return!1===a&&(a=r.apply(e,o)),a}};for(var i in t.renderer)r(i);n.renderer=e}(),t.tokenizer&&function(){var e=pt.defaults.tokenizer||new j,r=function(n){var r=e[n];e[n]=function(){for(var i=arguments.length,o=new Array(i),u=0;u<i;u++)o[u]=arguments[u];var a=t.tokenizer[n].apply(e,o);return!1===a&&(a=r.apply(e,o)),a}};for(var i in t.tokenizer)r(i);n.tokenizer=e}(),t.walkTokens){var e=pt.defaults.walkTokens;n.walkTokens=function(n){t.walkTokens(n),e&&e(n)}}pt.setOptions(n)},pt.walkTokens=function(t,n){for(var r,i=e(t);!(r=i()).done;){var o=r.value;switch(n(o),o.type){case"table":for(var u,a=e(o.tokens.header);!(u=a()).done;){var c=u.value;pt.walkTokens(c,n)}for(var s,l=e(o.tokens.cells);!(s=l()).done;)for(var f,h=e(s.value);!(f=h()).done;){var p=f.value;pt.walkTokens(p,n)}break;case"list":pt.walkTokens(o.items,n);break;default:o.tokens&&pt.walkTokens(o.tokens,n)}}},pt.parseInline=function(t,n){if(null==t)throw new Error("marked.parseInline(): input parameter is undefined or null");if("string"!=typeof t)throw new Error("marked.parseInline(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected");n=at({},pt.defaults,n||{}),ct(n);try{var e=Z.lexInline(t,n);return n.walkTokens&&pt.walkTokens(e,n.walkTokens),ut.parseInline(e,n)}catch(t){if(t.message+="\nPlease report this to https://github.com/markedjs/marked.",n.silent)return"<p>An error occurred:</p><pre>"+st(t.message+"",!0)+"</pre>";throw t}},pt.Parser=ut,pt.parser=ut.parse,pt.Renderer=nt,pt.TextRenderer=et,pt.Lexer=Z,pt.lexer=Z.lex,pt.Tokenizer=j,pt.Slugger=rt,pt.parse=pt,pt}()},8660:(t,n,e)=>{var r;!function(t){!function(n){var r="object"==typeof e.g?e.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=o(t);function o(t,n){return function(e,r){"function"!=typeof t[e]&&Object.defineProperty(t,e,{configurable:!0,writable:!0,value:r}),n&&n(e,r)}}void 0===r.Reflect?r.Reflect=t:i=o(r.Reflect,i),function(t){var n=Object.prototype.hasOwnProperty,e="function"==typeof Symbol,r=e&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=e&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,u={__proto__:[]}instanceof Array,a=!o&&!u,c={create:o?function(){return F(Object.create(null))}:u?function(){return F({__proto__:null})}:function(){return F({})},has:a?function(t,e){return n.call(t,e)}:function(t,n){return n in t},get:a?function(t,e){return n.call(t,e)?t[e]:void 0}:function(t,n){return t[n]}},s=Object.getPrototypeOf(Function),l="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,f=l||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var t={},n=[],e=function(){function t(t,n,e){this._index=0,this._keys=t,this._values=n,this._selector=e}return t.prototype["@@iterator"]=function(){return this},t.prototype[i]=function(){return this},t.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var e=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=n,this._values=n):this._index++,{value:e,done:!1}}return{value:void 0,done:!0}},t.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=n,this._values=n),t},t.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=n,this._values=n),{value:t,done:!0}},t}();return function(){function n(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(n.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),n.prototype.has=function(t){return this._find(t,!1)>=0},n.prototype.get=function(t){var n=this._find(t,!1);return n>=0?this._values[n]:void 0},n.prototype.set=function(t,n){var e=this._find(t,!0);return this._values[e]=n,this},n.prototype.delete=function(n){var e=this._find(n,!1);if(e>=0){for(var r=this._keys.length,i=e+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,n===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},n.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},n.prototype.keys=function(){return new e(this._keys,this._values,r)},n.prototype.values=function(){return new e(this._keys,this._values,o)},n.prototype.entries=function(){return new e(this._keys,this._values,u)},n.prototype["@@iterator"]=function(){return this.entries()},n.prototype[i]=function(){return this.entries()},n.prototype._find=function(t,n){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&n&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},n}();function r(t,n){return t}function o(t,n){return n}function u(t,n){return[t,n]}}():Map,h=l||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function t(){this._map=new f}return Object.defineProperty(t.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.add=function(t){return this._map.set(t,t),this},t.prototype.delete=function(t){return this._map.delete(t)},t.prototype.clear=function(){this._map.clear()},t.prototype.keys=function(){return this._map.keys()},t.prototype.values=function(){return this._map.values()},t.prototype.entries=function(){return this._map.entries()},t.prototype["@@iterator"]=function(){return this.keys()},t.prototype[i]=function(){return this.keys()},t}():Set,p=new(l||"function"!=typeof WeakMap?function(){var t=c.create(),e=r();return function(){function t(){this._key=r()}return t.prototype.has=function(t){var n=i(t,!1);return void 0!==n&&c.has(n,this._key)},t.prototype.get=function(t){var n=i(t,!1);return void 0!==n?c.get(n,this._key):void 0},t.prototype.set=function(t,n){return i(t,!0)[this._key]=n,this},t.prototype.delete=function(t){var n=i(t,!1);return void 0!==n&&delete n[this._key]},t.prototype.clear=function(){this._key=r()},t}();function r(){var n;do{n="@@WeakMap@@"+u()}while(c.has(t,n));return t[n]=!0,n}function i(t,r){if(!n.call(t,e)){if(!r)return;Object.defineProperty(t,e,{value:c.create()})}return t[e]}function o(t,n){for(var e=0;e<n;++e)t[e]=255*Math.random()|0;return t}function u(){var t,n=(t=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):o(new Uint8Array(t),t):o(new Array(t),t));n[6]=79&n[6]|64,n[8]=191&n[8]|128;for(var e="",r=0;r<16;++r){var i=n[r];4!==r&&6!==r&&8!==r||(e+="-"),i<16&&(e+="0"),e+=i.toString(16).toLowerCase()}return e}}():WeakMap);function d(t,n,e){var r=p.get(t);if(A(r)){if(!e)return;r=new f,p.set(t,r)}var i=r.get(n);if(A(i)){if(!e)return;i=new f,r.set(n,i)}return i}function g(t,n,e){if(v(t,n,e))return!0;var r=B(n);return!D(r)&&g(t,r,e)}function v(t,n,e){var r=d(n,e,!1);return!A(r)&&!!r.has(t)}function y(t,n,e){if(v(t,n,e))return _(t,n,e);var r=B(n);return D(r)?void 0:y(t,r,e)}function _(t,n,e){var r=d(n,e,!1);if(!A(r))return r.get(t)}function b(t,n,e,r){d(e,r,!0).set(t,n)}function m(t,n){var e=w(t,n),r=B(t);if(null===r)return e;var i=m(r,n);if(i.length<=0)return e;if(e.length<=0)return i;for(var o=new h,u=[],a=0,c=e;a<c.length;a++){var s=c[a];o.has(s)||(o.add(s),u.push(s))}for(var l=0,f=i;l<f.length;l++)s=f[l],o.has(s)||(o.add(s),u.push(s));return u}function w(t,n){var e=[],r=d(t,n,!1);if(A(r))return e;for(var o=function(t){var n=O(t,i);if(!S(n))throw new TypeError;var e=n.call(t);if(!E(e))throw new TypeError;return e}(r.keys()),u=0;;){var a=N(o);if(!a)return e.length=u,e;var c=a.value;try{e[u]=c}catch(t){try{P(o)}finally{throw t}}u++}}function x(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function A(t){return void 0===t}function D(t){return null===t}function E(t){return"object"==typeof t?null!==t:"function"==typeof t}function C(t,n){switch(x(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var e=3===n?"string":5===n?"number":"default",i=O(t,r);if(void 0!==i){var o=i.call(t,e);if(E(o))throw new TypeError;return o}return function(t,n){if("string"===n){var e=t.toString;if(S(e)&&!E(i=e.call(t)))return i;if(S(r=t.valueOf)&&!E(i=r.call(t)))return i}else{var r;if(S(r=t.valueOf)&&!E(i=r.call(t)))return i;var i,o=t.toString;if(S(o)&&!E(i=o.call(t)))return i}throw new TypeError}(t,"default"===e?"number":e)}function T(t){var n=C(t,3);return"symbol"==typeof n?n:function(t){return""+t}(n)}function M(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function S(t){return"function"==typeof t}function k(t){return"function"==typeof t}function O(t,n){var e=t[n];if(null!=e){if(!S(e))throw new TypeError;return e}}function N(t){var n=t.next();return!n.done&&n}function P(t){var n=t.return;n&&n.call(t)}function B(t){var n=Object.getPrototypeOf(t);if("function"!=typeof t||t===s)return n;if(n!==s)return n;var e=t.prototype,r=e&&Object.getPrototypeOf(e);if(null==r||r===Object.prototype)return n;var i=r.constructor;return"function"!=typeof i||i===t?n:i}function F(t){return t.__=void 0,delete t.__,t}t("decorate",(function(t,n,e,r){if(A(e)){if(!M(t))throw new TypeError;if(!k(n))throw new TypeError;return function(t,n){for(var e=t.length-1;e>=0;--e){var r=(0,t[e])(n);if(!A(r)&&!D(r)){if(!k(r))throw new TypeError;n=r}}return n}(t,n)}if(!M(t))throw new TypeError;if(!E(n))throw new TypeError;if(!E(r)&&!A(r)&&!D(r))throw new TypeError;return D(r)&&(r=void 0),function(t,n,e,r){for(var i=t.length-1;i>=0;--i){var o=(0,t[i])(n,e,r);if(!A(o)&&!D(o)){if(!E(o))throw new TypeError;r=o}}return r}(t,n,e=T(e),r)})),t("metadata",(function(t,n){return function(e,r){if(!E(e))throw new TypeError;if(!A(r)&&!function(t){switch(x(t)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;b(t,n,e,r)}})),t("defineMetadata",(function(t,n,e,r){if(!E(e))throw new TypeError;return A(r)||(r=T(r)),b(t,n,e,r)})),t("hasMetadata",(function(t,n,e){if(!E(n))throw new TypeError;return A(e)||(e=T(e)),g(t,n,e)})),t("hasOwnMetadata",(function(t,n,e){if(!E(n))throw new TypeError;return A(e)||(e=T(e)),v(t,n,e)})),t("getMetadata",(function(t,n,e){if(!E(n))throw new TypeError;return A(e)||(e=T(e)),y(t,n,e)})),t("getOwnMetadata",(function(t,n,e){if(!E(n))throw new TypeError;return A(e)||(e=T(e)),_(t,n,e)})),t("getMetadataKeys",(function(t,n){if(!E(t))throw new TypeError;return A(n)||(n=T(n)),m(t,n)})),t("getOwnMetadataKeys",(function(t,n){if(!E(t))throw new TypeError;return A(n)||(n=T(n)),w(t,n)})),t("deleteMetadata",(function(t,n,e){if(!E(n))throw new TypeError;A(e)||(e=T(e));var r=d(n,e,!1);if(A(r))return!1;if(!r.delete(t))return!1;if(r.size>0)return!0;var i=p.get(n);return i.delete(e),i.size>0||p.delete(n),!0}))}(i)}()}(r||(r={}))},3178:function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},i=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.Application=void 0;var o=e(4481),u=e(7719),a=e(8593);e(8660),e(7953),e(6380),e(787),e(9135),e(4873),e(476);var c=function(){function t(){}return t.run=function(){var n=this;o.json("https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/metadata.json",(function(e){return r(n,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return a.Container.importProvider(),[4,u.Config.load()];case 1:return n.sent(),t.metadata=e,t.dates=t.metadata.filter((function(t){return"joined"===t.type})).map((function(t){return t.date})).reverse(),t.pages=t.Pages.map(a.Container.get),t.pages.forEach((function(t){return t.init()})),t.links=t.Links.map(a.Container.get),t.links.forEach((function(t){return t.init()})),t.pages[0].update(),[2]}}))}))}))},t.build={withBlank:function(){return t.build},withPages:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.Pages=n,t.build},withLinks:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.Links=n,t.build},class:t},t}();n.Application=c},7719:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},u=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.Config=n.Margin=void 0;var a=e(6486),c=e(4481),s=e(8593);n.Margin=function(){};var l=function(t){this.name=t},f=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),Object.defineProperty(n.prototype,"svgHeight",{get:function(){return this.name+".svgHeight"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"svgWidth",{get:function(){return this.name+".svgWidth"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"margin",{get:function(){return this.name+".margin"},enumerable:!1,configurable:!0}),n}(l),h=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),Object.defineProperty(n.prototype,"parentSvgId",{get:function(){return this.name+".parentSvgId"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"opacity",{get:function(){return this.name+".opacity"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"nRow",{get:function(){return this.name+".nRow"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rectWidth",{get:function(){return this.name+".rectWidth"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rectXBias",{get:function(){return this.name+".rectXBias"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rectYBias",{get:function(){return this.name+".rectYBias"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"textXBias",{get:function(){return this.name+".textXBias"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"textYBias",{get:function(){return this.name+".textYBias"},enumerable:!1,configurable:!0}),n}(l),p=function(){function t(){}var n;return t.load=function(){return o(this,void 0,void 0,(function(){return u(this,(function(n){return[2,new Promise((function(n){c.json("/config/params.json",(function(e){a.keys(e).forEach((function(n){var r=e[n];a.keys(r).forEach((function(e){var i=r[e];a.keys(i).forEach((function(r){var o=t[n][e][r],u=i[r];s.Container.bind(o).toConstantValue(u)}))}))})),n()}))}))]}))}))},t.BrHeatmapPage=((n=function(){}).BrHeatmap=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),Object.defineProperty(n.prototype,"mainSvgId",{get:function(){return this.name+".mainSvgId"},enumerable:!1,configurable:!0}),n}(f))("BrHeatmap"),n.ColorBar=new f("ColorBar"),n.BrLineChart=new f("BrLineChart"),n.Legend=new f("Legend"),n.Tooltip=new h("Tooltip"),n),t}();n.Config=p},9995:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.DataRepo=void 0;var u=e(5259),a=e(8593),c=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="data-repo",n.name="Data",n.url="https://github.com/ControlNet/wt-data-project.data",n}var e;return i(n,t),e=n,o([a.Singleton(e)],n)}(u.Link);n.DataRepo=c},2846:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.GithubLink=void 0;var u=e(5259),a=e(8593),c=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="github",n.name="by ControlNet",n.url="https://github.com/ControlNet",n}var e;return i(n,t),e=n,o([a.Singleton(e)],n)}(u.Link);n.GithubLink=c},5259:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.Link=void 0;var u=e(4481),a=e(5160),c=e(8593),s=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.init=function(){u.select("#navbar").append("li").append("a").attr("id",this.id).attr("href",this.url).classed("link-tab",!0).html(this.name)},o([c.Injectable],n)}(a.NavTab);n.Link=s},3415:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.WebRepo=void 0;var u=e(5259),a=e(8593),c=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="web-repo",n.name="GitHub",n.url="https://github.com/ControlNet/wt-data-project.web",n}var e;return i(n,t),e=n,o([a.Singleton(e)],n)}(u.Link);n.WebRepo=c},5160:function(t,n,e){"use strict";var r=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.NavTab=void 0;var i=e(8593),o=function(){function t(){}return r([i.Injectable],t)}();n.NavTab=o},1759:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.BRHeatMapPage=void 0;var u=e(3178),a=e(7984),c=e(4481),s=e(8593),l=e(7953),f=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="br-heatmap",n.name="BR HeatMap",n}var e;return i(n,t),e=n,n.prototype.update=function(){var t=this;this.removeOld();var n=c.select("#sidebar"),e=n.append("label").text("Date: ").append("select").attr("id","date-selection").classed("br-heatmap-selection",!0);u.Application.dates.forEach((function(t){e.append("option").attr("value",t).html(t)})),n.append("label").text("Class: ").append("select").attr("id","class-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"Ground_vehicles",text:"Ground Vehicles"},{id:"Aviation",text:"Aviation"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"Ground_vehicles"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Mode: ").append("select").attr("id","mode-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"ab",text:"AB"},{id:"rb",text:"RB"},{id:"sb",text:"SB"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"rb"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Measurement: ").append("select").attr("id","measurement-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"win_rate",text:"Win Rate"},{id:"battles_sum",text:"Battles"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"win_rate"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("BR Range: ").append("select").attr("id","br-range-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"0"},{id:"1"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"1"===t.id?"selected":void 0})).html((function(t){return t.id})),this.plot=s.Container.get(l.BrHeatmap),s.Container.rebind(l.BrHeatmap).toConstantValue(this.plot),this.plot.init(),s.utils.setEvent.byClass("br-heatmap-selection").onchange((function(){return t.plot.update(!1)})),s.utils.setEvent.byIds("mode-selection","br-range-selection").onchange((function(){return t.plot.update(!0)}))},o([s.Singleton(e)],n)}(a.Page);n.BRHeatMapPage=f},7984:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.Page=void 0;var u=e(4481),a=e(5160),c=e(8593),s=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.init=function(){var t=this;u.select("#navbar").append("li").append("a").attr("id",this.id).attr("href","#"+this.id).classed("page-tab",!0).html(this.name).on("click",(function(){return t.update.call(t)}))},n.prototype.removeOld=function(){u.select("#sidebar").html(""),u.select("#content").html("")},o([c.Injectable],n)}(a.NavTab);n.Page=s},5079:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.TodoPage=void 0;var u=e(7984),a=e(4481),c=e(7084),s=e(8593),l=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="todo-list",n.name="Todo List",n}var e;return i(n,t),e=n,n.prototype.update=function(){this.removeOld(),a.text("https://raw.githubusercontent.com/ControlNet/wt-data-project.web/main/README.md",(function(t){a.select("#content").html(c(t)).html(a.select("div#todo-list-section").html())}))},o([s.Singleton(e)],n)}(u.Page);n.TodoPage=l},7535:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Getter=void 0;n.Getter=function(){}},3516:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.JoinedRowGetter=void 0;var o=function(t){function n(n,e){var r=t.call(this)||this;return r.data=n,r.mode=e,r}return i(n,t),Object.defineProperty(n.prototype,"br",{get:function(){switch(this.mode){case"ab":return+this.data.ab_br;case"rb":return+this.data.rb_br;case"sb":return+this.data.sb_br}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"battles",{get:function(){switch(this.mode){case"ab":return+this.data.ab_battles;case"rb":return+this.data.rb_battles;case"sb":return+this.data.sb_battles}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"winRate",{get:function(){switch(this.mode){case"ab":return+this.data.ab_win_rate;case"rb":return+this.data.rb_win_rate;case"sb":return+this.data.sb_win_rate}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"airFragsPerBattle",{get:function(){switch(this.mode){case"ab":return+this.data.ab_air_frags_per_battle;case"rb":return+this.data.rb_air_frags_per_battle;case"sb":return+this.data.sb_air_frags_per_battle}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"airFragsPerDeath",{get:function(){switch(this.mode){case"ab":return+this.data.ab_air_frags_per_death;case"rb":return+this.data.rb_air_frags_per_death;case"sb":return+this.data.sb_air_frags_per_death}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"groundFragsPerBattle",{get:function(){switch(this.mode){case"ab":return+this.data.ab_ground_frags_per_battle;case"rb":return+this.data.rb_ground_frags_per_battle;case"sb":return+this.data.sb_ground_frags_per_battle}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"groundFragsPerDeath",{get:function(){switch(this.mode){case"ab":return+this.data.ab_ground_frags_per_death;case"rb":return+this.data.rb_ground_frags_per_death;case"sb":return+this.data.sb_ground_frags_per_death}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"rpRate",{get:function(){switch(this.mode){case"ab":return+this.data.ab_rp_rate;case"rb":return+this.data.rb_rp_rate;case"sb":return+this.data.sb_rp_rate}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"slRate",{get:function(){switch(this.mode){case"ab":return+this.data.ab_sl_rate;case"rb":return+this.data.rb_sl_rate;case"sb":return+this.data.sb_sl_rate}},enumerable:!1,configurable:!0}),n}(e(7535).Getter);n.JoinedRowGetter=o},9465:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.TimeseriesRowGetter=void 0;var o=function(t){function n(n,e,r){var i=t.call(this)||this;return i.data=n,i.mode=e,i.measurement=r,i}return i(n,t),Object.defineProperty(n.prototype,"value",{get:function(){switch(this.mode){case"ab":var t=this.data;switch(this.measurement){case"win_rate":return+t.ab_win_rate;case"battles_sum":return+t.ab_battles_sum}break;case"rb":var n=this.data;switch(this.measurement){case"win_rate":return+n.rb_win_rate;case"battles_sum":return+n.rb_battles_sum}break;case"sb":var e=this.data;switch(this.measurement){case"win_rate":return+e.sb_win_rate;case"battles_sum":return+e.sb_battles_sum}}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"br",{get:function(){switch(this.mode){case"ab":return this.data.ab_br;case"rb":return this.data.rb_br;case"sb":return this.data.sb_br}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"lowerBr",{get:function(){switch(this.mode){case"ab":return+this.data.ab_lower_br;case"rb":return+this.data.rb_lower_br;case"sb":return+this.data.sb_lower_br}},enumerable:!1,configurable:!0}),n}(e(7535).Getter);n.TimeseriesRowGetter=o},7953:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u},u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},a=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.BrHeatmap=void 0;var c=e(4481),s=e(6486),l=e(7830),f=e(9465),h=e(8593),p=e(6380),d=e(787),g=e(9135),v=e(4873),y=e(476),_=e(7719),b=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.selected=[],n.colorPool={values:h.utils.deepCopy(h.categoricalColors),i:0,bindings:new Array,get:function(t){for(var n=0,e=this.bindings;n<e.length;n++){var r=e[n];if(r.br===t.br&&r.nation===t.nation)return r.color}var i=this.values[this.i];return this.i++,this.i===this.values.length&&(this.i=0),this.bindings.push({nation:t.nation,br:t.br,color:i}),i}},n}var e;return i(n,t),e=n,n.prototype.updateSubPlots=function(){return u(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.table.update()];case 1:return t.sent(),[4,this.lineChart.update()];case 2:return t.sent(),[4,this.legend.update()];case 3:return t.sent(),[2]}}))}))},n.prototype.resetSubPlots=function(){return u(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return this.table.reset(),this.lineChart.reset(),[4,this.legend.update()];case 1:return t.sent(),[2]}}))}))},Object.defineProperty(n.prototype,"mouseleaveEvent",{get:function(){var t=this;return function(){c.select(this).style("stroke","black"),t.tooltip.hide()}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"mouseoverEvent",{get:function(){var t=this;return function(n){c.select(this).style("stroke","white"),t.tooltip.appear(),t.tooltip.rect.transition().duration(100).style("fill",t.value2color(n.value))}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"mousemoveEvent",{get:function(){var t=this;return function(n){return u(this,void 0,void 0,(function(){var e;return a(this,(function(r){switch(r.label){case 0:return e=new h.MousePosition(c.mouse(this)[0],c.mouse(this)[1]),[4,t.tooltip.update(["Nation: "+n.nation,"BR: "+n.br,t.measurement+": "+s.round(n.value,3)],e)];case 1:return r.sent(),[2]}}))}))}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"clickEvent",{get:function(){var t=this;return function(){return u(this,void 0,void 0,(function(){var n,e;return a(this,(function(r){switch(r.label){case 0:return n=c.select(this),e=n.data()[0],h.utils.rgbToHex(n.style("fill")).toUpperCase()===h.COLORS.AZURE?(n.style("fill",t.value2color(e.value)),t.selected=t.selected.filter((function(t){return t.br!==e.br||t.nation!==e.nation}))):(n.style("fill",h.COLORS.AZURE),t.selected.push(e)),[4,t.updateSubPlots()];case 1:return r.sent(),[2]}}))}))}},enumerable:!1,configurable:!0}),n.prototype.init=function(){var t=this;return this.svg=c.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id",this.mainSvgId),this.g=this.svg.append("g").attr("id","main-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),c.csv(this.dataPath,(function(n){return u(t,void 0,void 0,(function(){var t,e,r,i,o,u,c,s=this;return a(this,(function(a){switch(a.label){case 0:return t=this.extractData(n),e=this.width/h.utils.nations.length,r=this.height/h.utils.brs[this.brRange].length,i=this.buildAxis(),o=i.x,u=i.y,this.colorBar.init(),this.lineChart.init(),this.legend.init(),this.table.init(),this.tooltip.init(),c=this,[4,this.getValue2color()];case 1:return c.value2color=a.sent(),this.g.selectAll().data(t).enter().append("rect").attr("x",(function(t){return o(t.nation)})).attr("y",(function(t){return u(t.br)})).attr("width",e).attr("height",r).style("fill",(function(t){return s.value2color(t.value)})).style("stroke-width",1).style("stroke","black").on("mouseover",this.mouseoverEvent).on("mouseleave",this.mouseleaveEvent).on("mousemove",this.mousemoveEvent).on("click",this.clickEvent),this.cache=n,this.tooltip.toTopLayer(),[2]}}))}))})),this},n.prototype.update=function(t){return u(this,void 0,void 0,(function(){var n,e=this;return a(this,(function(r){switch(r.label){case 0:return n=c.selectAll("g#br-heatmap-x, g#br-heatmap-y"),t?(c.csv(this.dataPath,(function(t){e.updateSquares(t),e.cache=t})),[3,3]):[3,1];case 1:return[4,this.updateSquares(this.cache)];case 2:r.sent(),r.label=3;case 3:return this.buildAxis(),n.remove(),this.selected=[],[4,this.resetSubPlots()];case 4:return r.sent(),this.tooltip.toTopLayer(),[2,this]}}))}))},n.prototype.updateSquares=function(t){return u(this,void 0,void 0,(function(){var n,e,r,i=this;return a(this,(function(o){switch(o.label){case 0:return n=this.extractData(t),e=this,[4,this.getValue2color()];case 1:return e.value2color=o.sent(),(r=this.g.selectAll("rect").data(n)).enter().transition().style("fill",(function(t){return i.value2color(t.value)})),r.exit().transition().style("fill",h.COLORS.BLANK),r.transition().style("fill",(function(t){return i.value2color(t.value)})),[2]}}))}))},n.prototype.buildAxis=function(){var t=c.scaleBand().range([0,this.width]).domain(h.utils.nations);this.g.append("g").attr("id","br-heatmap-x").style("font-size",13).attr("transform","translate(0, "+(this.height+10)+")").call(c.axisBottom(t).tickSize(0)).select("#main-g g path.domain").remove();var n=c.scaleBand().range([this.height,0]).domain(h.utils.brs[this.brRange]);return this.g.append("g").attr("id","br-heatmap-y").style("font-size",15).attr("transform","translate(-5, 0)").call(c.axisLeft(n).tickSize(0)).select("#main-g g path.domain").remove(),{x:t,y:n}},n.prototype.extractData=function(t){var n=this;return t.filter((function(t){return t.date===n.date&&t.cls===n.clazz})).map((function(t){var e=new f.TimeseriesRowGetter(t,n.mode,n.measurement);return{nation:t.nation,br:e.br,lowerBr:e.lowerBr,value:e.value}}))},n.prototype.getValue2color=function(){return u(this,void 0,void 0,(function(){var t,n,e,r,i;return a(this,(function(o){switch(o.label){case 0:switch(this.measurement){case"win_rate":e=0,r=100,t=c.scaleLinear().domain([e,r]).range([0,1]),"Ground_vehicles"===this.clazz?n=c.scaleLinear().domain([0,.05,.4,.5,.6,.95,1]).range([h.CONT_COLORS.WHITE,h.CONT_COLORS.BLACK,h.CONT_COLORS.RED,h.CONT_COLORS.YELLOW,h.CONT_COLORS.GREEN,h.CONT_COLORS.BLACK,h.CONT_COLORS.BLACK]).interpolate(c.interpolateHcl):"Aviation"===this.clazz&&(n=c.scaleLinear().domain([0,.01,.5,.6,.7,.99,1]).range([h.CONT_COLORS.WHITE,h.CONT_COLORS.BLACK,h.CONT_COLORS.RED,h.CONT_COLORS.YELLOW,h.CONT_COLORS.GREEN,h.CONT_COLORS.BLACK,h.CONT_COLORS.BLACK]).interpolate(c.interpolateHcl));break;case"battles_sum":e=Math.pow(10,2.5),r=Math.pow(10,5.5),t=c.scaleLog().domain([e,r]).range([0,1]),n=c.scaleLinear().domain([0,.01,.4,.5,.6,.99,1]).range([h.CONT_COLORS.WHITE,h.CONT_COLORS.BLACK,h.CONT_COLORS.RED,h.CONT_COLORS.YELLOW,h.CONT_COLORS.GREEN,h.CONT_COLORS.BLACK]).interpolate(c.interpolateHcl)}return i=function(e){return n(t(e))},[4,this.colorBar.update(e,r,i)];case 1:return o.sent(),[2,function(e){return 0==e?h.COLORS.BLANK:n(t(e))}]}}))}))},Object.defineProperty(n.prototype,"dataPath",{get:function(){return"https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/"+this.mode.toLowerCase()+"_ranks_"+this.brRange+".csv"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"date",{get:function(){return h.utils.getSelectedValue("date-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"clazz",{get:function(){return h.utils.getSelectedValue("class-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"mode",{get:function(){return h.utils.getSelectedValue("mode-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"measurement",{get:function(){return h.utils.getSelectedValue("measurement-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"brRange",{get:function(){return h.utils.getSelectedValue("br-range-selection")},enumerable:!1,configurable:!0}),o([h.Inject(_.Config.BrHeatmapPage.BrHeatmap.svgHeight)],n.prototype,"svgHeight",void 0),o([h.Inject(_.Config.BrHeatmapPage.BrHeatmap.svgWidth)],n.prototype,"svgWidth",void 0),o([h.Inject(_.Config.BrHeatmapPage.BrHeatmap.margin)],n.prototype,"margin",void 0),o([h.Inject(_.Config.BrHeatmapPage.BrHeatmap.mainSvgId)],n.prototype,"mainSvgId",void 0),o([h.Inject(p.ColorBar)],n.prototype,"colorBar",void 0),o([h.Inject(d.BrLineChart)],n.prototype,"lineChart",void 0),o([h.Inject(g.Legend)],n.prototype,"legend",void 0),o([h.Inject(v.Table)],n.prototype,"table",void 0),o([h.Inject(y.BrHeatmapTooltip)],n.prototype,"tooltip",void 0),o([h.Provider(e)],n)}(l.Plot);n.BrHeatmap=b},6380:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u},u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},a=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.ColorBar=void 0;var c=e(4481),s=e(7830),l=e(7953),f=e(8593),h=e(7719),p=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}var e;return i(n,t),e=n,n.prototype.init=function(){return this.svg=c.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","color-bar-svg"),this.g=this.svg.append("g").attr("id","color-bar-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.update=function(t,n,e){return u(this,void 0,void 0,(function(){var r,i,o,u,s,l,h,p,d,g;return a(this,(function(a){return this.valueMin=t,this.valueMax=n,this.value2color=e,r="battles_sum"===this.brHeatmap.measurement?"log":"linear",i="log"===r?f.utils.logspace(this.valueMin,this.valueMax,100):f.utils.linspace(this.valueMin,this.valueMax,100),o=i.map(this.value2color),this.g.selectAll("*").remove(),u=this.svg.attr("id")+"-gradient",s=this.g.append("defs").append("linearGradient").attr("id",u).attr("x1","0%").attr("y1","100%").attr("x2","0%").attr("y2","0%").attr("spreadMethod","pad"),l=f.utils.linspace(0,100,100).map((function(t){return Math.round(t)+"%"})),c.zip(l,o).forEach((function(t){var n=t[0],e=t[1];s.append("stop").attr("offset",n).attr("stop-color",e).attr("stop-opacity",1)})),h=this.height,p=this.width,this.g.append("rect").attr("x1",0).attr("y1",10).attr("width",p).attr("height",h).style("fill","url(#"+u+")"),d="log"===r?c.scaleLog().domain([this.valueMin,this.valueMax]).range([h,0]):c.scaleLinear().domain([this.valueMin,this.valueMax]).range([h,0]),g=c.axisRight(d),"log"===r&&(g=g.ticks(3)),g=g.tickFormat((function(t){return"log"===r?10+f.utils.formatPower(Math.round(Math.log10(t))):t+"%"})),this.g.append("g").style("font-size","log"===r?12:null).attr("class","legend-axis").attr("transform","translate("+p+", 0)").call(g),[2,this]}))}))},Object.defineProperty(n.prototype,"brHeatmap",{get:function(){return f.Container.get(l.BrHeatmap)},enumerable:!1,configurable:!0}),o([f.Inject(h.Config.BrHeatmapPage.ColorBar.svgHeight)],n.prototype,"svgHeight",void 0),o([f.Inject(h.Config.BrHeatmapPage.ColorBar.svgWidth)],n.prototype,"svgWidth",void 0),o([f.Inject(h.Config.BrHeatmapPage.ColorBar.margin)],n.prototype,"margin",void 0),o([f.Provider(e)],n)}(s.Plot);n.ColorBar=p},9135:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u},u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},a=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.Legend=void 0;var c=e(4481),s=e(7830),l=e(7953),f=e(7719),h=e(8593),p=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}var e;return i(n,t),e=n,n.prototype.init=function(){return this.svg=c.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","legend-svg"),this.g=this.svg.append("g").attr("id","legend-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.update=function(){return u(this,void 0,void 0,(function(){var t,n,e,r;return a(this,(function(i){return t=this.g.selectAll("g").data(this.brHeatmap.selected,(function(t){return t.nation+t.br})),n=this.height,e=this.brHeatmap,r=this.g,t.exit().each((function(t,n){c.selectAll(r.selectAll("g.legend-row").nodes().slice(n+1)).each((function(){var t=c.select(this),n=t.select("rect"),e=t.select("text");n.transition().duration(500).attr("y",+n.attr("y")+30),e.transition().duration(500).attr("y",+e.attr("y")+30)}))})).transition().duration(500).style("opacity",0).remove(),t.enter().append("g").classed("legend-row",!0).each((function(t,r){c.select(this).append("rect").classed("legend-rect",!0).attr("x",5).attr("y",n-30-30*r).attr("width",20).attr("height",20).style("fill",e.colorPool.bindings.filter((function(n){return n.br===t.br&&n.nation===t.nation}))[0].color),c.select(this).append("text").attr("x",35).attr("y",n-15-30*r).text(t.nation+" "+t.br).attr("text-anchor","start").style("font-size",12.5)})),[2,this]}))}))},Object.defineProperty(n.prototype,"brHeatmap",{get:function(){return h.Container.get(l.BrHeatmap)},enumerable:!1,configurable:!0}),n.prototype.reset=function(){return u(this,void 0,void 0,(function(){return a(this,(function(t){return this.g.html(null),[2,this]}))}))},o([h.Inject(f.Config.BrHeatmapPage.Legend.svgHeight)],n.prototype,"svgHeight",void 0),o([h.Inject(f.Config.BrHeatmapPage.Legend.svgWidth)],n.prototype,"svgWidth",void 0),o([h.Inject(f.Config.BrHeatmapPage.Legend.margin)],n.prototype,"margin",void 0),o([h.Provider(e)],n)}(s.Plot);n.Legend=p},787:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u},u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},a=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.StackLineChart=n.BrLineChart=n.LineChart=void 0;var c=e(4481),s=e(6486),l=e(7830),f=e(7953),h=e(9465),p=e(8593),d=e(7719),g=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),o([p.Injectable],n)}(l.Plot);n.LineChart=g;var v=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.dataCache=[],n}var e;return i(n,t),e=n,n.prototype.init=function(){return this.svg=c.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","line-chart-svg"),this.g=this.svg.append("g").attr("id","line-chart-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.searchInCache=function(){return u(this,void 0,void 0,(function(){var t,n,e,r=this;return a(this,(function(i){for(t=0,n=this.dataCache;t<n.length;t++)if(e=n[t],this.brHeatmap.clazz===e.clazz&&this.brHeatmap.brRange===e.brRange&&this.brHeatmap.mode===e.mode&&this.brHeatmap.measurement===e.measurement)return[2,e.data];return[2,new Promise((function(t){c.csv(r.brHeatmap.dataPath,(function(n){r.dataCache.push({brRange:r.brHeatmap.brRange,clazz:r.brHeatmap.clazz,measurement:r.brHeatmap.measurement,mode:r.brHeatmap.mode,data:n}),t(n)}))}))]}))}))},n.prototype.update=function(){return u(this,void 0,void 0,(function(){var t,n,e,r,i,o,u,l,f,h,d,g=this;return a(this,(function(a){switch(a.label){case 0:return t=this.g.selectAll(".x-axis"),n=this.g.selectAll(".y-axis"),[4,this.searchInCache()];case 1:return e=a.sent(),r=this.groupBy(this.extractData(e)),i=c.scaleLinear().domain(c.extent(e,(function(t){return p.utils.parseDate(t.date)}))).range([0,this.width]),this.g.append("g").classed("x-axis",!0).attr("transform","translate(0, "+this.height+")").call(c.axisBottom(i).tickFormat(c.timeFormat("%Y/%m"))),this.g.append("text").classed("x-axis",!0).text("Date").attr("transform","translate("+this.width/2+", "+(this.height+30)+")").style("font-size",12).style("text-anchor","middle"),t.remove(),o=s.flatMap(r,(function(t){return t.values})).map((function(t){return+t.value})),u=Math.min(1.02*s.max(o),100),l=Math.max(.98*s.min(o),0),f=c.scaleLinear().domain([l,u]).range([this.height,0]),this.g.append("g").classed("y-axis",!0).call(c.axisLeft(f)),this.g.append("text").classed("y-axis",!0).text(this.brHeatmap.measurement).attr("transform","translate(-30, "+this.height/2+") rotate(270)").style("font-size",12).style("text-anchor","middle"),n.remove(),h=c.line().x((function(t){return i(t.date)})).y((function(t){return f(t.value)})),(d=this.g.selectAll("#line-chart-path-g").size()>0?this.g.select("#line-chart-path-g").selectAll("path").data(r,(function(t){return t.nation+t.br})):this.g.append("g").attr("id","line-chart-path-g").style("fill","None").selectAll("path").data(r,(function(t){return t.nation+t.br}))).exit().transition().duration(500).style("opacity",0).remove(),d.transition().duration(500).attr("d",(function(t){return h(t.values)})).attr("stroke",(function(t){return g.brHeatmap.colorPool.get(t)})),d.enter().append("path").style("opacity",0).style("stroke-width",3).transition().duration(500).style("opacity",1).attr("d",(function(t){return h(t.values)})).attr("stroke",(function(t){return g.brHeatmap.colorPool.get(t)})),[2,this]}}))}))},Object.defineProperty(n.prototype,"brHeatmap",{get:function(){return p.Container.get(f.BrHeatmap)},enumerable:!1,configurable:!0}),n.prototype.reset=function(){return this.g.html(null),this},n.prototype.extractData=function(t){var n=this;return t.filter((function(t){var e=new h.TimeseriesRowGetter(t,n.brHeatmap.mode,n.brHeatmap.measurement);return n.brHeatmap.selected.some((function(r){return r.nation===t.nation&&r.br===e.br&&n.brHeatmap.clazz===t.cls}))})).map((function(t){var e=new h.TimeseriesRowGetter(t,n.brHeatmap.mode,n.brHeatmap.measurement);return{date:p.utils.parseDate(t.date),nation:t.nation,br:e.br,value:e.value}}))},n.prototype.groupBy=function(t){for(var n=[],e=function(t){if(n.filter((function(n){return n.br===t.br&&n.nation===t.nation})).length>0)for(var e=0,r=n;e<r.length;e++){var i=r[e];if(i.br===t.br&&i.nation===t.nation){i.values.push({date:t.date,value:t.value});break}}else n.push({br:t.br,nation:t.nation,values:[{date:t.date,value:t.value}]})},r=0,i=t;r<i.length;r++)e(i[r]);return n.map((function(t){return t.values=t.values.filter((function(t){return t.value>0})),t}))},o([p.Inject(d.Config.BrHeatmapPage.BrLineChart.svgHeight)],n.prototype,"svgHeight",void 0),o([p.Inject(d.Config.BrHeatmapPage.BrLineChart.svgWidth)],n.prototype,"svgWidth",void 0),o([p.Inject(d.Config.BrHeatmapPage.BrLineChart.margin)],n.prototype,"margin",void 0),o([p.Provider(e)],n)}(g);n.BrLineChart=v;var y=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.init=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n]},n.prototype.update=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return u(this,void 0,void 0,(function(){return a(this,(function(t){return[2,this]}))}))},n}(g);n.StackLineChart=y},7830:function(t,n,e){"use strict";var r=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u};Object.defineProperty(n,"__esModule",{value:!0}),n.Plot=void 0;var i=e(8593),o=function(){function t(){}return Object.defineProperty(t.prototype,"width",{get:function(){return this.svgWidth-this.margin.left-this.margin.right},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.svgHeight-this.margin.top-this.margin.bottom},enumerable:!1,configurable:!0}),r([i.Injectable],t)}();n.Plot=o},4873:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u},u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},a=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.Table=void 0;var c=e(7830),s=e(7953),l=e(4481),f=e(3516),h=e(6486),p=e(8593),d=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}var e;return i(n,t),e=n,n.prototype.init=function(){return this.table=l.select("#content").append("div").attr("id","selected-table-div").append("table").attr("id","selected-table"),this},n.prototype.update=function(){return u(this,void 0,void 0,(function(){var t,n,e=this;return a(this,(function(r){return this.reset(),t=this.brHeatmap.clazz,n=+this.brHeatmap.brRange,l.csv(this.dataPath,(function(r){var i=e.brHeatmap.selected.map((function(i){var o=i.lowerBr,u=i.nation;return r.filter((function(r){var i=new f.JoinedRowGetter(r,e.brHeatmap.mode).br;return i<=o+n&&i>=o&&r.nation===u&&r.cls===t}))})).flat(),o=e.selectColumns(h.uniqBy(i,(function(t){return t.name}))),u=h.keys(o[0]);e.table.append("tr").selectAll().data(u).enter().append("th").html((function(t){return t})),o.forEach((function(t){var n=e.table.append("tr");u.forEach((function(e){n.append("td").html(t[e])}))}))})),[2,this]}))}))},n.prototype.reset=function(){return this.table.html(null),this},n.prototype.selectColumns=function(t){var n=this.brHeatmap.mode;return t.map((function(t){var e=new f.JoinedRowGetter(t,n);return{ts_name:t.name,wk_name:t.wk_name,nation:t.nation,class:t.cls,br:e.br,battles:e.battles,win_rate:e.winRate,air_frags_per_battle:e.airFragsPerBattle,air_frags_per_death:e.airFragsPerDeath,ground_frags_per_battle:e.groundFragsPerBattle,ground_frags_per_death:e.groundFragsPerDeath,is_premium:t.is_premium,rp_rate:e.rpRate,sl_rate:e.slRate}}))},Object.defineProperty(n.prototype,"brHeatmap",{get:function(){return p.Container.get(s.BrHeatmap)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"dataPath",{get:function(){return"https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/joined/"+this.brHeatmap.date+".csv"},enumerable:!1,configurable:!0}),o([p.Provider(e)],n)}(c.Plot);n.Table=d},476:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__decorate||function(t,n,e,r){var i,o=arguments.length,u=o<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,n,e,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(u=(o<3?i(u):o>3?i(n,e,u):i(n,e))||u);return o>3&&u&&Object.defineProperty(n,e,u),u},u=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},a=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.BrHeatmapTooltip=n.Tooltip=void 0;var c=e(4481),s=e(6486),l=e(8593),f=e(7830),h=e(7719),p=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.init=function(){var t=this;return this.parentSvg=c.select("#"+this.parentSvgId),this.g=this.parentSvg.append("g").attr("class","tooltip").style("opacity",0),this.rect=this.g.append("rect").attr("class","tooltip-rect").attr("height",5+15*this.nRow).attr("width",this.rectWidth).attr("fill","white").style("stroke","black").style("opacity",this.opacity).attr("rx","5px").attr("ry","5px"),this.text=this.g.append("text").attr("class","tooltip-text").style("font-size",12).style("opacity",.9),s.range(this.nRow).map((function(n){return t.text.append("tspan").attr("class","tooltip-text-row"+(n+1))})),this},n.prototype.toTopLayer=function(){return this.parentSvg.node().appendChild(this.g.node()),this},n.prototype.updateRect=function(t){var n=t.x<130?t.x+this.rectXBias+150:t.x+this.rectXBias,e=t.y<40?t.y+this.rectYBias+70:t.y+this.rectYBias;return this.rect.attr("x",n).attr("y",e),this},n.prototype.updateText=function(t,n){var e=this;return t.forEach((function(t,r){var i=n.x<130?e.textXBias+n.x+150:e.textXBias+n.x,o=n.y<40?e.textYBias+n.y+15*r+70:e.textYBias+n.y+15*r;e.text.select(".tooltip-text-row"+(r+1)).text(t).attr("x",i+"px").attr("y",o+"px").attr("text-anchor","left")})),this},n.prototype.update=function(t,n){return u(this,void 0,void 0,(function(){return a(this,(function(e){return this.updateRect(n),this.updateText(t,n),[2,this]}))}))},n.prototype.hide=function(){return this.g.style("opacity",0),this},n.prototype.appear=function(){return this.g.style("opacity",1),this},o([l.Injectable],n)}(f.Plot);n.Tooltip=p;var d=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}var e;return i(n,t),e=n,o([l.Inject(h.Config.BrHeatmapPage.Tooltip.parentSvgId)],n.prototype,"parentSvgId",void 0),o([l.Inject(h.Config.BrHeatmapPage.Tooltip.opacity)],n.prototype,"opacity",void 0),o([l.Inject(h.Config.BrHeatmapPage.Tooltip.nRow)],n.prototype,"nRow",void 0),o([l.Inject(h.Config.BrHeatmapPage.Tooltip.rectWidth)],n.prototype,"rectWidth",void 0),o([l.Inject(h.Config.BrHeatmapPage.Tooltip.rectXBias)],n.prototype,"rectXBias",void 0),o([l.Inject(h.Config.BrHeatmapPage.Tooltip.rectYBias)],n.prototype,"rectYBias",void 0),o([l.Inject(h.Config.BrHeatmapPage.Tooltip.textXBias)],n.prototype,"textXBias",void 0),o([l.Inject(h.Config.BrHeatmapPage.Tooltip.textYBias)],n.prototype,"textYBias",void 0),o([l.Provider(e)],n)}(p);n.BrHeatmapTooltip=d},8593:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Container=n.Injectable=n.Inject=n.Provider=n.Singleton=n.MousePosition=n.CONT_COLORS=n.categoricalColors=n.COLORS=n.utils=void 0;var r,i,o,u=e(4481),a=e(4904),c=e(6700);(o=n.utils||(n.utils={})).getSelectedValue=function(t){return document.getElementById(t).value},o.setEvent={byIds:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.map((function(t){return document.getElementById(t)}));return{onchange:function(t){return e.forEach((function(n){return n.onchange=t}))}}},byClass:function(t){var n=Array.from(document.getElementsByClassName(t));return{onchange:function(t){return n.forEach((function(n){return n.onchange=t}))}}}},o.nations=["USA","Germany","USSR","Britain","Japan","France","Italy","China","Sweden"],o.brs={1:["1.0 ~ 2.0","1.3 ~ 2.3","1.7 ~ 2.7","2.0 ~ 3.0","2.3 ~ 3.3","2.7 ~ 3.7","3.0 ~ 4.0","3.3 ~ 4.3","3.7 ~ 4.7","4.0 ~ 5.0","4.3 ~ 5.3","4.7 ~ 5.7","5.0 ~ 6.0","5.3 ~ 6.3","5.7 ~ 6.7","6.0 ~ 7.0","6.3 ~ 7.3","6.7 ~ 7.7","7.0 ~ 8.0","7.3 ~ 8.3","7.7 ~ 8.7","8.0 ~ 9.0","8.3 ~ 9.3","8.7 ~ 9.7","9.0 ~ 10.0","9.3 ~ 10.3","9.7 ~ 10.7","10.0 ~ 11.0","10.3 ~ 11.3","10.7 ~ 11.7","11.0 ~ 12.0"],0:["1.0","1.3","1.7","2.0","2.3","2.7","3.0","3.3","3.7","4.0","4.3","4.7","5.0","5.3","5.7","6.0","6.3","6.7","7.0","7.3","7.7","8.0","8.3","8.7","9.0","9.3","9.7","10.0","10.3","10.7","11.0"]},o.isNotNull=function(t){return null!=t},o.linspace=function(t,n,e){for(var r=[],i=(n-t)/(e-1),o=0;o<e-1;)r.push(t+o*i),o++;return r.push(n),r},o.logspace=function(t,n,e){return t=Math.log10(t),n=Math.log10(n),this.linspace(t,n,e).map((function(t){return Math.pow(10,t)}))},o.formatPower=function(t){return(t<0?"⁻":"")+(t+"").split("").map((function(t){return"⁰¹²³⁴⁵⁶⁷⁸⁹"[+t]})).join("")},o.rgbToHex=function(t){for(var n=t.match(/\d+/g),e="#",r=0;r<3;r++)e+=("0"+Number(n[r]).toString(16)).slice(-2);return e},o.parseDate=u.timeParse("%Y-%m-%d"),o.deepCopy=function(t){var n=this;if(Array.isArray(t)){var e=[];return t.forEach((function(t){e.push(n.deepCopy(t))})),e}if("object"==typeof t){var r={};return Object.entries(t).forEach((function(t){var e=t[0],i=t[1];r[e]=n.deepCopy(i)})),r}return t},function(t){t.GREEN="#C3E88D",t.YELLOW="#FFCB6B",t.RED="#F07178",t.BLUE="#82AAFF",t.PURPLE="#C792EA",t.ORANGE="#F78C6C",t.AZURE="#467CDA",t.SKY="#89DDFF",t.BLACK="#2B2B2B",t.GRAY="#616161",t.WHITE="#EEFFFF",t.BLANK="#FFFFFF"}(r=n.COLORS||(n.COLORS={})),n.categoricalColors=[r.GREEN,r.YELLOW,r.RED,r.BLUE,r.PURPLE,r.ORANGE,r.AZURE,r.SKY,r.GRAY],(i=n.CONT_COLORS||(n.CONT_COLORS={})).RED="#d11141",i.YELLOW="#ffc425",i.GREEN="#00b159",i.BLACK="#2B2B2B",i.WHITE="#EEFFFF";n.MousePosition=function(t,n){this.x=t,this.y=n},n.Singleton=function(t){return a.fluentProvide(t).inSingletonScope().done()},n.Provider=a.provide,n.Inject=c.inject,n.Injectable=c.injectable();var s=function(){function t(){}return t.importProvider=function(){t.container.load(a.buildProviderModule())},t.get=function(n){return t.container.get(n)},t.rebind=function(n){return t.container.rebind(n)},t.bind=function(n){return t.container.bind(n)},t.container=new c.Container,t}();n.Container=s}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,loaded:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=e(3178),n=e(1759),r=e(5079),i=e(3415),o=e(9995),u=e(2846);t.Application.build.withPages(n.BRHeatMapPage,r.TodoPage).withLinks(i.WebRepo,o.DataRepo,u.GithubLink).class.run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,