/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={326:(t,n,e)=>{"use strict";e.r(n),e.d(n,{active:()=>bo,arc:()=>ey,area:()=>cy,areaRadial:()=>_y,ascending:()=>i,axisBottom:()=>it,axisLeft:()=>ot,axisRight:()=>rt,axisTop:()=>et,bisect:()=>f,bisectLeft:()=>c,bisectRight:()=>a,bisector:()=>o,brush:()=>Wo,brushSelection:()=>Fo,brushX:()=>Ho,brushY:()=>Yo,chord:()=>tu,cluster:()=>Sh,color:()=>le,creator:()=>yt,cross:()=>h,csv:()=>ed,csvFormat:()=>Du,csvFormatRows:()=>Iu,csvParse:()=>Bu,csvParseRows:()=>Uu,cubehelix:()=>$e,curveBasis:()=>Ky,curveBasisClosed:()=>Qy,curveBasisOpen:()=>nm,curveBundle:()=>rm,curveCardinal:()=>um,curveCardinalClosed:()=>cm,curveCardinalOpen:()=>lm,curveCatmullRom:()=>pm,curveCatmullRomClosed:()=>vm,curveCatmullRomOpen:()=>_m,curveLinear:()=>iy,curveLinearClosed:()=>mm,curveMonotoneX:()=>km,curveMonotoneY:()=>Cm,curveNatural:()=>Om,curveStep:()=>Lm,curveStepAfter:()=>zm,curveStepBefore:()=>Pm,customEvent:()=>Lt,descending:()=>p,deviation:()=>g,dispatch:()=>ht,drag:()=>Xn,dragDisable:()=>Un,dragEnable:()=>Dn,dsvFormat:()=>zu,easeBack:()=>so,easeBackIn:()=>fo,easeBackInOut:()=>so,easeBackOut:()=>lo,easeBounce:()=>uo,easeBounceIn:()=>oo,easeBounceInOut:()=>ao,easeBounceOut:()=>uo,easeCircle:()=>ro,easeCircleIn:()=>no,easeCircleInOut:()=>ro,easeCircleOut:()=>eo,easeCubic:()=>Hi,easeCubicIn:()=>qi,easeCubicInOut:()=>Hi,easeCubicOut:()=>Fi,easeElastic:()=>vo,easeElasticIn:()=>po,easeElasticInOut:()=>go,easeElasticOut:()=>vo,easeExp:()=>to,easeExpIn:()=>Ji,easeExpInOut:()=>to,easeExpOut:()=>Qi,easeLinear:()=>Bi,easePoly:()=>Xi,easePolyIn:()=>Yi,easePolyInOut:()=>Xi,easePolyOut:()=>Wi,easeQuad:()=>Ii,easeQuadIn:()=>Ui,easeQuadInOut:()=>Ii,easeQuadOut:()=>Di,easeSin:()=>Ki,easeSinIn:()=>Gi,easeSinInOut:()=>Ki,easeSinOut:()=>Zi,entries:()=>Ou,event:()=>kt,extent:()=>_,forceCenter:()=>Xu,forceCollide:()=>oa,forceLink:()=>ca,forceManyBody:()=>da,forceRadial:()=>va,forceSimulation:()=>pa,forceX:()=>ga,forceY:()=>_a,format:()=>ka,formatDefaultLocale:()=>Oa,formatLocale:()=>Na,formatPrefix:()=>Ca,formatSpecifier:()=>Ma,geoAlbers:()=>Xs,geoAlbersUsa:()=>$s,geoArea:()=>Ec,geoAzimuthalEqualArea:()=>Ks,geoAzimuthalEqualAreaRaw:()=>Zs,geoAzimuthalEquidistant:()=>Qs,geoAzimuthalEquidistantRaw:()=>Js,geoBounds:()=>mf,geoCentroid:()=>Of,geoCircle:()=>Ff,geoClipAntimeridian:()=>Qf,geoClipCircle:()=>tl,geoClipExtent:()=>il,geoClipRectangle:()=>rl,geoConicConformal:()=>oh,geoConicConformalRaw:()=>ih,geoConicEqualArea:()=>Ws,geoConicEqualAreaRaw:()=>Ys,geoConicEquidistant:()=>fh,geoConicEquidistantRaw:()=>ch,geoContains:()=>Sl,geoDistance:()=>gl,geoEquirectangular:()=>ah,geoEquirectangularRaw:()=>uh,geoGnomonic:()=>sh,geoGnomonicRaw:()=>lh,geoGraticule:()=>Cl,geoGraticule10:()=>Tl,geoIdentity:()=>ph,geoInterpolate:()=>Nl,geoLength:()=>pl,geoMercator:()=>nh,geoMercatorRaw:()=>th,geoNaturalEarth1:()=>vh,geoNaturalEarth1Raw:()=>dh,geoOrthographic:()=>_h,geoOrthographicRaw:()=>gh,geoPath:()=>Rs,geoProjection:()=>qs,geoProjectionMutator:()=>Fs,geoRotation:()=>Df,geoStereographic:()=>mh,geoStereographicRaw:()=>yh,geoStream:()=>pc,geoTransform:()=>Ls,geoTransverseMercator:()=>xh,geoTransverseMercatorRaw:()=>bh,hcl:()=>je,hierarchy:()=>kh,histogram:()=>O,hsl:()=>ye,html:()=>Zp,interpolate:()=>pr,interpolateArray:()=>ur,interpolateBasis:()=>Ze,interpolateBasisClosed:()=>Ke,interpolateCool:()=>E_,interpolateCubehelix:()=>jr,interpolateCubehelixDefault:()=>A_,interpolateCubehelixLong:()=>Br,interpolateDate:()=>ar,interpolateHcl:()=>Lr,interpolateHclLong:()=>Pr,interpolateHsl:()=>Tr,interpolateHslLong:()=>Nr,interpolateInferno:()=>R_,interpolateLab:()=>Or,interpolateMagma:()=>O_,interpolateNumber:()=>cr,interpolateObject:()=>fr,interpolatePlasma:()=>L_,interpolateRainbow:()=>C_,interpolateRgb:()=>er,interpolateRgbBasis:()=>ir,interpolateRgbBasisClosed:()=>or,interpolateRound:()=>dr,interpolateString:()=>hr,interpolateTransformCss:()=>Mr,interpolateTransformSvg:()=>Ar,interpolateViridis:()=>N_,interpolateWarm:()=>S_,interpolateZoom:()=>kr,interrupt:()=>si,interval:()=>ii,isoFormat:()=>s_,isoParse:()=>h_,json:()=>Kp,keys:()=>Tu,lab:()=>Te,line:()=>ay,lineRadial:()=>gy,linkHorizontal:()=>Ey,linkRadial:()=>Cy,linkVertical:()=>ky,local:()=>bt,map:()=>mu,matcher:()=>St,max:()=>z,mean:()=>j,median:()=>B,merge:()=>U,min:()=>D,mouse:()=>jt,namespace:()=>vt,namespaces:()=>dt,nest:()=>bu,now:()=>Gr,pack:()=>Jh,packEnclose:()=>Lh,packSiblings:()=>Xh,pairs:()=>l,partition:()=>ip,path:()=>fu,permute:()=>I,pie:()=>sy,pointRadial:()=>yy,polygonArea:()=>Sp,polygonCentroid:()=>Ep,polygonContains:()=>Op,polygonHull:()=>Np,polygonLength:()=>Rp,precisionFixed:()=>Ra,precisionPrefix:()=>La,precisionRound:()=>Pa,quadtree:()=>Qu,quantile:()=>R,quantize:()=>Ur,queue:()=>Ip,radialArea:()=>_y,radialLine:()=>gy,randomBates:()=>Xp,randomExponential:()=>$p,randomIrwinHall:()=>Wp,randomLogNormal:()=>Yp,randomNormal:()=>Hp,randomUniform:()=>Fp,range:()=>M,request:()=>Vp,rgb:()=>de,ribbon:()=>vu,scaleBand:()=>fd,scaleIdentity:()=>wd,scaleImplicit:()=>ad,scaleLinear:()=>xd,scaleLog:()=>Nd,scaleOrdinal:()=>cd,scalePoint:()=>sd,scalePow:()=>Rd,scaleQuantile:()=>Pd,scaleQuantize:()=>zd,scaleSequential:()=>P_,scaleSqrt:()=>Ld,scaleThreshold:()=>jd,scaleTime:()=>__,scaleUtc:()=>y_,scan:()=>q,schemeCategory10:()=>b_,schemeCategory20:()=>M_,schemeCategory20b:()=>x_,schemeCategory20c:()=>w_,select:()=>Rn,selectAll:()=>Ln,selection:()=>On,selector:()=>Ut,selectorAll:()=>It,set:()=>Cu,shuffle:()=>F,stack:()=>Dm,stackOffsetDiverging:()=>qm,stackOffsetExpand:()=>Im,stackOffsetNone:()=>jm,stackOffsetSilhouette:()=>Fm,stackOffsetWiggle:()=>Hm,stackOrderAscending:()=>Ym,stackOrderDescending:()=>Xm,stackOrderInsideOut:()=>$m,stackOrderNone:()=>Bm,stackOrderReverse:()=>Vm,stratify:()=>fp,style:()=>en,sum:()=>H,symbol:()=>$y,symbolCircle:()=>Ty,symbolCross:()=>Ny,symbolDiamond:()=>Ly,symbolSquare:()=>Uy,symbolStar:()=>By,symbolTriangle:()=>Iy,symbolWye:()=>Wy,symbols:()=>Xy,text:()=>Jp,thresholdFreedmanDiaconis:()=>L,thresholdScott:()=>P,thresholdSturges:()=>N,tickIncrement:()=>C,tickStep:()=>T,ticks:()=>k,timeDay:()=>iv,timeDays:()=>ov,timeFormat:()=>cg,timeFormatDefaultLocale:()=>f_,timeFormatLocale:()=>ug,timeFriday:()=>hv,timeFridays:()=>mv,timeHour:()=>nv,timeHours:()=>ev,timeInterval:()=>Dd,timeMillisecond:()=>qd,timeMilliseconds:()=>Fd,timeMinute:()=>Jd,timeMinutes:()=>Qd,timeMonday:()=>cv,timeMondays:()=>vv,timeMonth:()=>wv,timeMonths:()=>Mv,timeParse:()=>fg,timeSaturday:()=>pv,timeSaturdays:()=>bv,timeSecond:()=>Gd,timeSeconds:()=>Zd,timeSunday:()=>av,timeSundays:()=>dv,timeThursday:()=>sv,timeThursdays:()=>yv,timeTuesday:()=>fv,timeTuesdays:()=>gv,timeWednesday:()=>lv,timeWednesdays:()=>_v,timeWeek:()=>av,timeWeeks:()=>dv,timeYear:()=>Sv,timeYears:()=>Ev,timeout:()=>ri,timer:()=>Jr,timerFlush:()=>Qr,touch:()=>Pn,touches:()=>zn,transition:()=>Pi,transpose:()=>Y,tree:()=>gp,treemap:()=>xp,treemapBinary:()=>wp,treemapDice:()=>rp,treemapResquarify:()=>Ap,treemapSlice:()=>_p,treemapSliceDice:()=>Mp,treemapSquarify:()=>bp,tsv:()=>rd,tsvFormat:()=>Yu,tsvFormatRows:()=>Wu,tsvParse:()=>Fu,tsvParseRows:()=>Hu,utcDay:()=>Pv,utcDays:()=>zv,utcFormat:()=>lg,utcFriday:()=>Fv,utcFridays:()=>Gv,utcHour:()=>Ov,utcHours:()=>Rv,utcMillisecond:()=>qd,utcMilliseconds:()=>Fd,utcMinute:()=>Cv,utcMinutes:()=>Tv,utcMonday:()=>Uv,utcMondays:()=>Wv,utcMonth:()=>Jv,utcMonths:()=>Qv,utcParse:()=>sg,utcSaturday:()=>Hv,utcSaturdays:()=>Zv,utcSecond:()=>Gd,utcSeconds:()=>Zd,utcSunday:()=>Bv,utcSundays:()=>Yv,utcThursday:()=>qv,utcThursdays:()=>Vv,utcTuesday:()=>Dv,utcTuesdays:()=>Xv,utcWednesday:()=>Iv,utcWednesdays:()=>$v,utcWeek:()=>Bv,utcWeeks:()=>Yv,utcYear:()=>ng,utcYears:()=>eg,values:()=>Nu,variance:()=>v,version:()=>r,voronoi:()=>Pb,window:()=>Jt,xml:()=>Qp,zip:()=>X,zoom:()=>$b,zoomIdentity:()=>Ub,zoomTransform:()=>Db});var r="4.11.0";function i(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function o(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}var u=o(i),a=u.right,c=u.left;const f=a;function l(t,n){null==n&&(n=s);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o}function s(t,n){return[t,n]}function h(t,n,e){var r,i,o,u,a=t.length,c=n.length,f=new Array(a*c);for(null==e&&(e=s),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)f[o]=e(u,n[i]);return f}function p(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function d(t){return null===t?NaN:+t}function v(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)}function g(t,n){var e=v(t,n);return e?Math.sqrt(e):e}function _(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}var y=Array.prototype,m=y.slice,b=y.map;function x(t){return function(){return t}}function w(t){return t}function M(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}var A=Math.sqrt(50),S=Math.sqrt(10),E=Math.sqrt(2);function k(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=C(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o}function C(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=A?10:o>=S?5:o>=E?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=A?10:o>=S?5:o>=E?2:1)}function T(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=A?i*=10:o>=S?i*=5:o>=E&&(i*=2),n<t?-i:i}function N(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function O(){var t=w,n=_,e=N;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var c=n(a),l=c[0],s=c[1],h=e(a,l,s);Array.isArray(h)||(h=T(l,s,h),h=M(Math.ceil(l/h)*h,Math.floor(s/h)*h,h));for(var p=h.length;h[0]<=l;)h.shift(),--p;for(;h[p-1]>s;)h.pop(),--p;var d,v=new Array(p+1);for(i=0;i<=p;++i)(d=v[i]=[]).x0=i>0?h[i-1]:l,d.x1=i<p?h[i]:s;for(i=0;i<u;++i)l<=(o=a[i])&&o<=s&&v[f(h,o,0,p)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(m.call(t)):x(t),r):e},r}function R(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}}function L(t,n,e){return t=b.call(t,d).sort(i),Math.ceil((e-n)/(2*(R(t,.75)-R(t,.25))*Math.pow(t.length,-1/3)))}function P(t,n,e){return Math.ceil((e-n)/(3.5*g(t)*Math.pow(t.length,-1/3)))}function z(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r}function j(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i}function B(t,n){var e,r=t.length,o=-1,u=[];if(null==n)for(;++o<r;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return R(u.sort(i),.5)}function U(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e}function D(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r}function I(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function q(t,n){if(e=t.length){var e,r,o=0,u=0,a=t[u];for(null==n&&(n=i);++o<e;)(n(r=t[o],a)<0||0!==n(a,a))&&(a=r,u=o);return 0===n(a,a)?u:void 0}}function F(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t}function H(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o}function Y(t){if(!(i=t.length))return[];for(var n=-1,e=D(t,W),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r}function W(t){return t.length}function X(){return Y(arguments)}var $=Array.prototype.slice;function V(t){return t}var G=1e-6;function Z(t){return"translate("+(t+.5)+",0)"}function K(t){return"translate(0,"+(t+.5)+")"}function J(t){return function(n){return+t(n)}}function Q(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function tt(){return!this.__axis}function nt(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",l=1===t||3===t?Z:K;function s(s){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):V:i,d=Math.max(o,0)+a,v=n.range(),g=+v[0]+.5,_=+v[v.length-1]+.5,y=(n.bandwidth?Q:J)(n.copy()),m=s.selection?s.selection():s,b=m.selectAll(".domain").data([null]),x=m.selectAll(".tick").data(h,n).order(),w=x.exit(),M=x.enter().append("g").attr("class","tick"),A=x.select("line"),S=x.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),A=A.merge(M.append("line").attr("stroke","#000").attr(f+"2",c*o)),S=S.merge(M.append("text").attr("fill","#000").attr(f,c*d).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),s!==m&&(b=b.transition(s),x=x.transition(s),A=A.transition(s),S=S.transition(s),w=w.transition(s).attr("opacity",G).attr("transform",(function(t){return isFinite(t=y(t))?l(t):this.getAttribute("transform")})),M.attr("opacity",G).attr("transform",(function(t){var n=this.parentNode.__axis;return l(n&&isFinite(n=n(t))?n:y(t))}))),w.remove(),b.attr("d",4===t||2==t?"M"+c*u+","+g+"H0.5V"+_+"H"+c*u:"M"+g+","+c*u+"V0.5H"+_+"V"+c*u),x.attr("opacity",1).attr("transform",(function(t){return l(y(t))})),A.attr(f+"2",c*o),S.attr(f,c*d).text(p),m.filter(tt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),m.each((function(){this.__axis=y}))}return s.scale=function(t){return arguments.length?(n=t,s):n},s.ticks=function(){return e=$.call(arguments),s},s.tickArguments=function(t){return arguments.length?(e=null==t?[]:$.call(t),s):e.slice()},s.tickValues=function(t){return arguments.length?(r=null==t?null:$.call(t),s):r&&r.slice()},s.tickFormat=function(t){return arguments.length?(i=t,s):i},s.tickSize=function(t){return arguments.length?(o=u=+t,s):o},s.tickSizeInner=function(t){return arguments.length?(o=+t,s):o},s.tickSizeOuter=function(t){return arguments.length?(u=+t,s):u},s.tickPadding=function(t){return arguments.length?(a=+t,s):a},s}function et(t){return nt(1,t)}function rt(t){return nt(2,t)}function it(t){return nt(3,t)}function ot(t){return nt(4,t)}var ut={value:function(){}};function at(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function ft(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function lt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function st(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ut,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}ct.prototype=at.prototype={constructor:ct,on:function(t,n){var e,r=this._,i=ft(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=st(r[e],t.name,n);else if(null==n)for(e in r)r[e]=st(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=lt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new ct(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const ht=at;var pt="http://www.w3.org/1999/xhtml";const dt={svg:"http://www.w3.org/2000/svg",xhtml:pt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function vt(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),dt.hasOwnProperty(n)?{space:dt[n],local:t}:t}function gt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===pt&&n.documentElement.namespaceURI===pt?n.createElement(t):n.createElementNS(e,t)}}function _t(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function yt(t){var n=vt(t);return(n.local?_t:gt)(n)}var mt=0;function bt(){return new xt}function xt(){this._="@"+(++mt).toString(36)}xt.prototype=bt.prototype={constructor:xt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var wt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Mt=document.documentElement;if(!Mt.matches){var At=Mt.webkitMatchesSelector||Mt.msMatchesSelector||Mt.mozMatchesSelector||Mt.oMatchesSelector;wt=function(t){return function(){return At.call(this,t)}}}}const St=wt;var Et={},kt=null;function Ct(t,n,e){return t=Tt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Tt(t,n,e){return function(r){var i=kt;kt=r;try{t.call(this,this.__data__,n,e)}finally{kt=i}}}function Nt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Ot(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Rt(t,n,e){var r=Et.hasOwnProperty(t.type)?Ct:Tt;return function(i,o,u){var a,c=this.__on,f=r(n,o,u);if(c)for(var l=0,s=c.length;l<s;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=f,a.capture=e),void(a.value=n);this.addEventListener(t.type,f,e),a={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(a):this.__on=[a]}}function Lt(t,n,e,r){var i=kt;t.sourceEvent=kt,kt=t;try{return n.apply(e,r)}finally{kt=i}}function Pt(){for(var t,n=kt;t=n.sourceEvent;)n=t;return n}function zt(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}function jt(t){var n=Pt();return n.changedTouches&&(n=n.changedTouches[0]),zt(t,n)}function Bt(){}function Ut(t){return null==t?Bt:function(){return this.querySelector(t)}}function Dt(){return[]}function It(t){return null==t?Dt:function(){return this.querySelectorAll(t)}}function qt(t){return new Array(t.length)}function Ft(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function Ht(t,n,e,r,i,o){for(var u,a=0,c=n.length,f=o.length;a<f;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new Ft(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function Yt(t,n,e,r,i,o,u){var a,c,f,l={},s=n.length,h=o.length,p=new Array(s);for(a=0;a<s;++a)(c=n[a])&&(p[a]=f="$"+u.call(c,c.__data__,a,n),f in l?i[a]=c:l[f]=c);for(a=0;a<h;++a)(c=l[f="$"+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],l[f]=null):e[a]=new Ft(t,o[a]);for(a=0;a<s;++a)(c=n[a])&&l[p[a]]===c&&(i[a]=c)}function Wt(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Xt(t){return function(){this.removeAttribute(t)}}function $t(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Vt(t,n){return function(){this.setAttribute(t,n)}}function Gt(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Zt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Kt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Jt(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Qt(t){return function(){this.style.removeProperty(t)}}function tn(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nn(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function en(t,n){return t.style.getPropertyValue(n)||Jt(t).getComputedStyle(t,null).getPropertyValue(n)}function rn(t){return function(){delete this[t]}}function on(t,n){return function(){this[t]=n}}function un(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function an(t){return t.trim().split(/^|\s+/)}function cn(t){return t.classList||new fn(t)}function fn(t){this._node=t,this._names=an(t.getAttribute("class")||"")}function ln(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function sn(t,n){for(var e=cn(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function hn(t){return function(){ln(this,t)}}function pn(t){return function(){sn(this,t)}}function dn(t,n){return function(){(n.apply(this,arguments)?ln:sn)(this,t)}}function vn(){this.textContent=""}function gn(t){return function(){this.textContent=t}}function _n(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function yn(){this.innerHTML=""}function mn(t){return function(){this.innerHTML=t}}function bn(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function xn(){this.nextSibling&&this.parentNode.appendChild(this)}function wn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Mn(){return null}function An(){var t=this.parentNode;t&&t.removeChild(this)}function Sn(t,n,e){var r=Jt(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function En(t,n){return function(){return Sn(this,t,n)}}function kn(t,n){return function(){return Sn(this,t,n.apply(this,arguments))}}"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Et={mouseenter:"mouseover",mouseleave:"mouseout"})),Ft.prototype={constructor:Ft,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},fn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Cn=[null];function Tn(t,n){this._groups=t,this._parents=n}function Nn(){return new Tn([[document.documentElement]],Cn)}Tn.prototype=Nn.prototype={constructor:Tn,select:function(t){"function"!=typeof t&&(t=Ut(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,f=r[i]=new Array(c),l=0;l<c;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),f[l]=u);return new Tn(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=It(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=0;f<c;++f)(u=a[f])&&(r.push(t.call(u,u.__data__,f,a)),i.push(u));return new Tn(r,i)},filter:function(t){"function"!=typeof t&&(t=St(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new Tn(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each((function(t){d[++l]=t})),d;var e,r=n?Yt:Ht,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),f=new Array(u),l=0;l<u;++l){var s=i[l],h=o[l],p=h.length,d=t.call(s,s&&s.__data__,l,i),v=d.length,g=c[l]=new Array(v),_=a[l]=new Array(v);r(s,h,g,_,f[l]=new Array(p),d,n);for(var y,m,b=0,x=0;b<v;++b)if(y=g[b]){for(b>=x&&(x=b+1);!(m=_[x])&&++x<v;);y._next=m||null}}return(a=new Tn(a,i))._enter=c,a._exit=f,a},enter:function(){return new Tn(this._enter||this._groups.map(qt),this._parents)},exit:function(){return new Tn(this._exit||this._groups.map(qt),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],l=e[a],s=f.length,h=u[a]=new Array(s),p=0;p<s;++p)(c=f[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Tn(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Wt);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,f=i[o]=new Array(c),l=0;l<c;++l)(u=a[l])&&(f[l]=u);f.sort(n)}return new Tn(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=vt(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?$t:Xt:"function"==typeof n?e.local?Kt:Zt:e.local?Gt:Vt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Qt:"function"==typeof n?nn:tn)(t,n,null==e?"":e)):en(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rn:"function"==typeof n?un:on)(t,n)):this.node()[t]},classed:function(t,n){var e=an(t+"");if(arguments.length<2){for(var r=cn(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?dn:n?hn:pn)(e,n))},text:function(t){return arguments.length?this.each(null==t?vn:("function"==typeof t?_n:gn)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?yn:("function"==typeof t?bn:mn)(t)):this.node().innerHTML},raise:function(){return this.each(xn)},lower:function(){return this.each(wn)},append:function(t){var n="function"==typeof t?t:yt(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:yt(t),r=null==n?Mn:"function"==typeof n?n:Ut(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(An)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Nt(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?Rt:Ot,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,f=0,l=a.length;f<l;++f)for(r=0,c=a[f];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?kn:En)(t,n))}};const On=Nn;function Rn(t){return"string"==typeof t?new Tn([[document.querySelector(t)]],[document.documentElement]):new Tn([[t]],Cn)}function Ln(t){return"string"==typeof t?new Tn([document.querySelectorAll(t)],[document.documentElement]):new Tn([null==t?[]:t],Cn)}function Pn(t,n,e){arguments.length<3&&(e=n,n=Pt().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return zt(t,r);return null}function zn(t,n){null==n&&(n=Pt().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=zt(t,n[e]);return i}function jn(){kt.stopImmediatePropagation()}function Bn(){kt.preventDefault(),kt.stopImmediatePropagation()}function Un(t){var n=t.document.documentElement,e=Rn(t).on("dragstart.drag",Bn,!0);"onselectstart"in n?e.on("selectstart.drag",Bn,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function Dn(t,n){var e=t.document.documentElement,r=Rn(t).on("dragstart.drag",null);n&&(r.on("click.drag",Bn,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function In(t){return function(){return t}}function qn(t,n,e,r,i,o,u,a,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=f}function Fn(){return!kt.button}function Hn(){return this.parentNode}function Yn(t){return null==t?{x:kt.x,y:kt.y}:t}function Wn(){return"ontouchstart"in this}function Xn(){var t,n,e,r,i=Fn,o=Hn,u=Yn,a=Wn,c={},f=ht("start","drag","end"),l=0,s=0;function h(t){t.on("mousedown.drag",p).filter(a).on("touchstart.drag",g).on("touchmove.drag",_).on("touchend.drag touchcancel.drag",y).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(){if(!r&&i.apply(this,arguments)){var u=m("mouse",o.apply(this,arguments),jt,this,arguments);u&&(Rn(kt.view).on("mousemove.drag",d,!0).on("mouseup.drag",v,!0),Un(kt.view),jn(),e=!1,t=kt.clientX,n=kt.clientY,u("start"))}}function d(){if(Bn(),!e){var r=kt.clientX-t,i=kt.clientY-n;e=r*r+i*i>s}c.mouse("drag")}function v(){Rn(kt.view).on("mousemove.drag mouseup.drag",null),Dn(kt.view,e),Bn(),c.mouse("end")}function g(){if(i.apply(this,arguments)){var t,n,e=kt.changedTouches,r=o.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=m(e[t].identifier,r,Pn,this,arguments))&&(jn(),n("start"))}}function _(){var t,n,e=kt.changedTouches,r=e.length;for(t=0;t<r;++t)(n=c[e[t].identifier])&&(Bn(),n("drag"))}function y(){var t,n,e=kt.changedTouches,i=e.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<i;++t)(n=c[e[t].identifier])&&(jn(),n("end"))}function m(t,n,e,r,i){var o,a,s,p=e(n,t),d=f.copy();if(Lt(new qn(h,"beforestart",o,t,l,p[0],p[1],0,0,d),(function(){return null!=(kt.subject=o=u.apply(r,i))&&(a=o.x-p[0]||0,s=o.y-p[1]||0,!0)})))return function u(f){var v,g=p;switch(f){case"start":c[t]=u,v=l++;break;case"end":delete c[t],--l;case"drag":p=e(n,t),v=l}Lt(new qn(h,f,o,t,v,p[0]+a,p[1]+s,p[0]-g[0],p[1]-g[1],d),d.apply,d,[f,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:In(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:In(t),h):o},h.subject=function(t){return arguments.length?(u="function"==typeof t?t:In(t),h):u},h.touchable=function(t){return arguments.length?(a="function"==typeof t?t:In(!!t),h):a},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(s=(t=+t)*t,h):Math.sqrt(s)},h}function $n(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Vn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Gn(){}qn.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Zn=.7,Kn=1/Zn,Jn="\\s*([+-]?\\d+)\\s*",Qn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ne=/^#([0-9a-f]{3})$/,ee=/^#([0-9a-f]{6})$/,re=new RegExp("^rgb\\("+[Jn,Jn,Jn]+"\\)$"),ie=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),oe=new RegExp("^rgba\\("+[Jn,Jn,Jn,Qn]+"\\)$"),ue=new RegExp("^rgba\\("+[te,te,te,Qn]+"\\)$"),ae=new RegExp("^hsl\\("+[Qn,te,te]+"\\)$"),ce=new RegExp("^hsla\\("+[Qn,te,te,Qn]+"\\)$"),fe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function le(t){var n;return t=(t+"").trim().toLowerCase(),(n=ne.exec(t))?new ve((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=ee.exec(t))?se(parseInt(n[1],16)):(n=re.exec(t))?new ve(n[1],n[2],n[3],1):(n=ie.exec(t))?new ve(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=oe.exec(t))?he(n[1],n[2],n[3],n[4]):(n=ue.exec(t))?he(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ae.exec(t))?ge(n[1],n[2]/100,n[3]/100,1):(n=ce.exec(t))?ge(n[1],n[2]/100,n[3]/100,n[4]):fe.hasOwnProperty(t)?se(fe[t]):"transparent"===t?new ve(NaN,NaN,NaN,0):null}function se(t){return new ve(t>>16&255,t>>8&255,255&t,1)}function he(t,n,e,r){return r<=0&&(t=n=e=NaN),new ve(t,n,e,r)}function pe(t){return t instanceof Gn||(t=le(t)),t?new ve((t=t.rgb()).r,t.g,t.b,t.opacity):new ve}function de(t,n,e,r){return 1===arguments.length?pe(t):new ve(t,n,e,null==r?1:r)}function ve(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function ge(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new me(t,n,e,r)}function _e(t){if(t instanceof me)return new me(t.h,t.s,t.l,t.opacity);if(t instanceof Gn||(t=le(t)),!t)return new me;if(t instanceof me)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new me(u,a,c,t.opacity)}function ye(t,n,e,r){return 1===arguments.length?_e(t):new me(t,n,e,null==r?1:r)}function me(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function be(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}$n(Gn,le,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),$n(ve,de,Vn(Gn,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?Zn:Math.pow(Zn,t),new ve(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),$n(me,ye,Vn(Gn,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new me(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Zn:Math.pow(Zn,t),new me(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new ve(be(t>=240?t-240:t+120,i,r),be(t,i,r),be(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var xe=Math.PI/180,we=180/Math.PI,Me=.95047,Ae=1.08883,Se=4/29,Ee=6/29,ke=3*Ee*Ee;function Ce(t){if(t instanceof Ne)return new Ne(t.l,t.a,t.b,t.opacity);if(t instanceof Be){var n=t.h*xe;return new Ne(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof ve||(t=pe(t));var e=Pe(t.r),r=Pe(t.g),i=Pe(t.b),o=Oe((.4124564*e+.3575761*r+.1804375*i)/Me),u=Oe((.2126729*e+.7151522*r+.072175*i)/1);return new Ne(116*u-16,500*(o-u),200*(u-Oe((.0193339*e+.119192*r+.9503041*i)/Ae)),t.opacity)}function Te(t,n,e,r){return 1===arguments.length?Ce(t):new Ne(t,n,e,null==r?1:r)}function Ne(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Oe(t){return t>.008856451679035631?Math.pow(t,1/3):t/ke+Se}function Re(t){return t>Ee?t*t*t:ke*(t-Se)}function Le(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Pe(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ze(t){if(t instanceof Be)return new Be(t.h,t.c,t.l,t.opacity);t instanceof Ne||(t=Ce(t));var n=Math.atan2(t.b,t.a)*we;return new Be(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function je(t,n,e,r){return 1===arguments.length?ze(t):new Be(t,n,e,null==r?1:r)}function Be(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}$n(Ne,Te,Vn(Gn,{brighter:function(t){return new Ne(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ne(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=1*Re(t),new ve(Le(3.2404542*(n=Me*Re(n))-1.5371385*t-.4985314*(e=Ae*Re(e))),Le(-.969266*n+1.8760108*t+.041556*e),Le(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),$n(Be,je,Vn(Gn,{brighter:function(t){return new Be(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Be(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ce(this).rgb()}}));var Ue=-.14861,De=1.78277,Ie=-.29227,qe=-.90649,Fe=1.97294,He=Fe*qe,Ye=Fe*De,We=De*Ie-qe*Ue;function Xe(t){if(t instanceof Ve)return new Ve(t.h,t.s,t.l,t.opacity);t instanceof ve||(t=pe(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(We*r+He*n-Ye*e)/(We+He-Ye),o=r-i,u=(Fe*(e-i)-Ie*o)/qe,a=Math.sqrt(u*u+o*o)/(Fe*i*(1-i)),c=a?Math.atan2(u,o)*we-120:NaN;return new Ve(c<0?c+360:c,a,i,t.opacity)}function $e(t,n,e,r){return 1===arguments.length?Xe(t):new Ve(t,n,e,null==r?1:r)}function Ve(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Ge(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}function Ze(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return Ge((e-r/n)*n,u,i,o,a)}}function Ke(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return Ge((e-r/n)*n,i,o,u,a)}}function Je(t){return function(){return t}}function Qe(t,n){return function(e){return t+e*n}}function tr(t,n){var e=n-t;return e?Qe(t,e>180||e<-180?e-360*Math.round(e/360):e):Je(isNaN(t)?n:t)}function nr(t,n){var e=n-t;return e?Qe(t,e):Je(isNaN(t)?n:t)}$n(Ve,$e,Vn(Gn,{brighter:function(t){return t=null==t?Kn:Math.pow(Kn,t),new Ve(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?Zn:Math.pow(Zn,t),new Ve(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*xe,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new ve(255*(n+e*(Ue*r+De*i)),255*(n+e*(Ie*r+qe*i)),255*(n+e*(Fe*r)),this.opacity)}}));const er=function t(n){var e=function(t){return 1==(t=+t)?nr:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Je(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=de(t)).r,(n=de(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=nr(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function rr(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=de(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}var ir=rr(Ze),or=rr(Ke);function ur(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),u=new Array(r);for(e=0;e<i;++e)o[e]=pr(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}function ar(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}function cr(t,n){return n-=t=+t,function(e){return t+n*e}}function fr(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=pr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var lr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,sr=new RegExp(lr.source,"g");function hr(t,n){var e,r,i,o=lr.lastIndex=sr.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=lr.exec(t))&&(r=sr.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:cr(e,r)})),o=sr.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})}function pr(t,n){var e,r=typeof n;return null==n||"boolean"===r?Je(n):("number"===r?cr:"string"===r?(e=le(n))?(n=e,er):hr:n instanceof le?er:n instanceof Date?ar:Array.isArray(n)?ur:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?fr:cr)(t,n)}function dr(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}}var vr,gr,_r,yr,mr=180/Math.PI,br={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function xr(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*mr,skewX:Math.atan(c)*mr,scaleX:u,scaleY:a}}function wr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:cr(t,i)},{i:c-2,x:cr(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:cr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:cr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:cr(t,e)},{i:a-2,x:cr(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var Mr=wr((function(t){return"none"===t?br:(vr||(vr=document.createElement("DIV"),gr=document.documentElement,_r=document.defaultView),vr.style.transform=t,t=_r.getComputedStyle(gr.appendChild(vr),null).getPropertyValue("transform"),gr.removeChild(vr),xr(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Ar=wr((function(t){return null==t?br:(yr||(yr=document.createElementNS("http://www.w3.org/2000/svg","g")),yr.setAttribute("transform",t),(t=yr.transform.baseVal.consolidate())?xr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):br)}),", ",")",")"),Sr=Math.SQRT2;function Er(t){return((t=Math.exp(t))+1/t)/2}function kr(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],f=n[2],l=a-i,s=c-o,h=l*l+s*s;if(h<1e-12)r=Math.log(f/u)/Sr,e=function(t){return[i+t*l,o+t*s,u*Math.exp(Sr*t*r)]};else{var p=Math.sqrt(h),d=(f*f-u*u+4*h)/(2*u*2*p),v=(f*f-u*u-4*h)/(2*f*2*p),g=Math.log(Math.sqrt(d*d+1)-d),_=Math.log(Math.sqrt(v*v+1)-v);r=(_-g)/Sr,e=function(t){var n,e=t*r,a=Er(g),c=u/(2*p)*(a*(n=Sr*e+g,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+c*l,o+c*s,u*a/Er(Sr*e+g)]}}return e.duration=1e3*r,e}function Cr(t){return function(n,e){var r=t((n=ye(n)).h,(e=ye(e)).h),i=nr(n.s,e.s),o=nr(n.l,e.l),u=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Tr=Cr(tr);var Nr=Cr(nr);function Or(t,n){var e=nr((t=Te(t)).l,(n=Te(n)).l),r=nr(t.a,n.a),i=nr(t.b,n.b),o=nr(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function Rr(t){return function(n,e){var r=t((n=je(n)).h,(e=je(e)).h),i=nr(n.c,e.c),o=nr(n.l,e.l),u=nr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}const Lr=Rr(tr);var Pr=Rr(nr);function zr(t){return function n(e){function r(n,r){var i=t((n=$e(n)).h,(r=$e(r)).h),o=nr(n.s,r.s),u=nr(n.l,r.l),a=nr(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}const jr=zr(tr);var Br=zr(nr);function Ur(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}var Dr,Ir,qr=0,Fr=0,Hr=0,Yr=0,Wr=0,Xr=0,$r="object"==typeof performance&&performance.now?performance:Date,Vr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Gr(){return Wr||(Vr(Zr),Wr=$r.now()+Xr)}function Zr(){Wr=0}function Kr(){this._call=this._time=this._next=null}function Jr(t,n,e){var r=new Kr;return r.restart(t,n,e),r}function Qr(){Gr(),++qr;for(var t,n=Dr;n;)(t=Wr-n._time)>=0&&n._call.call(null,t),n=n._next;--qr}function ti(){Wr=(Yr=$r.now())+Xr,qr=Fr=0;try{Qr()}finally{qr=0,function(){for(var t,n,e=Dr,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Dr=n);Ir=t,ei(r)}(),Wr=0}}function ni(){var t=$r.now(),n=t-Yr;n>1e3&&(Xr-=n,Yr=t)}function ei(t){qr||(Fr&&(Fr=clearTimeout(Fr)),t-Wr>24?(t<1/0&&(Fr=setTimeout(ti,t-$r.now()-Xr)),Hr&&(Hr=clearInterval(Hr))):(Hr||(Yr=$r.now(),Hr=setInterval(ni,1e3)),qr=1,Vr(ti)))}function ri(t,n,e){var r=new Kr;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}function ii(t,n,e){var r=new Kr,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?Gr():+e,r.restart((function o(u){u+=i,r.restart(o,i+=n,e),t(u)}),n,e),r)}Kr.prototype=Jr.prototype={constructor:Kr,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Gr():+e)+(null==n?0:+n),this._next||Ir===this||(Ir?Ir._next=this:Dr=this,Ir=this),this._call=t,this._time=e,ei()},stop:function(){this._call&&(this._call=null,this._time=1/0,ei())}};var oi=ht("start","end","interrupt"),ui=[];function ai(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,l,s,h;if(1!==e.state)return a();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return ri(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=6,h.timer.stop(),delete i[f])}if(ri((function(){3===e.state&&(e.state=4,e.timer.restart(u,e.delay,e.time),u(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(s=e.tween.length),f=0,l=-1;f<s;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(null,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Jr((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:oi,tween:ui,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function ci(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>0)throw new Error("too late");return e}function fi(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>2)throw new Error("too late");return e}function li(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function si(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}function hi(t,n){var e,r;return function(){var i=fi(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function pi(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=fi(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=a;break}c===f&&i.push(a)}o.tween=i}}function di(t,n,e){var r=t._id;return t.each((function(){var t=fi(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return li(t,r).value[n]}}function vi(t,n){var e;return("number"==typeof n?cr:n instanceof le?er:(e=le(n))?(n=e,er):hr)(t,n)}function gi(t){return function(){this.removeAttribute(t)}}function _i(t){return function(){this.removeAttributeNS(t.space,t.local)}}function yi(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function mi(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function bi(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttribute(t))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttribute(t)}}function xi(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttributeNS(t.space,t.local))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttributeNS(t.space,t.local)}}function wi(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function Mi(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function Ai(t,n){return function(){ci(this,t).delay=+n.apply(this,arguments)}}function Si(t,n){return n=+n,function(){ci(this,t).delay=n}}function Ei(t,n){return function(){fi(this,t).duration=+n.apply(this,arguments)}}function ki(t,n){return n=+n,function(){fi(this,t).duration=n}}function Ci(t,n){if("function"!=typeof n)throw new Error;return function(){fi(this,t).ease=n}}function Ti(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?ci:fi;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var Ni=On.prototype.constructor;function Oi(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}var Ri=0;function Li(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Pi(t){return On().transition(t)}function zi(){return++Ri}var ji=On.prototype;function Bi(t){return+t}function Ui(t){return t*t}function Di(t){return t*(2-t)}function Ii(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function qi(t){return t*t*t}function Fi(t){return--t*t*t+1}function Hi(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}Li.prototype=Pi.prototype={constructor:Li,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Ut(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,f=r[u],l=f.length,s=o[u]=new Array(l),h=0;h<l;++h)(a=f[h])&&(c=t.call(a,a.__data__,h,f))&&("__data__"in a&&(c.__data__=a.__data__),s[h]=c,ai(s[h],n,e,h,s,li(a,e)));return new Li(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=It(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,f=r[a],l=f.length,s=0;s<l;++s)if(c=f[s]){for(var h,p=t.call(c,c.__data__,s,f),d=li(c,e),v=0,g=p.length;v<g;++v)(h=p[v])&&ai(h,n,e,v,p,d);o.push(p),u.push(c)}return new Li(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=St(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new Li(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],l=e[a],s=f.length,h=u[a]=new Array(s),p=0;p<s;++p)(c=f[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Li(u,this._parents,this._name,this._id)},selection:function(){return new Ni(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=zi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)if(u=a[f]){var l=li(u,n);ai(u,t,e,f,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Li(r,this._parents,t,e)},call:ji.call,nodes:ji.nodes,node:ji.node,size:ji.size,empty:ji.empty,each:ji.each,on:function(t,n){var e=this._id;return arguments.length<2?li(this.node(),e).on.on(t):this.each(Ti(e,t,n))},attr:function(t,n){var e=vt(t),r="transform"===e?Ar:vi;return this.attrTween(t,"function"==typeof n?(e.local?xi:bi)(e,r,di(this,"attr."+t,n)):null==n?(e.local?_i:gi)(e):(e.local?mi:yi)(e,r,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=vt(t);return this.tween(e,(r.local?wi:Mi)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Mr:vi;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=en(this,t),u=(this.style.removeProperty(t),en(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var r,i,o;return function(){var u=en(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=en(this,t)),u===a?null:u===r&&a===i?o:o=n(r=u,i=a)}}(t,r,di(this,"style."+t,n)):function(t,n,e){var r,i;return function(){var o=en(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}(t,r,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Oi(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(di(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=li(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?hi:pi)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ai:Si)(n,t)):li(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ei:ki)(n,t)):li(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Ci(n,t)):li(this.node(),n).ease}};var Yi=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Wi=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Xi=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),$i=Math.PI,Vi=$i/2;function Gi(t){return 1-Math.cos(t*Vi)}function Zi(t){return Math.sin(t*Vi)}function Ki(t){return(1-Math.cos($i*t))/2}function Ji(t){return Math.pow(2,10*t-10)}function Qi(t){return 1-Math.pow(2,-10*t)}function to(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function no(t){return 1-Math.sqrt(1-t*t)}function eo(t){return Math.sqrt(1- --t*t)}function ro(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var io=7.5625;function oo(t){return 1-uo(1-t)}function uo(t){return(t=+t)<.36363636363636365?io*t*t:t<.7272727272727273?io*(t-=.5454545454545454)*t+.75:t<.9090909090909091?io*(t-=.8181818181818182)*t+.9375:io*(t-=.9545454545454546)*t+.984375}function ao(t){return((t*=2)<=1?1-uo(1-t):uo(t-1)+1)/2}var co=1.70158,fo=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(co),lo=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(co),so=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(co),ho=2*Math.PI,po=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),vo=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),go=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=ho);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*ho)},i.period=function(e){return t(n,e)},i}(1,.3),_o={time:null,delay:0,duration:250,ease:Hi};function yo(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return _o.time=Gr(),_o;return e}On.prototype.interrupt=function(t){return this.each((function(){si(this,t)}))},On.prototype.transition=function(t){var n,e;t instanceof Li?(n=t._id,t=t._name):(n=zi(),(e=_o).time=Gr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)(u=a[f])&&ai(u,t,n,f,a,e||yo(u,n));return new Li(r,this._parents,t,n)};var mo=[null];function bo(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new Li([[t]],mo,n,+r);return null}function xo(t){return function(){return t}}function wo(t,n,e){this.target=t,this.type=n,this.selection=e}function Mo(){kt.stopImmediatePropagation()}function Ao(){kt.preventDefault(),kt.stopImmediatePropagation()}var So={name:"drag"},Eo={name:"space"},ko={name:"handle"},Co={name:"center"},To={name:"x",handles:["e","w"].map(Bo),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},No={name:"y",handles:["n","s"].map(Bo),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Oo={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Bo),input:function(t){return t},output:function(t){return t}},Ro={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Lo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Po={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},zo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},jo={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Bo(t){return{type:t}}function Uo(){return!kt.button}function Do(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Io(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function qo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Fo(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Ho(){return Xo(To)}function Yo(){return Xo(No)}function Wo(){return Xo(Oo)}function Xo(t){var n,e=Do,r=Uo,i=ht(u,"start","brush","end"),o=6;function u(n){var e=n.property("__brush",s).selectAll(".overlay").data([Bo("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Ro.overlay).merge(e).each((function(){var t=Io(this).extent;Rn(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Bo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Ro.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Ro[t.type]})),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function a(){var t=Rn(this),n=Io(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new f(t,n)}function f(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function l(){if(kt.touches){if(kt.changedTouches.length<kt.touches.length)return Ao()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,u,f,l,s,h,p,d,v,g,_,y=this,m=kt.target.__data__.type,b="selection"===(kt.metaKey?m="overlay":m)?So:kt.altKey?Co:ko,x=t===No?null:zo[m],w=t===To?null:jo[m],M=Io(y),A=M.extent,S=M.selection,E=A[0][0],k=A[0][1],C=A[1][0],T=A[1][1],N=x&&w&&kt.shiftKey,O=jt(y),R=O,L=c(y,arguments).beforestart();"overlay"===m?M.selection=S=[[e=t===No?E:O[0],o=t===To?k:O[1]],[f=t===No?C:e,s=t===To?T:o]]:(e=S[0][0],o=S[0][1],f=S[1][0],s=S[1][1]),i=e,u=o,l=f,h=s;var P=Rn(y).attr("pointer-events","none"),z=P.selectAll(".overlay").attr("cursor",Ro[m]);if(kt.touches)P.on("touchmove.brush",B,!0).on("touchend.brush touchcancel.brush",D,!0);else{var j=Rn(kt.view).on("keydown.brush",I,!0).on("keyup.brush",q,!0).on("mousemove.brush",B,!0).on("mouseup.brush",D,!0);Un(kt.view)}Mo(),si(y),a.call(y),L.start()}function B(){var t=jt(y);!N||g||_||(Math.abs(t[0]-R[0])>Math.abs(t[1]-R[1])?_=!0:g=!0),R=t,v=!0,Ao(),U()}function U(){var t;switch(p=R[0]-O[0],d=R[1]-O[1],b){case Eo:case So:x&&(p=Math.max(E-e,Math.min(C-f,p)),i=e+p,l=f+p),w&&(d=Math.max(k-o,Math.min(T-s,d)),u=o+d,h=s+d);break;case ko:x<0?(p=Math.max(E-e,Math.min(C-e,p)),i=e+p,l=f):x>0&&(p=Math.max(E-f,Math.min(C-f,p)),i=e,l=f+p),w<0?(d=Math.max(k-o,Math.min(T-o,d)),u=o+d,h=s):w>0&&(d=Math.max(k-s,Math.min(T-s,d)),u=o,h=s+d);break;case Co:x&&(i=Math.max(E,Math.min(C,e-p*x)),l=Math.max(E,Math.min(C,f+p*x))),w&&(u=Math.max(k,Math.min(T,o-d*w)),h=Math.max(k,Math.min(T,s+d*w)))}l<i&&(x*=-1,t=e,e=f,f=t,t=i,i=l,l=t,m in Lo&&z.attr("cursor",Ro[m=Lo[m]])),h<u&&(w*=-1,t=o,o=s,s=t,t=u,u=h,h=t,m in Po&&z.attr("cursor",Ro[m=Po[m]])),M.selection&&(S=M.selection),g&&(i=S[0][0],l=S[1][0]),_&&(u=S[0][1],h=S[1][1]),S[0][0]===i&&S[0][1]===u&&S[1][0]===l&&S[1][1]===h||(M.selection=[[i,u],[l,h]],a.call(y),L.brush())}function D(){if(Mo(),kt.touches){if(kt.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500),P.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Dn(kt.view,v),j.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),z.attr("cursor",Ro.overlay),M.selection&&(S=M.selection),qo(S)&&(M.selection=null,a.call(y)),L.end()}function I(){switch(kt.keyCode){case 16:N=x&&w;break;case 18:b===ko&&(x&&(f=l-p*x,e=i+p*x),w&&(s=h-d*w,o=u+d*w),b=Co,U());break;case 32:b!==ko&&b!==Co||(x<0?f=l-p:x>0&&(e=i-p),w<0?s=h-d:w>0&&(o=u-d),b=Eo,z.attr("cursor",Ro.selection),U());break;default:return}Ao()}function q(){switch(kt.keyCode){case 16:N&&(g=_=N=!1,U());break;case 18:b===Co&&(x<0?f=l:x>0&&(e=i),w<0?s=h:w>0&&(o=u),b=ko,U());break;case 32:b===Eo&&(kt.altKey?(x&&(f=l-p*x,e=i+p*x),w&&(s=h-d*w,o=u+d*w),b=Co):(x<0?f=l:x>0&&(e=i),w<0?s=h:w>0&&(o=u),b=ko),z.attr("cursor",Ro[m]),U());break;default:return}Ao()}}function s(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),f=pr(o,u);function l(t){r.selection=1===t&&qo(u)?null:f(t),a.call(n),i.brush()}return o&&u?l:l(1)})):n.each((function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=c(n,r).beforestart();si(n),i.selection=null==o||qo(o)?null:o,a.call(n),u.start().brush().end()}))},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){Lt(new wo(u,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:xo([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:xo(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.on=function(){var t=i.on.apply(i,arguments);return t===i?u:t},u}var $o=Math.cos,Vo=Math.sin,Go=Math.PI,Zo=Go/2,Ko=2*Go,Jo=Math.max;function Qo(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function tu(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,f,l,s=i.length,h=[],p=M(s),d=[],v=[],g=v.groups=new Array(s),_=new Array(s*s);for(o=0,f=-1;++f<s;){for(u=0,l=-1;++l<s;)u+=i[f][l];h.push(u),d.push(M(s)),o+=u}for(n&&p.sort((function(t,e){return n(h[t],h[e])})),e&&d.forEach((function(t,n){t.sort((function(t,r){return e(i[n][t],i[n][r])}))})),c=(o=Jo(0,Ko-t*s)/o)?t:Ko/s,u=0,f=-1;++f<s;){for(a=u,l=-1;++l<s;){var y=p[f],m=d[y][l],b=i[y][m],x=u,w=u+=b*o;_[m*s+y]={index:y,subindex:m,startAngle:x,endAngle:w,value:b}}g[y]={index:y,startAngle:a,endAngle:u,value:h[y]},u+=c}for(f=-1;++f<s;)for(l=f-1;++l<s;){var A=_[l*s+f],S=_[f*s+l];(A.value||S.value)&&v.push(A.value<S.value?{source:S,target:A}:{source:A,target:S})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=Jo(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Qo(t))._=t,i):r&&r._},i}var nu=Array.prototype.slice;function eu(t){return function(){return t}}var ru=Math.PI,iu=2*ru,ou=1e-6,uu=iu-ou;function au(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function cu(){return new au}au.prototype=cu.prototype={constructor:au,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,f=o-t,l=u-n,s=f*f+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(s>ou)if(Math.abs(l*a-c*f)>ou&&i){var h=e-o,p=r-u,d=a*a+c*c,v=h*h+p*p,g=Math.sqrt(d),_=Math.sqrt(s),y=i*Math.tan((ru-Math.acos((d+s-v)/(2*g*_)))/2),m=y/_,b=y/g;Math.abs(m-1)>ou&&(this._+="L"+(t+m*f)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>f*p)+","+(this._x1=t+b*a)+","+(this._y1=n+b*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,f=n+a,l=1^o,s=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>ou||Math.abs(this._y1-f)>ou)&&(this._+="L"+c+","+f),e&&(s<0&&(s=s%iu+iu),s>uu?this._+="A"+e+","+e+",0,1,"+l+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=c)+","+(this._y1=f):s>ou&&(this._+="A"+e+","+e+",0,"+ +(s>=ru)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const fu=cu;function lu(t){return t.source}function su(t){return t.target}function hu(t){return t.radius}function pu(t){return t.startAngle}function du(t){return t.endAngle}function vu(){var t=lu,n=su,e=hu,r=pu,i=du,o=null;function u(){var u,a=nu.call(arguments),c=t.apply(this,a),f=n.apply(this,a),l=+e.apply(this,(a[0]=c,a)),s=r.apply(this,a)-Zo,h=i.apply(this,a)-Zo,p=l*$o(s),d=l*Vo(s),v=+e.apply(this,(a[0]=f,a)),g=r.apply(this,a)-Zo,_=i.apply(this,a)-Zo;if(o||(o=u=fu()),o.moveTo(p,d),o.arc(0,0,l,s,h),s===g&&h===_||(o.quadraticCurveTo(0,0,v*$o(g),v*Vo(g)),o.arc(0,0,v,g,_)),o.quadraticCurveTo(0,0,p,d),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:eu(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:eu(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:eu(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}var gu="$";function _u(){}function yu(t,n){var e=new _u;if(t instanceof _u)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}_u.prototype=yu.prototype={constructor:_u,has:function(t){return gu+t in this},get:function(t){return this[gu+t]},set:function(t,n){return this[gu+t]=n,this},remove:function(t){var n=gu+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===gu&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===gu&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===gu&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===gu&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===gu&&++t;return t},empty:function(){for(var t in this)if(t[0]===gu)return!1;return!0},each:function(t){for(var n in this)n[0]===gu&&t(this[n],n.slice(1),this)}};const mu=yu;function bu(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,l,s=-1,h=e.length,p=r[i++],d=mu(),v=u();++s<h;)(l=d.get(c=p(f=e[s])+""))?l.push(f):d.set(c,[f]);return d.each((function(t,n){a(v,n,o(t,i,u,a))})),v}function u(t,e){if(++e>r.length)return t;var o,a=i[e-1];return null!=n&&e>=r.length?o=t.entries():(o=[],t.each((function(t,n){o.push({key:n,values:u(t,e)})}))),null!=a?o.sort((function(t,n){return a(t.key,n.key)})):o}return e={object:function(t){return o(t,0,xu,wu)},map:function(t){return o(t,0,Mu,Au)},entries:function(t){return u(o(t,0,Mu,Au),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}}function xu(){return{}}function wu(t,n,e){t[n]=e}function Mu(){return mu()}function Au(t,n,e){t.set(n,e)}function Su(){}var Eu=mu.prototype;function ku(t,n){var e=new Su;if(t instanceof Su)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Su.prototype=ku.prototype={constructor:Su,has:Eu.has,add:function(t){return this[gu+(t+="")]=t,this},remove:Eu.remove,clear:Eu.clear,values:Eu.keys,size:Eu.size,empty:Eu.empty,each:Eu.each};const Cu=ku;function Tu(t){var n=[];for(var e in t)n.push(e);return n}function Nu(t){var n=[];for(var e in t)n.push(t[e]);return n}function Ou(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var Ru={},Lu={};function Pu(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}")}function zu(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,f=!1;function l(){if(c)return Lu;if(f)return f=!1,Ru;var n,r,i=u;if(34===t.charCodeAt(i)){for(;u++<o&&34!==t.charCodeAt(u)||34===t.charCodeAt(++u););return(n=u)>=o?c=!0:10===(r=t.charCodeAt(u++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(u)&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if(10===(r=t.charCodeAt(n=u++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(u)&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=l())!==Lu;){for(var s=[];r!==Ru&&r!==Lu;)s.push(r),r=l();n&&null==(s=n(s,a++))||i.push(s)}return i}function i(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Pu(t);return function(r,i){return n(e(r),i,t)}}(t,n):Pu(t)}));return o.columns=i,o},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}(n)),[e.map(o).join(t)].concat(n.map((function(n){return e.map((function(t){return o(n[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}}var ju=zu(","),Bu=ju.parse,Uu=ju.parseRows,Du=ju.format,Iu=ju.formatRows,qu=zu("\t"),Fu=qu.parse,Hu=qu.parseRows,Yu=qu.format,Wu=qu.formatRows;function Xu(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r}function $u(t){return function(){return t}}function Vu(){return 1e-6*(Math.random()-.5)}function Gu(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,f,l,s,h,p=t._root,d={data:r},v=t._x0,g=t._y0,_=t._x1,y=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((f=n>=(o=(v+_)/2))?v=o:_=o,(l=e>=(u=(g+y)/2))?g=u:y=u,i=p,!(p=p[s=l<<1|f]))return i[s]=d,t;if(a=+t._x.call(null,p.data),c=+t._y.call(null,p.data),n===a&&e===c)return d.next=p,i?i[s]=d:t._root=d,t;do{i=i?i[s]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+_)/2))?v=o:_=o,(l=e>=(u=(g+y)/2))?g=u:y=u}while((s=l<<1|f)==(h=(c>=u)<<1|a>=o));return i[h]=p,i[s]=d,t}function Zu(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function Ku(t){return t[0]}function Ju(t){return t[1]}function Qu(t,n,e){var r=new ta(null==n?Ku:n,null==e?Ju:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function ta(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function na(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var ea=Qu.prototype=ta.prototype;function ra(t){return t.x+t.vx}function ia(t){return t.y+t.vy}function oa(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,f,l,s,h=n.length,p=0;p<i;++p)for(o=Qu(n,ra,ia).visitAfter(u),t=0;t<h;++t)a=n[t],l=e[a.index],s=l*l,c=a.x+a.vx,f=a.y+a.vy,o.visit(d);function d(t,n,e,i,o){var u=t.data,h=t.r,p=l+h;if(!u)return n>c+p||i<c-p||e>f+p||o<f-p;if(u.index>a.index){var d=c-u.x-u.vx,v=f-u.y-u.vy,g=d*d+v*v;g<p*p&&(0===d&&(g+=(d=Vu())*d),0===v&&(g+=(v=Vu())*v),g=(p-(g=Math.sqrt(g)))/g*r,a.vx+=(d*=g)*(p=(h*=h)/(s+h)),a.vy+=(v*=g)*p,u.vx-=d*(p=1-p),u.vy-=v*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=$u(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),a(),o):t},o}function ua(t){return t.index}function aa(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function ca(t){var n,e,r,i,o,u=ua,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=$u(30),f=1;function l(r){for(var i=0,u=t.length;i<f;++i)for(var a,c,l,s,h,p,d,v=0;v<u;++v)c=(a=t[v]).source,s=(l=a.target).x+l.vx-c.x-c.vx||Vu(),h=l.y+l.vy-c.y-c.vy||Vu(),s*=p=((p=Math.sqrt(s*s+h*h))-e[v])/p*r*n[v],h*=p,l.vx-=s*(d=o[v]),l.vy-=h*d,c.vx+=s*(d=1-d),c.vy+=h*d}function s(){if(r){var a,c,f=r.length,l=t.length,s=mu(r,u);for(a=0,i=new Array(f);a<l;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=aa(s,c.source)),"object"!=typeof c.target&&(c.target=aa(s,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(l);a<l;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(l),h(),e=new Array(l),p()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,s()},l.links=function(n){return arguments.length?(t=n,s(),l):t},l.id=function(t){return arguments.length?(u=t,l):u},l.iterations=function(t){return arguments.length?(f=+t,l):f},l.strength=function(t){return arguments.length?(a="function"==typeof t?t:$u(+t),h(),l):a},l.distance=function(t){return arguments.length?(c="function"==typeof t?t:$u(+t),p(),l):c},l}function fa(t){return t.x}function la(t){return t.y}ea.copy=function(){var t,n,e=new ta(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=na(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=na(n));return e},ea.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Gu(this.cover(n,e),n,e,t)},ea.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,f=1/0,l=-1/0,s=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>l&&(l=r),i<f&&(f=i),i>s&&(s=i));for(l<c&&(c=this._x0,l=this._x1),s<f&&(f=this._y0,s=this._y1),this.cover(c,f).cover(l,s),e=0;e<o;++e)Gu(this,u[e],a[e],t[e]);return this},ea.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var u,a,c=i-e,f=this._root;switch(a=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),t>(i=e+c)||n>o);break;case 1:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),(e=i-c)>t||n>o);break;case 2:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),t>(i=e+c)||r>n);break;case 3:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),(e=i-c)>t||r>n)}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},ea.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},ea.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ea.find=function(t,n,e){var r,i,o,u,a,c,f,l=this._x0,s=this._y0,h=this._x1,p=this._y1,d=[],v=this._root;for(v&&d.push(new Zu(v,l,s,h,p)),null==e?e=1/0:(l=t-e,s=n-e,h=t+e,p=n+e,e*=e);c=d.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>p||(u=c.x1)<l||(a=c.y1)<s))if(v.length){var g=(i+u)/2,_=(o+a)/2;d.push(new Zu(v[3],g,_,u,a),new Zu(v[2],i,_,g,a),new Zu(v[1],g,o,u,_),new Zu(v[0],i,o,g,_)),(f=(n>=_)<<1|t>=g)&&(c=d[d.length-1],d[d.length-1]=d[d.length-1-f],d[d.length-1-f]=c)}else{var y=t-+this._x.call(null,v.data),m=n-+this._y.call(null,v.data),b=y*y+m*m;if(b<e){var x=Math.sqrt(e=b);l=t-x,s=n-x,h=t+x,p=n+x,r=v.data}}return r},ea.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,f,l,s,h,p=this._root,d=this._x0,v=this._y0,g=this._x1,_=this._y1;if(!p)return this;if(p.length)for(;;){if((f=o>=(a=(d+g)/2))?d=a:g=a,(l=u>=(c=(v+_)/2))?v=c:_=c,n=p,!(p=p[s=l<<1|f]))return this;if(!p.length)break;(n[s+1&3]||n[s+2&3]||n[s+3&3])&&(e=n,h=s)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[s]=i:delete n[s],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},ea.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},ea.root=function(){return this._root},ea.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},ea.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new Zu(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var f=(r+o)/2,l=(i+u)/2;(e=c[3])&&a.push(new Zu(e,f,l,o,u)),(e=c[2])&&a.push(new Zu(e,r,l,f,u)),(e=c[1])&&a.push(new Zu(e,f,i,o,l)),(e=c[0])&&a.push(new Zu(e,r,i,f,l))}return this},ea.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Zu(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,f=n.y1,l=(u+c)/2,s=(a+f)/2;(o=i[0])&&e.push(new Zu(o,u,a,l,s)),(o=i[1])&&e.push(new Zu(o,l,a,c,s)),(o=i[2])&&e.push(new Zu(o,u,s,l,f)),(o=i[3])&&e.push(new Zu(o,l,s,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},ea.x=function(t){return arguments.length?(this._x=t,this):this._x},ea.y=function(t){return arguments.length?(this._y=t,this):this._y};var sa,ha=Math.PI*(3-Math.sqrt(5));function pa(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=mu(),c=Jr(l),f=ht("tick","end");function l(){s(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function s(){var n,r,c=t.length;for(e+=(o-e)*i,a.each((function(t){t(e)})),n=0;n<c;++n)null==(r=t[n]).fx?r.x+=r.vx*=u:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=u:(r.y=r.fy,r.vy=0)}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),o=e*ha;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:s,restart:function(){return c.restart(l),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,p(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,f=0,l=t.length;for(null==r?r=1/0:r*=r,f=0;f<l;++f)(u=(i=n-(a=t[f]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}}function da(){var t,n,e,r,i=$u(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=Qu(t,fa,la).visitAfter(l);for(e=r,i=0;i<o;++i)n=t[i],u.visit(s)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function l(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function s(t,i,c,f){if(!t.value)return!0;var l=t.x-n.x,s=t.y-n.y,h=f-i,p=l*l+s*s;if(h*h/a<p)return p<u&&(0===l&&(p+=(l=Vu())*l),0===s&&(p+=(s=Vu())*s),p<o&&(p=Math.sqrt(o*p)),n.vx+=l*t.value*e/p,n.vy+=s*t.value*e/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===l&&(p+=(l=Vu())*l),0===s&&(p+=(s=Vu())*s),p<o&&(p=Math.sqrt(o*p)));do{t.data!==n&&(h=r[t.data.index]*e/p,n.vx+=l*h,n.vy+=s*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:$u(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c}function va(t,n,e){var r,i,o,u=$u(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],f=c.x-n||1e-6,l=c.y-e||1e-6,s=Math.sqrt(f*f+l*l),h=(o[u]-s)*i[u]*t/s;c.vx+=f*h,c.vy+=l*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=$u(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:$u(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a}function ga(t){var n,e,r,i=$u(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=$u(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:$u(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),u(),o):t},o}function _a(t){var n,e,r,i=$u(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=$u(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:$u(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:$u(+n),u(),o):t},o}function ya(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function ma(t){return(t=ya(Math.abs(t)))?t[1]:NaN}function ba(t,n){var e=ya(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}const xa={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ba(100*t,n)},r:ba,s:function(t,n){var e=ya(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(sa=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ya(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};var wa=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function Ma(t){return new Aa(t)}function Aa(t){if(!(n=wa.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",u=!!n[5],a=n[6]&&+n[6],c=!!n[7],f=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(c=!0,l="g"):xa[l]||(l=""),(u||"0"===e&&"="===r)&&(u=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=u,this.width=a,this.comma=c,this.precision=f,this.type=l}function Sa(t){return t}Ma.prototype=Aa.prototype,Aa.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Ea,ka,Ca,Ta=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Na(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):Sa,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(t.numerals):Sa,a=t.percent||"%";function c(t){var n=(t=Ma(t)).fill,e=t.align,c=t.sign,f=t.symbol,l=t.zero,s=t.width,h=t.comma,p=t.precision,d=t.type,v="$"===f?i[0]:"#"===f&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",g="$"===f?i[1]:/[%p]/.test(d)?a:"",_=xa[d],y=!d||/[defgprs%]/.test(d);function m(t){var i,a,f,m=v,b=g;if("c"===d)b=_(t)+b,t="";else{var x=(t=+t)<0;if(t=_(Math.abs(t),p),x&&0==+t&&(x=!1),m=(x?"("===c?c:"-":"-"===c||"("===c?"":c)+m,b=b+("s"===d?Ta[8+sa/3]:"")+(x&&"("===c?")":""),y)for(i=-1,a=t.length;++i<a;)if(48>(f=t.charCodeAt(i))||f>57){b=(46===f?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var w=m.length+t.length+b.length,M=w<s?new Array(s-w+1).join(n):"";switch(h&&l&&(t=r(M+t,M.length?s-b.length:1/0),M=""),e){case"<":t=m+t+b+M;break;case"=":t=m+M+t+b;break;case"^":t=M.slice(0,w=M.length>>1)+m+t+b+M.slice(w);break;default:t=M+m+t+b}return u(t)}return p=null==p?d?6:12:/[gprs]/.test(d)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),m.toString=function(){return t+""},m}return{format:c,formatPrefix:function(t,n){var e=c(((t=Ma(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ma(n)/3))),i=Math.pow(10,-r),o=Ta[8+r/3];return function(t){return e(i*t)+o}}}}function Oa(t){return Ea=Na(t),ka=Ea.format,Ca=Ea.formatPrefix,Ea}function Ra(t){return Math.max(0,-ma(Math.abs(t)))}function La(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ma(n)/3)))-ma(Math.abs(t)))}function Pa(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ma(n)-ma(t))+1}function za(){return new ja}function ja(){this.reset()}Oa({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),ja.prototype={constructor:ja,reset:function(){this.s=this.t=0},add:function(t){Ua(Ba,t,this.t),Ua(this,Ba.s,this.s),this.s?this.t+=Ba.t:this.s=Ba.t},valueOf:function(){return this.s}};var Ba=new ja;function Ua(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Da=1e-6,Ia=Math.PI,qa=Ia/2,Fa=Ia/4,Ha=2*Ia,Ya=180/Ia,Wa=Ia/180,Xa=Math.abs,$a=Math.atan,Va=Math.atan2,Ga=Math.cos,Za=Math.ceil,Ka=Math.exp,Ja=(Math.floor,Math.log),Qa=Math.pow,tc=Math.sin,nc=Math.sign||function(t){return t>0?1:t<0?-1:0},ec=Math.sqrt,rc=Math.tan;function ic(t){return t>1?0:t<-1?Ia:Math.acos(t)}function oc(t){return t>1?qa:t<-1?-qa:Math.asin(t)}function uc(t){return(t=tc(t/2))*t}function ac(){}function cc(t,n){t&&lc.hasOwnProperty(t.type)&&lc[t.type](t,n)}var fc={Feature:function(t,n){cc(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)cc(e[r].geometry,n)}},lc={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){sc(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)sc(e[r],n,0)},Polygon:function(t,n){hc(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)hc(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)cc(e[r],n)}};function sc(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function hc(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)sc(t[e],n,1);n.polygonEnd()}function pc(t,n){t&&fc.hasOwnProperty(t.type)?fc[t.type](t,n):cc(t,n)}var dc,vc,gc,_c,yc,mc=za(),bc=za(),xc={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){mc.reset(),xc.lineStart=wc,xc.lineEnd=Mc},polygonEnd:function(){var t=+mc;bc.add(t<0?Ha+t:t),this.lineStart=this.lineEnd=this.point=ac},sphere:function(){bc.add(Ha)}};function wc(){xc.point=Ac}function Mc(){Sc(dc,vc)}function Ac(t,n){xc.point=Sc,dc=t,vc=n,gc=t*=Wa,_c=Ga(n=(n*=Wa)/2+Fa),yc=tc(n)}function Sc(t,n){var e=(t*=Wa)-gc,r=e>=0?1:-1,i=r*e,o=Ga(n=(n*=Wa)/2+Fa),u=tc(n),a=yc*u,c=_c*o+a*Ga(i),f=a*r*tc(i);mc.add(Va(f,c)),gc=t,_c=o,yc=u}function Ec(t){return bc.reset(),pc(t,xc),2*bc}function kc(t){return[Va(t[1],t[0]),oc(t[2])]}function Cc(t){var n=t[0],e=t[1],r=Ga(e);return[r*Ga(n),r*tc(n),tc(e)]}function Tc(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Nc(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Oc(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Rc(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Lc(t){var n=ec(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Pc,zc,jc,Bc,Uc,Dc,Ic,qc,Fc,Hc,Yc,Wc,Xc,$c,Vc,Gc,Zc,Kc,Jc,Qc,tf,nf,ef,rf,of,uf,af=za(),cf={point:ff,lineStart:sf,lineEnd:hf,polygonStart:function(){cf.point=pf,cf.lineStart=df,cf.lineEnd=vf,af.reset(),xc.polygonStart()},polygonEnd:function(){xc.polygonEnd(),cf.point=ff,cf.lineStart=sf,cf.lineEnd=hf,mc<0?(Pc=-(jc=180),zc=-(Bc=90)):af>Da?Bc=90:af<-1e-6&&(zc=-90),Hc[0]=Pc,Hc[1]=jc}};function ff(t,n){Fc.push(Hc=[Pc=t,jc=t]),n<zc&&(zc=n),n>Bc&&(Bc=n)}function lf(t,n){var e=Cc([t*Wa,n*Wa]);if(qc){var r=Nc(qc,e),i=Nc([r[1],-r[0],0],r);Lc(i),i=kc(i);var o,u=t-Uc,a=u>0?1:-1,c=i[0]*Ya*a,f=Xa(u)>180;f^(a*Uc<c&&c<a*t)?(o=i[1]*Ya)>Bc&&(Bc=o):f^(a*Uc<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*Ya)<zc&&(zc=o):(n<zc&&(zc=n),n>Bc&&(Bc=n)),f?t<Uc?gf(Pc,t)>gf(Pc,jc)&&(jc=t):gf(t,jc)>gf(Pc,jc)&&(Pc=t):jc>=Pc?(t<Pc&&(Pc=t),t>jc&&(jc=t)):t>Uc?gf(Pc,t)>gf(Pc,jc)&&(jc=t):gf(t,jc)>gf(Pc,jc)&&(Pc=t)}else Fc.push(Hc=[Pc=t,jc=t]);n<zc&&(zc=n),n>Bc&&(Bc=n),qc=e,Uc=t}function sf(){cf.point=lf}function hf(){Hc[0]=Pc,Hc[1]=jc,cf.point=ff,qc=null}function pf(t,n){if(qc){var e=t-Uc;af.add(Xa(e)>180?e+(e>0?360:-360):e)}else Dc=t,Ic=n;xc.point(t,n),lf(t,n)}function df(){xc.lineStart()}function vf(){pf(Dc,Ic),xc.lineEnd(),Xa(af)>Da&&(Pc=-(jc=180)),Hc[0]=Pc,Hc[1]=jc,qc=null}function gf(t,n){return(n-=t)<0?n+360:n}function _f(t,n){return t[0]-n[0]}function yf(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function mf(t){var n,e,r,i,o,u,a;if(Bc=jc=-(Pc=zc=1/0),Fc=[],pc(t,cf),e=Fc.length){for(Fc.sort(_f),n=1,o=[r=Fc[0]];n<e;++n)yf(r,(i=Fc[n])[0])||yf(r,i[1])?(gf(r[0],i[1])>gf(r[0],r[1])&&(r[1]=i[1]),gf(i[0],r[1])>gf(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=gf(r[1],i[0]))>u&&(u=a,Pc=i[0],jc=r[1])}return Fc=Hc=null,Pc===1/0||zc===1/0?[[NaN,NaN],[NaN,NaN]]:[[Pc,zc],[jc,Bc]]}var bf={sphere:ac,point:xf,lineStart:Mf,lineEnd:Ef,polygonStart:function(){bf.lineStart=kf,bf.lineEnd=Cf},polygonEnd:function(){bf.lineStart=Mf,bf.lineEnd=Ef}};function xf(t,n){t*=Wa;var e=Ga(n*=Wa);wf(e*Ga(t),e*tc(t),tc(n))}function wf(t,n,e){++Yc,Xc+=(t-Xc)/Yc,$c+=(n-$c)/Yc,Vc+=(e-Vc)/Yc}function Mf(){bf.point=Af}function Af(t,n){t*=Wa;var e=Ga(n*=Wa);rf=e*Ga(t),of=e*tc(t),uf=tc(n),bf.point=Sf,wf(rf,of,uf)}function Sf(t,n){t*=Wa;var e=Ga(n*=Wa),r=e*Ga(t),i=e*tc(t),o=tc(n),u=Va(ec((u=of*o-uf*i)*u+(u=uf*r-rf*o)*u+(u=rf*i-of*r)*u),rf*r+of*i+uf*o);Wc+=u,Gc+=u*(rf+(rf=r)),Zc+=u*(of+(of=i)),Kc+=u*(uf+(uf=o)),wf(rf,of,uf)}function Ef(){bf.point=xf}function kf(){bf.point=Tf}function Cf(){Nf(nf,ef),bf.point=xf}function Tf(t,n){nf=t,ef=n,t*=Wa,n*=Wa,bf.point=Nf;var e=Ga(n);rf=e*Ga(t),of=e*tc(t),uf=tc(n),wf(rf,of,uf)}function Nf(t,n){t*=Wa;var e=Ga(n*=Wa),r=e*Ga(t),i=e*tc(t),o=tc(n),u=of*o-uf*i,a=uf*r-rf*o,c=rf*i-of*r,f=ec(u*u+a*a+c*c),l=oc(f),s=f&&-l/f;Jc+=s*u,Qc+=s*a,tf+=s*c,Wc+=l,Gc+=l*(rf+(rf=r)),Zc+=l*(of+(of=i)),Kc+=l*(uf+(uf=o)),wf(rf,of,uf)}function Of(t){Yc=Wc=Xc=$c=Vc=Gc=Zc=Kc=Jc=Qc=tf=0,pc(t,bf);var n=Jc,e=Qc,r=tf,i=n*n+e*e+r*r;return i<1e-12&&(n=Gc,e=Zc,r=Kc,Wc<Da&&(n=Xc,e=$c,r=Vc),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Va(e,n)*Ya,oc(r/ec(i))*Ya]}function Rf(t){return function(){return t}}function Lf(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Pf(t,n){return[t>Ia?t-Ha:t<-Ia?t+Ha:t,n]}function zf(t,n,e){return(t%=Ha)?n||e?Lf(Bf(t),Uf(n,e)):Bf(t):n||e?Uf(n,e):Pf}function jf(t){return function(n,e){return[(n+=t)>Ia?n-Ha:n<-Ia?n+Ha:n,e]}}function Bf(t){var n=jf(t);return n.invert=jf(-t),n}function Uf(t,n){var e=Ga(t),r=tc(t),i=Ga(n),o=tc(n);function u(t,n){var u=Ga(n),a=Ga(t)*u,c=tc(t)*u,f=tc(n),l=f*e+a*r;return[Va(c*i-l*o,a*e-f*r),oc(l*i+c*o)]}return u.invert=function(t,n){var u=Ga(n),a=Ga(t)*u,c=tc(t)*u,f=tc(n),l=f*i-c*o;return[Va(c*i+f*o,a*e+l*r),oc(l*e-a*r)]},u}function Df(t){function n(n){return(n=t(n[0]*Wa,n[1]*Wa))[0]*=Ya,n[1]*=Ya,n}return t=zf(t[0]*Wa,t[1]*Wa,t.length>2?t[2]*Wa:0),n.invert=function(n){return(n=t.invert(n[0]*Wa,n[1]*Wa))[0]*=Ya,n[1]*=Ya,n},n}function If(t,n,e,r,i,o){if(e){var u=Ga(n),a=tc(n),c=r*e;null==i?(i=n+r*Ha,o=n-c/2):(i=qf(u,i),o=qf(u,o),(r>0?i<o:i>o)&&(i+=r*Ha));for(var f,l=i;r>0?l>o:l<o;l-=c)f=kc([u,-a*Ga(l),-a*tc(l)]),t.point(f[0],f[1])}}function qf(t,n){(n=Cc(n))[0]-=t,Lc(n);var e=ic(-n[1]);return((-n[2]<0?-e:e)+Ha-Da)%Ha}function Ff(){var t,n,e=Rf([0,0]),r=Rf(90),i=Rf(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Ya,e[1]*=Ya}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*Wa,c=i.apply(this,arguments)*Wa;return t=[],n=zf(-u[0]*Wa,-u[1]*Wa,0).invert,If(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:Rf([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:Rf(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:Rf(+t),u):i},u}function Hf(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:ac,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function Yf(t,n){return Xa(t[0]-n[0])<Da&&Xa(t[1]-n[1])<Da}function Wf(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Xf(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(Yf(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Wf(r,t,null,!0)),c.push(e.o=new Wf(r,null,e,!1)),a.push(e=new Wf(u,t,null,!1)),c.push(e.o=new Wf(u,null,e,!0))}})),a.length){for(c.sort(n),$f(a),$f(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var f,l,s=a[0];;){for(var h=s,p=!0;h.v;)if((h=h.n)===s)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=f.length;o<u;++o)i.point((l=f[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((l=f[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}}function $f(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}Pf.invert=Pf;var Vf=za();function Gf(t,n){var e=n[0],r=n[1],i=[tc(e),-Ga(e),0],o=0,u=0;Vf.reset();for(var a=0,c=t.length;a<c;++a)if(l=(f=t[a]).length)for(var f,l,s=f[l-1],h=s[0],p=s[1]/2+Fa,d=tc(p),v=Ga(p),g=0;g<l;++g,h=y,d=b,v=x,s=_){var _=f[g],y=_[0],m=_[1]/2+Fa,b=tc(m),x=Ga(m),w=y-h,M=w>=0?1:-1,A=M*w,S=A>Ia,E=d*b;if(Vf.add(Va(E*M*tc(A),v*x+E*Ga(A))),o+=S?w+M*Ha:w,S^h>=e^y>=e){var k=Nc(Cc(s),Cc(_));Lc(k);var C=Nc(i,k);Lc(C);var T=(S^w>=0?-1:1)*oc(C[2]);(r>T||r===T&&(k[0]||k[1]))&&(u+=S^w>=0?1:-1)}}return(o<-1e-6||o<Da&&Vf<-1e-6)^1&u}function Zf(t,n,e,r){return function(i){var o,u,a,c=n(i),f=Hf(),l=n(f),s=!1,h={point:p,lineStart:v,lineEnd:g,polygonStart:function(){h.point=_,h.lineStart=y,h.lineEnd=m,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=v,h.lineEnd=g,u=U(u);var t=Gf(o,r);u.length?(s||(i.polygonStart(),s=!0),Xf(u,Jf,t,e,i)):t&&(s||(i.polygonStart(),s=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),s&&(i.polygonEnd(),s=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function d(t,n){c.point(t,n)}function v(){h.point=d,c.lineStart()}function g(){h.point=p,c.lineEnd()}function _(t,n){a.push([t,n]),l.point(t,n)}function y(){l.lineStart(),a=[]}function m(){_(a[0][0],a[0][1]),l.lineEnd();var t,n,e,r,c=l.clean(),h=f.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(s||(i.polygonStart(),s=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Kf))}return h}}function Kf(t){return t.length>1}function Jf(t,n){return((t=t.x)[0]<0?t[1]-qa-Da:qa-t[1])-((n=n.x)[0]<0?n[1]-qa-Da:qa-n[1])}const Qf=Zf((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?Ia:-Ia,c=Xa(o-e);Xa(c-Ia)<Da?(t.point(e,r=(r+u)/2>0?qa:-qa),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=Ia&&(Xa(e-i)<Da&&(e-=i*Da),Xa(o-a)<Da&&(o-=a*Da),r=function(t,n,e,r){var i,o,u=tc(t-e);return Xa(u)>Da?$a((tc(n)*(o=Ga(r))*tc(e)-tc(r)*(i=Ga(n))*tc(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*qa,r.point(-Ia,i),r.point(0,i),r.point(Ia,i),r.point(Ia,0),r.point(Ia,-i),r.point(0,-i),r.point(-Ia,-i),r.point(-Ia,0),r.point(-Ia,i);else if(Xa(t[0]-n[0])>Da){var o=t[0]<n[0]?Ia:-Ia;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-Ia,-qa]);function tl(t){var n=Ga(t),e=6*Wa,r=n>0,i=Xa(n)>Da;function o(t,e){return Ga(t)*Ga(e)>n}function u(t,e,r){var i=[1,0,0],o=Nc(Cc(t),Cc(e)),u=Tc(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var f=n*u/c,l=-n*a/c,s=Nc(i,o),h=Rc(i,f);Oc(h,Rc(o,l));var p=s,d=Tc(h,p),v=Tc(p,p),g=d*d-v*(Tc(h,h)-1);if(!(g<0)){var _=ec(g),y=Rc(p,(-d-_)/v);if(Oc(y,h),y=kc(y),!r)return y;var m,b=t[0],x=e[0],w=t[1],M=e[1];x<b&&(m=b,b=x,x=m);var A=x-b,S=Xa(A-Ia)<Da;if(!S&&M<w&&(m=w,w=M,M=m),S||A<Da?S?w+M>0^y[1]<(Xa(y[0]-b)<Da?w:M):w<=y[1]&&y[1]<=M:A>Ia^(b<=y[0]&&y[0]<=x)){var E=Rc(p,(-d+_)/v);return Oc(E,h),[y,kc(E)]}}}function a(n,e){var i=r?t:Ia-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Zf(o,(function(t){var n,e,c,f,l;return{lineStart:function(){f=c=!1,l=1},point:function(s,h){var p,d=[s,h],v=o(s,h),g=r?v?0:a(s,h):v?a(s+(s<0?Ia:-Ia),h):0;if(!n&&(f=c=v)&&t.lineStart(),v!==c&&(!(p=u(n,d))||Yf(n,p)||Yf(d,p))&&(d[0]+=Da,d[1]+=Da,v=o(d[0],d[1])),v!==c)l=0,v?(t.lineStart(),p=u(d,n),t.point(p[0],p[1])):(p=u(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(i&&n&&r^v){var _;g&e||!(_=u(d,n,!0))||(l=0,r?(t.lineStart(),t.point(_[0][0],_[0][1]),t.point(_[1][0],_[1][1]),t.lineEnd()):(t.point(_[1][0],_[1][1]),t.lineEnd(),t.lineStart(),t.point(_[0][0],_[0][1])))}!v||n&&Yf(n,d)||t.point(d[0],d[1]),n=d,c=v,e=g},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return l|(f&&c)<<1}}}),(function(n,r,i,o){If(o,t,e,i,n,r)}),r?[0,-t]:[-Ia,t-Ia])}var nl=1e9,el=-nl;function rl(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,f){var l=0,s=0;if(null==i||(l=u(i,a))!==(s=u(o,a))||c(i,o)<0^a>0)do{f.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==s);else f.point(o[0],o[1])}function u(r,i){return Xa(r[0]-t)<Da?i>0?0:3:Xa(r[0]-e)<Da?i>0?2:1:Xa(r[1]-n)<Da?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,f,l,s,h,p,d,v,g,_,y,m=u,b=Hf(),x={point:w,lineStart:function(){x.point=M,f&&f.push(l=[]),_=!0,g=!1,d=v=NaN},lineEnd:function(){c&&(M(s,h),p&&g&&b.rejoin(),c.push(b.result())),x.point=w,g&&m.lineEnd()},polygonStart:function(){m=b,c=[],f=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,u,a=f[e],c=1,l=a.length,s=a[0],h=s[0],p=s[1];c<l;++c)o=h,u=p,h=(s=a[c])[0],p=s[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=y&&n,i=(c=U(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&Xf(c,a,n,o,u),u.polygonEnd()),m=u,c=f=l=null}};function w(t,n){i(t,n)&&m.point(t,n)}function M(o,u){var a=i(o,u);if(f&&l.push([o,u]),_)s=o,h=u,p=a,_=!1,a&&(m.lineStart(),m.point(o,u));else if(a&&g)m.point(o,u);else{var c=[d=Math.max(el,Math.min(nl,d)),v=Math.max(el,Math.min(nl,v))],b=[o=Math.max(el,Math.min(nl,o)),u=Math.max(el,Math.min(nl,u))];!function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,l=1,s=n[0]-a,h=n[1]-c;if(u=e-a,s||!(u>0)){if(u/=s,s<0){if(u<f)return;u<l&&(l=u)}else if(s>0){if(u>l)return;u>f&&(f=u)}if(u=i-a,s||!(u<0)){if(u/=s,s<0){if(u>l)return;u>f&&(f=u)}else if(s>0){if(u<f)return;u<l&&(l=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<l&&(l=u)}else if(h>0){if(u>l)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>l)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<l&&(l=u)}return f>0&&(t[0]=a+f*s,t[1]=c+f*h),l<1&&(n[0]=a+l*s,n[1]=c+l*h),!0}}}}}(c,b,t,n,e,r)?a&&(m.lineStart(),m.point(o,u),y=!1):(g||(m.lineStart(),m.point(c[0],c[1])),m.point(b[0],b[1]),a||m.lineEnd(),y=!1)}d=o,v=u,g=a}return x}}function il(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=rl(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}}var ol,ul,al,cl=za(),fl={sphere:ac,point:ac,lineStart:function(){fl.point=sl,fl.lineEnd=ll},lineEnd:ac,polygonStart:ac,polygonEnd:ac};function ll(){fl.point=fl.lineEnd=ac}function sl(t,n){ol=t*=Wa,ul=tc(n*=Wa),al=Ga(n),fl.point=hl}function hl(t,n){t*=Wa;var e=tc(n*=Wa),r=Ga(n),i=Xa(t-ol),o=Ga(i),u=r*tc(i),a=al*e-ul*r*o,c=ul*e+al*r*o;cl.add(Va(ec(u*u+a*a),c)),ol=t,ul=e,al=r}function pl(t){return cl.reset(),pc(t,fl),+cl}var dl=[null,null],vl={type:"LineString",coordinates:dl};function gl(t,n){return dl[0]=t,dl[1]=n,pl(vl)}var _l={Feature:function(t,n){return ml(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(ml(e[r].geometry,n))return!0;return!1}},yl={Sphere:function(){return!0},Point:function(t,n){return bl(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(bl(e[r],n))return!0;return!1},LineString:function(t,n){return xl(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(xl(e[r],n))return!0;return!1},Polygon:function(t,n){return wl(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(wl(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(ml(e[r],n))return!0;return!1}};function ml(t,n){return!(!t||!yl.hasOwnProperty(t.type))&&yl[t.type](t,n)}function bl(t,n){return 0===gl(t,n)}function xl(t,n){var e=gl(t[0],t[1]);return gl(t[0],n)+gl(n,t[1])<=e+Da}function wl(t,n){return!!Gf(t.map(Ml),Al(n))}function Ml(t){return(t=t.map(Al)).pop(),t}function Al(t){return[t[0]*Wa,t[1]*Wa]}function Sl(t,n){return(t&&_l.hasOwnProperty(t.type)?_l[t.type]:ml)(t,n)}function El(t,n,e){var r=M(t,n-Da,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function kl(t,n,e){var r=M(t,n-Da,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function Cl(){var t,n,e,r,i,o,u,a,c,f,l,s,h=10,p=h,d=90,v=360,g=2.5;function _(){return{type:"MultiLineString",coordinates:y()}}function y(){return M(Za(r/d)*d,e,d).map(l).concat(M(Za(a/v)*v,u,v).map(s)).concat(M(Za(n/h)*h,t,h).filter((function(t){return Xa(t%d)>Da})).map(c)).concat(M(Za(o/p)*p,i,p).filter((function(t){return Xa(t%v)>Da})).map(f))}return _.lines=function(){return y().map((function(t){return{type:"LineString",coordinates:t}}))},_.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(s(u).slice(1),l(e).reverse().slice(1),s(a).reverse().slice(1))]}},_.extent=function(t){return arguments.length?_.extentMajor(t).extentMinor(t):_.extentMinor()},_.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),_.precision(g)):[[r,a],[e,u]]},_.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),_.precision(g)):[[n,o],[t,i]]},_.step=function(t){return arguments.length?_.stepMajor(t).stepMinor(t):_.stepMinor()},_.stepMajor=function(t){return arguments.length?(d=+t[0],v=+t[1],_):[d,v]},_.stepMinor=function(t){return arguments.length?(h=+t[0],p=+t[1],_):[h,p]},_.precision=function(h){return arguments.length?(g=+h,c=El(o,i,90),f=kl(n,t,g),l=El(a,u,90),s=kl(r,e,g),_):g},_.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function Tl(){return Cl()()}function Nl(t,n){var e=t[0]*Wa,r=t[1]*Wa,i=n[0]*Wa,o=n[1]*Wa,u=Ga(r),a=tc(r),c=Ga(o),f=tc(o),l=u*Ga(e),s=u*tc(e),h=c*Ga(i),p=c*tc(i),d=2*oc(ec(uc(o-r)+u*c*uc(i-e))),v=tc(d),g=d?function(t){var n=tc(t*=d)/v,e=tc(d-t)/v,r=e*l+n*h,i=e*s+n*p,o=e*a+n*f;return[Va(i,r)*Ya,Va(o,ec(r*r+i*i))*Ya]}:function(){return[e*Ya,r*Ya]};return g.distance=d,g}function Ol(t){return t}var Rl,Ll,Pl,zl,jl=za(),Bl=za(),Ul={point:ac,lineStart:ac,lineEnd:ac,polygonStart:function(){Ul.lineStart=Dl,Ul.lineEnd=Fl},polygonEnd:function(){Ul.lineStart=Ul.lineEnd=Ul.point=ac,jl.add(Xa(Bl)),Bl.reset()},result:function(){var t=jl/2;return jl.reset(),t}};function Dl(){Ul.point=Il}function Il(t,n){Ul.point=ql,Rl=Pl=t,Ll=zl=n}function ql(t,n){Bl.add(zl*t-Pl*n),Pl=t,zl=n}function Fl(){ql(Rl,Ll)}const Hl=Ul;var Yl=1/0,Wl=Yl,Xl=-Yl,$l=Xl;const Vl={point:function(t,n){t<Yl&&(Yl=t),t>Xl&&(Xl=t),n<Wl&&(Wl=n),n>$l&&($l=n)},lineStart:ac,lineEnd:ac,polygonStart:ac,polygonEnd:ac,result:function(){var t=[[Yl,Wl],[Xl,$l]];return Xl=$l=-(Wl=Yl=1/0),t}};var Gl,Zl,Kl,Jl,Ql=0,ts=0,ns=0,es=0,rs=0,is=0,os=0,us=0,as=0,cs={point:fs,lineStart:ls,lineEnd:ps,polygonStart:function(){cs.lineStart=ds,cs.lineEnd=vs},polygonEnd:function(){cs.point=fs,cs.lineStart=ls,cs.lineEnd=ps},result:function(){var t=as?[os/as,us/as]:is?[es/is,rs/is]:ns?[Ql/ns,ts/ns]:[NaN,NaN];return Ql=ts=ns=es=rs=is=os=us=as=0,t}};function fs(t,n){Ql+=t,ts+=n,++ns}function ls(){cs.point=ss}function ss(t,n){cs.point=hs,fs(Kl=t,Jl=n)}function hs(t,n){var e=t-Kl,r=n-Jl,i=ec(e*e+r*r);es+=i*(Kl+t)/2,rs+=i*(Jl+n)/2,is+=i,fs(Kl=t,Jl=n)}function ps(){cs.point=fs}function ds(){cs.point=gs}function vs(){_s(Gl,Zl)}function gs(t,n){cs.point=_s,fs(Gl=Kl=t,Zl=Jl=n)}function _s(t,n){var e=t-Kl,r=n-Jl,i=ec(e*e+r*r);es+=i*(Kl+t)/2,rs+=i*(Jl+n)/2,is+=i,os+=(i=Jl*t-Kl*n)*(Kl+t),us+=i*(Jl+n),as+=3*i,fs(Kl=t,Jl=n)}const ys=cs;function ms(t){this._context=t}ms.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ha)}},result:ac};var bs,xs,ws,Ms,As,Ss=za(),Es={point:ac,lineStart:function(){Es.point=ks},lineEnd:function(){bs&&Cs(xs,ws),Es.point=ac},polygonStart:function(){bs=!0},polygonEnd:function(){bs=null},result:function(){var t=+Ss;return Ss.reset(),t}};function ks(t,n){Es.point=Cs,xs=Ms=t,ws=As=n}function Cs(t,n){Ms-=t,As-=n,Ss.add(ec(Ms*Ms+As*As)),Ms=t,As=n}const Ts=Es;function Ns(){this._string=[]}function Os(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Rs(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),pc(t,e(r))),r.result()}return o.area=function(t){return pc(t,e(Hl)),Hl.result()},o.measure=function(t){return pc(t,e(Ts)),Ts.result()},o.bounds=function(t){return pc(t,e(Vl)),Vl.result()},o.centroid=function(t){return pc(t,e(ys)),ys.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,Ol):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new Ns):new ms(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}function Ls(t){return{stream:Ps(t)}}function Ps(t){return function(n){var e=new zs;for(var r in t)e[r]=t[r];return e.stream=n,e}}function zs(){}function js(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),pc(e,t.stream(Vl));var u=Vl.result(),a=Math.min(r/(u[1][0]-u[0][0]),i/(u[1][1]-u[0][1])),c=+n[0][0]+(r-a*(u[1][0]+u[0][0]))/2,f=+n[0][1]+(i-a*(u[1][1]+u[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*a).translate([c,f])}function Bs(t,n,e){return js(t,[[0,0],n],e)}Ns.prototype={_radius:4.5,_circle:Os(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Os(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},zs.prototype={constructor:zs,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Us=Ga(30*Wa);function Ds(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,f,l,s,h,p,d,v,g){var _=f-r,y=l-i,m=_*_+y*y;if(m>4*n&&v--){var b=u+h,x=a+p,w=c+d,M=ec(b*b+x*x+w*w),A=oc(w/=M),S=Xa(Xa(w)-1)<Da||Xa(o-s)<Da?(o+s)/2:Va(x,b),E=t(S,A),k=E[0],C=E[1],T=k-r,N=C-i,O=y*T-_*N;(O*O/m>n||Xa((_*T+y*N)/m-.5)>.3||u*h+a*p+c*d<Us)&&(e(r,i,o,u,a,c,k,C,S,b/=M,x/=M,w,v,g),g.point(k,C),e(k,C,S,b,x,w,f,l,s,h,p,d,v,g))}}return function(n){var r,i,o,u,a,c,f,l,s,h,p,d,v={point:g,lineStart:_,lineEnd:m,polygonStart:function(){n.polygonStart(),v.lineStart=b},polygonEnd:function(){n.polygonEnd(),v.lineStart=_}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function _(){l=NaN,v.point=y,n.lineStart()}function y(r,i){var o=Cc([r,i]),u=t(r,i);e(l,s,f,h,p,d,l=u[0],s=u[1],f=r,h=o[0],p=o[1],d=o[2],16,n),n.point(l,s)}function m(){v.point=g,n.lineEnd()}function b(){_(),v.point=x,v.lineEnd=w}function x(t,n){y(r=t,n),i=l,o=s,u=h,a=p,c=d,v.point=y}function w(){e(l,s,f,h,p,d,i,o,r,u,a,c,16,n),v.lineEnd=m,m()}return v}}(t,n):function(t){return Ps({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var Is=Ps({point:function(t,n){this.stream.point(t*Wa,n*Wa)}});function qs(t){return Fs((function(){return t}))()}function Fs(t){var n,e,r,i,o,u,a,c,f,l,s=150,h=480,p=250,d=0,v=0,g=0,_=0,y=0,m=null,b=Qf,x=null,w=Ol,M=.5,A=Ds(k,M);function S(t){return[(t=o(t[0]*Wa,t[1]*Wa))[0]*s+e,r-t[1]*s]}function E(t){return(t=o.invert((t[0]-e)/s,(r-t[1])/s))&&[t[0]*Ya,t[1]*Ya]}function k(t,i){return[(t=n(t,i))[0]*s+e,r-t[1]*s]}function C(){o=Lf(i=zf(g,_,y),n);var t=n(d,v);return e=h-t[0]*s,r=p+t[1]*s,T()}function T(){return f=l=null,S}return S.stream=function(t){return f&&l===t?f:f=Is(function(t){return Ps({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(i)(b(A(w(l=t)))))},S.preclip=function(t){return arguments.length?(b=t,m=void 0,T()):b},S.postclip=function(t){return arguments.length?(w=t,x=u=a=c=null,T()):w},S.clipAngle=function(t){return arguments.length?(b=+t?tl(m=t*Wa):(m=null,Qf),T()):m*Ya},S.clipExtent=function(t){return arguments.length?(w=null==t?(x=u=a=c=null,Ol):rl(x=+t[0][0],u=+t[0][1],a=+t[1][0],c=+t[1][1]),T()):null==x?null:[[x,u],[a,c]]},S.scale=function(t){return arguments.length?(s=+t,C()):s},S.translate=function(t){return arguments.length?(h=+t[0],p=+t[1],C()):[h,p]},S.center=function(t){return arguments.length?(d=t[0]%360*Wa,v=t[1]%360*Wa,C()):[d*Ya,v*Ya]},S.rotate=function(t){return arguments.length?(g=t[0]%360*Wa,_=t[1]%360*Wa,y=t.length>2?t[2]%360*Wa:0,C()):[g*Ya,_*Ya,y*Ya]},S.precision=function(t){return arguments.length?(A=Ds(k,M=t*t),T()):ec(M)},S.fitExtent=function(t,n){return js(S,t,n)},S.fitSize=function(t,n){return Bs(S,t,n)},function(){return n=t.apply(this,arguments),S.invert=n.invert&&E,C()}}function Hs(t){var n=0,e=Ia/3,r=Fs(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Wa,e=t[1]*Wa):[n*Ya,e*Ya]},i}function Ys(t,n){var e=tc(t),r=(e+tc(n))/2;if(Xa(r)<Da)return function(t){var n=Ga(t);function e(t,e){return[t*n,tc(e)/n]}return e.invert=function(t,e){return[t/n,oc(e*n)]},e}(t);var i=1+e*(2*r-e),o=ec(i)/r;function u(t,n){var e=ec(i-2*r*tc(n))/r;return[e*tc(t*=r),o-e*Ga(t)]}return u.invert=function(t,n){var e=o-n;return[Va(t,Xa(e))/r*nc(e),oc((i-(t*t+e*e)*r*r)/(2*r))]},u}function Ws(){return Hs(Ys).scale(155.424).center([0,33.6442])}function Xs(){return Ws().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function $s(){var t,n,e,r,i,o,u=Xs(),a=Ws().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Ws().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function l(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function s(){return t=n=null,l}return l.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},l.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},l.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),s()):u.precision()},l.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),l.translate(u.translate())):u.scale()},l.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],l=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,l-.238*n],[o+.455*n,l+.238*n]]).stream(f),r=a.translate([o-.307*n,l+.201*n]).clipExtent([[o-.425*n+Da,l+.12*n+Da],[o-.214*n-Da,l+.234*n-Da]]).stream(f),i=c.translate([o-.205*n,l+.212*n]).clipExtent([[o-.214*n+Da,l+.166*n+Da],[o-.115*n-Da,l+.234*n-Da]]).stream(f),s()},l.fitExtent=function(t,n){return js(l,t,n)},l.fitSize=function(t,n){return Bs(l,t,n)},l.scale(1070)}function Vs(t){return function(n,e){var r=Ga(n),i=Ga(e),o=t(r*i);return[o*i*tc(n),o*tc(e)]}}function Gs(t){return function(n,e){var r=ec(n*n+e*e),i=t(r),o=tc(i),u=Ga(i);return[Va(n*o,r*u),oc(r&&e*o/r)]}}var Zs=Vs((function(t){return ec(2/(1+t))}));function Ks(){return qs(Zs).scale(124.75).clipAngle(179.999)}Zs.invert=Gs((function(t){return 2*oc(t/2)}));var Js=Vs((function(t){return(t=ic(t))&&t/tc(t)}));function Qs(){return qs(Js).scale(79.4188).clipAngle(179.999)}function th(t,n){return[t,Ja(rc((qa+n)/2))]}function nh(){return eh(th).scale(961/Ha)}function eh(t){var n,e,r,i=qs(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,f=null;function l(){var o=Ia*u(),a=i(Df(i.rotate()).invert([0,0]));return c(null==f?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===th?[[Math.max(a[0]-o,f),n],[Math.min(a[0]+o,e),r]]:[[f,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),l()):u()},i.translate=function(t){return arguments.length?(a(t),l()):a()},i.center=function(t){return arguments.length?(o(t),l()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),l()):null==f?null:[[f,n],[e,r]]},l()}function rh(t){return rc((qa+t)/2)}function ih(t,n){var e=Ga(t),r=t===n?tc(t):Ja(e/Ga(n))/Ja(rh(n)/rh(t)),i=e*Qa(rh(t),r)/r;if(!r)return th;function o(t,n){i>0?n<-qa+Da&&(n=-qa+Da):n>qa-Da&&(n=qa-Da);var e=i/Qa(rh(n),r);return[e*tc(r*t),i-e*Ga(r*t)]}return o.invert=function(t,n){var e=i-n,o=nc(r)*ec(t*t+e*e);return[Va(t,Xa(e))/r*nc(e),2*$a(Qa(i/o,1/r))-qa]},o}function oh(){return Hs(ih).scale(109.5).parallels([30,30])}function uh(t,n){return[t,n]}function ah(){return qs(uh).scale(152.63)}function ch(t,n){var e=Ga(t),r=t===n?tc(t):(e-Ga(n))/(n-t),i=e/r+t;if(Xa(r)<Da)return uh;function o(t,n){var e=i-n,o=r*t;return[e*tc(o),i-e*Ga(o)]}return o.invert=function(t,n){var e=i-n;return[Va(t,Xa(e))/r*nc(e),i-nc(r)*ec(t*t+e*e)]},o}function fh(){return Hs(ch).scale(131.154).center([0,13.9389])}function lh(t,n){var e=Ga(n),r=Ga(t)*e;return[e*tc(t)/r,tc(n)/r]}function sh(){return qs(lh).scale(144.049).clipAngle(60)}function hh(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Ol:Ps({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}function ph(){var t,n,e,r,i,o,u=1,a=0,c=0,f=1,l=1,s=Ol,h=null,p=Ol;function d(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=s(p(i=t))},postclip:function(r){return arguments.length?(p=r,h=t=n=e=null,d()):p},clipExtent:function(r){return arguments.length?(p=null==r?(h=t=n=e=null,Ol):rl(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),d()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(s=hh((u=+t)*f,u*l,a,c),d()):u},translate:function(t){return arguments.length?(s=hh(u*f,u*l,a=+t[0],c=+t[1]),d()):[a,c]},reflectX:function(t){return arguments.length?(s=hh(u*(f=t?-1:1),u*l,a,c),d()):f<0},reflectY:function(t){return arguments.length?(s=hh(u*f,u*(l=t?-1:1),a,c),d()):l<0},fitExtent:function(t,n){return js(o,t,n)},fitSize:function(t,n){return Bs(o,t,n)}}}function dh(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function vh(){return qs(dh).scale(175.295)}function gh(t,n){return[Ga(n)*tc(t),tc(n)]}function _h(){return qs(gh).scale(249.5).clipAngle(90.000001)}function yh(t,n){var e=Ga(n),r=1+Ga(t)*e;return[e*tc(t)/r,tc(n)/r]}function mh(){return qs(yh).scale(250).clipAngle(142)}function bh(t,n){return[Ja(rc((qa+n)/2)),-t]}function xh(){var t=eh(bh),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function wh(t,n){return t.parent===n.parent?1:2}function Mh(t,n){return t+n.x}function Ah(t,n){return Math.max(t,n.y)}function Sh(){var t=wh,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Mh,0)/t.length}(e),n.y=function(t){return 1+t.reduce(Ah,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)}));var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=a.x-t(a,c)/2,l=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(l-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function Eh(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function kh(t,n){var e,r,i,o,u,a=new Oh(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=Ch);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new Oh(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Nh)}function Ch(t){return t.children}function Th(t){t.data=t.data.data}function Nh(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Oh(t){this.data=t,this.depth=this.height=0,this.parent=null}Js.invert=Gs((function(t){return t})),th.invert=function(t,n){return[t,2*$a(Ka(n))-qa]},uh.invert=uh,lh.invert=Gs($a),dh.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(Xa(e)>Da&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},gh.invert=Gs(oc),yh.invert=Gs((function(t){return 2*$a(t)})),bh.invert=function(t,n){return[-n,2*$a(Ka(t))-qa]},Oh.prototype=kh.prototype={constructor:Oh,count:function(){return this.eachAfter(Eh)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each((function(n){t.push(n)})),t},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return kh(this).eachBefore(Th)}};var Rh=Array.prototype.slice;function Lh(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Rh.call(t))).length,o=[];r<i;)n=t[r],e&&jh(e,n)?++r:(e=Uh(o=Ph(o,n)),r=0);return e}function Ph(t,n){var e,r;if(Bh(n,t))return[n];for(e=0;e<t.length;++e)if(zh(n,t[e])&&Bh(Dh(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(zh(Dh(t[e],t[r]),n)&&zh(Dh(t[e],n),t[r])&&zh(Dh(t[r],n),t[e])&&Bh(Ih(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function zh(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function jh(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Bh(t,n){for(var e=0;e<n.length;++e)if(!jh(t,n[e]))return!1;return!0}function Uh(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return Dh(t[0],t[1]);case 3:return Ih(t[0],t[1],t[2])}}function Dh(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,l=a-i,s=Math.sqrt(c*c+f*f);return{x:(e+o+c/s*l)/2,y:(r+u+f/s*l)/2,r:(s+i+a)/2}}function Ih(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,l=e.y,s=e.r,h=r-u,p=r-f,d=i-a,v=i-l,g=c-o,_=s-o,y=r*r+i*i-o*o,m=y-u*u-a*a+c*c,b=y-f*f-l*l+s*s,x=p*d-h*v,w=(d*b-v*m)/(2*x)-r,M=(v*g-d*_)/x,A=(p*m-h*b)/(2*x)-i,S=(h*_-p*g)/x,E=M*M+S*S-1,k=2*(o+w*M+A*S),C=w*w+A*A-o*o,T=-(E?(k+Math.sqrt(k*k-4*E*C))/(2*E):C/k);return{x:r+w+M*T,y:i+A+S*T,r:T}}function qh(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,u=t.r+e.r,a=n.x-r,c=n.y-i,f=a*a+c*c;if(f){var l=.5+((u*=u)-(o*=o))/(2*f),s=Math.sqrt(Math.max(0,2*o*(u+f)-(u-=f)*u-o*o))/(2*f);e.x=r+l*a+s*c,e.y=i+l*c-s*a}else e.x=r+u,e.y=i}function Fh(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function Hh(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Yh(t){this._=t,this.next=null,this.previous=null}function Wh(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,f,l,s;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;qh(e,n,r=t[2]),n=new Yh(n),e=new Yh(e),r=new Yh(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){qh(n._,e._,r=t[a]),r=new Yh(r),c=e.next,f=n.previous,l=e._.r,s=n._.r;do{if(l<=s){if(Fh(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}l+=c._.r,c=c.next}else{if(Fh(f._,r._)){(n=f).next=e,e.previous=n,--a;continue t}s+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Hh(n);(r=r.next)!==e;)(u=Hh(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=Lh(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}function Xh(t){return Wh(t),t}function $h(t){return null==t?null:Vh(t)}function Vh(t){if("function"!=typeof t)throw new Error;return t}function Gh(){return 0}function Zh(t){return function(){return t}}function Kh(t){return Math.sqrt(t.value)}function Jh(){var t=null,n=1,e=1,r=Gh;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(Qh(t)).eachAfter(tp(r,.5)).eachBefore(np(1)):i.eachBefore(Qh(Kh)).eachAfter(tp(Gh,1)).eachAfter(tp(r,i.r/Math.min(n,e))).eachBefore(np(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=$h(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Zh(+t),i):r},i}function Qh(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function tp(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Wh(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function np(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function ep(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function rp(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f}function ip(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&rp(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(ep),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var op={depth:-1},up={};function ap(t){return t.id}function cp(t){return t.parentId}function fp(){var t=ap,n=cp;function e(e){var r,i,o,u,a,c,f,l=e.length,s=new Array(l),h={};for(i=0;i<l;++i)r=e[i],a=s[i]=new Oh(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f="$"+(a.id=c)]=f in h?up:a);for(i=0;i<l;++i)if(a=s[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h["$"+c]))throw new Error("missing: "+c);if(u===up)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=op,o.eachBefore((function(t){t.depth=t.parent.depth+1,--l})).eachBefore(Nh),o.parent=null,l>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Vh(n),e):t},e.parentId=function(t){return arguments.length?(n=Vh(t),e):n},e}function lp(t,n){return t.parent===n.parent?1:2}function sp(t){var n=t.children;return n?n[0]:t.t}function hp(t){var n=t.children;return n?n[n.length-1]:t.t}function pp(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function dp(t,n,e){return t.a.parent===n.parent?t.a:e}function vp(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function gp(){var t=lp,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new vp(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new vp(r[i],i)),e.parent=n;return(u.parent=new vp(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var f=i,l=i,s=i;i.eachBefore((function(t){t.x<f.x&&(f=t),t.x>l.x&&(l=t),t.depth>s.depth&&(s=t)}));var h=f===l?1:t(f,l)/2,p=h-f.x,d=n/(l.x+h+p),v=e/(s.depth||1);i.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*v}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],f=o.m,l=u.m,s=a.m,h=c.m;a=hp(a),o=sp(o),a&&o;)c=sp(c),(u=hp(u)).a=n,(i=a.z+s-o.z-f+t(a._,o._))>0&&(pp(dp(a,n,r),n,i),f+=i,l+=i),s+=a.m,f+=o.m,h+=c.m,l+=u.m;a&&!hp(u)&&(u.t=a,u.m+=s-l),o&&!sp(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function _p(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f}vp.prototype=Object.create(Oh.prototype);var yp=(1+Math.sqrt(5))/2;function mp(t,n,e,r,i,o){for(var u,a,c,f,l,s,h,p,d,v,g,_=[],y=n.children,m=0,b=0,x=y.length,w=n.value;m<x;){c=i-e,f=o-r;do{l=y[b++].value}while(!l&&b<x);for(s=h=l,g=l*l*(v=Math.max(f/c,c/f)/(w*t)),d=Math.max(h/g,g/s);b<x;++b){if(l+=a=y[b].value,a<s&&(s=a),a>h&&(h=a),g=l*l*v,(p=Math.max(h/g,g/s))>d){l-=a;break}d=p}_.push(u={value:l,dice:c<f,children:y.slice(m,b)}),u.dice?rp(u,e,r,i,w?r+=f*l/w:o):_p(u,e,r,w?e+=c*l/w:i,o),w-=l,m=b}return _}const bp=function t(n){function e(t,e,r,i,o){mp(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(yp);function xp(){var t=bp,n=!1,e=1,r=1,i=[0],o=Gh,u=Gh,a=Gh,c=Gh,f=Gh;function l(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(s),i=[0],n&&t.eachBefore(ep),t}function s(n){var e=i[n.depth],r=n.x0+e,l=n.y0+e,s=n.x1-e,h=n.y1-e;s<r&&(r=s=(r+s)/2),h<l&&(l=h=(l+h)/2),n.x0=r,n.y0=l,n.x1=s,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,l+=u(n)-e,(s-=a(n)-e)<r&&(r=s=(r+s)/2),(h-=c(n)-e)<l&&(l=h=(l+h)/2),t(n,r,l,s,h))}return l.round=function(t){return arguments.length?(n=!!t,l):n},l.size=function(t){return arguments.length?(e=+t[0],r=+t[1],l):[e,r]},l.tile=function(n){return arguments.length?(t=Vh(n),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Zh(+t),l):o},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Zh(+t),l):u},l.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Zh(+t),l):a},l.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Zh(+t),l):c},l.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Zh(+t),l):f},l}function wp(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var l=a[n];return l.x0=i,l.y0=o,l.x1=u,void(l.y1=c)}for(var s=f[n],h=r/2+s,p=n+1,d=e-1;p<d;){var v=p+d>>>1;f[v]<h?p=v+1:d=v}h-f[p-1]<f[p]-h&&n+1<p&&--p;var g=f[p]-s,_=r-g;if(u-i>c-o){var y=(i*_+u*g)/r;t(n,p,g,i,o,y,c),t(p,e,_,y,o,u,c)}else{var m=(o*_+c*g)/r;t(n,p,g,i,o,u,m),t(p,e,_,i,m,u,c)}}(0,c,t.value,n,e,r,i)}function Mp(t,n,e,r,i){(1&t.depth?_p:rp)(t,n,e,r,i)}const Ap=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,f,l,s=-1,h=u.length,p=t.value;++s<h;){for(c=(a=u[s]).children,f=a.value=0,l=c.length;f<l;++f)a.value+=c[f].value;a.dice?rp(a,e,r,i,r+=(o-r)*a.value/p):_p(a,e,r,e+=(i-e)*a.value/p,o),p-=a.value}else t._squarify=u=mp(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(yp);function Sp(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function Ep(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]}function kp(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Cp(t,n){return t[0]-n[0]||t[1]-n[1]}function Tp(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&kp(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function Np(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Cp),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Tp(r),u=Tp(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)f.push(t[r[u[n]][2]]);return f}function Op(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],f=o[1],l=!1,s=0;s<i;++s)e=(o=t[s])[0],(r=o[1])>a!=f>a&&u<(c-e)*(a-r)/(f-r)+e&&(l=!l),c=e,f=r;return l}function Rp(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c}var Lp=[].slice,Pp={};function zp(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function jp(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Bp(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||Pp)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])Up(t,n);else if(!t._data)throw n}}function Bp(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?Up(t,e):(t._data[n]=r,t._waiting?jp(t):Dp(t))))}}function Up(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Dp(t)}function Dp(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function Ip(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new zp(t)}function qp(){return Math.random()}zp.prototype=Ip.prototype={constructor:zp,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Lp.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),jp(this),this},abort:function(){return null==this._error&&Up(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},Dp(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Dp(this),this}};const Fp=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(qp),Hp=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(qp),Yp=function t(n){function e(){var t=Hp.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(qp),Wp=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(qp),Xp=function t(n){function e(t){var e=Wp.source(n)(t);return function(){return e()/t}}return e.source=t,e}(qp),$p=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(qp);function Vp(t,n){var e,r,i,o,u=ht("beforesend","progress","load","error"),a=mu(),c=new XMLHttpRequest,f=null,l=null,s=0;function h(t){var n,r=c.status;if(!r&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(c)||r>=200&&r<300||304===r){if(i)try{n=i.call(e,c)}catch(t){return void u.call("error",e,t)}else n=c;u.call("load",e,n)}else u.call("error",e,t)}if("undefined"!=typeof XDomainRequest&&!("withCredentials"in c)&&/^(http(s)?:)?\/\//.test(t)&&(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=h:c.onreadystatechange=function(t){c.readyState>3&&h(t)},c.onprogress=function(t){u.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?a.get(t):(null==n?a.remove(t):a.set(t,n+""),e)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",e):r},responseType:function(t){return arguments.length?(o=t,e):o},timeout:function(t){return arguments.length?(s=+t,e):s},user:function(t){return arguments.length<1?f:(f=null==t?null:t+"",e)},password:function(t){return arguments.length<1?l:(l=null==t?null:t+"",e)},response:function(t){return i=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,i,h){return c.open(n,t,!0,f,l),null==r||a.has("accept")||a.set("accept",r+",*/*"),c.setRequestHeader&&a.each((function(t,n){c.setRequestHeader(n,t)})),null!=r&&c.overrideMimeType&&c.overrideMimeType(r),null!=o&&(c.responseType=o),s>0&&(c.timeout=s),null==h&&"function"==typeof i&&(h=i,i=null),null!=h&&1===h.length&&(h=function(t){return function(n,e){t(null==n?e:null)}}(h)),null!=h&&e.on("error",h).on("load",(function(t){h(null,t)})),u.call("beforesend",e,c),c.send(null==i?null:i),e},abort:function(){return c.abort(),e},on:function(){var t=u.on.apply(u,arguments);return t===u?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e}function Gp(t,n){return function(e,r){var i=Vp(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}}const Zp=Gp("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),Kp=Gp("application/json",(function(t){return JSON.parse(t.responseText)})),Jp=Gp("text/plain",(function(t){return t.responseText})),Qp=Gp("application/xml",(function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}));function td(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var o=Vp(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(nd(n,r=t)):r},o.row(r),i?o.get(i):o}}function nd(t,n){return function(e){return t(e.responseText,n)}}const ed=td("text/csv",Bu),rd=td("text/tab-separated-values",Fu);var id=Array.prototype,od=id.map,ud=id.slice,ad={name:"implicit"};function cd(t){var n=mu(),e=[],r=ad;function i(i){var o=i+"",u=n.get(o);if(!u){if(r!==ad)return r;n.set(o,u=e.push(i))}return t[(u-1)%t.length]}return t=null==t?[]:ud.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=mu();for(var r,o,u=-1,a=t.length;++u<a;)n.has(o=(r=t[u])+"")||n.set(o,e.push(r));return i},i.range=function(n){return arguments.length?(t=ud.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return cd().domain(e).range(t).unknown(r)},i}function fd(){var t,n,e=cd().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,f=.5;function l(){var e=r().length,l=o[1]<o[0],s=o[l-0],h=o[1-l];t=(h-s)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),s+=(h-s-t*(e-a))*f,n=t*(1-a),u&&(s=Math.round(s),n=Math.round(n));var p=M(e).map((function(n){return s+t*n}));return i(l?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],l()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,l()):u},e.padding=function(t){return arguments.length?(a=c=Math.max(0,Math.min(1,t)),l()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),l()):a},e.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),l()):f},e.copy=function(){return fd().domain(r()).range(o).round(u).paddingInner(a).paddingOuter(c).align(f)},l()}function ld(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return ld(n())},t}function sd(){return ld(fd().paddingInner(1))}function hd(t){return function(){return t}}function pd(t){return+t}var dd=[0,1];function vd(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:hd(n)}function gd(t,n,e,r){var i=t[0],o=t[1],u=n[0],a=n[1];return o<i?(i=e(o,i),u=r(a,u)):(i=e(i,o),u=r(u,a)),function(t){return u(i(t))}}function _d(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<i;)o[a]=e(t[a],t[a+1]),u[a]=r(n[a],n[a+1]);return function(n){var e=f(t,n,1,i)-1;return u[e](o[e](n))}}function yd(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function md(t,n){var e,r,i,o=dd,u=dd,a=pr,c=!1;function f(){return e=Math.min(o.length,u.length)>2?_d:gd,r=i=null,l}function l(n){return(r||(r=e(o,u,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return l.invert=function(t){return(i||(i=e(u,o,vd,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},l.domain=function(t){return arguments.length?(o=od.call(t,pd),f()):o.slice()},l.range=function(t){return arguments.length?(u=ud.call(t),f()):u.slice()},l.rangeRound=function(t){return u=ud.call(t),a=dr,f()},l.clamp=function(t){return arguments.length?(c=!!t,f()):c},l.interpolate=function(t){return arguments.length?(a=t,f()):a},f()}function bd(t){var n=t.domain;return t.ticks=function(t){var e=n();return k(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return function(t,n,e){var r,i=t[0],o=t[t.length-1],u=T(i,o,null==n?10:n);switch((e=Ma(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=La(u,a))||(e.precision=r),Ca(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=Pa(u,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Ra(u))||(e.precision=r-2*("%"===e.type))}return ka(e)}(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=C(a,c,e))>0?r=C(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=C(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function xd(){var t=md(vd,cr);return t.copy=function(){return yd(t,xd())},bd(t)}function wd(){var t=[0,1];function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=od.call(e,pd),n):t.slice()},n.copy=function(){return wd().domain(t)},bd(n)}function Md(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t}function Ad(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:hd(n)}function Sd(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Ed(t){return isFinite(t)?+("1e"+t):t<0?0:t}function kd(t){return 10===t?Ed:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function Cd(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Td(t){return function(n){return-t(-n)}}function Nd(){var t=md(Ad,Sd).domain([1,10]),n=t.domain,e=10,r=Cd(10),i=kd(10);function o(){return r=Cd(e),i=kd(e),n()[0]<0&&(r=Td(r),i=Td(i)),t}return t.base=function(t){return arguments.length?(e=+t,o()):e},t.domain=function(t){return arguments.length?(n(t),o()):n()},t.ticks=function(t){var o,u=n(),a=u[0],c=u[u.length-1];(o=c<a)&&(h=a,a=c,c=h);var f,l,s,h=r(a),p=r(c),d=null==t?10:+t,v=[];if(!(e%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(l=1,f=i(h);l<e;++l)if(!((s=f*l)<a)){if(s>c)break;v.push(s)}}else for(;h<p;++h)for(l=e-1,f=i(h);l>=1;--l)if(!((s=f*l)<a)){if(s>c)break;v.push(s)}}else v=k(h,p,Math.min(p-h,d)).map(i);return o?v.reverse():v},t.tickFormat=function(n,o){if(null==o&&(o=10===e?".0e":","),"function"!=typeof o&&(o=ka(o)),n===1/0)return o;null==n&&(n=10);var u=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/i(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=u?o(t):""}},t.nice=function(){return n(Md(n(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return yd(t,Nd().base(e))},t}function Od(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Rd(){var t=1,n=md((function(n,e){return(e=Od(e,t)-(n=Od(n,t)))?function(r){return(Od(r,t)-n)/e}:hd(e)}),(function(n,e){return e=Od(e,t)-(n=Od(n,t)),function(r){return Od(n+e*r,1/t)}})),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return yd(n,Rd().exponent(t))},bd(n)}function Ld(){return Rd().exponent(.5)}function Pd(){var t=[],n=[],e=[];function r(){var r=0,i=Math.max(1,n.length);for(e=new Array(i-1);++r<i;)e[r-1]=R(t,r/i);return o}function o(t){if(!isNaN(t=+t))return n[f(e,t)]}return o.invertExtent=function(r){var i=n.indexOf(r);return i<0?[NaN,NaN]:[i>0?e[i-1]:t[0],i<e.length?e[i]:t[t.length-1]]},o.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var e,o=0,u=n.length;o<u;++o)null==(e=n[o])||isNaN(e=+e)||t.push(e);return t.sort(i),r()},o.range=function(t){return arguments.length?(n=ud.call(t),r()):n.slice()},o.quantiles=function(){return e.slice()},o.copy=function(){return Pd().domain(t).range(n)},o}function zd(){var t=0,n=1,e=1,r=[.5],i=[0,1];function o(t){if(t<=t)return i[f(r,t,0,e)]}function u(){var i=-1;for(r=new Array(e);++i<e;)r[i]=((i+1)*n-(i-e)*t)/(e+1);return o}return o.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],u()):[t,n]},o.range=function(t){return arguments.length?(e=(i=ud.call(t)).length-1,u()):i.slice()},o.invertExtent=function(o){var u=i.indexOf(o);return u<0?[NaN,NaN]:u<1?[t,r[0]]:u>=e?[r[e-1],n]:[r[u-1],r[u]]},o.copy=function(){return zd().domain([t,n]).range(i)},bd(o)}function jd(){var t=[.5],n=[0,1],e=1;function r(r){if(r<=r)return n[f(t,r,0,e)]}return r.domain=function(i){return arguments.length?(t=ud.call(i),e=Math.min(t.length,n.length-1),r):t.slice()},r.range=function(i){return arguments.length?(n=ud.call(i),e=Math.min(t.length,n.length-1),r):n.slice()},r.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},r.copy=function(){return jd().domain(t).range(n)},r}var Bd=new Date,Ud=new Date;function Dd(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(new Date(+e))}while(n(e,o),t(e),e<r);return u},i.filter=function(e){return Dd((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return Bd.setTime(+n),Ud.setTime(+r),t(Bd),t(Ud),Math.floor(e(Bd,Ud))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Id=Dd((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));Id.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Dd((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Id:null};const qd=Id;var Fd=Id.range,Hd=1e3,Yd=6e4,Wd=36e5,Xd=864e5,$d=6048e5,Vd=Dd((function(t){t.setTime(Math.floor(t/Hd)*Hd)}),(function(t,n){t.setTime(+t+n*Hd)}),(function(t,n){return(n-t)/Hd}),(function(t){return t.getUTCSeconds()}));const Gd=Vd;var Zd=Vd.range,Kd=Dd((function(t){t.setTime(Math.floor(t/Yd)*Yd)}),(function(t,n){t.setTime(+t+n*Yd)}),(function(t,n){return(n-t)/Yd}),(function(t){return t.getMinutes()}));const Jd=Kd;var Qd=Kd.range,tv=Dd((function(t){var n=t.getTimezoneOffset()*Yd%Wd;n<0&&(n+=Wd),t.setTime(Math.floor((+t-n)/Wd)*Wd+n)}),(function(t,n){t.setTime(+t+n*Wd)}),(function(t,n){return(n-t)/Wd}),(function(t){return t.getHours()}));const nv=tv;var ev=tv.range,rv=Dd((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Yd)/Xd}),(function(t){return t.getDate()-1}));const iv=rv;var ov=rv.range;function uv(t){return Dd((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Yd)/$d}))}var av=uv(0),cv=uv(1),fv=uv(2),lv=uv(3),sv=uv(4),hv=uv(5),pv=uv(6),dv=av.range,vv=cv.range,gv=fv.range,_v=lv.range,yv=sv.range,mv=hv.range,bv=pv.range,xv=Dd((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const wv=xv;var Mv=xv.range,Av=Dd((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Av.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Dd((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const Sv=Av;var Ev=Av.range,kv=Dd((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*Yd)}),(function(t,n){return(n-t)/Yd}),(function(t){return t.getUTCMinutes()}));const Cv=kv;var Tv=kv.range,Nv=Dd((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*Wd)}),(function(t,n){return(n-t)/Wd}),(function(t){return t.getUTCHours()}));const Ov=Nv;var Rv=Nv.range,Lv=Dd((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/Xd}),(function(t){return t.getUTCDate()-1}));const Pv=Lv;var zv=Lv.range;function jv(t){return Dd((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/$d}))}var Bv=jv(0),Uv=jv(1),Dv=jv(2),Iv=jv(3),qv=jv(4),Fv=jv(5),Hv=jv(6),Yv=Bv.range,Wv=Uv.range,Xv=Dv.range,$v=Iv.range,Vv=qv.range,Gv=Fv.range,Zv=Hv.range,Kv=Dd((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const Jv=Kv;var Qv=Kv.range,tg=Dd((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));tg.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Dd((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const ng=tg;var eg=tg.range;function rg(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ig(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function og(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function ug(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,f=yg(i),l=mg(i),s=yg(o),h=mg(o),p=yg(u),d=mg(u),v=yg(a),g=mg(a),_=yg(c),y=mg(c),m={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Pg,e:Pg,H:zg,I:jg,j:Bg,L:Ug,m:Dg,M:Ig,p:function(t){return i[+(t.getHours()>=12)]},S:qg,U:Fg,w:Hg,W:Yg,x:null,X:null,y:Wg,Y:Xg,Z:$g,"%":c_},b={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Vg,e:Vg,H:Gg,I:Zg,j:Kg,L:Jg,m:Qg,M:t_,p:function(t){return i[+(t.getUTCHours()>=12)]},S:n_,U:e_,w:r_,W:i_,x:null,X:null,y:o_,Y:u_,Z:a_,"%":c_},x={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=_.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:kg,e:kg,H:Tg,I:Tg,j:Cg,L:Rg,m:Eg,M:Ng,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},S:Og,U:xg,w:bg,W:wg,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:Ag,Y:Mg,Z:Sg,"%":Lg};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++a<f;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=hg[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function M(t,n){return function(e){var r=og(1900);if(A(r,t,e+="",0)!=e.length)return null;if("p"in r&&(r.H=r.H%12+12*r.p),"W"in r||"U"in r){"w"in r||(r.w="W"in r?1:0);var i="Z"in r?ig(og(r.y)).getUTCDay():n(og(r.y)).getDay();r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(i+5)%7:r.w+7*r.U-(i+6)%7}return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,ig(r)):n(r)}}function A(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=x[i in hg?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),{format:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",rg);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,ig);return n.toString=function(){return t},n}}}var ag,cg,fg,lg,sg,hg={"-":"",_:" ",0:"0"},pg=/^\s*\d+/,dg=/^%/,vg=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;function gg(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function _g(t){return t.replace(vg,"\\$&")}function yg(t){return new RegExp("^(?:"+t.map(_g).join("|")+")","i")}function mg(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function bg(t,n,e){var r=pg.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function xg(t,n,e){var r=pg.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function wg(t,n,e){var r=pg.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function Mg(t,n,e){var r=pg.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ag(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Sg(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Eg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function kg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Cg(t,n,e){var r=pg.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Tg(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ng(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Og(t,n,e){var r=pg.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Rg(t,n,e){var r=pg.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Lg(t,n,e){var r=dg.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Pg(t,n){return gg(t.getDate(),n,2)}function zg(t,n){return gg(t.getHours(),n,2)}function jg(t,n){return gg(t.getHours()%12||12,n,2)}function Bg(t,n){return gg(1+iv.count(Sv(t),t),n,3)}function Ug(t,n){return gg(t.getMilliseconds(),n,3)}function Dg(t,n){return gg(t.getMonth()+1,n,2)}function Ig(t,n){return gg(t.getMinutes(),n,2)}function qg(t,n){return gg(t.getSeconds(),n,2)}function Fg(t,n){return gg(av.count(Sv(t),t),n,2)}function Hg(t){return t.getDay()}function Yg(t,n){return gg(cv.count(Sv(t),t),n,2)}function Wg(t,n){return gg(t.getFullYear()%100,n,2)}function Xg(t,n){return gg(t.getFullYear()%1e4,n,4)}function $g(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+gg(n/60|0,"0",2)+gg(n%60,"0",2)}function Vg(t,n){return gg(t.getUTCDate(),n,2)}function Gg(t,n){return gg(t.getUTCHours(),n,2)}function Zg(t,n){return gg(t.getUTCHours()%12||12,n,2)}function Kg(t,n){return gg(1+Pv.count(ng(t),t),n,3)}function Jg(t,n){return gg(t.getUTCMilliseconds(),n,3)}function Qg(t,n){return gg(t.getUTCMonth()+1,n,2)}function t_(t,n){return gg(t.getUTCMinutes(),n,2)}function n_(t,n){return gg(t.getUTCSeconds(),n,2)}function e_(t,n){return gg(Bv.count(ng(t),t),n,2)}function r_(t){return t.getUTCDay()}function i_(t,n){return gg(Uv.count(ng(t),t),n,2)}function o_(t,n){return gg(t.getUTCFullYear()%100,n,2)}function u_(t,n){return gg(t.getUTCFullYear()%1e4,n,4)}function a_(){return"+0000"}function c_(){return"%"}function f_(t){return ag=ug(t),cg=ag.format,fg=ag.parse,lg=ag.utcFormat,sg=ag.utcParse,ag}f_({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var l_="%Y-%m-%dT%H:%M:%S.%LZ";const s_=Date.prototype.toISOString?function(t){return t.toISOString()}:lg(l_),h_=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:sg(l_);var p_=31536e6;function d_(t){return new Date(t)}function v_(t){return t instanceof Date?+t:+new Date(+t)}function g_(t,n,e,r,i,u,a,c,f){var l=md(vd,cr),s=l.invert,h=l.domain,p=f(".%L"),d=f(":%S"),v=f("%I:%M"),g=f("%I %p"),_=f("%a %d"),y=f("%b %d"),m=f("%B"),b=f("%Y"),x=[[a,1,1e3],[a,5,5e3],[a,15,15e3],[a,30,3e4],[u,1,6e4],[u,5,3e5],[u,15,9e5],[u,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,864e5],[r,2,1728e5],[e,1,6048e5],[n,1,2592e6],[n,3,7776e6],[t,1,p_]];function w(o){return(a(o)<o?p:u(o)<o?d:i(o)<o?v:r(o)<o?g:n(o)<o?e(o)<o?_:y:t(o)<o?m:b)(o)}function M(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=o((function(t){return t[2]})).right(x,u);a===x.length?(i=T(e/p_,r/p_,n),n=t):a?(i=(a=x[u/x[a-1][2]<x[a][2]/u?a-1:a])[1],n=a[0]):(i=T(e,r,n),n=c)}return null==i?n:n.every(i)}return l.invert=function(t){return new Date(s(t))},l.domain=function(t){return arguments.length?h(od.call(t,v_)):h().map(d_)},l.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},l.tickFormat=function(t,n){return null==n?w:f(n)},l.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(Md(e,t)):l},l.copy=function(){return yd(l,g_(t,n,e,r,i,u,a,c,f))},l}function __(){return g_(Sv,wv,av,iv,nv,Jd,Gd,qd,cg).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}function y_(){return g_(ng,Jv,Bv,Pv,Ov,Cv,Gd,qd,lg).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}function m_(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))}const b_=m_("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),x_=m_("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),w_=m_("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),M_=m_("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),A_=Br($e(300,.5,0),$e(-240,.5,1));var S_=Br($e(-100,.75,.35),$e(80,1.5,.8)),E_=Br($e(260,.75,.35),$e(80,1.5,.8)),k_=$e();function C_(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return k_.h=360*t-100,k_.s=1.5-1.5*n,k_.l=.8-.9*n,k_+""}function T_(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const N_=T_(m_("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var O_=T_(m_("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),R_=T_(m_("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),L_=T_(m_("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function P_(t){var n=0,e=1,r=!1;function i(i){var o=(i-n)/(e-n);return t(r?Math.max(0,Math.min(1,o)):o)}return i.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.clamp=function(t){return arguments.length?(r=!!t,i):r},i.interpolator=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return P_(t).domain([n,e]).clamp(r)},bd(i)}function z_(t){return function(){return t}}var j_=Math.abs,B_=Math.atan2,U_=Math.cos,D_=Math.max,I_=Math.min,q_=Math.sin,F_=Math.sqrt,H_=1e-12,Y_=Math.PI,W_=Y_/2,X_=2*Y_;function $_(t){return t>1?0:t<-1?Y_:Math.acos(t)}function V_(t){return t>=1?W_:t<=-1?-W_:Math.asin(t)}function G_(t){return t.innerRadius}function Z_(t){return t.outerRadius}function K_(t){return t.startAngle}function J_(t){return t.endAngle}function Q_(t){return t&&t.padAngle}function ty(t,n,e,r,i,o,u,a){var c=e-t,f=r-n,l=u-i,s=a-o,h=(l*(n-o)-s*(t-i))/(s*c-l*f);return[t+h*c,n+h*f]}function ny(t,n,e,r,i,o,u){var a=t-e,c=n-r,f=(u?o:-o)/F_(a*a+c*c),l=f*c,s=-f*a,h=t+l,p=n+s,d=e+l,v=r+s,g=(h+d)/2,_=(p+v)/2,y=d-h,m=v-p,b=y*y+m*m,x=i-o,w=h*v-d*p,M=(m<0?-1:1)*F_(D_(0,x*x*b-w*w)),A=(w*m-y*M)/b,S=(-w*y-m*M)/b,E=(w*m+y*M)/b,k=(-w*y+m*M)/b,C=A-g,T=S-_,N=E-g,O=k-_;return C*C+T*T>N*N+O*O&&(A=E,S=k),{cx:A,cy:S,x01:-l,y01:-s,x11:A*(i/x-1),y11:S*(i/x-1)}}function ey(){var t=G_,n=Z_,e=z_(0),r=null,i=K_,o=J_,u=Q_,a=null;function c(){var c,f,l=+t.apply(this,arguments),s=+n.apply(this,arguments),h=i.apply(this,arguments)-W_,p=o.apply(this,arguments)-W_,d=j_(p-h),v=p>h;if(a||(a=c=fu()),s<l&&(f=s,s=l,l=f),s>H_)if(d>X_-H_)a.moveTo(s*U_(h),s*q_(h)),a.arc(0,0,s,h,p,!v),l>H_&&(a.moveTo(l*U_(p),l*q_(p)),a.arc(0,0,l,p,h,v));else{var g,_,y=h,m=p,b=h,x=p,w=d,M=d,A=u.apply(this,arguments)/2,S=A>H_&&(r?+r.apply(this,arguments):F_(l*l+s*s)),E=I_(j_(s-l)/2,+e.apply(this,arguments)),k=E,C=E;if(S>H_){var T=V_(S/l*q_(A)),N=V_(S/s*q_(A));(w-=2*T)>H_?(b+=T*=v?1:-1,x-=T):(w=0,b=x=(h+p)/2),(M-=2*N)>H_?(y+=N*=v?1:-1,m-=N):(M=0,y=m=(h+p)/2)}var O=s*U_(y),R=s*q_(y),L=l*U_(x),P=l*q_(x);if(E>H_){var z=s*U_(m),j=s*q_(m),B=l*U_(b),U=l*q_(b);if(d<Y_){var D=w>H_?ty(O,R,B,U,z,j,L,P):[L,P],I=O-D[0],q=R-D[1],F=z-D[0],H=j-D[1],Y=1/q_($_((I*F+q*H)/(F_(I*I+q*q)*F_(F*F+H*H)))/2),W=F_(D[0]*D[0]+D[1]*D[1]);k=I_(E,(l-W)/(Y-1)),C=I_(E,(s-W)/(Y+1))}}M>H_?C>H_?(g=ny(B,U,O,R,s,C,v),_=ny(z,j,L,P,s,C,v),a.moveTo(g.cx+g.x01,g.cy+g.y01),C<E?a.arc(g.cx,g.cy,C,B_(g.y01,g.x01),B_(_.y01,_.x01),!v):(a.arc(g.cx,g.cy,C,B_(g.y01,g.x01),B_(g.y11,g.x11),!v),a.arc(0,0,s,B_(g.cy+g.y11,g.cx+g.x11),B_(_.cy+_.y11,_.cx+_.x11),!v),a.arc(_.cx,_.cy,C,B_(_.y11,_.x11),B_(_.y01,_.x01),!v))):(a.moveTo(O,R),a.arc(0,0,s,y,m,!v)):a.moveTo(O,R),l>H_&&w>H_?k>H_?(g=ny(L,P,z,j,l,-k,v),_=ny(O,R,B,U,l,-k,v),a.lineTo(g.cx+g.x01,g.cy+g.y01),k<E?a.arc(g.cx,g.cy,k,B_(g.y01,g.x01),B_(_.y01,_.x01),!v):(a.arc(g.cx,g.cy,k,B_(g.y01,g.x01),B_(g.y11,g.x11),!v),a.arc(0,0,l,B_(g.cy+g.y11,g.cx+g.x11),B_(_.cy+_.y11,_.cx+_.x11),v),a.arc(_.cx,_.cy,k,B_(_.y11,_.x11),B_(_.y01,_.x01),!v))):a.arc(0,0,l,x,b,v):a.lineTo(L,P)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Y_/2;return[U_(r)*e,q_(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:z_(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:z_(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:z_(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:z_(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:z_(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:z_(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c}function ry(t){this._context=t}function iy(t){return new ry(t)}function oy(t){return t[0]}function uy(t){return t[1]}function ay(){var t=oy,n=uy,e=z_(!0),r=null,i=iy,o=null;function u(u){var a,c,f,l=u.length,s=!1;for(null==r&&(o=i(f=fu())),a=0;a<=l;++a)!(a<l&&e(c=u[a],a,u))===s&&((s=!s)?o.lineStart():o.lineEnd()),s&&o.point(+t(c,a,u),+n(c,a,u));if(f)return o=null,f+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:z_(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:z_(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u}function cy(){var t=oy,n=null,e=z_(0),r=uy,i=z_(!0),o=null,u=iy,a=null;function c(c){var f,l,s,h,p,d=c.length,v=!1,g=new Array(d),_=new Array(d);for(null==o&&(a=u(p=fu())),f=0;f<=d;++f){if(!(f<d&&i(h=c[f],f,c))===v)if(v=!v)l=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),s=f-1;s>=l;--s)a.point(g[s],_[s]);a.lineEnd(),a.areaEnd()}v&&(g[f]=+t(h,f,c),_[f]=+e(h,f,c),a.point(n?+n(h,f,c):g[f],r?+r(h,f,c):_[f]))}if(p)return a=null,p+""||null}function f(){return ay().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:z_(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:z_(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:z_(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:z_(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:z_(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:z_(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c}function fy(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function ly(t){return t}function sy(){var t=ly,n=fy,e=null,r=z_(0),i=z_(X_),o=z_(0);function u(u){var a,c,f,l,s,h=u.length,p=0,d=new Array(h),v=new Array(h),g=+r.apply(this,arguments),_=Math.min(X_,Math.max(-X_,i.apply(this,arguments)-g)),y=Math.min(Math.abs(_)/h,o.apply(this,arguments)),m=y*(_<0?-1:1);for(a=0;a<h;++a)(s=v[d[a]=a]=+t(u[a],a,u))>0&&(p+=s);for(null!=n?d.sort((function(t,e){return n(v[t],v[e])})):null!=e&&d.sort((function(t,n){return e(u[t],u[n])})),a=0,f=p?(_-h*m)/p:0;a<h;++a,g=l)c=d[a],l=g+((s=v[c])>0?s*f:0)+m,v[c]={data:u[c],index:a,value:s,startAngle:g,endAngle:l,padAngle:y};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:z_(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:z_(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:z_(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:z_(+t),u):o},u}ry.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var hy=dy(iy);function py(t){this._curve=t}function dy(t){function n(n){return new py(t(n))}return n._curve=t,n}function vy(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(dy(t)):n()._curve},t}function gy(){return vy(ay().curve(hy))}function _y(){var t=cy().curve(hy),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return vy(e())},delete t.lineX0,t.lineEndAngle=function(){return vy(r())},delete t.lineX1,t.lineInnerRadius=function(){return vy(i())},delete t.lineY0,t.lineOuterRadius=function(){return vy(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(dy(t)):n()._curve},t}function yy(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}py.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var my=Array.prototype.slice;function by(t){return t.source}function xy(t){return t.target}function wy(t){var n=by,e=xy,r=oy,i=uy,o=null;function u(){var u,a=my.call(arguments),c=n.apply(this,a),f=e.apply(this,a);if(o||(o=u=fu()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=f,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:z_(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:z_(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function My(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Ay(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Sy(t,n,e,r,i){var o=yy(n,e),u=yy(n,e=(e+i)/2),a=yy(r,e),c=yy(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function Ey(){return wy(My)}function ky(){return wy(Ay)}function Cy(){var t=wy(Sy);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const Ty={draw:function(t,n){var e=Math.sqrt(n/Y_);t.moveTo(e,0),t.arc(0,0,e,0,X_)}},Ny={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}};var Oy=Math.sqrt(1/3),Ry=2*Oy;const Ly={draw:function(t,n){var e=Math.sqrt(n/Ry),r=e*Oy;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}};var Py=Math.sin(Y_/10)/Math.sin(7*Y_/10),zy=Math.sin(X_/10)*Py,jy=-Math.cos(X_/10)*Py;const By={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=zy*e,i=jy*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=X_*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},Uy={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}};var Dy=Math.sqrt(3);const Iy={draw:function(t,n){var e=-Math.sqrt(n/(3*Dy));t.moveTo(0,2*e),t.lineTo(-Dy*e,-e),t.lineTo(Dy*e,-e),t.closePath()}};var qy=-.5,Fy=Math.sqrt(3)/2,Hy=1/Math.sqrt(12),Yy=3*(Hy/2+1);const Wy={draw:function(t,n){var e=Math.sqrt(n/Yy),r=e/2,i=e*Hy,o=r,u=e*Hy+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(qy*r-Fy*i,Fy*r+qy*i),t.lineTo(qy*o-Fy*u,Fy*o+qy*u),t.lineTo(qy*a-Fy*c,Fy*a+qy*c),t.lineTo(qy*r+Fy*i,qy*i-Fy*r),t.lineTo(qy*o+Fy*u,qy*u-Fy*o),t.lineTo(qy*a+Fy*c,qy*c-Fy*a),t.closePath()}};var Xy=[Ty,Ny,Ly,Uy,By,Iy,Wy];function $y(){var t=z_(Ty),n=z_(64),e=null;function r(){var r;if(e||(e=r=fu()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:z_(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:z_(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function Vy(){}function Gy(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Zy(t){this._context=t}function Ky(t){return new Zy(t)}function Jy(t){this._context=t}function Qy(t){return new Jy(t)}function tm(t){this._context=t}function nm(t){return new tm(t)}function em(t,n){this._basis=new Zy(t),this._beta=n}Zy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Gy(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Gy(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Jy.prototype={areaStart:Vy,areaEnd:Vy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Gy(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},tm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Gy(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},em.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const rm=function t(n){function e(t){return 1===n?new Zy(t):new em(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function im(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function om(t,n){this._context=t,this._k=(1-n)/6}om.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:im(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const um=function t(n){function e(t){return new om(t,n)}return e.tension=function(n){return t(+n)},e}(0);function am(t,n){this._context=t,this._k=(1-n)/6}am.prototype={areaStart:Vy,areaEnd:Vy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const cm=function t(n){function e(t){return new am(t,n)}return e.tension=function(n){return t(+n)},e}(0);function fm(t,n){this._context=t,this._k=(1-n)/6}fm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:im(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const lm=function t(n){function e(t){return new fm(t,n)}return e.tension=function(n){return t(+n)},e}(0);function sm(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>H_){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>H_){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/l,u=(u*f+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function hm(t,n){this._context=t,this._alpha=n}hm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:sm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const pm=function t(n){function e(t){return n?new hm(t,n):new om(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function dm(t,n){this._context=t,this._alpha=n}dm.prototype={areaStart:Vy,areaEnd:Vy,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:sm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const vm=function t(n){function e(t){return n?new dm(t,n):new am(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function gm(t,n){this._context=t,this._alpha=n}gm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:sm(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const _m=function t(n){function e(t){return n?new gm(t,n):new fm(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function ym(t){this._context=t}function mm(t){return new ym(t)}function bm(t){return t<0?-1:1}function xm(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(bm(o)+bm(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function wm(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Mm(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Am(t){this._context=t}function Sm(t){this._context=new Em(t)}function Em(t){this._context=t}function km(t){return new Am(t)}function Cm(t){return new Sm(t)}function Tm(t){this._context=t}function Nm(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function Om(t){return new Tm(t)}function Rm(t,n){this._context=t,this._t=n}function Lm(t){return new Rm(t,.5)}function Pm(t){return new Rm(t,0)}function zm(t){return new Rm(t,1)}function jm(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function Bm(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function Um(t,n){return t[n]}function Dm(){var t=z_([]),n=Bm,e=jm,r=Um;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,f=a.length,l=new Array(f);for(o=0;o<f;++o){for(var s,h=a[o],p=l[o]=new Array(c),d=0;d<c;++d)p[d]=s=[0,+r(i[d],h,d,i)],s.data=i[d];p.key=h}for(o=0,u=n(l);o<f;++o)l[u[o]].index=o;return e(l,u),l}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:z_(my.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:z_(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Bm:"function"==typeof t?t:z_(my.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?jm:t,i):e},i}function Im(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}jm(t,n)}}function qm(t,n){if((a=t.length)>1)for(var e,r,i,o,u,a,c=0,f=t[n[0]].length;c<f;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o}function Fm(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}jm(t,n)}}function Hm(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,f=0;a<i;++a){for(var l=t[n[a]],s=l[u][1]||0,h=(s-(l[u-1][1]||0))/2,p=0;p<a;++p){var d=t[n[p]];h+=(d[u][1]||0)-(d[u-1][1]||0)}c+=s,f+=h*s}e[u-1][1]+=e[u-1][0]=o,c&&(o-=f/c)}e[u-1][1]+=e[u-1][0]=o,jm(t,n)}}function Ym(t){var n=t.map(Wm);return Bm(t).sort((function(t,e){return n[t]-n[e]}))}function Wm(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function Xm(t){return Ym(t).reverse()}function $m(t){var n,e,r=t.length,i=t.map(Wm),o=Bm(t).sort((function(t,n){return i[n]-i[t]})),u=0,a=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],f.push(e));return f.reverse().concat(c)}function Vm(t){return Bm(t).reverse()}function Gm(t){return function(){return t}}function Zm(t){return t[0]}function Km(t){return t[1]}function Jm(){this._=null}function Qm(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function tb(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function nb(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function eb(t){for(;t.L;)t=t.L;return t}ym.prototype={areaStart:Vy,areaEnd:Vy,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Am.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Mm(this,this._t0,wm(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Mm(this,wm(this,e=xm(this,t,n)),e);break;default:Mm(this,this._t0,e=xm(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Sm.prototype=Object.create(Am.prototype)).point=function(t,n){Am.prototype.point.call(this,n,t)},Em.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Tm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Nm(t),i=Nm(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Rm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}},Jm.prototype={constructor:Jm,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=eb(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(tb(this,e),e=(t=e).U),e.C=!1,r.C=!0,nb(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(nb(this,e),e=(t=e).U),e.C=!1,r.C=!0,tb(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?eb(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,tb(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,nb(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,tb(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,nb(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,tb(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,nb(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};const rb=Jm;function ib(t,n,e,r){var i=[null,null],o=Cb.push(i)-1;return i.left=t,i.right=n,e&&ub(i,t,n,e),r&&ub(i,n,t,r),Eb[t.index].halfedges.push(o),Eb[n.index].halfedges.push(o),i}function ob(t,n,e){var r=[n,e];return r.left=t,r}function ub(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function ab(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],l=0,s=1,h=a[0]-c,p=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<l)return;o<s&&(s=o)}else if(h>0){if(o>s)return;o>l&&(l=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>s)return;o>l&&(l=o)}else if(h>0){if(o<l)return;o<s&&(s=o)}if(o=e-f,p||!(o>0)){if(o/=p,p<0){if(o<l)return;o<s&&(s=o)}else if(p>0){if(o>s)return;o>l&&(l=o)}if(o=i-f,p||!(o<0)){if(o/=p,p<0){if(o>s)return;o>l&&(l=o)}else if(p>0){if(o<l)return;o<s&&(s=o)}return!(l>0||s<1)||(l>0&&(t[0]=[c+l*h,f+l*p]),s<1&&(t[1]=[c+s*h,f+s*p]),!0)}}}}}function cb(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,l=t.right,s=f[0],h=f[1],p=l[0],d=l[1],v=(s+p)/2,g=(h+d)/2;if(d===h){if(v<n||v>=r)return;if(s>p){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=g-(u=(s-p)/(d-h))*v,u<-1||u>1)if(s>p){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<d){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function fb(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function lb(t,n){return n[+(n.left!==t.site)]}function sb(t,n){return n[+(n.left===t.site)]}var hb,pb=[];function db(){Qm(this),this.x=this.y=this.arc=this.site=this.cy=null}function vb(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,f=r[1]-a,l=o[0]-u,s=o[1]-a,h=2*(c*s-f*l);if(!(h>=-Nb)){var p=c*c+f*f,d=l*l+s*s,v=(s*p-f*d)/h,g=(c*d-l*p)/h,_=pb.pop()||new db;_.arc=t,_.site=i,_.x=v+u,_.y=(_.cy=g+a)+Math.sqrt(v*v+g*g),t.circle=_;for(var y=null,m=kb._;m;)if(_.y<m.y||_.y===m.y&&_.x<=m.x){if(!m.L){y=m.P;break}m=m.L}else{if(!m.R){y=m;break}m=m.R}kb.insert(y,_),y||(hb=_)}}}}function gb(t){var n=t.circle;n&&(n.P||(hb=n.N),kb.remove(n),pb.push(n),Qm(n),t.circle=null)}var _b=[];function yb(){Qm(this),this.edge=this.site=this.circle=null}function mb(t){var n=_b.pop()||new yb;return n.site=t,n}function bb(t){gb(t),Sb.remove(t),_b.push(t),Qm(t)}function xb(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];bb(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Tb&&Math.abs(r-c.circle.cy)<Tb;)o=c.P,a.unshift(c),bb(c),c=o;a.unshift(c),gb(c);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<Tb&&Math.abs(r-f.circle.cy)<Tb;)u=f.N,a.push(f),bb(f),f=u;a.push(f),gb(f);var l,s=a.length;for(l=1;l<s;++l)f=a[l],c=a[l-1],ub(f.edge,c.site,f.site,i);c=a[0],(f=a[s-1]).edge=ib(c.site,f.site,null,i),vb(c),vb(f)}function wb(t){for(var n,e,r,i,o=t[0],u=t[1],a=Sb._;a;)if((r=Mb(a,u)-o)>Tb)a=a.L;else{if(!((i=o-Ab(a,u))>Tb)){r>-Tb?(n=a.P,e=a):i>-Tb?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){Eb[t.index]={site:t,halfedges:[]}}(t);var c=mb(t);if(Sb.insert(n,c),n||e){if(n===e)return gb(n),e=mb(n.site),Sb.insert(c,e),c.edge=e.edge=ib(n.site,c.site),vb(n),void vb(e);if(e){gb(n),gb(e);var f=n.site,l=f[0],s=f[1],h=t[0]-l,p=t[1]-s,d=e.site,v=d[0]-l,g=d[1]-s,_=2*(h*g-p*v),y=h*h+p*p,m=v*v+g*g,b=[(g*y-p*m)/_+l,(h*m-v*y)/_+s];ub(e.edge,f,d,b),c.edge=ib(f,t,null,b),e.edge=ib(t,d,null,b),vb(n),vb(e)}else c.edge=ib(n.site,c.site)}}function Mb(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var l=a-r,s=1/o-1/f,h=l/f;return s?(-h+Math.sqrt(h*h-2*s*(l*l/(-2*f)-c+f/2+i-o/2)))/s+r:(r+a)/2}function Ab(t,n){var e=t.N;if(e)return Mb(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Sb,Eb,kb,Cb,Tb=1e-6,Nb=1e-12;function Ob(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Rb(t,n){return n[1]-t[1]||n[0]-t[0]}function Lb(t,n){var e,r,i,o=t.sort(Rb).pop();for(Cb=[],Eb=new Array(t.length),Sb=new rb,kb=new rb;;)if(i=hb,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(wb(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;xb(i.arc)}if(function(){for(var t,n,e,r,i=0,o=Eb.length;i<o;++i)if((t=Eb[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=fb(t,Cb[n[e]]);for(u.sort((function(t,n){return a[n]-a[t]})),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=Cb.length;o--;)cb(i=Cb[o],t,n,e,r)&&ab(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Tb||Math.abs(i[0][1]-i[1][1])>Tb)||delete Cb[o]}(u,a,c,f),function(t,n,e,r){var i,o,u,a,c,f,l,s,h,p,d,v,g=Eb.length,_=!0;for(i=0;i<g;++i)if(o=Eb[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)Cb[c[a]]||c.splice(a,1);for(a=0,f=c.length;a<f;)d=(p=sb(o,Cb[c[a]]))[0],v=p[1],s=(l=lb(o,Cb[c[++a%f]]))[0],h=l[1],(Math.abs(d-s)>Tb||Math.abs(v-h)>Tb)&&(c.splice(a,0,Cb.push(ob(u,p,Math.abs(d-t)<Tb&&r-v>Tb?[t,Math.abs(s-t)<Tb?h:r]:Math.abs(v-r)<Tb&&e-d>Tb?[Math.abs(h-r)<Tb?s:e,r]:Math.abs(d-e)<Tb&&v-n>Tb?[e,Math.abs(s-e)<Tb?h:n]:Math.abs(v-n)<Tb&&d-t>Tb?[Math.abs(h-n)<Tb?s:t,n]:null))-1),++f);f&&(_=!1)}if(_){var y,m,b,x=1/0;for(i=0,_=null;i<g;++i)(o=Eb[i])&&(b=(y=(u=o.site)[0]-t)*y+(m=u[1]-n)*m)<x&&(x=b,_=o);if(_){var w=[t,n],M=[t,r],A=[e,r],S=[e,n];_.halfedges.push(Cb.push(ob(u=_.site,w,M))-1,Cb.push(ob(u,M,A))-1,Cb.push(ob(u,A,S))-1,Cb.push(ob(u,S,w))-1)}}for(i=0;i<g;++i)(o=Eb[i])&&(o.halfedges.length||delete Eb[i])}(u,a,c,f)}this.edges=Cb,this.cells=Eb,Sb=kb=Cb=Eb=null}function Pb(){var t=Zm,n=Km,e=null;function r(r){return new Lb(r.map((function(e,i){var o=[Math.round(t(e,i,r)/Tb)*Tb,Math.round(n(e,i,r)/Tb)*Tb];return o.index=i,o.data=e,o})),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:Gm(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:Gm(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r}function zb(t){return function(){return t}}function jb(t,n,e){this.target=t,this.type=n,this.transform=e}function Bb(t,n,e){this.k=t,this.x=n,this.y=e}Lb.prototype={constructor:Lb,polygons:function(){var t=this.edges;return this.cells.map((function(n){var e=n.halfedges.map((function(e){return lb(n,t[e])}));return e.data=n.site.data,e}))},triangles:function(){var t=[],n=this.edges;return this.cells.forEach((function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a=e.site,c=-1,f=n[i[o-1]],l=f.left===a?f.right:f.left;++c<o;)u=l,l=(f=n[i[c]]).left===a?f.right:f.left,u&&l&&r<u.index&&r<l.index&&Ob(a,u,l)<0&&t.push([a.data,u.data,l.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],l=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach((function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],s=c*c+f*f;s<l&&(l=s,u=a.index)}}))}while(null!==u);return o._found=r,null==e||l<=e*e?i.site:null}},Bb.prototype={constructor:Bb,scale:function(t){return 1===t?this:new Bb(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Bb(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Ub=new Bb(1,0,0);function Db(t){return t.__zoom||Ub}function Ib(){kt.stopImmediatePropagation()}function qb(){kt.preventDefault(),kt.stopImmediatePropagation()}function Fb(){return!kt.button}function Hb(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Yb(){return this.__zoom||Ub}function Wb(){return-kt.deltaY*(kt.deltaMode?120:1)/500}function Xb(){return"ontouchstart"in this}function $b(){var t,n,e=Fb,r=Hb,i=Wb,o=Xb,u=0,a=1/0,c=-a,f=a,l=c,s=f,h=250,p=kr,d=[],v=ht("start","zoom","end"),g=500,_=0;function y(t){t.property("__zoom",Yb).on("wheel.zoom",E).on("mousedown.zoom",k).on("dblclick.zoom",C).filter(o).on("touchstart.zoom",T).on("touchmove.zoom",N).on("touchend.zoom touchcancel.zoom",O).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function m(t,n){return(n=Math.max(u,Math.min(a,n)))===t.k?t:new Bb(n,t.x,t.y)}function b(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Bb(t.k,r,i)}function x(t,n){var e=t.invertX(n[0][0])-c,r=t.invertX(n[1][0])-f,i=t.invertY(n[0][1])-l,o=t.invertY(n[1][1])-s;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function w(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function M(t,n,e){t.on("start.zoom",(function(){A(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){A(this,arguments).end()})).tween("zoom",(function(){var t=this,i=arguments,o=A(t,i),u=r.apply(t,i),a=e||w(u),c=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),f=t.__zoom,l="function"==typeof n?n.apply(t,i):n,s=p(f.invert(a).concat(c/f.k),l.invert(a).concat(c/l.k));return function(t){if(1===t)t=l;else{var n=s(t),e=c/n[2];t=new Bb(e,a[0]-n[0]*e,a[1]-n[1]*e)}o.zoom(null,t)}}))}function A(t,n){for(var e,r=0,i=d.length;r<i;++r)if((e=d[r]).that===t)return e;return new S(t,n)}function S(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=r.apply(t,n)}function E(){if(e.apply(this,arguments)){var t=A(this,arguments),n=this.__zoom,r=Math.max(u,Math.min(a,n.k*Math.pow(2,i.apply(this,arguments)))),o=jt(this);if(t.wheel)t.mouse[0][0]===o[0]&&t.mouse[0][1]===o[1]||(t.mouse[1]=n.invert(t.mouse[0]=o)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[o,n.invert(o)],si(this),t.start()}qb(),t.wheel=setTimeout(c,150),t.zoom("mouse",x(b(m(n,r),t.mouse[0],t.mouse[1]),t.extent))}function c(){t.wheel=null,t.end()}}function k(){if(!n&&e.apply(this,arguments)){var t=A(this,arguments),r=Rn(kt.view).on("mousemove.zoom",a,!0).on("mouseup.zoom",c,!0),i=jt(this),o=kt.clientX,u=kt.clientY;Un(kt.view),Ib(),t.mouse=[i,this.__zoom.invert(i)],si(this),t.start()}function a(){if(qb(),!t.moved){var n=kt.clientX-o,e=kt.clientY-u;t.moved=n*n+e*e>_}t.zoom("mouse",x(b(t.that.__zoom,t.mouse[0]=jt(t.that),t.mouse[1]),t.extent))}function c(){r.on("mousemove.zoom mouseup.zoom",null),Dn(kt.view,t.moved),qb(),t.end()}}function C(){if(e.apply(this,arguments)){var t=this.__zoom,n=jt(this),i=t.invert(n),o=t.k*(kt.shiftKey?.5:2),u=x(b(m(t,o),n,i),r.apply(this,arguments));qb(),h>0?Rn(this).transition().duration(h).call(M,u,n):Rn(this).call(y.transform,u)}}function T(){if(e.apply(this,arguments)){var n,r,i,o,u=A(this,arguments),a=kt.changedTouches,c=a.length;for(Ib(),r=0;r<c;++r)o=[o=Pn(this,a,(i=a[r]).identifier),this.__zoom.invert(o),i.identifier],u.touch0?u.touch1||(u.touch1=o):(u.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!u.touch1))return u.end(),void((o=Rn(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout((function(){t=null}),g),si(this),u.start())}}function N(){var n,e,r,i,o=A(this,arguments),u=kt.changedTouches,a=u.length;for(qb(),t&&(t=clearTimeout(t)),n=0;n<a;++n)r=Pn(this,u,(e=u[n]).identifier),o.touch0&&o.touch0[2]===e.identifier?o.touch0[0]=r:o.touch1&&o.touch1[2]===e.identifier&&(o.touch1[0]=r);if(e=o.that.__zoom,o.touch1){var c=o.touch0[0],f=o.touch0[1],l=o.touch1[0],s=o.touch1[1],h=(h=l[0]-c[0])*h+(h=l[1]-c[1])*h,p=(p=s[0]-f[0])*p+(p=s[1]-f[1])*p;e=m(e,Math.sqrt(h/p)),r=[(c[0]+l[0])/2,(c[1]+l[1])/2],i=[(f[0]+s[0])/2,(f[1]+s[1])/2]}else{if(!o.touch0)return;r=o.touch0[0],i=o.touch0[1]}o.zoom("touch",x(b(e,r,i),o.extent))}function O(){var t,e,r=A(this,arguments),i=kt.changedTouches,o=i.length;for(Ib(),n&&clearTimeout(n),n=setTimeout((function(){n=null}),g),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return y.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Yb),t!==e?M(t,n):e.interrupt().each((function(){A(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},y.scaleBy=function(t,n){y.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}))},y.scaleTo=function(t,n){y.transform(t,(function(){var t=r.apply(this,arguments),e=this.__zoom,i=w(t),o=e.invert(i),u="function"==typeof n?n.apply(this,arguments):n;return x(b(m(e,u),i,o),t)}))},y.translateBy=function(t,n,e){y.transform(t,(function(){return x(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),r.apply(this,arguments))}))},y.translateTo=function(t,n,e){y.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,o=w(t);return x(Ub.translate(o[0],o[1]).scale(i.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t)}))},S.prototype={start:function(){return 1==++this.active&&(this.index=d.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(d.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Lt(new jb(y,t,this.that.__zoom),v.apply,v,[t,this.that,this.args])}},y.wheelDelta=function(t){return arguments.length?(i="function"==typeof t?t:zb(+t),y):i},y.filter=function(t){return arguments.length?(e="function"==typeof t?t:zb(!!t),y):e},y.touchable=function(t){return arguments.length?(o="function"==typeof t?t:zb(!!t),y):o},y.extent=function(t){return arguments.length?(r="function"==typeof t?t:zb([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):r},y.scaleExtent=function(t){return arguments.length?(u=+t[0],a=+t[1],y):[u,a]},y.translateExtent=function(t){return arguments.length?(c=+t[0][0],f=+t[1][0],l=+t[0][1],s=+t[1][1],y):[[c,l],[f,s]]},y.duration=function(t){return arguments.length?(h=+t,y):h},y.interpolate=function(t){return arguments.length?(p=t,y):p},y.on=function(){var t=v.on.apply(v,arguments);return t===v?y:t},y.clickDistance=function(t){return arguments.length?(_=(t=+t)*t,y):Math.sqrt(_)},y}Db.prototype=Bb.prototype},486:function(t,n,e){var r;t=e.nmd(t),function(){var i,o="Expected a function",u="__lodash_hash_undefined__",a="__lodash_placeholder__",c=32,f=128,l=1/0,s=9007199254740991,h=NaN,p=4294967295,d=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",c],["partialRight",64],["rearg",256]],v="[object Arguments]",g="[object Array]",_="[object Boolean]",y="[object Date]",m="[object Error]",b="[object Function]",x="[object GeneratorFunction]",w="[object Map]",M="[object Number]",A="[object Object]",S="[object Promise]",E="[object RegExp]",k="[object Set]",C="[object String]",T="[object Symbol]",N="[object WeakMap]",O="[object ArrayBuffer]",R="[object DataView]",L="[object Float32Array]",P="[object Float64Array]",z="[object Int8Array]",j="[object Int16Array]",B="[object Int32Array]",U="[object Uint8Array]",D="[object Uint8ClampedArray]",I="[object Uint16Array]",q="[object Uint32Array]",F=/\b__p \+= '';/g,H=/\b(__p \+=) '' \+/g,Y=/(__e\(.*?\)|\b__t\)) \+\n'';/g,W=/&(?:amp|lt|gt|quot|#39);/g,X=/[&<>"']/g,$=RegExp(W.source),V=RegExp(X.source),G=/<%-([\s\S]+?)%>/g,Z=/<%([\s\S]+?)%>/g,K=/<%=([\s\S]+?)%>/g,J=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,nt=/[\\^$.*+?()[\]{}|]/g,et=RegExp(nt.source),rt=/^\s+|\s+$/g,it=/^\s+/,ot=/\s+$/,ut=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,ct=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,lt=/\\(\\)?/g,st=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,vt=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,_t=/^(?:0|[1-9]\d*)$/,yt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,mt=/($^)/,bt=/['\n\r\u2028\u2029\\]/g,xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",wt="a-z\\xdf-\\xf6\\xf8-\\xff",Mt="A-Z\\xc0-\\xd6\\xd8-\\xde",At="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",St="["+At+"]",Et="["+xt+"]",kt="\\d+",Ct="["+wt+"]",Tt="[^\\ud800-\\udfff"+At+kt+"\\u2700-\\u27bf"+wt+Mt+"]",Nt="\\ud83c[\\udffb-\\udfff]",Ot="[^\\ud800-\\udfff]",Rt="(?:\\ud83c[\\udde6-\\uddff]){2}",Lt="[\\ud800-\\udbff][\\udc00-\\udfff]",Pt="["+Mt+"]",zt="(?:"+Ct+"|"+Tt+")",jt="(?:"+Pt+"|"+Tt+")",Bt="(?:['’](?:d|ll|m|re|s|t|ve))?",Ut="(?:['’](?:D|LL|M|RE|S|T|VE))?",Dt="(?:"+Et+"|"+Nt+")?",It="[\\ufe0e\\ufe0f]?",qt=It+Dt+"(?:\\u200d(?:"+[Ot,Rt,Lt].join("|")+")"+It+Dt+")*",Ft="(?:"+["[\\u2700-\\u27bf]",Rt,Lt].join("|")+")"+qt,Ht="(?:"+[Ot+Et+"?",Et,Rt,Lt,"[\\ud800-\\udfff]"].join("|")+")",Yt=RegExp("['’]","g"),Wt=RegExp(Et,"g"),Xt=RegExp(Nt+"(?="+Nt+")|"+Ht+qt,"g"),$t=RegExp([Pt+"?"+Ct+"+"+Bt+"(?="+[St,Pt,"$"].join("|")+")",jt+"+"+Ut+"(?="+[St,Pt+zt,"$"].join("|")+")",Pt+"?"+zt+"+"+Bt,Pt+"+"+Ut,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",kt,Ft].join("|"),"g"),Vt=RegExp("[\\u200d\\ud800-\\udfff"+xt+"\\ufe0e\\ufe0f]"),Gt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Zt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Kt=-1,Jt={};Jt[L]=Jt[P]=Jt[z]=Jt[j]=Jt[B]=Jt[U]=Jt[D]=Jt[I]=Jt[q]=!0,Jt[v]=Jt[g]=Jt[O]=Jt[_]=Jt[R]=Jt[y]=Jt[m]=Jt[b]=Jt[w]=Jt[M]=Jt[A]=Jt[E]=Jt[k]=Jt[C]=Jt[N]=!1;var Qt={};Qt[v]=Qt[g]=Qt[O]=Qt[R]=Qt[_]=Qt[y]=Qt[L]=Qt[P]=Qt[z]=Qt[j]=Qt[B]=Qt[w]=Qt[M]=Qt[A]=Qt[E]=Qt[k]=Qt[C]=Qt[T]=Qt[U]=Qt[D]=Qt[I]=Qt[q]=!0,Qt[m]=Qt[b]=Qt[N]=!1;var tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},nn=parseFloat,en=parseInt,rn="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,on="object"==typeof self&&self&&self.Object===Object&&self,un=rn||on||Function("return this")(),an=n&&!n.nodeType&&n,cn=an&&t&&!t.nodeType&&t,fn=cn&&cn.exports===an,ln=fn&&rn.process,sn=function(){try{return cn&&cn.require&&cn.require("util").types||ln&&ln.binding&&ln.binding("util")}catch(t){}}(),hn=sn&&sn.isArrayBuffer,pn=sn&&sn.isDate,dn=sn&&sn.isMap,vn=sn&&sn.isRegExp,gn=sn&&sn.isSet,_n=sn&&sn.isTypedArray;function yn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function mn(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];n(r,u,e(u),t)}return r}function bn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function xn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function wn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Mn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}function An(t,n){return!(null==t||!t.length)&&Pn(t,n,0)>-1}function Sn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function En(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function kn(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function Cn(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function Tn(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function Nn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var On=Un("length");function Rn(t,n,e){var r;return e(t,(function(t,e,i){if(n(t,e,i))return r=e,!1})),r}function Ln(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function Pn(t,n,e){return n==n?function(t,n,e){for(var r=e-1,i=t.length;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):Ln(t,jn,e)}function zn(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function jn(t){return t!=t}function Bn(t,n){var e=null==t?0:t.length;return e?qn(t,n)/e:h}function Un(t){return function(n){return null==n?i:n[t]}}function Dn(t){return function(n){return null==t?i:t[n]}}function In(t,n,e,r,i){return i(t,(function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)})),e}function qn(t,n){for(var e,r=-1,o=t.length;++r<o;){var u=n(t[r]);u!==i&&(e=e===i?u:e+u)}return e}function Fn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function Hn(t){return function(n){return t(n)}}function Yn(t,n){return En(n,(function(n){return t[n]}))}function Wn(t,n){return t.has(n)}function Xn(t,n){for(var e=-1,r=t.length;++e<r&&Pn(n,t[e],0)>-1;);return e}function $n(t,n){for(var e=t.length;e--&&Pn(n,t[e],0)>-1;);return e}function Vn(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}var Gn=Dn({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Zn=Dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Kn(t){return"\\"+tn[t]}function Jn(t){return Vt.test(t)}function Qn(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function te(t,n){return function(e){return t(n(e))}}function ne(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e];u!==n&&u!==a||(t[e]=a,o[i++]=e)}return o}function ee(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function re(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function ie(t){return Jn(t)?function(t){for(var n=Xt.lastIndex=0;Xt.test(t);)++n;return n}(t):On(t)}function oe(t){return Jn(t)?function(t){return t.match(Xt)||[]}(t):function(t){return t.split("")}(t)}var ue=Dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ae=function t(n){var e,r=(n=null==n?un:ae.defaults(un.Object(),n,ae.pick(un,Zt))).Array,xt=n.Date,wt=n.Error,Mt=n.Function,At=n.Math,St=n.Object,Et=n.RegExp,kt=n.String,Ct=n.TypeError,Tt=r.prototype,Nt=Mt.prototype,Ot=St.prototype,Rt=n["__core-js_shared__"],Lt=Nt.toString,Pt=Ot.hasOwnProperty,zt=0,jt=(e=/[^.]+$/.exec(Rt&&Rt.keys&&Rt.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Bt=Ot.toString,Ut=Lt.call(St),Dt=un._,It=Et("^"+Lt.call(Pt).replace(nt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),qt=fn?n.Buffer:i,Ft=n.Symbol,Ht=n.Uint8Array,Xt=qt?qt.allocUnsafe:i,Vt=te(St.getPrototypeOf,St),tn=St.create,rn=Ot.propertyIsEnumerable,on=Tt.splice,an=Ft?Ft.isConcatSpreadable:i,cn=Ft?Ft.iterator:i,ln=Ft?Ft.toStringTag:i,sn=function(){try{var t=co(St,"defineProperty");return t({},"",{}),t}catch(t){}}(),On=n.clearTimeout!==un.clearTimeout&&n.clearTimeout,Dn=xt&&xt.now!==un.Date.now&&xt.now,ce=n.setTimeout!==un.setTimeout&&n.setTimeout,fe=At.ceil,le=At.floor,se=St.getOwnPropertySymbols,he=qt?qt.isBuffer:i,pe=n.isFinite,de=Tt.join,ve=te(St.keys,St),ge=At.max,_e=At.min,ye=xt.now,me=n.parseInt,be=At.random,xe=Tt.reverse,we=co(n,"DataView"),Me=co(n,"Map"),Ae=co(n,"Promise"),Se=co(n,"Set"),Ee=co(n,"WeakMap"),ke=co(St,"create"),Ce=Ee&&new Ee,Te={},Ne=Uo(we),Oe=Uo(Me),Re=Uo(Ae),Le=Uo(Se),Pe=Uo(Ee),ze=Ft?Ft.prototype:i,je=ze?ze.valueOf:i,Be=ze?ze.toString:i;function Ue(t){if(na(t)&&!Yu(t)&&!(t instanceof Fe)){if(t instanceof qe)return t;if(Pt.call(t,"__wrapped__"))return Do(t)}return new qe(t)}var De=function(){function t(){}return function(n){if(!ta(n))return{};if(tn)return tn(n);t.prototype=n;var e=new t;return t.prototype=i,e}}();function Ie(){}function qe(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=i}function Fe(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function He(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function We(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Xe(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new We;++n<e;)this.add(t[n])}function $e(t){var n=this.__data__=new Ye(t);this.size=n.size}function Ve(t,n){var e=Yu(t),r=!e&&Hu(t),i=!e&&!r&&Vu(t),o=!e&&!r&&!i&&fa(t),u=e||r||i||o,a=u?Fn(t.length,kt):[],c=a.length;for(var f in t)!n&&!Pt.call(t,f)||u&&("length"==f||i&&("offset"==f||"parent"==f)||o&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||go(f,c))||a.push(f);return a}function Ge(t){var n=t.length;return n?t[Wr(0,n-1)]:i}function Ze(t,n){return Lo(Ei(t),or(n,0,t.length))}function Ke(t){return Lo(Ei(t))}function Je(t,n,e){(e!==i&&!Iu(t[n],e)||e===i&&!(n in t))&&rr(t,n,e)}function Qe(t,n,e){var r=t[n];Pt.call(t,n)&&Iu(r,e)&&(e!==i||n in t)||rr(t,n,e)}function tr(t,n){for(var e=t.length;e--;)if(Iu(t[e][0],n))return e;return-1}function nr(t,n,e,r){return lr(t,(function(t,i,o){n(r,t,e(t),o)})),r}function er(t,n){return t&&ki(n,Oa(n),t)}function rr(t,n,e){"__proto__"==n&&sn?sn(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function ir(t,n){for(var e=-1,o=n.length,u=r(o),a=null==t;++e<o;)u[e]=a?i:Ea(t,n[e]);return u}function or(t,n,e){return t==t&&(e!==i&&(t=t<=e?t:e),n!==i&&(t=t>=n?t:n)),t}function ur(t,n,e,r,o,u){var a,c=1&n,f=2&n,l=4&n;if(e&&(a=o?e(t,r,o,u):e(t)),a!==i)return a;if(!ta(t))return t;var s=Yu(t);if(s){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&Pt.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!c)return Ei(t,a)}else{var h=so(t),p=h==b||h==x;if(Vu(t))return bi(t,c);if(h==A||h==v||p&&!o){if(a=f||p?{}:po(t),!c)return f?function(t,n){return ki(t,lo(t),n)}(t,function(t,n){return t&&ki(n,Ra(n),t)}(a,t)):function(t,n){return ki(t,fo(t),n)}(t,er(a,t))}else{if(!Qt[h])return o?t:{};a=function(t,n,e){var r,i=t.constructor;switch(n){case O:return xi(t);case _:case y:return new i(+t);case R:return function(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case L:case P:case z:case j:case B:case U:case D:case I:case q:return wi(t,e);case w:return new i;case M:case C:return new i(t);case E:return function(t){var n=new t.constructor(t.source,ht.exec(t));return n.lastIndex=t.lastIndex,n}(t);case k:return new i;case T:return r=t,je?St(je.call(r)):{}}}(t,h,c)}}u||(u=new $e);var d=u.get(t);if(d)return d;u.set(t,a),ua(t)?t.forEach((function(r){a.add(ur(r,n,e,r,t,u))})):ea(t)&&t.forEach((function(r,i){a.set(i,ur(r,n,e,i,t,u))}));var g=s?i:(l?f?no:to:f?Ra:Oa)(t);return bn(g||t,(function(r,i){g&&(r=t[i=r]),Qe(a,i,ur(r,n,e,i,t,u))})),a}function ar(t,n,e){var r=e.length;if(null==t)return!r;for(t=St(t);r--;){var o=e[r],u=n[o],a=t[o];if(a===i&&!(o in t)||!u(a))return!1}return!0}function cr(t,n,e){if("function"!=typeof t)throw new Ct(o);return To((function(){t.apply(i,e)}),n)}function fr(t,n,e,r){var i=-1,o=An,u=!0,a=t.length,c=[],f=n.length;if(!a)return c;e&&(n=En(n,Hn(e))),r?(o=Sn,u=!1):n.length>=200&&(o=Wn,u=!1,n=new Xe(n));t:for(;++i<a;){var l=t[i],s=null==e?l:e(l);if(l=r||0!==l?l:0,u&&s==s){for(var h=f;h--;)if(n[h]===s)continue t;c.push(l)}else o(n,s,r)||c.push(l)}return c}Ue.templateSettings={escape:G,evaluate:Z,interpolate:K,variable:"",imports:{_:Ue}},Ue.prototype=Ie.prototype,Ue.prototype.constructor=Ue,qe.prototype=De(Ie.prototype),qe.prototype.constructor=qe,Fe.prototype=De(Ie.prototype),Fe.prototype.constructor=Fe,He.prototype.clear=function(){this.__data__=ke?ke(null):{},this.size=0},He.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},He.prototype.get=function(t){var n=this.__data__;if(ke){var e=n[t];return e===u?i:e}return Pt.call(n,t)?n[t]:i},He.prototype.has=function(t){var n=this.__data__;return ke?n[t]!==i:Pt.call(n,t)},He.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=ke&&n===i?u:n,this},Ye.prototype.clear=function(){this.__data__=[],this.size=0},Ye.prototype.delete=function(t){var n=this.__data__,e=tr(n,t);return!(e<0||(e==n.length-1?n.pop():on.call(n,e,1),--this.size,0))},Ye.prototype.get=function(t){var n=this.__data__,e=tr(n,t);return e<0?i:n[e][1]},Ye.prototype.has=function(t){return tr(this.__data__,t)>-1},Ye.prototype.set=function(t,n){var e=this.__data__,r=tr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},We.prototype.clear=function(){this.size=0,this.__data__={hash:new He,map:new(Me||Ye),string:new He}},We.prototype.delete=function(t){var n=uo(this,t).delete(t);return this.size-=n?1:0,n},We.prototype.get=function(t){return uo(this,t).get(t)},We.prototype.has=function(t){return uo(this,t).has(t)},We.prototype.set=function(t,n){var e=uo(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},Xe.prototype.add=Xe.prototype.push=function(t){return this.__data__.set(t,u),this},Xe.prototype.has=function(t){return this.__data__.has(t)},$e.prototype.clear=function(){this.__data__=new Ye,this.size=0},$e.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},$e.prototype.get=function(t){return this.__data__.get(t)},$e.prototype.has=function(t){return this.__data__.has(t)},$e.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ye){var r=e.__data__;if(!Me||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new We(r)}return e.set(t,n),this.size=e.size,this};var lr=Ni(yr),sr=Ni(mr,!0);function hr(t,n){var e=!0;return lr(t,(function(t,r,i){return e=!!n(t,r,i)})),e}function pr(t,n,e){for(var r=-1,o=t.length;++r<o;){var u=t[r],a=n(u);if(null!=a&&(c===i?a==a&&!ca(a):e(a,c)))var c=a,f=u}return f}function dr(t,n){var e=[];return lr(t,(function(t,r,i){n(t,r,i)&&e.push(t)})),e}function vr(t,n,e,r,i){var o=-1,u=t.length;for(e||(e=vo),i||(i=[]);++o<u;){var a=t[o];n>0&&e(a)?n>1?vr(a,n-1,e,r,i):kn(i,a):r||(i[i.length]=a)}return i}var gr=Oi(),_r=Oi(!0);function yr(t,n){return t&&gr(t,n,Oa)}function mr(t,n){return t&&_r(t,n,Oa)}function br(t,n){return Mn(n,(function(n){return Ku(t[n])}))}function xr(t,n){for(var e=0,r=(n=gi(n,t)).length;null!=t&&e<r;)t=t[Bo(n[e++])];return e&&e==r?t:i}function wr(t,n,e){var r=n(t);return Yu(t)?r:kn(r,e(t))}function Mr(t){return null==t?t===i?"[object Undefined]":"[object Null]":ln&&ln in St(t)?function(t){var n=Pt.call(t,ln),e=t[ln];try{t[ln]=i;var r=!0}catch(t){}var o=Bt.call(t);return r&&(n?t[ln]=e:delete t[ln]),o}(t):function(t){return Bt.call(t)}(t)}function Ar(t,n){return t>n}function Sr(t,n){return null!=t&&Pt.call(t,n)}function Er(t,n){return null!=t&&n in St(t)}function kr(t,n,e){for(var o=e?Sn:An,u=t[0].length,a=t.length,c=a,f=r(a),l=1/0,s=[];c--;){var h=t[c];c&&n&&(h=En(h,Hn(n))),l=_e(h.length,l),f[c]=!e&&(n||u>=120&&h.length>=120)?new Xe(c&&h):i}h=t[0];var p=-1,d=f[0];t:for(;++p<u&&s.length<l;){var v=h[p],g=n?n(v):v;if(v=e||0!==v?v:0,!(d?Wn(d,g):o(s,g,e))){for(c=a;--c;){var _=f[c];if(!(_?Wn(_,g):o(t[c],g,e)))continue t}d&&d.push(g),s.push(v)}}return s}function Cr(t,n,e){var r=null==(t=So(t,n=gi(n,t)))?t:t[Bo(Zo(n))];return null==r?i:yn(r,t,e)}function Tr(t){return na(t)&&Mr(t)==v}function Nr(t,n,e,r,o){return t===n||(null==t||null==n||!na(t)&&!na(n)?t!=t&&n!=n:function(t,n,e,r,o,u){var a=Yu(t),c=Yu(n),f=a?g:so(t),l=c?g:so(n),s=(f=f==v?A:f)==A,h=(l=l==v?A:l)==A,p=f==l;if(p&&Vu(t)){if(!Vu(n))return!1;a=!0,s=!1}if(p&&!s)return u||(u=new $e),a||fa(t)?Ji(t,n,e,r,o,u):function(t,n,e,r,i,o,u){switch(e){case R:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case O:return!(t.byteLength!=n.byteLength||!o(new Ht(t),new Ht(n)));case _:case y:case M:return Iu(+t,+n);case m:return t.name==n.name&&t.message==n.message;case E:case C:return t==n+"";case w:var a=Qn;case k:var c=1&r;if(a||(a=ee),t.size!=n.size&&!c)return!1;var f=u.get(t);if(f)return f==n;r|=2,u.set(t,n);var l=Ji(a(t),a(n),r,i,o,u);return u.delete(t),l;case T:if(je)return je.call(t)==je.call(n)}return!1}(t,n,f,e,r,o,u);if(!(1&e)){var d=s&&Pt.call(t,"__wrapped__"),b=h&&Pt.call(n,"__wrapped__");if(d||b){var x=d?t.value():t,S=b?n.value():n;return u||(u=new $e),o(x,S,e,r,u)}}return!!p&&(u||(u=new $e),function(t,n,e,r,o,u){var a=1&e,c=to(t),f=c.length;if(f!=to(n).length&&!a)return!1;for(var l=f;l--;){var s=c[l];if(!(a?s in n:Pt.call(n,s)))return!1}var h=u.get(t),p=u.get(n);if(h&&p)return h==n&&p==t;var d=!0;u.set(t,n),u.set(n,t);for(var v=a;++l<f;){var g=t[s=c[l]],_=n[s];if(r)var y=a?r(_,g,s,n,t,u):r(g,_,s,t,n,u);if(!(y===i?g===_||o(g,_,e,r,u):y)){d=!1;break}v||(v="constructor"==s)}if(d&&!v){var m=t.constructor,b=n.constructor;m==b||!("constructor"in t)||!("constructor"in n)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(d=!1)}return u.delete(t),u.delete(n),d}(t,n,e,r,o,u))}(t,n,e,r,Nr,o))}function Or(t,n,e,r){var o=e.length,u=o,a=!r;if(null==t)return!u;for(t=St(t);o--;){var c=e[o];if(a&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++o<u;){var f=(c=e[o])[0],l=t[f],s=c[1];if(a&&c[2]){if(l===i&&!(f in t))return!1}else{var h=new $e;if(r)var p=r(l,s,f,t,n,h);if(!(p===i?Nr(s,l,3,r,h):p))return!1}}return!0}function Rr(t){return!(!ta(t)||(n=t,jt&&jt in n))&&(Ku(t)?It:vt).test(Uo(t));var n}function Lr(t){return"function"==typeof t?t:null==t?rc:"object"==typeof t?Yu(t)?Ur(t[0],t[1]):Br(t):hc(t)}function Pr(t){if(!xo(t))return ve(t);var n=[];for(var e in St(t))Pt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function zr(t,n){return t<n}function jr(t,n){var e=-1,i=Xu(t)?r(t.length):[];return lr(t,(function(t,r,o){i[++e]=n(t,r,o)})),i}function Br(t){var n=ao(t);return 1==n.length&&n[0][2]?Mo(n[0][0],n[0][1]):function(e){return e===t||Or(e,t,n)}}function Ur(t,n){return yo(t)&&wo(n)?Mo(Bo(t),n):function(e){var r=Ea(e,t);return r===i&&r===n?ka(e,t):Nr(n,r,3)}}function Dr(t,n,e,r,o){t!==n&&gr(n,(function(u,a){if(o||(o=new $e),ta(u))!function(t,n,e,r,o,u,a){var c=ko(t,e),f=ko(n,e),l=a.get(f);if(l)Je(t,e,l);else{var s=u?u(c,f,e+"",t,n,a):i,h=s===i;if(h){var p=Yu(f),d=!p&&Vu(f),v=!p&&!d&&fa(f);s=f,p||d||v?Yu(c)?s=c:$u(c)?s=Ei(c):d?(h=!1,s=bi(f,!0)):v?(h=!1,s=wi(f,!0)):s=[]:ia(f)||Hu(f)?(s=c,Hu(c)?s=_a(c):ta(c)&&!Ku(c)||(s=po(f))):h=!1}h&&(a.set(f,s),o(s,f,r,u,a),a.delete(f)),Je(t,e,s)}}(t,n,a,e,Dr,r,o);else{var c=r?r(ko(t,a),u,a+"",t,n,o):i;c===i&&(c=u),Je(t,a,c)}}),Ra)}function Ir(t,n){var e=t.length;if(e)return go(n+=n<0?e:0,e)?t[n]:i}function qr(t,n,e){n=n.length?En(n,(function(t){return Yu(t)?function(n){return xr(n,1===t.length?t[0]:t)}:t})):[rc];var r=-1;return n=En(n,Hn(oo())),function(t,n){var r=t.length;for(t.sort((function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,u=i.length,a=e.length;++r<u;){var c=Mi(i[r],o[r]);if(c)return r>=a?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}));r--;)t[r]=t[r].value;return t}(jr(t,(function(t,e,i){return{criteria:En(n,(function(n){return n(t)})),index:++r,value:t}})))}function Fr(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var u=n[r],a=xr(t,u);e(a,u)&&Zr(o,gi(u,t),a)}return o}function Hr(t,n,e,r){var i=r?zn:Pn,o=-1,u=n.length,a=t;for(t===n&&(n=Ei(n)),e&&(a=En(t,Hn(e)));++o<u;)for(var c=0,f=n[o],l=e?e(f):f;(c=i(a,l,c,r))>-1;)a!==t&&on.call(a,c,1),on.call(t,c,1);return t}function Yr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;go(i)?on.call(t,i,1):ci(t,i)}}return t}function Wr(t,n){return t+le(be()*(n-t+1))}function Xr(t,n){var e="";if(!t||n<1||n>s)return e;do{n%2&&(e+=t),(n=le(n/2))&&(t+=t)}while(n);return e}function $r(t,n){return No(Ao(t,n,rc),t+"")}function Vr(t){return Ge(Ia(t))}function Gr(t,n){var e=Ia(t);return Lo(e,or(n,0,e.length))}function Zr(t,n,e,r){if(!ta(t))return t;for(var o=-1,u=(n=gi(n,t)).length,a=u-1,c=t;null!=c&&++o<u;){var f=Bo(n[o]),l=e;if("__proto__"===f||"constructor"===f||"prototype"===f)return t;if(o!=a){var s=c[f];(l=r?r(s,f,c):i)===i&&(l=ta(s)?s:go(n[o+1])?[]:{})}Qe(c,f,l),c=c[f]}return t}var Kr=Ce?function(t,n){return Ce.set(t,n),t}:rc,Jr=sn?function(t,n){return sn(t,"toString",{configurable:!0,enumerable:!1,value:tc(n),writable:!0})}:rc;function Qr(t){return Lo(Ia(t))}function ti(t,n,e){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+n];return u}function ni(t,n){var e;return lr(t,(function(t,r,i){return!(e=n(t,r,i))})),!!e}function ei(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!ca(u)&&(e?u<=n:u<n)?r=o+1:i=o}return i}return ri(t,n,rc,e)}function ri(t,n,e,r){var o=0,u=null==t?0:t.length;if(0===u)return 0;for(var a=(n=e(n))!=n,c=null===n,f=ca(n),l=n===i;o<u;){var s=le((o+u)/2),h=e(t[s]),p=h!==i,d=null===h,v=h==h,g=ca(h);if(a)var _=r||v;else _=l?v&&(r||p):c?v&&p&&(r||!d):f?v&&p&&!d&&(r||!g):!d&&!g&&(r?h<=n:h<n);_?o=s+1:u=s}return _e(u,4294967294)}function ii(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var u=t[e],a=n?n(u):u;if(!e||!Iu(a,c)){var c=a;o[i++]=0===u?0:u}}return o}function oi(t){return"number"==typeof t?t:ca(t)?h:+t}function ui(t){if("string"==typeof t)return t;if(Yu(t))return En(t,ui)+"";if(ca(t))return Be?Be.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ai(t,n,e){var r=-1,i=An,o=t.length,u=!0,a=[],c=a;if(e)u=!1,i=Sn;else if(o>=200){var f=n?null:Xi(t);if(f)return ee(f);u=!1,i=Wn,c=new Xe}else c=n?[]:a;t:for(;++r<o;){var l=t[r],s=n?n(l):l;if(l=e||0!==l?l:0,u&&s==s){for(var h=c.length;h--;)if(c[h]===s)continue t;n&&c.push(s),a.push(l)}else i(c,s,e)||(c!==a&&c.push(s),a.push(l))}return a}function ci(t,n){return null==(t=So(t,n=gi(n,t)))||delete t[Bo(Zo(n))]}function fi(t,n,e,r){return Zr(t,n,e(xr(t,n)),r)}function li(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?ti(t,r?0:o,r?o+1:i):ti(t,r?o+1:0,r?i:o)}function si(t,n){var e=t;return e instanceof Fe&&(e=e.value()),Cn(n,(function(t,n){return n.func.apply(n.thisArg,kn([t],n.args))}),e)}function hi(t,n,e){var i=t.length;if(i<2)return i?ai(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],c=-1;++c<i;)c!=o&&(u[o]=fr(u[o]||a,t[c],n,e));return ai(vr(u,1),n,e)}function pi(t,n,e){for(var r=-1,o=t.length,u=n.length,a={};++r<o;){var c=r<u?n[r]:i;e(a,t[r],c)}return a}function di(t){return $u(t)?t:[]}function vi(t){return"function"==typeof t?t:rc}function gi(t,n){return Yu(t)?t:yo(t,n)?[t]:jo(ya(t))}var _i=$r;function yi(t,n,e){var r=t.length;return e=e===i?r:e,!n&&e>=r?t:ti(t,n,e)}var mi=On||function(t){return un.clearTimeout(t)};function bi(t,n){if(n)return t.slice();var e=t.length,r=Xt?Xt(e):new t.constructor(e);return t.copy(r),r}function xi(t){var n=new t.constructor(t.byteLength);return new Ht(n).set(new Ht(t)),n}function wi(t,n){var e=n?xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Mi(t,n){if(t!==n){var e=t!==i,r=null===t,o=t==t,u=ca(t),a=n!==i,c=null===n,f=n==n,l=ca(n);if(!c&&!l&&!u&&t>n||u&&a&&f&&!c&&!l||r&&a&&f||!e&&f||!o)return 1;if(!r&&!u&&!l&&t<n||l&&e&&o&&!r&&!u||c&&e&&o||!a&&o||!f)return-1}return 0}function Ai(t,n,e,i){for(var o=-1,u=t.length,a=e.length,c=-1,f=n.length,l=ge(u-a,0),s=r(f+l),h=!i;++c<f;)s[c]=n[c];for(;++o<a;)(h||o<u)&&(s[e[o]]=t[o]);for(;l--;)s[c++]=t[o++];return s}function Si(t,n,e,i){for(var o=-1,u=t.length,a=-1,c=e.length,f=-1,l=n.length,s=ge(u-c,0),h=r(s+l),p=!i;++o<s;)h[o]=t[o];for(var d=o;++f<l;)h[d+f]=n[f];for(;++a<c;)(p||o<u)&&(h[d+e[a]]=t[o++]);return h}function Ei(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function ki(t,n,e,r){var o=!e;e||(e={});for(var u=-1,a=n.length;++u<a;){var c=n[u],f=r?r(e[c],t[c],c,e,t):i;f===i&&(f=t[c]),o?rr(e,c,f):Qe(e,c,f)}return e}function Ci(t,n){return function(e,r){var i=Yu(e)?mn:nr,o=n?n():{};return i(e,t,oo(r,2),o)}}function Ti(t){return $r((function(n,e){var r=-1,o=e.length,u=o>1?e[o-1]:i,a=o>2?e[2]:i;for(u=t.length>3&&"function"==typeof u?(o--,u):i,a&&_o(e[0],e[1],a)&&(u=o<3?i:u,o=1),n=St(n);++r<o;){var c=e[r];c&&t(n,c,r,u)}return n}))}function Ni(t,n){return function(e,r){if(null==e)return e;if(!Xu(e))return t(e,r);for(var i=e.length,o=n?i:-1,u=St(e);(n?o--:++o<i)&&!1!==r(u[o],o,u););return e}}function Oi(t){return function(n,e,r){for(var i=-1,o=St(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}function Ri(t){return function(n){var e=Jn(n=ya(n))?oe(n):i,r=e?e[0]:n.charAt(0),o=e?yi(e,1).join(""):n.slice(1);return r[t]()+o}}function Li(t){return function(n){return Cn(Ka(Ha(n).replace(Yt,"")),t,"")}}function Pi(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=De(t.prototype),r=t.apply(e,n);return ta(r)?r:e}}function zi(t){return function(n,e,r){var o=St(n);if(!Xu(n)){var u=oo(e,3);n=Oa(n),e=function(t){return u(o[t],t,o)}}var a=t(n,e,r);return a>-1?o[u?n[a]:a]:i}}function ji(t){return Qi((function(n){var e=n.length,r=e,u=qe.prototype.thru;for(t&&n.reverse();r--;){var a=n[r];if("function"!=typeof a)throw new Ct(o);if(u&&!c&&"wrapper"==ro(a))var c=new qe([],!0)}for(r=c?r:e;++r<e;){var f=ro(a=n[r]),l="wrapper"==f?eo(a):i;c=l&&mo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?c[ro(l[0])].apply(c,l[3]):1==a.length&&mo(a)?c[f]():c.thru(a)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Yu(r))return c.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}}))}function Bi(t,n,e,o,u,a,c,l,s,h){var p=n&f,d=1&n,v=2&n,g=24&n,_=512&n,y=v?i:Pi(t);return function i(){for(var f=arguments.length,m=r(f),b=f;b--;)m[b]=arguments[b];if(g)var x=io(i),w=Vn(m,x);if(o&&(m=Ai(m,o,u,g)),a&&(m=Si(m,a,c,g)),f-=w,g&&f<h){var M=ne(m,x);return Yi(t,n,Bi,i.placeholder,e,m,M,l,s,h-f)}var A=d?e:this,S=v?A[t]:t;return f=m.length,l?m=Eo(m,l):_&&f>1&&m.reverse(),p&&s<f&&(m.length=s),this&&this!==un&&this instanceof i&&(S=y||Pi(S)),S.apply(A,m)}}function Ui(t,n){return function(e,r){return function(t,n,e,r){return yr(t,(function(t,i,o){n(r,e(t),i,o)})),r}(e,t,n(r),{})}}function Di(t,n){return function(e,r){var o;if(e===i&&r===i)return n;if(e!==i&&(o=e),r!==i){if(o===i)return r;"string"==typeof e||"string"==typeof r?(e=ui(e),r=ui(r)):(e=oi(e),r=oi(r)),o=t(e,r)}return o}}function Ii(t){return Qi((function(n){return n=En(n,Hn(oo())),$r((function(e){var r=this;return t(n,(function(t){return yn(t,r,e)}))}))}))}function qi(t,n){var e=(n=n===i?" ":ui(n)).length;if(e<2)return e?Xr(n,t):n;var r=Xr(n,fe(t/ie(n)));return Jn(n)?yi(oe(r),0,t).join(""):r.slice(0,t)}function Fi(t){return function(n,e,o){return o&&"number"!=typeof o&&_o(n,e,o)&&(e=o=i),n=pa(n),e===i?(e=n,n=0):e=pa(e),function(t,n,e,i){for(var o=-1,u=ge(fe((n-t)/(e||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=e;return a}(n,e,o=o===i?n<e?1:-1:pa(o),t)}}function Hi(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=ga(n),e=ga(e)),t(n,e)}}function Yi(t,n,e,r,o,u,a,f,l,s){var h=8&n;n|=h?c:64,4&(n&=~(h?64:c))||(n&=-4);var p=[t,n,o,h?u:i,h?a:i,h?i:u,h?i:a,f,l,s],d=e.apply(i,p);return mo(t)&&Co(d,p),d.placeholder=r,Oo(d,t,n)}function Wi(t){var n=At[t];return function(t,e){if(t=ga(t),(e=null==e?0:_e(da(e),292))&&pe(t)){var r=(ya(t)+"e").split("e");return+((r=(ya(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Xi=Se&&1/ee(new Se([,-0]))[1]==l?function(t){return new Se(t)}:cc;function $i(t){return function(n){var e=so(n);return e==w?Qn(n):e==k?re(n):function(t,n){return En(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function Vi(t,n,e,u,l,s,h,p){var d=2&n;if(!d&&"function"!=typeof t)throw new Ct(o);var v=u?u.length:0;if(v||(n&=-97,u=l=i),h=h===i?h:ge(da(h),0),p=p===i?p:da(p),v-=l?l.length:0,64&n){var g=u,_=l;u=l=i}var y=d?i:eo(t),m=[t,n,e,u,l,g,_,s,h,p];if(y&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<131,u=r==f&&8==e||r==f&&256==e&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!o&&!u)return t;1&r&&(t[2]=n[2],i|=1&e?0:4);var c=n[3];if(c){var l=t[3];t[3]=l?Ai(l,c,n[4]):c,t[4]=l?ne(t[3],a):n[4]}(c=n[5])&&(l=t[5],t[5]=l?Si(l,c,n[6]):c,t[6]=l?ne(t[5],a):n[6]),(c=n[7])&&(t[7]=c),r&f&&(t[8]=null==t[8]?n[8]:_e(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(m,y),t=m[0],n=m[1],e=m[2],u=m[3],l=m[4],!(p=m[9]=m[9]===i?d?0:t.length:ge(m[9]-v,0))&&24&n&&(n&=-25),n&&1!=n)b=8==n||16==n?function(t,n,e){var o=Pi(t);return function u(){for(var a=arguments.length,c=r(a),f=a,l=io(u);f--;)c[f]=arguments[f];var s=a<3&&c[0]!==l&&c[a-1]!==l?[]:ne(c,l);return(a-=s.length)<e?Yi(t,n,Bi,u.placeholder,i,c,s,i,i,e-a):yn(this&&this!==un&&this instanceof u?o:t,this,c)}}(t,n,p):n!=c&&33!=n||l.length?Bi.apply(i,m):function(t,n,e,i){var o=1&n,u=Pi(t);return function n(){for(var a=-1,c=arguments.length,f=-1,l=i.length,s=r(l+c),h=this&&this!==un&&this instanceof n?u:t;++f<l;)s[f]=i[f];for(;c--;)s[f++]=arguments[++a];return yn(h,o?e:this,s)}}(t,n,e,u);else var b=function(t,n,e){var r=1&n,i=Pi(t);return function n(){return(this&&this!==un&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return Oo((y?Kr:Co)(b,m),t,n)}function Gi(t,n,e,r){return t===i||Iu(t,Ot[e])&&!Pt.call(r,e)?n:t}function Zi(t,n,e,r,o,u){return ta(t)&&ta(n)&&(u.set(n,t),Dr(t,n,i,Zi,u),u.delete(n)),t}function Ki(t){return ia(t)?i:t}function Ji(t,n,e,r,o,u){var a=1&e,c=t.length,f=n.length;if(c!=f&&!(a&&f>c))return!1;var l=u.get(t),s=u.get(n);if(l&&s)return l==n&&s==t;var h=-1,p=!0,d=2&e?new Xe:i;for(u.set(t,n),u.set(n,t);++h<c;){var v=t[h],g=n[h];if(r)var _=a?r(g,v,h,n,t,u):r(v,g,h,t,n,u);if(_!==i){if(_)continue;p=!1;break}if(d){if(!Nn(n,(function(t,n){if(!Wn(d,n)&&(v===t||o(v,t,e,r,u)))return d.push(n)}))){p=!1;break}}else if(v!==g&&!o(v,g,e,r,u)){p=!1;break}}return u.delete(t),u.delete(n),p}function Qi(t){return No(Ao(t,i,Wo),t+"")}function to(t){return wr(t,Oa,fo)}function no(t){return wr(t,Ra,lo)}var eo=Ce?function(t){return Ce.get(t)}:cc;function ro(t){for(var n=t.name+"",e=Te[n],r=Pt.call(Te,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function io(t){return(Pt.call(Ue,"placeholder")?Ue:t).placeholder}function oo(){var t=Ue.iteratee||ic;return t=t===ic?Lr:t,arguments.length?t(arguments[0],arguments[1]):t}function uo(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function ao(t){for(var n=Oa(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,wo(i)]}return n}function co(t,n){var e=function(t,n){return null==t?i:t[n]}(t,n);return Rr(e)?e:i}var fo=se?function(t){return null==t?[]:(t=St(t),Mn(se(t),(function(n){return rn.call(t,n)})))}:vc,lo=se?function(t){for(var n=[];t;)kn(n,fo(t)),t=Vt(t);return n}:vc,so=Mr;function ho(t,n,e){for(var r=-1,i=(n=gi(n,t)).length,o=!1;++r<i;){var u=Bo(n[r]);if(!(o=null!=t&&e(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Qu(i)&&go(u,i)&&(Yu(t)||Hu(t))}function po(t){return"function"!=typeof t.constructor||xo(t)?{}:De(Vt(t))}function vo(t){return Yu(t)||Hu(t)||!!(an&&t&&t[an])}function go(t,n){var e=typeof t;return!!(n=null==n?s:n)&&("number"==e||"symbol"!=e&&_t.test(t))&&t>-1&&t%1==0&&t<n}function _o(t,n,e){if(!ta(e))return!1;var r=typeof n;return!!("number"==r?Xu(e)&&go(n,e.length):"string"==r&&n in e)&&Iu(e[n],t)}function yo(t,n){if(Yu(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!ca(t))||Q.test(t)||!J.test(t)||null!=n&&t in St(n)}function mo(t){var n=ro(t),e=Ue[n];if("function"!=typeof e||!(n in Fe.prototype))return!1;if(t===e)return!0;var r=eo(e);return!!r&&t===r[0]}(we&&so(new we(new ArrayBuffer(1)))!=R||Me&&so(new Me)!=w||Ae&&so(Ae.resolve())!=S||Se&&so(new Se)!=k||Ee&&so(new Ee)!=N)&&(so=function(t){var n=Mr(t),e=n==A?t.constructor:i,r=e?Uo(e):"";if(r)switch(r){case Ne:return R;case Oe:return w;case Re:return S;case Le:return k;case Pe:return N}return n});var bo=Rt?Ku:gc;function xo(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||Ot)}function wo(t){return t==t&&!ta(t)}function Mo(t,n){return function(e){return null!=e&&e[t]===n&&(n!==i||t in St(e))}}function Ao(t,n,e){return n=ge(n===i?t.length-1:n,0),function(){for(var i=arguments,o=-1,u=ge(i.length-n,0),a=r(u);++o<u;)a[o]=i[n+o];o=-1;for(var c=r(n+1);++o<n;)c[o]=i[o];return c[n]=e(a),yn(t,this,c)}}function So(t,n){return n.length<2?t:xr(t,ti(n,0,-1))}function Eo(t,n){for(var e=t.length,r=_e(n.length,e),o=Ei(t);r--;){var u=n[r];t[r]=go(u,e)?o[u]:i}return t}function ko(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Co=Ro(Kr),To=ce||function(t,n){return un.setTimeout(t,n)},No=Ro(Jr);function Oo(t,n,e){var r=n+"";return No(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(ut,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return bn(d,(function(e){var r="_."+e[0];n&e[1]&&!An(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(at);return n?n[1].split(ct):[]}(r),e)))}function Ro(t){var n=0,e=0;return function(){var r=ye(),o=16-(r-e);if(e=r,o>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(i,arguments)}}function Lo(t,n){var e=-1,r=t.length,o=r-1;for(n=n===i?r:n;++e<n;){var u=Wr(e,o),a=t[u];t[u]=t[e],t[e]=a}return t.length=n,t}var Po,zo,jo=(Po=Pu((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(tt,(function(t,e,r,i){n.push(r?i.replace(lt,"$1"):e||t)})),n}),(function(t){return 500===zo.size&&zo.clear(),t})),zo=Po.cache,Po);function Bo(t){if("string"==typeof t||ca(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function Uo(t){if(null!=t){try{return Lt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Do(t){if(t instanceof Fe)return t.clone();var n=new qe(t.__wrapped__,t.__chain__);return n.__actions__=Ei(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Io=$r((function(t,n){return $u(t)?fr(t,vr(n,1,$u,!0)):[]})),qo=$r((function(t,n){var e=Zo(n);return $u(e)&&(e=i),$u(t)?fr(t,vr(n,1,$u,!0),oo(e,2)):[]})),Fo=$r((function(t,n){var e=Zo(n);return $u(e)&&(e=i),$u(t)?fr(t,vr(n,1,$u,!0),i,e):[]}));function Ho(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:da(e);return i<0&&(i=ge(r+i,0)),Ln(t,oo(n,3),i)}function Yo(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return e!==i&&(o=da(e),o=e<0?ge(r+o,0):_e(o,r-1)),Ln(t,oo(n,3),o,!0)}function Wo(t){return null!=t&&t.length?vr(t,1):[]}function Xo(t){return t&&t.length?t[0]:i}var $o=$r((function(t){var n=En(t,di);return n.length&&n[0]===t[0]?kr(n):[]})),Vo=$r((function(t){var n=Zo(t),e=En(t,di);return n===Zo(e)?n=i:e.pop(),e.length&&e[0]===t[0]?kr(e,oo(n,2)):[]})),Go=$r((function(t){var n=Zo(t),e=En(t,di);return(n="function"==typeof n?n:i)&&e.pop(),e.length&&e[0]===t[0]?kr(e,i,n):[]}));function Zo(t){var n=null==t?0:t.length;return n?t[n-1]:i}var Ko=$r(Jo);function Jo(t,n){return t&&t.length&&n&&n.length?Hr(t,n):t}var Qo=Qi((function(t,n){var e=null==t?0:t.length,r=ir(t,n);return Yr(t,En(n,(function(t){return go(t,e)?+t:t})).sort(Mi)),r}));function tu(t){return null==t?t:xe.call(t)}var nu=$r((function(t){return ai(vr(t,1,$u,!0))})),eu=$r((function(t){var n=Zo(t);return $u(n)&&(n=i),ai(vr(t,1,$u,!0),oo(n,2))})),ru=$r((function(t){var n=Zo(t);return n="function"==typeof n?n:i,ai(vr(t,1,$u,!0),i,n)}));function iu(t){if(!t||!t.length)return[];var n=0;return t=Mn(t,(function(t){if($u(t))return n=ge(t.length,n),!0})),Fn(n,(function(n){return En(t,Un(n))}))}function ou(t,n){if(!t||!t.length)return[];var e=iu(t);return null==n?e:En(e,(function(t){return yn(n,i,t)}))}var uu=$r((function(t,n){return $u(t)?fr(t,n):[]})),au=$r((function(t){return hi(Mn(t,$u))})),cu=$r((function(t){var n=Zo(t);return $u(n)&&(n=i),hi(Mn(t,$u),oo(n,2))})),fu=$r((function(t){var n=Zo(t);return n="function"==typeof n?n:i,hi(Mn(t,$u),i,n)})),lu=$r(iu),su=$r((function(t){var n=t.length,e=n>1?t[n-1]:i;return e="function"==typeof e?(t.pop(),e):i,ou(t,e)}));function hu(t){var n=Ue(t);return n.__chain__=!0,n}function pu(t,n){return n(t)}var du=Qi((function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,o=function(n){return ir(n,t)};return!(n>1||this.__actions__.length)&&r instanceof Fe&&go(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:pu,args:[o],thisArg:i}),new qe(r,this.__chain__).thru((function(t){return n&&!t.length&&t.push(i),t}))):this.thru(o)})),vu=Ci((function(t,n,e){Pt.call(t,e)?++t[e]:rr(t,e,1)})),gu=zi(Ho),_u=zi(Yo);function yu(t,n){return(Yu(t)?bn:lr)(t,oo(n,3))}function mu(t,n){return(Yu(t)?xn:sr)(t,oo(n,3))}var bu=Ci((function(t,n,e){Pt.call(t,e)?t[e].push(n):rr(t,e,[n])})),xu=$r((function(t,n,e){var i=-1,o="function"==typeof n,u=Xu(t)?r(t.length):[];return lr(t,(function(t){u[++i]=o?yn(n,t,e):Cr(t,n,e)})),u})),wu=Ci((function(t,n,e){rr(t,e,n)}));function Mu(t,n){return(Yu(t)?En:jr)(t,oo(n,3))}var Au=Ci((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]})),Su=$r((function(t,n){if(null==t)return[];var e=n.length;return e>1&&_o(t,n[0],n[1])?n=[]:e>2&&_o(n[0],n[1],n[2])&&(n=[n[0]]),qr(t,vr(n,1),[])})),Eu=Dn||function(){return un.Date.now()};function ku(t,n,e){return n=e?i:n,n=t&&null==n?t.length:n,Vi(t,f,i,i,i,i,n)}function Cu(t,n){var e;if("function"!=typeof n)throw new Ct(o);return t=da(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=i),e}}var Tu=$r((function(t,n,e){var r=1;if(e.length){var i=ne(e,io(Tu));r|=c}return Vi(t,r,n,e,i)})),Nu=$r((function(t,n,e){var r=3;if(e.length){var i=ne(e,io(Nu));r|=c}return Vi(n,r,t,e,i)}));function Ou(t,n,e){var r,u,a,c,f,l,s=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new Ct(o);function v(n){var e=r,o=u;return r=u=i,s=n,c=t.apply(o,e)}function g(t){return s=t,f=To(y,n),h?v(t):c}function _(t){var e=t-l;return l===i||e>=n||e<0||p&&t-s>=a}function y(){var t=Eu();if(_(t))return m(t);f=To(y,function(t){var e=n-(t-l);return p?_e(e,a-(t-s)):e}(t))}function m(t){return f=i,d&&r?v(t):(r=u=i,c)}function b(){var t=Eu(),e=_(t);if(r=arguments,u=this,l=t,e){if(f===i)return g(l);if(p)return mi(f),f=To(y,n),v(l)}return f===i&&(f=To(y,n)),c}return n=ga(n)||0,ta(e)&&(h=!!e.leading,a=(p="maxWait"in e)?ge(ga(e.maxWait)||0,n):a,d="trailing"in e?!!e.trailing:d),b.cancel=function(){f!==i&&mi(f),s=0,r=l=u=f=i},b.flush=function(){return f===i?c:m(Eu())},b}var Ru=$r((function(t,n){return cr(t,1,n)})),Lu=$r((function(t,n,e){return cr(t,ga(n)||0,e)}));function Pu(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new Ct(o);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(Pu.Cache||We),e}function zu(t){if("function"!=typeof t)throw new Ct(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Pu.Cache=We;var ju=_i((function(t,n){var e=(n=1==n.length&&Yu(n[0])?En(n[0],Hn(oo())):En(vr(n,1),Hn(oo()))).length;return $r((function(r){for(var i=-1,o=_e(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return yn(t,this,r)}))})),Bu=$r((function(t,n){var e=ne(n,io(Bu));return Vi(t,c,i,n,e)})),Uu=$r((function(t,n){var e=ne(n,io(Uu));return Vi(t,64,i,n,e)})),Du=Qi((function(t,n){return Vi(t,256,i,i,i,n)}));function Iu(t,n){return t===n||t!=t&&n!=n}var qu=Hi(Ar),Fu=Hi((function(t,n){return t>=n})),Hu=Tr(function(){return arguments}())?Tr:function(t){return na(t)&&Pt.call(t,"callee")&&!rn.call(t,"callee")},Yu=r.isArray,Wu=hn?Hn(hn):function(t){return na(t)&&Mr(t)==O};function Xu(t){return null!=t&&Qu(t.length)&&!Ku(t)}function $u(t){return na(t)&&Xu(t)}var Vu=he||gc,Gu=pn?Hn(pn):function(t){return na(t)&&Mr(t)==y};function Zu(t){if(!na(t))return!1;var n=Mr(t);return n==m||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!ia(t)}function Ku(t){if(!ta(t))return!1;var n=Mr(t);return n==b||n==x||"[object AsyncFunction]"==n||"[object Proxy]"==n}function Ju(t){return"number"==typeof t&&t==da(t)}function Qu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=s}function ta(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function na(t){return null!=t&&"object"==typeof t}var ea=dn?Hn(dn):function(t){return na(t)&&so(t)==w};function ra(t){return"number"==typeof t||na(t)&&Mr(t)==M}function ia(t){if(!na(t)||Mr(t)!=A)return!1;var n=Vt(t);if(null===n)return!0;var e=Pt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Lt.call(e)==Ut}var oa=vn?Hn(vn):function(t){return na(t)&&Mr(t)==E},ua=gn?Hn(gn):function(t){return na(t)&&so(t)==k};function aa(t){return"string"==typeof t||!Yu(t)&&na(t)&&Mr(t)==C}function ca(t){return"symbol"==typeof t||na(t)&&Mr(t)==T}var fa=_n?Hn(_n):function(t){return na(t)&&Qu(t.length)&&!!Jt[Mr(t)]},la=Hi(zr),sa=Hi((function(t,n){return t<=n}));function ha(t){if(!t)return[];if(Xu(t))return aa(t)?oe(t):Ei(t);if(cn&&t[cn])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[cn]());var n=so(t);return(n==w?Qn:n==k?ee:Ia)(t)}function pa(t){return t?(t=ga(t))===l||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function da(t){var n=pa(t),e=n%1;return n==n?e?n-e:n:0}function va(t){return t?or(da(t),0,p):0}function ga(t){if("number"==typeof t)return t;if(ca(t))return h;if(ta(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=ta(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(rt,"");var e=dt.test(t);return e||gt.test(t)?en(t.slice(2),e?2:8):pt.test(t)?h:+t}function _a(t){return ki(t,Ra(t))}function ya(t){return null==t?"":ui(t)}var ma=Ti((function(t,n){if(xo(n)||Xu(n))ki(n,Oa(n),t);else for(var e in n)Pt.call(n,e)&&Qe(t,e,n[e])})),ba=Ti((function(t,n){ki(n,Ra(n),t)})),xa=Ti((function(t,n,e,r){ki(n,Ra(n),t,r)})),wa=Ti((function(t,n,e,r){ki(n,Oa(n),t,r)})),Ma=Qi(ir),Aa=$r((function(t,n){t=St(t);var e=-1,r=n.length,o=r>2?n[2]:i;for(o&&_o(n[0],n[1],o)&&(r=1);++e<r;)for(var u=n[e],a=Ra(u),c=-1,f=a.length;++c<f;){var l=a[c],s=t[l];(s===i||Iu(s,Ot[l])&&!Pt.call(t,l))&&(t[l]=u[l])}return t})),Sa=$r((function(t){return t.push(i,Zi),yn(Pa,i,t)}));function Ea(t,n,e){var r=null==t?i:xr(t,n);return r===i?e:r}function ka(t,n){return null!=t&&ho(t,n,Er)}var Ca=Ui((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Bt.call(n)),t[n]=e}),tc(rc)),Ta=Ui((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=Bt.call(n)),Pt.call(t,n)?t[n].push(e):t[n]=[e]}),oo),Na=$r(Cr);function Oa(t){return Xu(t)?Ve(t):Pr(t)}function Ra(t){return Xu(t)?Ve(t,!0):function(t){if(!ta(t))return function(t){var n=[];if(null!=t)for(var e in St(t))n.push(e);return n}(t);var n=xo(t),e=[];for(var r in t)("constructor"!=r||!n&&Pt.call(t,r))&&e.push(r);return e}(t)}var La=Ti((function(t,n,e){Dr(t,n,e)})),Pa=Ti((function(t,n,e,r){Dr(t,n,e,r)})),za=Qi((function(t,n){var e={};if(null==t)return e;var r=!1;n=En(n,(function(n){return n=gi(n,t),r||(r=n.length>1),n})),ki(t,no(t),e),r&&(e=ur(e,7,Ki));for(var i=n.length;i--;)ci(e,n[i]);return e})),ja=Qi((function(t,n){return null==t?{}:function(t,n){return Fr(t,n,(function(n,e){return ka(t,e)}))}(t,n)}));function Ba(t,n){if(null==t)return{};var e=En(no(t),(function(t){return[t]}));return n=oo(n),Fr(t,e,(function(t,e){return n(t,e[0])}))}var Ua=$i(Oa),Da=$i(Ra);function Ia(t){return null==t?[]:Yn(t,Oa(t))}var qa=Li((function(t,n,e){return n=n.toLowerCase(),t+(e?Fa(n):n)}));function Fa(t){return Za(ya(t).toLowerCase())}function Ha(t){return(t=ya(t))&&t.replace(yt,Gn).replace(Wt,"")}var Ya=Li((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Wa=Li((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Xa=Ri("toLowerCase"),$a=Li((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()})),Va=Li((function(t,n,e){return t+(e?" ":"")+Za(n)})),Ga=Li((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Za=Ri("toUpperCase");function Ka(t,n,e){return t=ya(t),(n=e?i:n)===i?function(t){return Gt.test(t)}(t)?function(t){return t.match($t)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(n)||[]}var Ja=$r((function(t,n){try{return yn(t,i,n)}catch(t){return Zu(t)?t:new wt(t)}})),Qa=Qi((function(t,n){return bn(n,(function(n){n=Bo(n),rr(t,n,Tu(t[n],t))})),t}));function tc(t){return function(){return t}}var nc=ji(),ec=ji(!0);function rc(t){return t}function ic(t){return Lr("function"==typeof t?t:ur(t,1))}var oc=$r((function(t,n){return function(e){return Cr(e,t,n)}})),uc=$r((function(t,n){return function(e){return Cr(t,e,n)}}));function ac(t,n,e){var r=Oa(n),i=br(n,r);null!=e||ta(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=br(n,Oa(n)));var o=!(ta(e)&&"chain"in e&&!e.chain),u=Ku(t);return bn(i,(function(e){var r=n[e];t[e]=r,u&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__),i=e.__actions__=Ei(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,kn([this.value()],arguments))})})),t}function cc(){}var fc=Ii(En),lc=Ii(wn),sc=Ii(Nn);function hc(t){return yo(t)?Un(Bo(t)):function(t){return function(n){return xr(n,t)}}(t)}var pc=Fi(),dc=Fi(!0);function vc(){return[]}function gc(){return!1}var _c,yc=Di((function(t,n){return t+n}),0),mc=Wi("ceil"),bc=Di((function(t,n){return t/n}),1),xc=Wi("floor"),wc=Di((function(t,n){return t*n}),1),Mc=Wi("round"),Ac=Di((function(t,n){return t-n}),0);return Ue.after=function(t,n){if("function"!=typeof n)throw new Ct(o);return t=da(t),function(){if(--t<1)return n.apply(this,arguments)}},Ue.ary=ku,Ue.assign=ma,Ue.assignIn=ba,Ue.assignInWith=xa,Ue.assignWith=wa,Ue.at=Ma,Ue.before=Cu,Ue.bind=Tu,Ue.bindAll=Qa,Ue.bindKey=Nu,Ue.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Yu(t)?t:[t]},Ue.chain=hu,Ue.chunk=function(t,n,e){n=(e?_o(t,n,e):n===i)?1:ge(da(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var u=0,a=0,c=r(fe(o/n));u<o;)c[a++]=ti(t,u,u+=n);return c},Ue.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},Ue.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return kn(Yu(e)?Ei(e):[e],vr(n,1))},Ue.cond=function(t){var n=null==t?0:t.length,e=oo();return t=n?En(t,(function(t){if("function"!=typeof t[1])throw new Ct(o);return[e(t[0]),t[1]]})):[],$r((function(e){for(var r=-1;++r<n;){var i=t[r];if(yn(i[0],this,e))return yn(i[1],this,e)}}))},Ue.conforms=function(t){return function(t){var n=Oa(t);return function(e){return ar(e,t,n)}}(ur(t,1))},Ue.constant=tc,Ue.countBy=vu,Ue.create=function(t,n){var e=De(t);return null==n?e:er(e,n)},Ue.curry=function t(n,e,r){var o=Vi(n,8,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},Ue.curryRight=function t(n,e,r){var o=Vi(n,16,i,i,i,i,i,e=r?i:e);return o.placeholder=t.placeholder,o},Ue.debounce=Ou,Ue.defaults=Aa,Ue.defaultsDeep=Sa,Ue.defer=Ru,Ue.delay=Lu,Ue.difference=Io,Ue.differenceBy=qo,Ue.differenceWith=Fo,Ue.drop=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=e||n===i?1:da(n))<0?0:n,r):[]},Ue.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,0,(n=r-(n=e||n===i?1:da(n)))<0?0:n):[]},Ue.dropRightWhile=function(t,n){return t&&t.length?li(t,oo(n,3),!0,!0):[]},Ue.dropWhile=function(t,n){return t&&t.length?li(t,oo(n,3),!0):[]},Ue.fill=function(t,n,e,r){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&_o(t,n,e)&&(e=0,r=o),function(t,n,e,r){var o=t.length;for((e=da(e))<0&&(e=-e>o?0:o+e),(r=r===i||r>o?o:da(r))<0&&(r+=o),r=e>r?0:va(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},Ue.filter=function(t,n){return(Yu(t)?Mn:dr)(t,oo(n,3))},Ue.flatMap=function(t,n){return vr(Mu(t,n),1)},Ue.flatMapDeep=function(t,n){return vr(Mu(t,n),l)},Ue.flatMapDepth=function(t,n,e){return e=e===i?1:da(e),vr(Mu(t,n),e)},Ue.flatten=Wo,Ue.flattenDeep=function(t){return null!=t&&t.length?vr(t,l):[]},Ue.flattenDepth=function(t,n){return null!=t&&t.length?vr(t,n=n===i?1:da(n)):[]},Ue.flip=function(t){return Vi(t,512)},Ue.flow=nc,Ue.flowRight=ec,Ue.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},Ue.functions=function(t){return null==t?[]:br(t,Oa(t))},Ue.functionsIn=function(t){return null==t?[]:br(t,Ra(t))},Ue.groupBy=bu,Ue.initial=function(t){return null!=t&&t.length?ti(t,0,-1):[]},Ue.intersection=$o,Ue.intersectionBy=Vo,Ue.intersectionWith=Go,Ue.invert=Ca,Ue.invertBy=Ta,Ue.invokeMap=xu,Ue.iteratee=ic,Ue.keyBy=wu,Ue.keys=Oa,Ue.keysIn=Ra,Ue.map=Mu,Ue.mapKeys=function(t,n){var e={};return n=oo(n,3),yr(t,(function(t,r,i){rr(e,n(t,r,i),t)})),e},Ue.mapValues=function(t,n){var e={};return n=oo(n,3),yr(t,(function(t,r,i){rr(e,r,n(t,r,i))})),e},Ue.matches=function(t){return Br(ur(t,1))},Ue.matchesProperty=function(t,n){return Ur(t,ur(n,1))},Ue.memoize=Pu,Ue.merge=La,Ue.mergeWith=Pa,Ue.method=oc,Ue.methodOf=uc,Ue.mixin=ac,Ue.negate=zu,Ue.nthArg=function(t){return t=da(t),$r((function(n){return Ir(n,t)}))},Ue.omit=za,Ue.omitBy=function(t,n){return Ba(t,zu(oo(n)))},Ue.once=function(t){return Cu(2,t)},Ue.orderBy=function(t,n,e,r){return null==t?[]:(Yu(n)||(n=null==n?[]:[n]),Yu(e=r?i:e)||(e=null==e?[]:[e]),qr(t,n,e))},Ue.over=fc,Ue.overArgs=ju,Ue.overEvery=lc,Ue.overSome=sc,Ue.partial=Bu,Ue.partialRight=Uu,Ue.partition=Au,Ue.pick=ja,Ue.pickBy=Ba,Ue.property=hc,Ue.propertyOf=function(t){return function(n){return null==t?i:xr(t,n)}},Ue.pull=Ko,Ue.pullAll=Jo,Ue.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Hr(t,n,oo(e,2)):t},Ue.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Hr(t,n,i,e):t},Ue.pullAt=Qo,Ue.range=pc,Ue.rangeRight=dc,Ue.rearg=Du,Ue.reject=function(t,n){return(Yu(t)?Mn:dr)(t,zu(oo(n,3)))},Ue.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=oo(n,3);++r<o;){var u=t[r];n(u,r,t)&&(e.push(u),i.push(r))}return Yr(t,i),e},Ue.rest=function(t,n){if("function"!=typeof t)throw new Ct(o);return $r(t,n=n===i?n:da(n))},Ue.reverse=tu,Ue.sampleSize=function(t,n,e){return n=(e?_o(t,n,e):n===i)?1:da(n),(Yu(t)?Ze:Gr)(t,n)},Ue.set=function(t,n,e){return null==t?t:Zr(t,n,e)},Ue.setWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:Zr(t,n,e,r)},Ue.shuffle=function(t){return(Yu(t)?Ke:Qr)(t)},Ue.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&_o(t,n,e)?(n=0,e=r):(n=null==n?0:da(n),e=e===i?r:da(e)),ti(t,n,e)):[]},Ue.sortBy=Su,Ue.sortedUniq=function(t){return t&&t.length?ii(t):[]},Ue.sortedUniqBy=function(t,n){return t&&t.length?ii(t,oo(n,2)):[]},Ue.split=function(t,n,e){return e&&"number"!=typeof e&&_o(t,n,e)&&(n=e=i),(e=e===i?p:e>>>0)?(t=ya(t))&&("string"==typeof n||null!=n&&!oa(n))&&!(n=ui(n))&&Jn(t)?yi(oe(t),0,e):t.split(n,e):[]},Ue.spread=function(t,n){if("function"!=typeof t)throw new Ct(o);return n=null==n?0:ge(da(n),0),$r((function(e){var r=e[n],i=yi(e,0,n);return r&&kn(i,r),yn(t,this,i)}))},Ue.tail=function(t){var n=null==t?0:t.length;return n?ti(t,1,n):[]},Ue.take=function(t,n,e){return t&&t.length?ti(t,0,(n=e||n===i?1:da(n))<0?0:n):[]},Ue.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?ti(t,(n=r-(n=e||n===i?1:da(n)))<0?0:n,r):[]},Ue.takeRightWhile=function(t,n){return t&&t.length?li(t,oo(n,3),!1,!0):[]},Ue.takeWhile=function(t,n){return t&&t.length?li(t,oo(n,3)):[]},Ue.tap=function(t,n){return n(t),t},Ue.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new Ct(o);return ta(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Ou(t,n,{leading:r,maxWait:n,trailing:i})},Ue.thru=pu,Ue.toArray=ha,Ue.toPairs=Ua,Ue.toPairsIn=Da,Ue.toPath=function(t){return Yu(t)?En(t,Bo):ca(t)?[t]:Ei(jo(ya(t)))},Ue.toPlainObject=_a,Ue.transform=function(t,n,e){var r=Yu(t),i=r||Vu(t)||fa(t);if(n=oo(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:ta(t)&&Ku(o)?De(Vt(t)):{}}return(i?bn:yr)(t,(function(t,r,i){return n(e,t,r,i)})),e},Ue.unary=function(t){return ku(t,1)},Ue.union=nu,Ue.unionBy=eu,Ue.unionWith=ru,Ue.uniq=function(t){return t&&t.length?ai(t):[]},Ue.uniqBy=function(t,n){return t&&t.length?ai(t,oo(n,2)):[]},Ue.uniqWith=function(t,n){return n="function"==typeof n?n:i,t&&t.length?ai(t,i,n):[]},Ue.unset=function(t,n){return null==t||ci(t,n)},Ue.unzip=iu,Ue.unzipWith=ou,Ue.update=function(t,n,e){return null==t?t:fi(t,n,vi(e))},Ue.updateWith=function(t,n,e,r){return r="function"==typeof r?r:i,null==t?t:fi(t,n,vi(e),r)},Ue.values=Ia,Ue.valuesIn=function(t){return null==t?[]:Yn(t,Ra(t))},Ue.without=uu,Ue.words=Ka,Ue.wrap=function(t,n){return Bu(vi(n),t)},Ue.xor=au,Ue.xorBy=cu,Ue.xorWith=fu,Ue.zip=lu,Ue.zipObject=function(t,n){return pi(t||[],n||[],Qe)},Ue.zipObjectDeep=function(t,n){return pi(t||[],n||[],Zr)},Ue.zipWith=su,Ue.entries=Ua,Ue.entriesIn=Da,Ue.extend=ba,Ue.extendWith=xa,ac(Ue,Ue),Ue.add=yc,Ue.attempt=Ja,Ue.camelCase=qa,Ue.capitalize=Fa,Ue.ceil=mc,Ue.clamp=function(t,n,e){return e===i&&(e=n,n=i),e!==i&&(e=(e=ga(e))==e?e:0),n!==i&&(n=(n=ga(n))==n?n:0),or(ga(t),n,e)},Ue.clone=function(t){return ur(t,4)},Ue.cloneDeep=function(t){return ur(t,5)},Ue.cloneDeepWith=function(t,n){return ur(t,5,n="function"==typeof n?n:i)},Ue.cloneWith=function(t,n){return ur(t,4,n="function"==typeof n?n:i)},Ue.conformsTo=function(t,n){return null==n||ar(t,n,Oa(n))},Ue.deburr=Ha,Ue.defaultTo=function(t,n){return null==t||t!=t?n:t},Ue.divide=bc,Ue.endsWith=function(t,n,e){t=ya(t),n=ui(n);var r=t.length,o=e=e===i?r:or(da(e),0,r);return(e-=n.length)>=0&&t.slice(e,o)==n},Ue.eq=Iu,Ue.escape=function(t){return(t=ya(t))&&V.test(t)?t.replace(X,Zn):t},Ue.escapeRegExp=function(t){return(t=ya(t))&&et.test(t)?t.replace(nt,"\\$&"):t},Ue.every=function(t,n,e){var r=Yu(t)?wn:hr;return e&&_o(t,n,e)&&(n=i),r(t,oo(n,3))},Ue.find=gu,Ue.findIndex=Ho,Ue.findKey=function(t,n){return Rn(t,oo(n,3),yr)},Ue.findLast=_u,Ue.findLastIndex=Yo,Ue.findLastKey=function(t,n){return Rn(t,oo(n,3),mr)},Ue.floor=xc,Ue.forEach=yu,Ue.forEachRight=mu,Ue.forIn=function(t,n){return null==t?t:gr(t,oo(n,3),Ra)},Ue.forInRight=function(t,n){return null==t?t:_r(t,oo(n,3),Ra)},Ue.forOwn=function(t,n){return t&&yr(t,oo(n,3))},Ue.forOwnRight=function(t,n){return t&&mr(t,oo(n,3))},Ue.get=Ea,Ue.gt=qu,Ue.gte=Fu,Ue.has=function(t,n){return null!=t&&ho(t,n,Sr)},Ue.hasIn=ka,Ue.head=Xo,Ue.identity=rc,Ue.includes=function(t,n,e,r){t=Xu(t)?t:Ia(t),e=e&&!r?da(e):0;var i=t.length;return e<0&&(e=ge(i+e,0)),aa(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&Pn(t,n,e)>-1},Ue.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:da(e);return i<0&&(i=ge(r+i,0)),Pn(t,n,i)},Ue.inRange=function(t,n,e){return n=pa(n),e===i?(e=n,n=0):e=pa(e),function(t,n,e){return t>=_e(n,e)&&t<ge(n,e)}(t=ga(t),n,e)},Ue.invoke=Na,Ue.isArguments=Hu,Ue.isArray=Yu,Ue.isArrayBuffer=Wu,Ue.isArrayLike=Xu,Ue.isArrayLikeObject=$u,Ue.isBoolean=function(t){return!0===t||!1===t||na(t)&&Mr(t)==_},Ue.isBuffer=Vu,Ue.isDate=Gu,Ue.isElement=function(t){return na(t)&&1===t.nodeType&&!ia(t)},Ue.isEmpty=function(t){if(null==t)return!0;if(Xu(t)&&(Yu(t)||"string"==typeof t||"function"==typeof t.splice||Vu(t)||fa(t)||Hu(t)))return!t.length;var n=so(t);if(n==w||n==k)return!t.size;if(xo(t))return!Pr(t).length;for(var e in t)if(Pt.call(t,e))return!1;return!0},Ue.isEqual=function(t,n){return Nr(t,n)},Ue.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:i)?e(t,n):i;return r===i?Nr(t,n,i,e):!!r},Ue.isError=Zu,Ue.isFinite=function(t){return"number"==typeof t&&pe(t)},Ue.isFunction=Ku,Ue.isInteger=Ju,Ue.isLength=Qu,Ue.isMap=ea,Ue.isMatch=function(t,n){return t===n||Or(t,n,ao(n))},Ue.isMatchWith=function(t,n,e){return e="function"==typeof e?e:i,Or(t,n,ao(n),e)},Ue.isNaN=function(t){return ra(t)&&t!=+t},Ue.isNative=function(t){if(bo(t))throw new wt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Rr(t)},Ue.isNil=function(t){return null==t},Ue.isNull=function(t){return null===t},Ue.isNumber=ra,Ue.isObject=ta,Ue.isObjectLike=na,Ue.isPlainObject=ia,Ue.isRegExp=oa,Ue.isSafeInteger=function(t){return Ju(t)&&t>=-9007199254740991&&t<=s},Ue.isSet=ua,Ue.isString=aa,Ue.isSymbol=ca,Ue.isTypedArray=fa,Ue.isUndefined=function(t){return t===i},Ue.isWeakMap=function(t){return na(t)&&so(t)==N},Ue.isWeakSet=function(t){return na(t)&&"[object WeakSet]"==Mr(t)},Ue.join=function(t,n){return null==t?"":de.call(t,n)},Ue.kebabCase=Ya,Ue.last=Zo,Ue.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=r;return e!==i&&(o=(o=da(e))<0?ge(r+o,0):_e(o,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,o):Ln(t,jn,o,!0)},Ue.lowerCase=Wa,Ue.lowerFirst=Xa,Ue.lt=la,Ue.lte=sa,Ue.max=function(t){return t&&t.length?pr(t,rc,Ar):i},Ue.maxBy=function(t,n){return t&&t.length?pr(t,oo(n,2),Ar):i},Ue.mean=function(t){return Bn(t,rc)},Ue.meanBy=function(t,n){return Bn(t,oo(n,2))},Ue.min=function(t){return t&&t.length?pr(t,rc,zr):i},Ue.minBy=function(t,n){return t&&t.length?pr(t,oo(n,2),zr):i},Ue.stubArray=vc,Ue.stubFalse=gc,Ue.stubObject=function(){return{}},Ue.stubString=function(){return""},Ue.stubTrue=function(){return!0},Ue.multiply=wc,Ue.nth=function(t,n){return t&&t.length?Ir(t,da(n)):i},Ue.noConflict=function(){return un._===this&&(un._=Dt),this},Ue.noop=cc,Ue.now=Eu,Ue.pad=function(t,n,e){t=ya(t);var r=(n=da(n))?ie(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return qi(le(i),e)+t+qi(fe(i),e)},Ue.padEnd=function(t,n,e){t=ya(t);var r=(n=da(n))?ie(t):0;return n&&r<n?t+qi(n-r,e):t},Ue.padStart=function(t,n,e){t=ya(t);var r=(n=da(n))?ie(t):0;return n&&r<n?qi(n-r,e)+t:t},Ue.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),me(ya(t).replace(it,""),n||0)},Ue.random=function(t,n,e){if(e&&"boolean"!=typeof e&&_o(t,n,e)&&(n=e=i),e===i&&("boolean"==typeof n?(e=n,n=i):"boolean"==typeof t&&(e=t,t=i)),t===i&&n===i?(t=0,n=1):(t=pa(t),n===i?(n=t,t=0):n=pa(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var o=be();return _e(t+o*(n-t+nn("1e-"+((o+"").length-1))),n)}return Wr(t,n)},Ue.reduce=function(t,n,e){var r=Yu(t)?Cn:In,i=arguments.length<3;return r(t,oo(n,4),e,i,lr)},Ue.reduceRight=function(t,n,e){var r=Yu(t)?Tn:In,i=arguments.length<3;return r(t,oo(n,4),e,i,sr)},Ue.repeat=function(t,n,e){return n=(e?_o(t,n,e):n===i)?1:da(n),Xr(ya(t),n)},Ue.replace=function(){var t=arguments,n=ya(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Ue.result=function(t,n,e){var r=-1,o=(n=gi(n,t)).length;for(o||(o=1,t=i);++r<o;){var u=null==t?i:t[Bo(n[r])];u===i&&(r=o,u=e),t=Ku(u)?u.call(t):u}return t},Ue.round=Mc,Ue.runInContext=t,Ue.sample=function(t){return(Yu(t)?Ge:Vr)(t)},Ue.size=function(t){if(null==t)return 0;if(Xu(t))return aa(t)?ie(t):t.length;var n=so(t);return n==w||n==k?t.size:Pr(t).length},Ue.snakeCase=$a,Ue.some=function(t,n,e){var r=Yu(t)?Nn:ni;return e&&_o(t,n,e)&&(n=i),r(t,oo(n,3))},Ue.sortedIndex=function(t,n){return ei(t,n)},Ue.sortedIndexBy=function(t,n,e){return ri(t,n,oo(e,2))},Ue.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=ei(t,n);if(r<e&&Iu(t[r],n))return r}return-1},Ue.sortedLastIndex=function(t,n){return ei(t,n,!0)},Ue.sortedLastIndexBy=function(t,n,e){return ri(t,n,oo(e,2),!0)},Ue.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=ei(t,n,!0)-1;if(Iu(t[e],n))return e}return-1},Ue.startCase=Va,Ue.startsWith=function(t,n,e){return t=ya(t),e=null==e?0:or(da(e),0,t.length),n=ui(n),t.slice(e,e+n.length)==n},Ue.subtract=Ac,Ue.sum=function(t){return t&&t.length?qn(t,rc):0},Ue.sumBy=function(t,n){return t&&t.length?qn(t,oo(n,2)):0},Ue.template=function(t,n,e){var r=Ue.templateSettings;e&&_o(t,n,e)&&(n=i),t=ya(t),n=xa({},n,r,Gi);var o,u,a=xa({},n.imports,r.imports,Gi),c=Oa(a),f=Yn(a,c),l=0,s=n.interpolate||mt,h="__p += '",p=Et((n.escape||mt).source+"|"+s.source+"|"+(s===K?st:mt).source+"|"+(n.evaluate||mt).source+"|$","g"),d="//# sourceURL="+(Pt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Kt+"]")+"\n";t.replace(p,(function(n,e,r,i,a,c){return r||(r=i),h+=t.slice(l,c).replace(bt,Kn),e&&(o=!0,h+="' +\n__e("+e+") +\n'"),a&&(u=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+n.length,n})),h+="';\n";var v=Pt.call(n,"variable")&&n.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(u?h.replace(F,""):h).replace(H,"$1").replace(Y,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Ja((function(){return Mt(c,d+"return "+h).apply(i,f)}));if(g.source=h,Zu(g))throw g;return g},Ue.times=function(t,n){if((t=da(t))<1||t>s)return[];var e=p,r=_e(t,p);n=oo(n),t-=p;for(var i=Fn(r,n);++e<t;)n(e);return i},Ue.toFinite=pa,Ue.toInteger=da,Ue.toLength=va,Ue.toLower=function(t){return ya(t).toLowerCase()},Ue.toNumber=ga,Ue.toSafeInteger=function(t){return t?or(da(t),-9007199254740991,s):0===t?t:0},Ue.toString=ya,Ue.toUpper=function(t){return ya(t).toUpperCase()},Ue.trim=function(t,n,e){if((t=ya(t))&&(e||n===i))return t.replace(rt,"");if(!t||!(n=ui(n)))return t;var r=oe(t),o=oe(n);return yi(r,Xn(r,o),$n(r,o)+1).join("")},Ue.trimEnd=function(t,n,e){if((t=ya(t))&&(e||n===i))return t.replace(ot,"");if(!t||!(n=ui(n)))return t;var r=oe(t);return yi(r,0,$n(r,oe(n))+1).join("")},Ue.trimStart=function(t,n,e){if((t=ya(t))&&(e||n===i))return t.replace(it,"");if(!t||!(n=ui(n)))return t;var r=oe(t);return yi(r,Xn(r,oe(n))).join("")},Ue.truncate=function(t,n){var e=30,r="...";if(ta(n)){var o="separator"in n?n.separator:o;e="length"in n?da(n.length):e,r="omission"in n?ui(n.omission):r}var u=(t=ya(t)).length;if(Jn(t)){var a=oe(t);u=a.length}if(e>=u)return t;var c=e-ie(r);if(c<1)return r;var f=a?yi(a,0,c).join(""):t.slice(0,c);if(o===i)return f+r;if(a&&(c+=f.length-c),oa(o)){if(t.slice(c).search(o)){var l,s=f;for(o.global||(o=Et(o.source,ya(ht.exec(o))+"g")),o.lastIndex=0;l=o.exec(s);)var h=l.index;f=f.slice(0,h===i?c:h)}}else if(t.indexOf(ui(o),c)!=c){var p=f.lastIndexOf(o);p>-1&&(f=f.slice(0,p))}return f+r},Ue.unescape=function(t){return(t=ya(t))&&$.test(t)?t.replace(W,ue):t},Ue.uniqueId=function(t){var n=++zt;return ya(t)+n},Ue.upperCase=Ga,Ue.upperFirst=Za,Ue.each=yu,Ue.eachRight=mu,Ue.first=Xo,ac(Ue,(_c={},yr(Ue,(function(t,n){Pt.call(Ue.prototype,n)||(_c[n]=t)})),_c),{chain:!1}),Ue.VERSION="4.17.20",bn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ue[t].placeholder=Ue})),bn(["drop","take"],(function(t,n){Fe.prototype[t]=function(e){e=e===i?1:ge(da(e),0);var r=this.__filtered__&&!n?new Fe(this):this.clone();return r.__filtered__?r.__takeCount__=_e(e,r.__takeCount__):r.__views__.push({size:_e(e,p),type:t+(r.__dir__<0?"Right":"")}),r},Fe.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),bn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;Fe.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:oo(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),bn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");Fe.prototype[t]=function(){return this[e](1).value()[0]}})),bn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");Fe.prototype[t]=function(){return this.__filtered__?new Fe(this):this[e](1)}})),Fe.prototype.compact=function(){return this.filter(rc)},Fe.prototype.find=function(t){return this.filter(t).head()},Fe.prototype.findLast=function(t){return this.reverse().find(t)},Fe.prototype.invokeMap=$r((function(t,n){return"function"==typeof t?new Fe(this):this.map((function(e){return Cr(e,t,n)}))})),Fe.prototype.reject=function(t){return this.filter(zu(oo(t)))},Fe.prototype.slice=function(t,n){t=da(t);var e=this;return e.__filtered__&&(t>0||n<0)?new Fe(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==i&&(e=(n=da(n))<0?e.dropRight(-n):e.take(n-t)),e)},Fe.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Fe.prototype.toArray=function(){return this.take(p)},yr(Fe.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),o=Ue[r?"take"+("last"==n?"Right":""):n],u=r||/^find/.test(n);o&&(Ue.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,c=n instanceof Fe,f=a[0],l=c||Yu(n),s=function(t){var n=o.apply(Ue,kn([t],a));return r&&h?n[0]:n};l&&e&&"function"==typeof f&&1!=f.length&&(c=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=u&&!h,v=c&&!p;if(!u&&l){n=v?n:new Fe(this);var g=t.apply(n,a);return g.__actions__.push({func:pu,args:[s],thisArg:i}),new qe(g,h)}return d&&v?t.apply(this,a):(g=this.thru(s),d?r?g.value()[0]:g.value():g)})})),bn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=Tt[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Ue.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(Yu(i)?i:[],t)}return this[e]((function(e){return n.apply(Yu(e)?e:[],t)}))}})),yr(Fe.prototype,(function(t,n){var e=Ue[n];if(e){var r=e.name+"";Pt.call(Te,r)||(Te[r]=[]),Te[r].push({name:n,func:e})}})),Te[Bi(i,2).name]=[{name:"wrapper",func:i}],Fe.prototype.clone=function(){var t=new Fe(this.__wrapped__);return t.__actions__=Ei(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ei(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ei(this.__views__),t},Fe.prototype.reverse=function(){if(this.__filtered__){var t=new Fe(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Fe.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Yu(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":n-=u;break;case"take":n=_e(n,t+u);break;case"takeRight":t=ge(t,n-u)}}return{start:t,end:n}}(0,i,this.__views__),u=o.start,a=o.end,c=a-u,f=r?a:u-1,l=this.__iteratees__,s=l.length,h=0,p=_e(c,this.__takeCount__);if(!e||!r&&i==c&&p==c)return si(t,this.__actions__);var d=[];t:for(;c--&&h<p;){for(var v=-1,g=t[f+=n];++v<s;){var _=l[v],y=_.iteratee,m=_.type,b=y(g);if(2==m)g=b;else if(!b){if(1==m)continue t;break t}}d[h++]=g}return d},Ue.prototype.at=du,Ue.prototype.chain=function(){return hu(this)},Ue.prototype.commit=function(){return new qe(this.value(),this.__chain__)},Ue.prototype.next=function(){this.__values__===i&&(this.__values__=ha(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},Ue.prototype.plant=function(t){for(var n,e=this;e instanceof Ie;){var r=Do(e);r.__index__=0,r.__values__=i,n?o.__wrapped__=r:n=r;var o=r;e=e.__wrapped__}return o.__wrapped__=t,n},Ue.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Fe){var n=t;return this.__actions__.length&&(n=new Fe(this)),(n=n.reverse()).__actions__.push({func:pu,args:[tu],thisArg:i}),new qe(n,this.__chain__)}return this.thru(tu)},Ue.prototype.toJSON=Ue.prototype.valueOf=Ue.prototype.value=function(){return si(this.__wrapped__,this.__actions__)},Ue.prototype.first=Ue.prototype.head,cn&&(Ue.prototype[cn]=function(){return this}),Ue}();un._=ae,(r=function(){return ae}.call(n,e,n,t))===i||(t.exports=r)}.call(this)},178:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Application=void 0;var r=e(326),i=function(){function t(){}return t.run=function(){r.json("https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/metadata.json",(function(n){t.metadata=n,t.dates=t.metadata.filter((function(t){return"joined"===t.type})).map((function(t){return t.date})).reverse(),t.pages=t.Pages.map((function(n){return new n(t.metadata)})),t.pages.forEach((function(t){return t.init()})),t.pages[0].update()}))},t.build={withBlank:function(){return t},withPages:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.Pages=n,t}},t}();n.Application=i},759:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.BRHeatMapPage=void 0;var o=e(178),u=e(953),a=e(984),c=e(326),f=e(593),l=e(380),s=e(787),h=e(135),p=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="br-heatmap",n.name="BR HeatMap",n}return i(n,t),n.prototype.update=function(){var t=this;c.select("#sidebar").selectAll("*").remove(),c.select("#content").selectAll("*").remove();var n=c.select("#sidebar"),e=n.append("label").text("Date: ").append("select").attr("id","date-selection").classed("br-heatmap-selection",!0);o.Application.dates.forEach((function(t){e.append("option").attr("value",t).html(t)})),n.append("label").text("Class: ").append("select").attr("id","class-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"Ground_vehicles",text:"Ground Vehicles"},{id:"Aviation",text:"Aviation"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"Ground_vehicles"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Mode: ").append("select").attr("id","mode-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"ab",text:"AB"},{id:"rb",text:"RB"},{id:"sb",text:"SB"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"rb"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("Measurement: ").append("select").attr("id","measurement-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"win_rate",text:"Win Rate"},{id:"battles_sum",text:"Battles"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"win_rate"===t.id?"selected":void 0})).html((function(t){return t.text})),n.append("label").text("BR Range: ").append("select").attr("id","br-range-selection").classed("br-heatmap-selection",!0).selectAll().data([{id:"0"},{id:"1"}]).enter().append("option").attr("value",(function(t){return t.id})).attr("selected",(function(t){return"1"===t.id?"selected":void 0})).html((function(t){return t.id})),this.plot=new u.BrHeatmap(800,600,{top:20,right:30,bottom:30,left:100});var r=new l.ColorBar(this.plot,800,60,{top:this.plot.margin.top,right:40,bottom:this.plot.margin.bottom,left:0}),i=new s.BRLineChart(this.plot,400,500,{top:10,right:20,bottom:this.plot.margin.bottom,left:50}),a=new h.Legend(this.plot,800,150,{top:this.plot.margin.top,right:5,bottom:this.plot.margin.bottom,left:5});this.plot.init(r,i,a),f.utils.setEvent.byClass("br-heatmap-selection").onchange((function(){return t.plot.update(!1)})),f.utils.setEvent.byIds("mode-selection","br-range-selection").onchange((function(){return t.plot.update(!0)}))},n}(a.Page);n.BRHeatMapPage=p},984:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Page=void 0;var r=e(326),i=function(){function t(){}return t.prototype.init=function(){r.select("#navbar").append("li").append("a").attr("id",this.id).attr("href","#"+this.id).html(this.name).on("click",this.update)},t}();n.Page=i},42:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0}),n.StackedAreaPage=void 0;var o=e(984),u=e(326),a=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.id="stacked-area",n.name="Trends",n}return i(n,t),n.prototype.update=function(){u.select("#sidebar").selectAll("*").remove(),u.select("#content").selectAll("*").remove()},n}(o.Page);n.StackedAreaPage=a},519:(t,n,e)=>{"use strict";var r=e(178),i=e(759),o=e(42);r.Application.build.withPages(i.BRHeatMapPage,o.StackedAreaPage).run()},953:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},u=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.BrHeatmap=void 0;var a=e(326),c=e(830),f=e(593),l=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.selected=[],n.mouseoverEvent=function(){a.select(this).style("stroke","white")},n.mouseleaveEvent=function(){a.select(this).style("stroke","black")},n.colorPool={values:f.utils.deepCopy(f.categoricalColors),i:0,bindings:new Array,get:function(t){for(var n=0,e=this.bindings;n<e.length;n++){var r=e[n];if(r.br===t.br&&r.nation===t.nation)return r.color}var i=this.values[this.i];return this.i++,this.i===this.values.length&&(this.i=0),this.bindings.push({nation:t.nation,br:t.br,color:i}),i}},n}return i(n,t),n.prototype.getClickEvent=function(){var t=this;return function(){var n=a.select(this),e=n.data()[0];f.utils.rgbToHex(n.style("fill")).toUpperCase()===f.COLORS.AZURE?(n.style("fill",t.value2color(e.value)),t.selected=t.selected.filter((function(t){return t.br!==e.br||t.nation!==e.nation}))):(n.style("fill",f.COLORS.AZURE),t.selected.push(e)),t.lineChart.update().then((function(){t.legend.update()}))}},n.prototype.init=function(t,n,e){var r=this;return this.colorBar=t,this.lineChart=n,this.legend=e,this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","main-svg"),this.g=this.svg.append("g").attr("id","main-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),a.csv(this.dataPath,(function(t){var n=r.extractData(t),e=r.width/f.utils.nations.length,i=r.height/f.utils.brs[r.brRange].length,o=r.buildAxis(),u=o.x,a=o.y;r.colorBar.init(),r.lineChart.init(),r.legend.init(),r.value2color=r.getValue2color(),r.g.selectAll().data(n).enter().append("rect").attr("x",(function(t){return u(t.nation)})).attr("y",(function(t){return a(t.br)})).attr("width",e).attr("height",i).style("fill",(function(t){return r.value2color(t.value)})).style("stroke-width",1).style("stroke","black").on("mouseover",r.mouseoverEvent).on("mouseleave",r.mouseleaveEvent).on("click",r.getClickEvent()),r.cache=t})),this},n.prototype.update=function(t){return o(this,void 0,void 0,(function(){var n,e=this;return u(this,(function(r){switch(r.label){case 0:return n=a.selectAll("g#br-heatmap-x, g#br-heatmap-y"),t?a.csv(this.dataPath,(function(t){e.updateSquares(t),e.cache=t})):this.updateSquares(this.cache),this.buildAxis(),n.remove(),[4,new Promise((function(t){return t(e)}))];case 1:return[2,r.sent()]}}))}))},n.prototype.updateSquares=function(t){var n=this,e=this.extractData(t);this.value2color=this.getValue2color();var r=this.g.selectAll("rect").data(e);r.enter().transition().style("fill",(function(t){return n.value2color(t.value)})),r.exit().transition().style("fill",f.COLORS.BLANK),r.transition().style("fill",(function(t){return n.value2color(t.value)}))},n.prototype.buildAxis=function(){var t=a.scaleBand().range([0,this.width]).domain(f.utils.nations);this.g.append("g").attr("id","br-heatmap-x").style("font-size",13).attr("transform","translate(0, "+(this.height+10)+")").call(a.axisBottom(t).tickSize(0)).select("#main-g g path.domain").remove();var n=a.scaleBand().range([this.height,0]).domain(f.utils.brs[this.brRange]);return this.g.append("g").attr("id","br-heatmap-y").style("font-size",15).attr("transform","translate(-5, 0)").call(a.axisLeft(n).tickSize(0)).select("#main-g g path.domain").remove(),{x:t,y:n}},n.prototype.extractData=function(t){var n=this;return t.filter((function(t){return t.date===n.date&&t.cls===n.clazz})).map((function(t){return{nation:t.nation,br:n.getBr(t),value:n.getValue(t)}}))},n.prototype.getValue=function(t){return t[this.mode+"_"+this.measurement]},n.prototype.getBr=function(t){return t[this.mode+"_br"]},n.prototype.getValue2color=function(){var t,n,e,r;switch(this.measurement){case"win_rate":e=0,r=100,t=a.scaleLinear().domain([e,r]).range([0,1]),"Ground_vehicles"===this.clazz?n=a.scaleLinear().domain([0,.05,.4,.5,.6,.95,1]).range([f.CONT_COLORS.WHITE,f.CONT_COLORS.BLACK,f.CONT_COLORS.RED,f.CONT_COLORS.YELLOW,f.CONT_COLORS.GREEN,f.CONT_COLORS.BLACK,f.CONT_COLORS.BLACK]).interpolate(a.interpolateHcl):"Aviation"===this.clazz&&(n=a.scaleLinear().domain([0,.01,.5,.6,.7,.99,1]).range([f.CONT_COLORS.WHITE,f.CONT_COLORS.BLACK,f.CONT_COLORS.RED,f.CONT_COLORS.YELLOW,f.CONT_COLORS.GREEN,f.CONT_COLORS.BLACK,f.CONT_COLORS.BLACK]).interpolate(a.interpolateHcl));break;case"battles_sum":e=Math.pow(10,2.5),r=Math.pow(10,5.5),t=a.scaleLog().domain([e,r]).range([0,1]),n=a.scaleLinear().domain([0,.01,.4,.5,.6,.99,1]).range([f.CONT_COLORS.WHITE,f.CONT_COLORS.BLACK,f.CONT_COLORS.RED,f.CONT_COLORS.YELLOW,f.CONT_COLORS.GREEN,f.CONT_COLORS.BLACK]).interpolate(a.interpolateHcl)}return this.colorBar.update(e,r,(function(e){return n(t(e))})),function(e){return 0==e?f.COLORS.BLANK:n(t(e))}},Object.defineProperty(n.prototype,"dataPath",{get:function(){return"https://raw.githubusercontent.com/ControlNet/wt-data-project.data/master/"+this.mode.toLowerCase()+"_ranks_"+this.brRange+".csv"},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"date",{get:function(){return f.utils.getSelectedValue("date-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"clazz",{get:function(){return f.utils.getSelectedValue("class-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"mode",{get:function(){return f.utils.getSelectedValue("mode-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"measurement",{get:function(){return f.utils.getSelectedValue("measurement-selection")},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"brRange",{get:function(){return f.utils.getSelectedValue("br-range-selection")},enumerable:!1,configurable:!0}),n}(c.Plot);n.BrHeatmap=l},380:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},u=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.ColorBar=void 0;var a=e(326),c=e(830),f=e(593),l=function(t){function n(n,e,r,i){var o=t.call(this,e,r,i)||this;return o.brHeatmap=n,o}return i(n,t),n.prototype.init=function(){return this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","color-bar-svg"),this.g=this.svg.append("g").attr("id","color-bar-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.update=function(t,n,e){return o(this,void 0,void 0,(function(){var r,i,o,c,l,s,h,p,d,v,g=this;return u(this,(function(u){switch(u.label){case 0:return this.valueMin=t,this.valueMax=n,this.value2color=e,r="battles_sum"===this.brHeatmap.measurement?"log":"linear",i="log"===r?f.utils.logspace(this.valueMin,this.valueMax,100):f.utils.linspace(this.valueMin,this.valueMax,100),o=i.map(this.value2color),this.g.selectAll("*").remove(),c=this.svg.attr("id")+"-gradient",l=this.g.append("defs").append("linearGradient").attr("id",c).attr("x1","0%").attr("y1","100%").attr("x2","0%").attr("y2","0%").attr("spreadMethod","pad"),s=f.utils.linspace(0,100,100).map((function(t){return Math.round(t)+"%"})),a.zip(s,o).forEach((function(t){var n=t[0],e=t[1];l.append("stop").attr("offset",n).attr("stop-color",e).attr("stop-opacity",1)})),h=this.height,p=this.width,this.g.append("rect").attr("x1",0).attr("y1",10).attr("width",p).attr("height",h).style("fill","url(#"+c+")"),d="log"===r?a.scaleLog().domain([this.valueMin,this.valueMax]).range([h,0]):a.scaleLinear().domain([this.valueMin,this.valueMax]).range([h,0]),v=a.axisRight(d),"log"===r&&(v=v.ticks(3)),v=v.tickFormat((function(t){return"log"===r?10+f.utils.formatPower(Math.round(Math.log10(t))):t+"%"})),this.g.append("g").style("font-size","log"===r?12:null).attr("class","legend-axis").attr("transform","translate("+p+", 0)").call(v),[4,new Promise((function(t){return t(g)}))];case 1:return[2,u.sent()]}}))}))},n}(c.Plot);n.ColorBar=l},135:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},u=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.Legend=void 0;var a=e(326),c=function(t){function n(n,e,r,i){var o=t.call(this,e,r,i)||this;return o.brHeatmap=n,o}return i(n,t),n.prototype.init=function(){return this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","legend-svg"),this.g=this.svg.append("g").attr("id","legend-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.update=function(){return o(this,void 0,void 0,(function(){var t,n,e,r,i=this;return u(this,(function(o){switch(o.label){case 0:return t=this.g.selectAll("g").data(this.brHeatmap.selected,(function(t){return t.nation+t.br})),n=this.height,e=this.brHeatmap,r=this.g,t.exit().each((function(t,n){console.log(a.selectAll(r.selectAll("g.legend-row").nodes().slice(n+1))),a.selectAll(r.selectAll("g.legend-row").nodes().slice(n+1)).each((function(){var t=a.select(this),n=t.select("rect"),e=t.select("text");n.transition().duration(500).attr("y",+n.attr("y")+30),e.transition().duration(500).attr("y",+e.attr("y")+30)}))})).transition().duration(500).style("opacity",0).remove(),t.enter().append("g").classed("legend-row",!0).each((function(t,r){a.select(this).append("rect").classed("legend-rect",!0).attr("x",5).attr("y",n-30-30*r).attr("width",20).attr("height",20).style("fill",e.colorPool.bindings.filter((function(n){return n.br===t.br&&n.nation===t.nation}))[0].color),a.select(this).append("text").attr("x",35).attr("y",n-15-30*r).text(t.nation+" "+t.br).attr("text-anchor","start").style("font-size",12.5)})),[4,new Promise((function(t){return t(i)}))];case 1:return[2,o.sent()]}}))}))},n}(e(830).Plot);n.Legend=c},787:function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))((function(i,o){function u(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?i(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,a)}c((r=r.apply(t,n||[])).next())}))},u=this&&this.__generator||function(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(n,"__esModule",{value:!0}),n.BRLineChart=n.LineChart=void 0;var a=e(326),c=e(486),f=e(830),l=e(593),s=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n}(f.Plot);n.LineChart=s;var h=function(t){function n(n,e,r,i){var o=t.call(this,e,r,i)||this;return o.brHeatmap=n,o}return i(n,t),n.prototype.init=function(){return this.svg=a.select("#content").append("svg").attr("height",this.svgHeight).attr("width",this.svgWidth).attr("id","line-chart-svg"),this.g=this.svg.append("g").attr("id","line-chart-g").attr("transform","translate("+this.margin.left+", "+this.margin.top+")"),this},n.prototype.update=function(){return o(this,void 0,void 0,(function(){var t,n,e=this;return u(this,(function(r){switch(r.label){case 0:return t=this.g.selectAll(".x-axis"),n=this.g.selectAll(".y-axis"),[4,new Promise((function(r){a.csv(e.brHeatmap.dataPath,(function(i){var o=e.groupBy(e.extractData(i)),u=a.scaleLinear().domain(a.extent(i,(function(t){return l.utils.parseDate(t.date)}))).range([0,e.width]);e.g.append("g").classed("x-axis",!0).attr("transform","translate(0, "+e.height+")").call(a.axisBottom(u).tickFormat(a.timeFormat("%Y/%m"))),e.g.append("text").classed("x-axis",!0).text("Date").attr("transform","translate("+e.width/2+", "+(e.height+30)+")").style("font-size",12).style("text-anchor","middle"),t.remove();var f=c.flatMap(o,(function(t){return t.values})).map((function(t){return t.value})),s=1.02*c.max(f),h=.98*c.min(f),p=a.scaleLinear().domain([h,s]).range([e.height,0]);e.g.append("g").classed("y-axis",!0).call(a.axisLeft(p)),e.g.append("text").classed("y-axis",!0).text(e.brHeatmap.measurement).attr("transform","translate(-30, "+e.height/2+") rotate(270)").style("font-size",12).style("text-anchor","middle"),n.remove();var d,v=a.line().x((function(t){return u(t.date)})).y((function(t){return p(t.value)}));(d=e.g.selectAll("#line-chart-path-g").size()>0?e.g.select("#line-chart-path-g").selectAll("path").data(o,(function(t){return t.nation+t.br})):e.g.append("g").attr("id","line-chart-path-g").style("fill","None").selectAll("path").data(o,(function(t){return t.nation+t.br}))).exit().transition().duration(500).style("opacity",0).remove(),d.transition().duration(500).attr("d",(function(t){return v(t.values)})).attr("stroke",(function(t){return e.brHeatmap.colorPool.get(t)})),d.enter().append("path").style("opacity",0).style("stroke-width",3).transition().duration(500).style("opacity",1).attr("d",(function(t){return v(t.values)})).attr("stroke",(function(t){return e.brHeatmap.colorPool.get(t)})),r(e)}))}))];case 1:return[2,r.sent()]}}))}))},n.prototype.extractData=function(t){var n=this;return t.filter((function(t){return n.brHeatmap.selected.some((function(e){return e.nation===t.nation&&e.br===n.brHeatmap.getBr(t)&&n.brHeatmap.clazz===t.cls}))})).map((function(t){return{date:l.utils.parseDate(t.date),nation:t.nation,br:n.brHeatmap.getBr(t),value:n.brHeatmap.getValue(t)}}))},n.prototype.groupBy=function(t){for(var n=[],e=function(t){if(n.filter((function(n){return n.br===t.br&&n.nation===t.nation})).length>0)for(var e=0,r=n;e<r.length;e++){var i=r[e];if(i.br===t.br&&i.nation===t.nation){i.values.push({date:t.date,value:t.value});break}}else n.push({br:t.br,nation:t.nation,values:[{date:t.date,value:t.value}]})},r=0,i=t;r<i.length;r++)e(i[r]);return n.map((function(t){return t.values=t.values.filter((function(t){return t.value>0})),t}))},n}(s);n.BRLineChart=h},830:(t,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Margin=n.Plot=void 0;var e=function(){function t(t,n,e){this.svgHeight=t,this.svgWidth=n,this.margin=e}return Object.defineProperty(t.prototype,"width",{get:function(){return this.svgWidth-this.margin.left-this.margin.right},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.svgHeight-this.margin.top-this.margin.bottom},enumerable:!1,configurable:!0}),t}();n.Plot=e;n.Margin=function(){}},593:(t,n,e)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.CONT_COLORS=n.categoricalColors=n.COLORS=n.utils=void 0;var r,i,o,u=e(326);(o=n.utils||(n.utils={})).getSelectedValue=function(t){return document.getElementById(t).value},o.setEvent={byIds:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=t.map((function(t){return document.getElementById(t)}));return{onchange:function(t){return e.forEach((function(n){return n.onchange=t}))}}},byClass:function(t){var n=Array.from(document.getElementsByClassName(t));return{onchange:function(t){return n.forEach((function(n){return n.onchange=t}))}}}},o.nations=["USA","Germany","USSR","Britain","Japan","France","Italy","China","Sweden"],o.brs={1:["1.0 ~ 2.0","1.3 ~ 2.3","1.7 ~ 2.7","2.0 ~ 3.0","2.3 ~ 3.3","2.7 ~ 3.7","3.0 ~ 4.0","3.3 ~ 4.3","3.7 ~ 4.7","4.0 ~ 5.0","4.3 ~ 5.3","4.7 ~ 5.7","5.0 ~ 6.0","5.3 ~ 6.3","5.7 ~ 6.7","6.0 ~ 7.0","6.3 ~ 7.3","6.7 ~ 7.7","7.0 ~ 8.0","7.3 ~ 8.3","7.7 ~ 8.7","8.0 ~ 9.0","8.3 ~ 9.3","8.7 ~ 9.7","9.0 ~ 10.0","9.3 ~ 10.3","9.7 ~ 10.7","10.0 ~ 11.0","10.3 ~ 11.3","10.7 ~ 11.7"],0:["1.0","1.3","1.7","2.0","2.3","2.7","3.0","3.3","3.7","4.0","4.3","4.7","5.0","5.3","5.7","6.0","6.3","6.7","7.0","7.3","7.7","8.0","8.3","8.7","9.0","9.3","9.7","10.0","10.3","10.7"]},o.isNotNull=function(t){return null!=t},o.linspace=function(t,n,e){for(var r=[],i=(n-t)/(e-1),o=0;o<e-1;)r.push(t+o*i),o++;return r.push(n),r},o.logspace=function(t,n,e){return t=Math.log10(t),n=Math.log10(n),this.linspace(t,n,e).map((function(t){return Math.pow(10,t)}))},o.formatPower=function(t){return(t<0?"⁻":"")+(t+"").split("").map((function(t){return"⁰¹²³⁴⁵⁶⁷⁸⁹"[+t]})).join("")},o.rgbToHex=function(t){for(var n=t.match(/\d+/g),e="#",r=0;r<3;r++)e+=("0"+Number(n[r]).toString(16)).slice(-2);return e},o.parseDate=u.timeParse("%Y-%m-%d"),o.deepCopy=function(t){var n=this;if(Array.isArray(t)){var e=[];return t.forEach((function(t){e.push(n.deepCopy(t))})),e}if("object"==typeof t){var r={};return Object.entries(t).forEach((function(t){var e=t[0],i=t[1];r[e]=n.deepCopy(i)})),r}return t},function(t){t.GREEN="#C3E88D",t.YELLOW="#FFCB6B",t.RED="#F07178",t.BLUE="#82AAFF",t.PURPLE="#C792EA",t.ORANGE="#F78C6C",t.AZURE="#467CDA",t.SKY="#89DDFF",t.BLACK="#2B2B2B",t.GRAY="#616161",t.WHITE="#EEFFFF",t.BLANK="#FFFFFF"}(r=n.COLORS||(n.COLORS={})),n.categoricalColors=[r.GREEN,r.YELLOW,r.RED,r.BLUE,r.PURPLE,r.ORANGE,r.AZURE,r.SKY,r.GRAY],(i=n.CONT_COLORS||(n.CONT_COLORS={})).RED="#d11141",i.YELLOW="#ffc425",i.GREEN="#00b159",i.BLACK="#2B2B2B",i.WHITE="#EEFFFF"}},n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),e(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,